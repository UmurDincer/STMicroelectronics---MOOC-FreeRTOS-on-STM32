
013Mutex_Semaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005400  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000148  08005590  08005590  00015590  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080056d8  080056d8  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080056d8  080056d8  000156d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080056e0  080056e0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080056e0  080056e0  000156e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080056e4  080056e4  000156e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080056e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a94  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b08  20004b08  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014807  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ace  00000000  00000000  000348ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001138  00000000  00000000  00037380  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001020  00000000  00000000  000384b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b45  00000000  00000000  000394d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001189c  00000000  00000000  0003c01d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d212a  00000000  00000000  0004d8b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011f9e3  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b6c  00000000  00000000  0011fa34  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005578 	.word	0x08005578

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005578 	.word	0x08005578

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	e000      	b.n	8000500 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fa32 	bl	8000990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f848 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f8ae 	bl	8000690 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f001 fb1c 	bl	8001b70 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex1 */
  Mutex1Handle = osMutexNew(&Mutex1_attributes);
 8000538:	4814      	ldr	r0, [pc, #80]	; (800058c <main+0x68>)
 800053a:	f001 fc1f 	bl	8001d7c <osMutexNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a13      	ldr	r2, [pc, #76]	; (8000590 <main+0x6c>)
 8000542:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of BinarySem1 */
  BinarySem1Handle = osSemaphoreNew(1, 1, &BinarySem1_attributes);
 8000544:	4a13      	ldr	r2, [pc, #76]	; (8000594 <main+0x70>)
 8000546:	2101      	movs	r1, #1
 8000548:	2001      	movs	r0, #1
 800054a:	f001 fc9d 	bl	8001e88 <osSemaphoreNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a11      	ldr	r2, [pc, #68]	; (8000598 <main+0x74>)
 8000552:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000554:	4a11      	ldr	r2, [pc, #68]	; (800059c <main+0x78>)
 8000556:	2100      	movs	r1, #0
 8000558:	4811      	ldr	r0, [pc, #68]	; (80005a0 <main+0x7c>)
 800055a:	f001 fb53 	bl	8001c04 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a10      	ldr	r2, [pc, #64]	; (80005a4 <main+0x80>)
 8000562:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000564:	4a10      	ldr	r2, [pc, #64]	; (80005a8 <main+0x84>)
 8000566:	2100      	movs	r1, #0
 8000568:	4810      	ldr	r0, [pc, #64]	; (80005ac <main+0x88>)
 800056a:	f001 fb4b 	bl	8001c04 <osThreadNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a0f      	ldr	r2, [pc, #60]	; (80005b0 <main+0x8c>)
 8000572:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000574:	4a0f      	ldr	r2, [pc, #60]	; (80005b4 <main+0x90>)
 8000576:	2100      	movs	r1, #0
 8000578:	480f      	ldr	r0, [pc, #60]	; (80005b8 <main+0x94>)
 800057a:	f001 fb43 	bl	8001c04 <osThreadNew>
 800057e:	4603      	mov	r3, r0
 8000580:	4a0e      	ldr	r2, [pc, #56]	; (80005bc <main+0x98>)
 8000582:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000584:	f001 fb18 	bl	8001bb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000588:	e7fe      	b.n	8000588 <main+0x64>
 800058a:	bf00      	nop
 800058c:	08005640 	.word	0x08005640
 8000590:	2000009c 	.word	0x2000009c
 8000594:	08005650 	.word	0x08005650
 8000598:	200000a0 	.word	0x200000a0
 800059c:	080055d4 	.word	0x080055d4
 80005a0:	08000701 	.word	0x08000701
 80005a4:	20000090 	.word	0x20000090
 80005a8:	080055f8 	.word	0x080055f8
 80005ac:	08000755 	.word	0x08000755
 80005b0:	20000094 	.word	0x20000094
 80005b4:	0800561c 	.word	0x0800561c
 80005b8:	08000789 	.word	0x08000789
 80005bc:	20000098 	.word	0x20000098

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b094      	sub	sp, #80	; 0x50
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0320 	add.w	r3, r7, #32
 80005ca:	2230      	movs	r2, #48	; 0x30
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f004 ff08 	bl	80053e4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2200      	movs	r2, #0
 80005da:	601a      	str	r2, [r3, #0]
 80005dc:	605a      	str	r2, [r3, #4]
 80005de:	609a      	str	r2, [r3, #8]
 80005e0:	60da      	str	r2, [r3, #12]
 80005e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005e4:	2300      	movs	r3, #0
 80005e6:	60bb      	str	r3, [r7, #8]
 80005e8:	4b27      	ldr	r3, [pc, #156]	; (8000688 <SystemClock_Config+0xc8>)
 80005ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ec:	4a26      	ldr	r2, [pc, #152]	; (8000688 <SystemClock_Config+0xc8>)
 80005ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005f2:	6413      	str	r3, [r2, #64]	; 0x40
 80005f4:	4b24      	ldr	r3, [pc, #144]	; (8000688 <SystemClock_Config+0xc8>)
 80005f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005fc:	60bb      	str	r3, [r7, #8]
 80005fe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000600:	2300      	movs	r3, #0
 8000602:	607b      	str	r3, [r7, #4]
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <SystemClock_Config+0xcc>)
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	4a20      	ldr	r2, [pc, #128]	; (800068c <SystemClock_Config+0xcc>)
 800060a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800060e:	6013      	str	r3, [r2, #0]
 8000610:	4b1e      	ldr	r3, [pc, #120]	; (800068c <SystemClock_Config+0xcc>)
 8000612:	681b      	ldr	r3, [r3, #0]
 8000614:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000618:	607b      	str	r3, [r7, #4]
 800061a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800061c:	2302      	movs	r3, #2
 800061e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000620:	2301      	movs	r3, #1
 8000622:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000624:	2310      	movs	r3, #16
 8000626:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800062c:	2300      	movs	r3, #0
 800062e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000630:	2308      	movs	r3, #8
 8000632:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000634:	2340      	movs	r3, #64	; 0x40
 8000636:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000638:	2302      	movs	r3, #2
 800063a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800063c:	2307      	movs	r3, #7
 800063e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000640:	f107 0320 	add.w	r3, r7, #32
 8000644:	4618      	mov	r0, r3
 8000646:	f000 faeb 	bl	8000c20 <HAL_RCC_OscConfig>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d001      	beq.n	8000654 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000650:	f000 f8b8 	bl	80007c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000654:	230f      	movs	r3, #15
 8000656:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000658:	2302      	movs	r3, #2
 800065a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 800065c:	23b0      	movs	r3, #176	; 0xb0
 800065e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000668:	f107 030c 	add.w	r3, r7, #12
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f000 fd4e 	bl	8001110 <HAL_RCC_ClockConfig>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800067a:	f000 f8a3 	bl	80007c4 <Error_Handler>
  }
}
 800067e:	bf00      	nop
 8000680:	3750      	adds	r7, #80	; 0x50
 8000682:	46bd      	mov	sp, r7
 8000684:	bd80      	pop	{r7, pc}
 8000686:	bf00      	nop
 8000688:	40023800 	.word	0x40023800
 800068c:	40007000 	.word	0x40007000

08000690 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000690:	b480      	push	{r7}
 8000692:	b083      	sub	sp, #12
 8000694:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000696:	2300      	movs	r3, #0
 8000698:	607b      	str	r3, [r7, #4]
 800069a:	4b10      	ldr	r3, [pc, #64]	; (80006dc <MX_GPIO_Init+0x4c>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	4a0f      	ldr	r2, [pc, #60]	; (80006dc <MX_GPIO_Init+0x4c>)
 80006a0:	f043 0301 	orr.w	r3, r3, #1
 80006a4:	6313      	str	r3, [r2, #48]	; 0x30
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <MX_GPIO_Init+0x4c>)
 80006a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006aa:	f003 0301 	and.w	r3, r3, #1
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006b2:	2300      	movs	r3, #0
 80006b4:	603b      	str	r3, [r7, #0]
 80006b6:	4b09      	ldr	r3, [pc, #36]	; (80006dc <MX_GPIO_Init+0x4c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	4a08      	ldr	r2, [pc, #32]	; (80006dc <MX_GPIO_Init+0x4c>)
 80006bc:	f043 0302 	orr.w	r3, r3, #2
 80006c0:	6313      	str	r3, [r2, #48]	; 0x30
 80006c2:	4b06      	ldr	r3, [pc, #24]	; (80006dc <MX_GPIO_Init+0x4c>)
 80006c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c6:	f003 0302 	and.w	r3, r3, #2
 80006ca:	603b      	str	r3, [r7, #0]
 80006cc:	683b      	ldr	r3, [r7, #0]

}
 80006ce:	bf00      	nop
 80006d0:	370c      	adds	r7, #12
 80006d2:	46bd      	mov	sp, r7
 80006d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d8:	4770      	bx	lr
 80006da:	bf00      	nop
 80006dc:	40023800 	.word	0x40023800

080006e0 <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b082      	sub	sp, #8
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	4618      	mov	r0, r3
 80006ee:	f7ff fef1 	bl	80004d4 <ITM_SendChar>
	ITM_SendChar('\n');
 80006f2:	200a      	movs	r0, #10
 80006f4:	f7ff feee 	bl	80004d4 <ITM_SendChar>
}
 80006f8:	bf00      	nop
 80006fa:	3708      	adds	r7, #8
 80006fc:	46bd      	mov	sp, r7
 80006fe:	bd80      	pop	{r7, pc}

08000700 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b084      	sub	sp, #16
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint8_t idx = 0;
 8000708:	2300      	movs	r3, #0
 800070a:	73fb      	strb	r3, [r7, #15]
  /* Infinite loop */
  for(;;)
  {
	//osMutexAcquire(Mutex1Handle, osWaitForever);
	osSemaphoreAcquire(BinarySem1Handle, osWaitForever);
 800070c:	4b0f      	ldr	r3, [pc, #60]	; (800074c <StartTask1+0x4c>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	f04f 31ff 	mov.w	r1, #4294967295
 8000714:	4618      	mov	r0, r3
 8000716:	f001 fc41 	bl	8001f9c <osSemaphoreAcquire>
	task_action('1');
 800071a:	2031      	movs	r0, #49	; 0x31
 800071c:	f7ff ffe0 	bl	80006e0 <task_action>
	if(idx == 3)
 8000720:	7bfb      	ldrb	r3, [r7, #15]
 8000722:	2b03      	cmp	r3, #3
 8000724:	d105      	bne.n	8000732 <StartTask1+0x32>
	{
		osThreadSetPriority(Task1Handle, osPriorityLow);
 8000726:	4b0a      	ldr	r3, [pc, #40]	; (8000750 <StartTask1+0x50>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2108      	movs	r1, #8
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fafb 	bl	8001d28 <osThreadSetPriority>
	}
	idx++;
 8000732:	7bfb      	ldrb	r3, [r7, #15]
 8000734:	3301      	adds	r3, #1
 8000736:	73fb      	strb	r3, [r7, #15]
	//osMutexRelease(Mutex1Handle);
	osSemaphoreRelease(BinarySem1Handle);
 8000738:	4b04      	ldr	r3, [pc, #16]	; (800074c <StartTask1+0x4c>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fc7f 	bl	8002040 <osSemaphoreRelease>
	HAL_Delay(500);
 8000742:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000746:	f000 f965 	bl	8000a14 <HAL_Delay>
	osSemaphoreAcquire(BinarySem1Handle, osWaitForever);
 800074a:	e7df      	b.n	800070c <StartTask1+0xc>
 800074c:	200000a0 	.word	0x200000a0
 8000750:	20000090 	.word	0x20000090

08000754 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000754:	b580      	push	{r7, lr}
 8000756:	b082      	sub	sp, #8
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
   // osMutexAcquire(Mutex1Handle, osWaitForever);
    osSemaphoreAcquire(BinarySem1Handle, osWaitForever);
 800075c:	4b09      	ldr	r3, [pc, #36]	; (8000784 <StartTask2+0x30>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f04f 31ff 	mov.w	r1, #4294967295
 8000764:	4618      	mov	r0, r3
 8000766:	f001 fc19 	bl	8001f9c <osSemaphoreAcquire>
    task_action('2');
 800076a:	2032      	movs	r0, #50	; 0x32
 800076c:	f7ff ffb8 	bl	80006e0 <task_action>
   // osMutexRelease(Mutex1Handle);
    osSemaphoreRelease(BinarySem1Handle);
 8000770:	4b04      	ldr	r3, [pc, #16]	; (8000784 <StartTask2+0x30>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fc63 	bl	8002040 <osSemaphoreRelease>
    HAL_Delay(500);
 800077a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800077e:	f000 f949 	bl	8000a14 <HAL_Delay>
    osSemaphoreAcquire(BinarySem1Handle, osWaitForever);
 8000782:	e7eb      	b.n	800075c <StartTask2+0x8>
 8000784:	200000a0 	.word	0x200000a0

08000788 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
 800078e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
    task_action('3');
 8000790:	2033      	movs	r0, #51	; 0x33
 8000792:	f7ff ffa5 	bl	80006e0 <task_action>
    HAL_Delay(500);
 8000796:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800079a:	f000 f93b 	bl	8000a14 <HAL_Delay>
    task_action('3');
 800079e:	e7f7      	b.n	8000790 <StartTask3+0x8>

080007a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
 80007a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	681b      	ldr	r3, [r3, #0]
 80007ac:	4a04      	ldr	r2, [pc, #16]	; (80007c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ae:	4293      	cmp	r3, r2
 80007b0:	d101      	bne.n	80007b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007b2:	f000 f90f 	bl	80009d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40001000 	.word	0x40001000

080007c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007c8:	b672      	cpsid	i
}
 80007ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007cc:	e7fe      	b.n	80007cc <Error_Handler+0x8>
	...

080007d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b12      	ldr	r3, [pc, #72]	; (8000824 <HAL_MspInit+0x54>)
 80007dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007de:	4a11      	ldr	r2, [pc, #68]	; (8000824 <HAL_MspInit+0x54>)
 80007e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007e4:	6453      	str	r3, [r2, #68]	; 0x44
 80007e6:	4b0f      	ldr	r3, [pc, #60]	; (8000824 <HAL_MspInit+0x54>)
 80007e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007f2:	2300      	movs	r3, #0
 80007f4:	603b      	str	r3, [r7, #0]
 80007f6:	4b0b      	ldr	r3, [pc, #44]	; (8000824 <HAL_MspInit+0x54>)
 80007f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007fa:	4a0a      	ldr	r2, [pc, #40]	; (8000824 <HAL_MspInit+0x54>)
 80007fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000800:	6413      	str	r3, [r2, #64]	; 0x40
 8000802:	4b08      	ldr	r3, [pc, #32]	; (8000824 <HAL_MspInit+0x54>)
 8000804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000806:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800080a:	603b      	str	r3, [r7, #0]
 800080c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800080e:	2200      	movs	r2, #0
 8000810:	210f      	movs	r1, #15
 8000812:	f06f 0001 	mvn.w	r0, #1
 8000816:	f000 f9d9 	bl	8000bcc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800081a:	bf00      	nop
 800081c:	3708      	adds	r7, #8
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40023800 	.word	0x40023800

08000828 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000828:	b580      	push	{r7, lr}
 800082a:	b08c      	sub	sp, #48	; 0x30
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000830:	2300      	movs	r3, #0
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000838:	2200      	movs	r2, #0
 800083a:	6879      	ldr	r1, [r7, #4]
 800083c:	2036      	movs	r0, #54	; 0x36
 800083e:	f000 f9c5 	bl	8000bcc <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000842:	2036      	movs	r0, #54	; 0x36
 8000844:	f000 f9de 	bl	8000c04 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000848:	2300      	movs	r3, #0
 800084a:	60fb      	str	r3, [r7, #12]
 800084c:	4b1e      	ldr	r3, [pc, #120]	; (80008c8 <HAL_InitTick+0xa0>)
 800084e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000850:	4a1d      	ldr	r2, [pc, #116]	; (80008c8 <HAL_InitTick+0xa0>)
 8000852:	f043 0310 	orr.w	r3, r3, #16
 8000856:	6413      	str	r3, [r2, #64]	; 0x40
 8000858:	4b1b      	ldr	r3, [pc, #108]	; (80008c8 <HAL_InitTick+0xa0>)
 800085a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800085c:	f003 0310 	and.w	r3, r3, #16
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000864:	f107 0210 	add.w	r2, r7, #16
 8000868:	f107 0314 	add.w	r3, r7, #20
 800086c:	4611      	mov	r1, r2
 800086e:	4618      	mov	r0, r3
 8000870:	f000 fe5a 	bl	8001528 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000874:	f000 fe44 	bl	8001500 <HAL_RCC_GetPCLK1Freq>
 8000878:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800087a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800087c:	4a13      	ldr	r2, [pc, #76]	; (80008cc <HAL_InitTick+0xa4>)
 800087e:	fba2 2303 	umull	r2, r3, r2, r3
 8000882:	0c9b      	lsrs	r3, r3, #18
 8000884:	3b01      	subs	r3, #1
 8000886:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000888:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_InitTick+0xa8>)
 800088a:	4a12      	ldr	r2, [pc, #72]	; (80008d4 <HAL_InitTick+0xac>)
 800088c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_InitTick+0xa8>)
 8000890:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000894:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000896:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <HAL_InitTick+0xa8>)
 8000898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800089c:	4b0c      	ldr	r3, [pc, #48]	; (80008d0 <HAL_InitTick+0xa8>)
 800089e:	2200      	movs	r2, #0
 80008a0:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_InitTick+0xa8>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008a8:	4809      	ldr	r0, [pc, #36]	; (80008d0 <HAL_InitTick+0xa8>)
 80008aa:	f000 fe6f 	bl	800158c <HAL_TIM_Base_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d104      	bne.n	80008be <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008b4:	4806      	ldr	r0, [pc, #24]	; (80008d0 <HAL_InitTick+0xa8>)
 80008b6:	f000 fec3 	bl	8001640 <HAL_TIM_Base_Start_IT>
 80008ba:	4603      	mov	r3, r0
 80008bc:	e000      	b.n	80008c0 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008be:	2301      	movs	r3, #1
}
 80008c0:	4618      	mov	r0, r3
 80008c2:	3730      	adds	r7, #48	; 0x30
 80008c4:	46bd      	mov	sp, r7
 80008c6:	bd80      	pop	{r7, pc}
 80008c8:	40023800 	.word	0x40023800
 80008cc:	431bde83 	.word	0x431bde83
 80008d0:	200000a4 	.word	0x200000a4
 80008d4:	40001000 	.word	0x40001000

080008d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008d8:	b480      	push	{r7}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008dc:	e7fe      	b.n	80008dc <NMI_Handler+0x4>

080008de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008de:	b480      	push	{r7}
 80008e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008e2:	e7fe      	b.n	80008e2 <HardFault_Handler+0x4>

080008e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008e4:	b480      	push	{r7}
 80008e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008e8:	e7fe      	b.n	80008e8 <MemManage_Handler+0x4>

080008ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008ea:	b480      	push	{r7}
 80008ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80008ee:	e7fe      	b.n	80008ee <BusFault_Handler+0x4>

080008f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80008f0:	b480      	push	{r7}
 80008f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80008f4:	e7fe      	b.n	80008f4 <UsageFault_Handler+0x4>

080008f6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80008f6:	b480      	push	{r7}
 80008f8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80008fa:	bf00      	nop
 80008fc:	46bd      	mov	sp, r7
 80008fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000902:	4770      	bx	lr

08000904 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000908:	4802      	ldr	r0, [pc, #8]	; (8000914 <TIM6_DAC_IRQHandler+0x10>)
 800090a:	f000 ff09 	bl	8001720 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	bd80      	pop	{r7, pc}
 8000912:	bf00      	nop
 8000914:	200000a4 	.word	0x200000a4

08000918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000918:	b480      	push	{r7}
 800091a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <SystemInit+0x20>)
 800091e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000922:	4a05      	ldr	r2, [pc, #20]	; (8000938 <SystemInit+0x20>)
 8000924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800092c:	bf00      	nop
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	e000ed00 	.word	0xe000ed00

0800093c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800093c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000974 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000940:	480d      	ldr	r0, [pc, #52]	; (8000978 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000942:	490e      	ldr	r1, [pc, #56]	; (800097c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000944:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a0b      	ldr	r2, [pc, #44]	; (8000984 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000958:	4c0b      	ldr	r4, [pc, #44]	; (8000988 <LoopFillZerobss+0x26>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000966:	f7ff ffd7 	bl	8000918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800096a:	f004 fd07 	bl	800537c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800096e:	f7ff fdd9 	bl	8000524 <main>
  bx  lr    
 8000972:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800097c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000980:	080056e8 	.word	0x080056e8
  ldr r2, =_sbss
 8000984:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000988:	20004b08 	.word	0x20004b08

0800098c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800098c:	e7fe      	b.n	800098c <ADC_IRQHandler>
	...

08000990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000994:	4b0e      	ldr	r3, [pc, #56]	; (80009d0 <HAL_Init+0x40>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	4a0d      	ldr	r2, [pc, #52]	; (80009d0 <HAL_Init+0x40>)
 800099a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800099e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009a0:	4b0b      	ldr	r3, [pc, #44]	; (80009d0 <HAL_Init+0x40>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4a0a      	ldr	r2, [pc, #40]	; (80009d0 <HAL_Init+0x40>)
 80009a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009ac:	4b08      	ldr	r3, [pc, #32]	; (80009d0 <HAL_Init+0x40>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a07      	ldr	r2, [pc, #28]	; (80009d0 <HAL_Init+0x40>)
 80009b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009b8:	2003      	movs	r0, #3
 80009ba:	f000 f8fc 	bl	8000bb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009be:	200f      	movs	r0, #15
 80009c0:	f7ff ff32 	bl	8000828 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009c4:	f7ff ff04 	bl	80007d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009c8:	2300      	movs	r3, #0
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	bd80      	pop	{r7, pc}
 80009ce:	bf00      	nop
 80009d0:	40023c00 	.word	0x40023c00

080009d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009d4:	b480      	push	{r7}
 80009d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009d8:	4b06      	ldr	r3, [pc, #24]	; (80009f4 <HAL_IncTick+0x20>)
 80009da:	781b      	ldrb	r3, [r3, #0]
 80009dc:	461a      	mov	r2, r3
 80009de:	4b06      	ldr	r3, [pc, #24]	; (80009f8 <HAL_IncTick+0x24>)
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4413      	add	r3, r2
 80009e4:	4a04      	ldr	r2, [pc, #16]	; (80009f8 <HAL_IncTick+0x24>)
 80009e6:	6013      	str	r3, [r2, #0]
}
 80009e8:	bf00      	nop
 80009ea:	46bd      	mov	sp, r7
 80009ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop
 80009f4:	20000008 	.word	0x20000008
 80009f8:	200000ec 	.word	0x200000ec

080009fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	af00      	add	r7, sp, #0
  return uwTick;
 8000a00:	4b03      	ldr	r3, [pc, #12]	; (8000a10 <HAL_GetTick+0x14>)
 8000a02:	681b      	ldr	r3, [r3, #0]
}
 8000a04:	4618      	mov	r0, r3
 8000a06:	46bd      	mov	sp, r7
 8000a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0c:	4770      	bx	lr
 8000a0e:	bf00      	nop
 8000a10:	200000ec 	.word	0x200000ec

08000a14 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	b084      	sub	sp, #16
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000a1c:	f7ff ffee 	bl	80009fc <HAL_GetTick>
 8000a20:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000a22:	687b      	ldr	r3, [r7, #4]
 8000a24:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000a26:	68fb      	ldr	r3, [r7, #12]
 8000a28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000a2c:	d005      	beq.n	8000a3a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000a2e:	4b0a      	ldr	r3, [pc, #40]	; (8000a58 <HAL_Delay+0x44>)
 8000a30:	781b      	ldrb	r3, [r3, #0]
 8000a32:	461a      	mov	r2, r3
 8000a34:	68fb      	ldr	r3, [r7, #12]
 8000a36:	4413      	add	r3, r2
 8000a38:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000a3a:	bf00      	nop
 8000a3c:	f7ff ffde 	bl	80009fc <HAL_GetTick>
 8000a40:	4602      	mov	r2, r0
 8000a42:	68bb      	ldr	r3, [r7, #8]
 8000a44:	1ad3      	subs	r3, r2, r3
 8000a46:	68fa      	ldr	r2, [r7, #12]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d8f7      	bhi.n	8000a3c <HAL_Delay+0x28>
  {
  }
}
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	3710      	adds	r7, #16
 8000a52:	46bd      	mov	sp, r7
 8000a54:	bd80      	pop	{r7, pc}
 8000a56:	bf00      	nop
 8000a58:	20000008 	.word	0x20000008

08000a5c <__NVIC_SetPriorityGrouping>:
{
 8000a5c:	b480      	push	{r7}
 8000a5e:	b085      	sub	sp, #20
 8000a60:	af00      	add	r7, sp, #0
 8000a62:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	f003 0307 	and.w	r3, r3, #7
 8000a6a:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a6c:	4b0c      	ldr	r3, [pc, #48]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a6e:	68db      	ldr	r3, [r3, #12]
 8000a70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a72:	68ba      	ldr	r2, [r7, #8]
 8000a74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a78:	4013      	ands	r3, r2
 8000a7a:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a7c:	68fb      	ldr	r3, [r7, #12]
 8000a7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a80:	68bb      	ldr	r3, [r7, #8]
 8000a82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a8e:	4a04      	ldr	r2, [pc, #16]	; (8000aa0 <__NVIC_SetPriorityGrouping+0x44>)
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	60d3      	str	r3, [r2, #12]
}
 8000a94:	bf00      	nop
 8000a96:	3714      	adds	r7, #20
 8000a98:	46bd      	mov	sp, r7
 8000a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9e:	4770      	bx	lr
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <__NVIC_GetPriorityGrouping>:
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000aa8:	4b04      	ldr	r3, [pc, #16]	; (8000abc <__NVIC_GetPriorityGrouping+0x18>)
 8000aaa:	68db      	ldr	r3, [r3, #12]
 8000aac:	0a1b      	lsrs	r3, r3, #8
 8000aae:	f003 0307 	and.w	r3, r3, #7
}
 8000ab2:	4618      	mov	r0, r3
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr
 8000abc:	e000ed00 	.word	0xe000ed00

08000ac0 <__NVIC_EnableIRQ>:
{
 8000ac0:	b480      	push	{r7}
 8000ac2:	b083      	sub	sp, #12
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	db0b      	blt.n	8000aea <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ad2:	79fb      	ldrb	r3, [r7, #7]
 8000ad4:	f003 021f 	and.w	r2, r3, #31
 8000ad8:	4907      	ldr	r1, [pc, #28]	; (8000af8 <__NVIC_EnableIRQ+0x38>)
 8000ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ade:	095b      	lsrs	r3, r3, #5
 8000ae0:	2001      	movs	r0, #1
 8000ae2:	fa00 f202 	lsl.w	r2, r0, r2
 8000ae6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000aea:	bf00      	nop
 8000aec:	370c      	adds	r7, #12
 8000aee:	46bd      	mov	sp, r7
 8000af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop
 8000af8:	e000e100 	.word	0xe000e100

08000afc <__NVIC_SetPriority>:
{
 8000afc:	b480      	push	{r7}
 8000afe:	b083      	sub	sp, #12
 8000b00:	af00      	add	r7, sp, #0
 8000b02:	4603      	mov	r3, r0
 8000b04:	6039      	str	r1, [r7, #0]
 8000b06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0c:	2b00      	cmp	r3, #0
 8000b0e:	db0a      	blt.n	8000b26 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b10:	683b      	ldr	r3, [r7, #0]
 8000b12:	b2da      	uxtb	r2, r3
 8000b14:	490c      	ldr	r1, [pc, #48]	; (8000b48 <__NVIC_SetPriority+0x4c>)
 8000b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b1a:	0112      	lsls	r2, r2, #4
 8000b1c:	b2d2      	uxtb	r2, r2
 8000b1e:	440b      	add	r3, r1
 8000b20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b24:	e00a      	b.n	8000b3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b26:	683b      	ldr	r3, [r7, #0]
 8000b28:	b2da      	uxtb	r2, r3
 8000b2a:	4908      	ldr	r1, [pc, #32]	; (8000b4c <__NVIC_SetPriority+0x50>)
 8000b2c:	79fb      	ldrb	r3, [r7, #7]
 8000b2e:	f003 030f 	and.w	r3, r3, #15
 8000b32:	3b04      	subs	r3, #4
 8000b34:	0112      	lsls	r2, r2, #4
 8000b36:	b2d2      	uxtb	r2, r2
 8000b38:	440b      	add	r3, r1
 8000b3a:	761a      	strb	r2, [r3, #24]
}
 8000b3c:	bf00      	nop
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr
 8000b48:	e000e100 	.word	0xe000e100
 8000b4c:	e000ed00 	.word	0xe000ed00

08000b50 <NVIC_EncodePriority>:
{
 8000b50:	b480      	push	{r7}
 8000b52:	b089      	sub	sp, #36	; 0x24
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	60f8      	str	r0, [r7, #12]
 8000b58:	60b9      	str	r1, [r7, #8]
 8000b5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b5c:	68fb      	ldr	r3, [r7, #12]
 8000b5e:	f003 0307 	and.w	r3, r3, #7
 8000b62:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b64:	69fb      	ldr	r3, [r7, #28]
 8000b66:	f1c3 0307 	rsb	r3, r3, #7
 8000b6a:	2b04      	cmp	r3, #4
 8000b6c:	bf28      	it	cs
 8000b6e:	2304      	movcs	r3, #4
 8000b70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b72:	69fb      	ldr	r3, [r7, #28]
 8000b74:	3304      	adds	r3, #4
 8000b76:	2b06      	cmp	r3, #6
 8000b78:	d902      	bls.n	8000b80 <NVIC_EncodePriority+0x30>
 8000b7a:	69fb      	ldr	r3, [r7, #28]
 8000b7c:	3b03      	subs	r3, #3
 8000b7e:	e000      	b.n	8000b82 <NVIC_EncodePriority+0x32>
 8000b80:	2300      	movs	r3, #0
 8000b82:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	f04f 32ff 	mov.w	r2, #4294967295
 8000b88:	69bb      	ldr	r3, [r7, #24]
 8000b8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b8e:	43da      	mvns	r2, r3
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	401a      	ands	r2, r3
 8000b94:	697b      	ldr	r3, [r7, #20]
 8000b96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b98:	f04f 31ff 	mov.w	r1, #4294967295
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	fa01 f303 	lsl.w	r3, r1, r3
 8000ba2:	43d9      	mvns	r1, r3
 8000ba4:	687b      	ldr	r3, [r7, #4]
 8000ba6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ba8:	4313      	orrs	r3, r2
}
 8000baa:	4618      	mov	r0, r3
 8000bac:	3724      	adds	r7, #36	; 0x24
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr

08000bb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bb6:	b580      	push	{r7, lr}
 8000bb8:	b082      	sub	sp, #8
 8000bba:	af00      	add	r7, sp, #0
 8000bbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bbe:	6878      	ldr	r0, [r7, #4]
 8000bc0:	f7ff ff4c 	bl	8000a5c <__NVIC_SetPriorityGrouping>
}
 8000bc4:	bf00      	nop
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b086      	sub	sp, #24
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	4603      	mov	r3, r0
 8000bd4:	60b9      	str	r1, [r7, #8]
 8000bd6:	607a      	str	r2, [r7, #4]
 8000bd8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bda:	2300      	movs	r3, #0
 8000bdc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bde:	f7ff ff61 	bl	8000aa4 <__NVIC_GetPriorityGrouping>
 8000be2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000be4:	687a      	ldr	r2, [r7, #4]
 8000be6:	68b9      	ldr	r1, [r7, #8]
 8000be8:	6978      	ldr	r0, [r7, #20]
 8000bea:	f7ff ffb1 	bl	8000b50 <NVIC_EncodePriority>
 8000bee:	4602      	mov	r2, r0
 8000bf0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bf4:	4611      	mov	r1, r2
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f7ff ff80 	bl	8000afc <__NVIC_SetPriority>
}
 8000bfc:	bf00      	nop
 8000bfe:	3718      	adds	r7, #24
 8000c00:	46bd      	mov	sp, r7
 8000c02:	bd80      	pop	{r7, pc}

08000c04 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c04:	b580      	push	{r7, lr}
 8000c06:	b082      	sub	sp, #8
 8000c08:	af00      	add	r7, sp, #0
 8000c0a:	4603      	mov	r3, r0
 8000c0c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c12:	4618      	mov	r0, r3
 8000c14:	f7ff ff54 	bl	8000ac0 <__NVIC_EnableIRQ>
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b086      	sub	sp, #24
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	d101      	bne.n	8000c32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000c2e:	2301      	movs	r3, #1
 8000c30:	e267      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000c32:	687b      	ldr	r3, [r7, #4]
 8000c34:	681b      	ldr	r3, [r3, #0]
 8000c36:	f003 0301 	and.w	r3, r3, #1
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d075      	beq.n	8000d2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c3e:	4b88      	ldr	r3, [pc, #544]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000c40:	689b      	ldr	r3, [r3, #8]
 8000c42:	f003 030c 	and.w	r3, r3, #12
 8000c46:	2b04      	cmp	r3, #4
 8000c48:	d00c      	beq.n	8000c64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c4a:	4b85      	ldr	r3, [pc, #532]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000c4c:	689b      	ldr	r3, [r3, #8]
 8000c4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000c52:	2b08      	cmp	r3, #8
 8000c54:	d112      	bne.n	8000c7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000c56:	4b82      	ldr	r3, [pc, #520]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000c58:	685b      	ldr	r3, [r3, #4]
 8000c5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000c62:	d10b      	bne.n	8000c7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c64:	4b7e      	ldr	r3, [pc, #504]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c6c:	2b00      	cmp	r3, #0
 8000c6e:	d05b      	beq.n	8000d28 <HAL_RCC_OscConfig+0x108>
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	685b      	ldr	r3, [r3, #4]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d157      	bne.n	8000d28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000c78:	2301      	movs	r3, #1
 8000c7a:	e242      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c84:	d106      	bne.n	8000c94 <HAL_RCC_OscConfig+0x74>
 8000c86:	4b76      	ldr	r3, [pc, #472]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000c88:	681b      	ldr	r3, [r3, #0]
 8000c8a:	4a75      	ldr	r2, [pc, #468]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000c8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c90:	6013      	str	r3, [r2, #0]
 8000c92:	e01d      	b.n	8000cd0 <HAL_RCC_OscConfig+0xb0>
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c9c:	d10c      	bne.n	8000cb8 <HAL_RCC_OscConfig+0x98>
 8000c9e:	4b70      	ldr	r3, [pc, #448]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a6f      	ldr	r2, [pc, #444]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000ca4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000ca8:	6013      	str	r3, [r2, #0]
 8000caa:	4b6d      	ldr	r3, [pc, #436]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	4a6c      	ldr	r2, [pc, #432]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000cb4:	6013      	str	r3, [r2, #0]
 8000cb6:	e00b      	b.n	8000cd0 <HAL_RCC_OscConfig+0xb0>
 8000cb8:	4b69      	ldr	r3, [pc, #420]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a68      	ldr	r2, [pc, #416]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000cbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000cc2:	6013      	str	r3, [r2, #0]
 8000cc4:	4b66      	ldr	r3, [pc, #408]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a65      	ldr	r2, [pc, #404]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000cca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000cce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	685b      	ldr	r3, [r3, #4]
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d013      	beq.n	8000d00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000cd8:	f7ff fe90 	bl	80009fc <HAL_GetTick>
 8000cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cde:	e008      	b.n	8000cf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ce0:	f7ff fe8c 	bl	80009fc <HAL_GetTick>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	693b      	ldr	r3, [r7, #16]
 8000ce8:	1ad3      	subs	r3, r2, r3
 8000cea:	2b64      	cmp	r3, #100	; 0x64
 8000cec:	d901      	bls.n	8000cf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000cee:	2303      	movs	r3, #3
 8000cf0:	e207      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000cf2:	4b5b      	ldr	r3, [pc, #364]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d0f0      	beq.n	8000ce0 <HAL_RCC_OscConfig+0xc0>
 8000cfe:	e014      	b.n	8000d2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000d00:	f7ff fe7c 	bl	80009fc <HAL_GetTick>
 8000d04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d06:	e008      	b.n	8000d1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000d08:	f7ff fe78 	bl	80009fc <HAL_GetTick>
 8000d0c:	4602      	mov	r2, r0
 8000d0e:	693b      	ldr	r3, [r7, #16]
 8000d10:	1ad3      	subs	r3, r2, r3
 8000d12:	2b64      	cmp	r3, #100	; 0x64
 8000d14:	d901      	bls.n	8000d1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000d16:	2303      	movs	r3, #3
 8000d18:	e1f3      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000d1a:	4b51      	ldr	r3, [pc, #324]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d22:	2b00      	cmp	r3, #0
 8000d24:	d1f0      	bne.n	8000d08 <HAL_RCC_OscConfig+0xe8>
 8000d26:	e000      	b.n	8000d2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d063      	beq.n	8000dfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d36:	4b4a      	ldr	r3, [pc, #296]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000d38:	689b      	ldr	r3, [r3, #8]
 8000d3a:	f003 030c 	and.w	r3, r3, #12
 8000d3e:	2b00      	cmp	r3, #0
 8000d40:	d00b      	beq.n	8000d5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d42:	4b47      	ldr	r3, [pc, #284]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000d44:	689b      	ldr	r3, [r3, #8]
 8000d46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000d4a:	2b08      	cmp	r3, #8
 8000d4c:	d11c      	bne.n	8000d88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000d4e:	4b44      	ldr	r3, [pc, #272]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000d50:	685b      	ldr	r3, [r3, #4]
 8000d52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d116      	bne.n	8000d88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d5a:	4b41      	ldr	r3, [pc, #260]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f003 0302 	and.w	r3, r3, #2
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d005      	beq.n	8000d72 <HAL_RCC_OscConfig+0x152>
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	68db      	ldr	r3, [r3, #12]
 8000d6a:	2b01      	cmp	r3, #1
 8000d6c:	d001      	beq.n	8000d72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000d6e:	2301      	movs	r3, #1
 8000d70:	e1c7      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d72:	4b3b      	ldr	r3, [pc, #236]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	691b      	ldr	r3, [r3, #16]
 8000d7e:	00db      	lsls	r3, r3, #3
 8000d80:	4937      	ldr	r1, [pc, #220]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000d82:	4313      	orrs	r3, r2
 8000d84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d86:	e03a      	b.n	8000dfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	68db      	ldr	r3, [r3, #12]
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d020      	beq.n	8000dd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d90:	4b34      	ldr	r3, [pc, #208]	; (8000e64 <HAL_RCC_OscConfig+0x244>)
 8000d92:	2201      	movs	r2, #1
 8000d94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d96:	f7ff fe31 	bl	80009fc <HAL_GetTick>
 8000d9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d9c:	e008      	b.n	8000db0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d9e:	f7ff fe2d 	bl	80009fc <HAL_GetTick>
 8000da2:	4602      	mov	r2, r0
 8000da4:	693b      	ldr	r3, [r7, #16]
 8000da6:	1ad3      	subs	r3, r2, r3
 8000da8:	2b02      	cmp	r3, #2
 8000daa:	d901      	bls.n	8000db0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000dac:	2303      	movs	r3, #3
 8000dae:	e1a8      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000db0:	4b2b      	ldr	r3, [pc, #172]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f003 0302 	and.w	r3, r3, #2
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d0f0      	beq.n	8000d9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000dbc:	4b28      	ldr	r3, [pc, #160]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	691b      	ldr	r3, [r3, #16]
 8000dc8:	00db      	lsls	r3, r3, #3
 8000dca:	4925      	ldr	r1, [pc, #148]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000dcc:	4313      	orrs	r3, r2
 8000dce:	600b      	str	r3, [r1, #0]
 8000dd0:	e015      	b.n	8000dfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000dd2:	4b24      	ldr	r3, [pc, #144]	; (8000e64 <HAL_RCC_OscConfig+0x244>)
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000dd8:	f7ff fe10 	bl	80009fc <HAL_GetTick>
 8000ddc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000dde:	e008      	b.n	8000df2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000de0:	f7ff fe0c 	bl	80009fc <HAL_GetTick>
 8000de4:	4602      	mov	r2, r0
 8000de6:	693b      	ldr	r3, [r7, #16]
 8000de8:	1ad3      	subs	r3, r2, r3
 8000dea:	2b02      	cmp	r3, #2
 8000dec:	d901      	bls.n	8000df2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000dee:	2303      	movs	r3, #3
 8000df0:	e187      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000df2:	4b1b      	ldr	r3, [pc, #108]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	f003 0302 	and.w	r3, r3, #2
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d1f0      	bne.n	8000de0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	f003 0308 	and.w	r3, r3, #8
 8000e06:	2b00      	cmp	r3, #0
 8000e08:	d036      	beq.n	8000e78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	695b      	ldr	r3, [r3, #20]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d016      	beq.n	8000e40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000e12:	4b15      	ldr	r3, [pc, #84]	; (8000e68 <HAL_RCC_OscConfig+0x248>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000e18:	f7ff fdf0 	bl	80009fc <HAL_GetTick>
 8000e1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e1e:	e008      	b.n	8000e32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e20:	f7ff fdec 	bl	80009fc <HAL_GetTick>
 8000e24:	4602      	mov	r2, r0
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	1ad3      	subs	r3, r2, r3
 8000e2a:	2b02      	cmp	r3, #2
 8000e2c:	d901      	bls.n	8000e32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e167      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_RCC_OscConfig+0x240>)
 8000e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e36:	f003 0302 	and.w	r3, r3, #2
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d0f0      	beq.n	8000e20 <HAL_RCC_OscConfig+0x200>
 8000e3e:	e01b      	b.n	8000e78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000e40:	4b09      	ldr	r3, [pc, #36]	; (8000e68 <HAL_RCC_OscConfig+0x248>)
 8000e42:	2200      	movs	r2, #0
 8000e44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000e46:	f7ff fdd9 	bl	80009fc <HAL_GetTick>
 8000e4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e4c:	e00e      	b.n	8000e6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000e4e:	f7ff fdd5 	bl	80009fc <HAL_GetTick>
 8000e52:	4602      	mov	r2, r0
 8000e54:	693b      	ldr	r3, [r7, #16]
 8000e56:	1ad3      	subs	r3, r2, r3
 8000e58:	2b02      	cmp	r3, #2
 8000e5a:	d907      	bls.n	8000e6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	e150      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
 8000e60:	40023800 	.word	0x40023800
 8000e64:	42470000 	.word	0x42470000
 8000e68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000e6c:	4b88      	ldr	r3, [pc, #544]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000e6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000e70:	f003 0302 	and.w	r3, r3, #2
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d1ea      	bne.n	8000e4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	681b      	ldr	r3, [r3, #0]
 8000e7c:	f003 0304 	and.w	r3, r3, #4
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	f000 8097 	beq.w	8000fb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e86:	2300      	movs	r3, #0
 8000e88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e8a:	4b81      	ldr	r3, [pc, #516]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000e8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	d10f      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e96:	2300      	movs	r3, #0
 8000e98:	60bb      	str	r3, [r7, #8]
 8000e9a:	4b7d      	ldr	r3, [pc, #500]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e9e:	4a7c      	ldr	r2, [pc, #496]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000ea0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ea4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ea6:	4b7a      	ldr	r3, [pc, #488]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000ea8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eaa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eae:	60bb      	str	r3, [r7, #8]
 8000eb0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000eb6:	4b77      	ldr	r3, [pc, #476]	; (8001094 <HAL_RCC_OscConfig+0x474>)
 8000eb8:	681b      	ldr	r3, [r3, #0]
 8000eba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d118      	bne.n	8000ef4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000ec2:	4b74      	ldr	r3, [pc, #464]	; (8001094 <HAL_RCC_OscConfig+0x474>)
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	4a73      	ldr	r2, [pc, #460]	; (8001094 <HAL_RCC_OscConfig+0x474>)
 8000ec8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000ecc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000ece:	f7ff fd95 	bl	80009fc <HAL_GetTick>
 8000ed2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ed4:	e008      	b.n	8000ee8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000ed6:	f7ff fd91 	bl	80009fc <HAL_GetTick>
 8000eda:	4602      	mov	r2, r0
 8000edc:	693b      	ldr	r3, [r7, #16]
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	2b02      	cmp	r3, #2
 8000ee2:	d901      	bls.n	8000ee8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000ee4:	2303      	movs	r3, #3
 8000ee6:	e10c      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000ee8:	4b6a      	ldr	r3, [pc, #424]	; (8001094 <HAL_RCC_OscConfig+0x474>)
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d0f0      	beq.n	8000ed6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	689b      	ldr	r3, [r3, #8]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d106      	bne.n	8000f0a <HAL_RCC_OscConfig+0x2ea>
 8000efc:	4b64      	ldr	r3, [pc, #400]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000efe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f00:	4a63      	ldr	r2, [pc, #396]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000f02:	f043 0301 	orr.w	r3, r3, #1
 8000f06:	6713      	str	r3, [r2, #112]	; 0x70
 8000f08:	e01c      	b.n	8000f44 <HAL_RCC_OscConfig+0x324>
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	689b      	ldr	r3, [r3, #8]
 8000f0e:	2b05      	cmp	r3, #5
 8000f10:	d10c      	bne.n	8000f2c <HAL_RCC_OscConfig+0x30c>
 8000f12:	4b5f      	ldr	r3, [pc, #380]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000f14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f16:	4a5e      	ldr	r2, [pc, #376]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000f18:	f043 0304 	orr.w	r3, r3, #4
 8000f1c:	6713      	str	r3, [r2, #112]	; 0x70
 8000f1e:	4b5c      	ldr	r3, [pc, #368]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000f20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f22:	4a5b      	ldr	r2, [pc, #364]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000f24:	f043 0301 	orr.w	r3, r3, #1
 8000f28:	6713      	str	r3, [r2, #112]	; 0x70
 8000f2a:	e00b      	b.n	8000f44 <HAL_RCC_OscConfig+0x324>
 8000f2c:	4b58      	ldr	r3, [pc, #352]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000f2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f30:	4a57      	ldr	r2, [pc, #348]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000f32:	f023 0301 	bic.w	r3, r3, #1
 8000f36:	6713      	str	r3, [r2, #112]	; 0x70
 8000f38:	4b55      	ldr	r3, [pc, #340]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000f3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f3c:	4a54      	ldr	r2, [pc, #336]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000f3e:	f023 0304 	bic.w	r3, r3, #4
 8000f42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689b      	ldr	r3, [r3, #8]
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d015      	beq.n	8000f78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000f4c:	f7ff fd56 	bl	80009fc <HAL_GetTick>
 8000f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f52:	e00a      	b.n	8000f6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f54:	f7ff fd52 	bl	80009fc <HAL_GetTick>
 8000f58:	4602      	mov	r2, r0
 8000f5a:	693b      	ldr	r3, [r7, #16]
 8000f5c:	1ad3      	subs	r3, r2, r3
 8000f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f62:	4293      	cmp	r3, r2
 8000f64:	d901      	bls.n	8000f6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000f66:	2303      	movs	r3, #3
 8000f68:	e0cb      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000f6a:	4b49      	ldr	r3, [pc, #292]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000f6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f6e:	f003 0302 	and.w	r3, r3, #2
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d0ee      	beq.n	8000f54 <HAL_RCC_OscConfig+0x334>
 8000f76:	e014      	b.n	8000fa2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000f78:	f7ff fd40 	bl	80009fc <HAL_GetTick>
 8000f7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f7e:	e00a      	b.n	8000f96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f80:	f7ff fd3c 	bl	80009fc <HAL_GetTick>
 8000f84:	4602      	mov	r2, r0
 8000f86:	693b      	ldr	r3, [r7, #16]
 8000f88:	1ad3      	subs	r3, r2, r3
 8000f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d901      	bls.n	8000f96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f92:	2303      	movs	r3, #3
 8000f94:	e0b5      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f96:	4b3e      	ldr	r3, [pc, #248]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000f98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f9a:	f003 0302 	and.w	r3, r3, #2
 8000f9e:	2b00      	cmp	r3, #0
 8000fa0:	d1ee      	bne.n	8000f80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000fa2:	7dfb      	ldrb	r3, [r7, #23]
 8000fa4:	2b01      	cmp	r3, #1
 8000fa6:	d105      	bne.n	8000fb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000fa8:	4b39      	ldr	r3, [pc, #228]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fac:	4a38      	ldr	r2, [pc, #224]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000fae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000fb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	699b      	ldr	r3, [r3, #24]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	f000 80a1 	beq.w	8001100 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000fbe:	4b34      	ldr	r3, [pc, #208]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000fc0:	689b      	ldr	r3, [r3, #8]
 8000fc2:	f003 030c 	and.w	r3, r3, #12
 8000fc6:	2b08      	cmp	r3, #8
 8000fc8:	d05c      	beq.n	8001084 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	699b      	ldr	r3, [r3, #24]
 8000fce:	2b02      	cmp	r3, #2
 8000fd0:	d141      	bne.n	8001056 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd2:	4b31      	ldr	r3, [pc, #196]	; (8001098 <HAL_RCC_OscConfig+0x478>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fd8:	f7ff fd10 	bl	80009fc <HAL_GetTick>
 8000fdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fde:	e008      	b.n	8000ff2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe0:	f7ff fd0c 	bl	80009fc <HAL_GetTick>
 8000fe4:	4602      	mov	r2, r0
 8000fe6:	693b      	ldr	r3, [r7, #16]
 8000fe8:	1ad3      	subs	r3, r2, r3
 8000fea:	2b02      	cmp	r3, #2
 8000fec:	d901      	bls.n	8000ff2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000fee:	2303      	movs	r3, #3
 8000ff0:	e087      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff2:	4b27      	ldr	r3, [pc, #156]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8000ff4:	681b      	ldr	r3, [r3, #0]
 8000ff6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffa:	2b00      	cmp	r3, #0
 8000ffc:	d1f0      	bne.n	8000fe0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	69da      	ldr	r2, [r3, #28]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	6a1b      	ldr	r3, [r3, #32]
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800100c:	019b      	lsls	r3, r3, #6
 800100e:	431a      	orrs	r2, r3
 8001010:	687b      	ldr	r3, [r7, #4]
 8001012:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001014:	085b      	lsrs	r3, r3, #1
 8001016:	3b01      	subs	r3, #1
 8001018:	041b      	lsls	r3, r3, #16
 800101a:	431a      	orrs	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001020:	061b      	lsls	r3, r3, #24
 8001022:	491b      	ldr	r1, [pc, #108]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8001024:	4313      	orrs	r3, r2
 8001026:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001028:	4b1b      	ldr	r3, [pc, #108]	; (8001098 <HAL_RCC_OscConfig+0x478>)
 800102a:	2201      	movs	r2, #1
 800102c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800102e:	f7ff fce5 	bl	80009fc <HAL_GetTick>
 8001032:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001034:	e008      	b.n	8001048 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001036:	f7ff fce1 	bl	80009fc <HAL_GetTick>
 800103a:	4602      	mov	r2, r0
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	1ad3      	subs	r3, r2, r3
 8001040:	2b02      	cmp	r3, #2
 8001042:	d901      	bls.n	8001048 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001044:	2303      	movs	r3, #3
 8001046:	e05c      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001048:	4b11      	ldr	r3, [pc, #68]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001050:	2b00      	cmp	r3, #0
 8001052:	d0f0      	beq.n	8001036 <HAL_RCC_OscConfig+0x416>
 8001054:	e054      	b.n	8001100 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001056:	4b10      	ldr	r3, [pc, #64]	; (8001098 <HAL_RCC_OscConfig+0x478>)
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fcce 	bl	80009fc <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001064:	f7ff fcca 	bl	80009fc <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b02      	cmp	r3, #2
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e045      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_RCC_OscConfig+0x470>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0x444>
 8001082:	e03d      	b.n	8001100 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	699b      	ldr	r3, [r3, #24]
 8001088:	2b01      	cmp	r3, #1
 800108a:	d107      	bne.n	800109c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800108c:	2301      	movs	r3, #1
 800108e:	e038      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
 8001090:	40023800 	.word	0x40023800
 8001094:	40007000 	.word	0x40007000
 8001098:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800109c:	4b1b      	ldr	r3, [pc, #108]	; (800110c <HAL_RCC_OscConfig+0x4ec>)
 800109e:	685b      	ldr	r3, [r3, #4]
 80010a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	699b      	ldr	r3, [r3, #24]
 80010a6:	2b01      	cmp	r3, #1
 80010a8:	d028      	beq.n	80010fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010aa:	68fb      	ldr	r3, [r7, #12]
 80010ac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80010b4:	429a      	cmp	r2, r3
 80010b6:	d121      	bne.n	80010fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80010c2:	429a      	cmp	r2, r3
 80010c4:	d11a      	bne.n	80010fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010c6:	68fa      	ldr	r2, [r7, #12]
 80010c8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80010cc:	4013      	ands	r3, r2
 80010ce:	687a      	ldr	r2, [r7, #4]
 80010d0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80010d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80010d4:	4293      	cmp	r3, r2
 80010d6:	d111      	bne.n	80010fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010d8:	68fb      	ldr	r3, [r7, #12]
 80010da:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010e2:	085b      	lsrs	r3, r3, #1
 80010e4:	3b01      	subs	r3, #1
 80010e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80010e8:	429a      	cmp	r2, r3
 80010ea:	d107      	bne.n	80010fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80010f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80010f8:	429a      	cmp	r2, r3
 80010fa:	d001      	beq.n	8001100 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	e000      	b.n	8001102 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001100:	2300      	movs	r3, #0
}
 8001102:	4618      	mov	r0, r3
 8001104:	3718      	adds	r7, #24
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	40023800 	.word	0x40023800

08001110 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001110:	b580      	push	{r7, lr}
 8001112:	b084      	sub	sp, #16
 8001114:	af00      	add	r7, sp, #0
 8001116:	6078      	str	r0, [r7, #4]
 8001118:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	2b00      	cmp	r3, #0
 800111e:	d101      	bne.n	8001124 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e0cc      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001124:	4b68      	ldr	r3, [pc, #416]	; (80012c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	683a      	ldr	r2, [r7, #0]
 800112e:	429a      	cmp	r2, r3
 8001130:	d90c      	bls.n	800114c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001132:	4b65      	ldr	r3, [pc, #404]	; (80012c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001134:	683a      	ldr	r2, [r7, #0]
 8001136:	b2d2      	uxtb	r2, r2
 8001138:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800113a:	4b63      	ldr	r3, [pc, #396]	; (80012c8 <HAL_RCC_ClockConfig+0x1b8>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	f003 0307 	and.w	r3, r3, #7
 8001142:	683a      	ldr	r2, [r7, #0]
 8001144:	429a      	cmp	r2, r3
 8001146:	d001      	beq.n	800114c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001148:	2301      	movs	r3, #1
 800114a:	e0b8      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	f003 0302 	and.w	r3, r3, #2
 8001154:	2b00      	cmp	r3, #0
 8001156:	d020      	beq.n	800119a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	f003 0304 	and.w	r3, r3, #4
 8001160:	2b00      	cmp	r3, #0
 8001162:	d005      	beq.n	8001170 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001164:	4b59      	ldr	r3, [pc, #356]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001166:	689b      	ldr	r3, [r3, #8]
 8001168:	4a58      	ldr	r2, [pc, #352]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 800116a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800116e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	f003 0308 	and.w	r3, r3, #8
 8001178:	2b00      	cmp	r3, #0
 800117a:	d005      	beq.n	8001188 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800117c:	4b53      	ldr	r3, [pc, #332]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 800117e:	689b      	ldr	r3, [r3, #8]
 8001180:	4a52      	ldr	r2, [pc, #328]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001182:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001186:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001188:	4b50      	ldr	r3, [pc, #320]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 800118a:	689b      	ldr	r3, [r3, #8]
 800118c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	689b      	ldr	r3, [r3, #8]
 8001194:	494d      	ldr	r1, [pc, #308]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001196:	4313      	orrs	r3, r2
 8001198:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d044      	beq.n	8001230 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	2b01      	cmp	r3, #1
 80011ac:	d107      	bne.n	80011be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80011ae:	4b47      	ldr	r3, [pc, #284]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d119      	bne.n	80011ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ba:	2301      	movs	r3, #1
 80011bc:	e07f      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d003      	beq.n	80011ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	d107      	bne.n	80011de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80011ce:	4b3f      	ldr	r3, [pc, #252]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d109      	bne.n	80011ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e06f      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011de:	4b3b      	ldr	r3, [pc, #236]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	f003 0302 	and.w	r3, r3, #2
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d101      	bne.n	80011ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e067      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80011ee:	4b37      	ldr	r3, [pc, #220]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 80011f0:	689b      	ldr	r3, [r3, #8]
 80011f2:	f023 0203 	bic.w	r2, r3, #3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	685b      	ldr	r3, [r3, #4]
 80011fa:	4934      	ldr	r1, [pc, #208]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 80011fc:	4313      	orrs	r3, r2
 80011fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001200:	f7ff fbfc 	bl	80009fc <HAL_GetTick>
 8001204:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001206:	e00a      	b.n	800121e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001208:	f7ff fbf8 	bl	80009fc <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	68fb      	ldr	r3, [r7, #12]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	f241 3288 	movw	r2, #5000	; 0x1388
 8001216:	4293      	cmp	r3, r2
 8001218:	d901      	bls.n	800121e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e04f      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800121e:	4b2b      	ldr	r3, [pc, #172]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001220:	689b      	ldr	r3, [r3, #8]
 8001222:	f003 020c 	and.w	r2, r3, #12
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	429a      	cmp	r2, r3
 800122e:	d1eb      	bne.n	8001208 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001230:	4b25      	ldr	r3, [pc, #148]	; (80012c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	f003 0307 	and.w	r3, r3, #7
 8001238:	683a      	ldr	r2, [r7, #0]
 800123a:	429a      	cmp	r2, r3
 800123c:	d20c      	bcs.n	8001258 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800123e:	4b22      	ldr	r3, [pc, #136]	; (80012c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001240:	683a      	ldr	r2, [r7, #0]
 8001242:	b2d2      	uxtb	r2, r2
 8001244:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001246:	4b20      	ldr	r3, [pc, #128]	; (80012c8 <HAL_RCC_ClockConfig+0x1b8>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	f003 0307 	and.w	r3, r3, #7
 800124e:	683a      	ldr	r2, [r7, #0]
 8001250:	429a      	cmp	r2, r3
 8001252:	d001      	beq.n	8001258 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001254:	2301      	movs	r3, #1
 8001256:	e032      	b.n	80012be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f003 0304 	and.w	r3, r3, #4
 8001260:	2b00      	cmp	r3, #0
 8001262:	d008      	beq.n	8001276 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001266:	689b      	ldr	r3, [r3, #8]
 8001268:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	68db      	ldr	r3, [r3, #12]
 8001270:	4916      	ldr	r1, [pc, #88]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001272:	4313      	orrs	r3, r2
 8001274:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	f003 0308 	and.w	r3, r3, #8
 800127e:	2b00      	cmp	r3, #0
 8001280:	d009      	beq.n	8001296 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001282:	4b12      	ldr	r3, [pc, #72]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001284:	689b      	ldr	r3, [r3, #8]
 8001286:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	691b      	ldr	r3, [r3, #16]
 800128e:	00db      	lsls	r3, r3, #3
 8001290:	490e      	ldr	r1, [pc, #56]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 8001292:	4313      	orrs	r3, r2
 8001294:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001296:	f000 f821 	bl	80012dc <HAL_RCC_GetSysClockFreq>
 800129a:	4602      	mov	r2, r0
 800129c:	4b0b      	ldr	r3, [pc, #44]	; (80012cc <HAL_RCC_ClockConfig+0x1bc>)
 800129e:	689b      	ldr	r3, [r3, #8]
 80012a0:	091b      	lsrs	r3, r3, #4
 80012a2:	f003 030f 	and.w	r3, r3, #15
 80012a6:	490a      	ldr	r1, [pc, #40]	; (80012d0 <HAL_RCC_ClockConfig+0x1c0>)
 80012a8:	5ccb      	ldrb	r3, [r1, r3]
 80012aa:	fa22 f303 	lsr.w	r3, r2, r3
 80012ae:	4a09      	ldr	r2, [pc, #36]	; (80012d4 <HAL_RCC_ClockConfig+0x1c4>)
 80012b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80012b2:	4b09      	ldr	r3, [pc, #36]	; (80012d8 <HAL_RCC_ClockConfig+0x1c8>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fab6 	bl	8000828 <HAL_InitTick>

  return HAL_OK;
 80012bc:	2300      	movs	r3, #0
}
 80012be:	4618      	mov	r0, r3
 80012c0:	3710      	adds	r7, #16
 80012c2:	46bd      	mov	sp, r7
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40023c00 	.word	0x40023c00
 80012cc:	40023800 	.word	0x40023800
 80012d0:	08005660 	.word	0x08005660
 80012d4:	20000000 	.word	0x20000000
 80012d8:	20000004 	.word	0x20000004

080012dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80012dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80012e0:	b094      	sub	sp, #80	; 0x50
 80012e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80012e4:	2300      	movs	r3, #0
 80012e6:	647b      	str	r3, [r7, #68]	; 0x44
 80012e8:	2300      	movs	r3, #0
 80012ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012ec:	2300      	movs	r3, #0
 80012ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80012f0:	2300      	movs	r3, #0
 80012f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80012f4:	4b79      	ldr	r3, [pc, #484]	; (80014dc <HAL_RCC_GetSysClockFreq+0x200>)
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 030c 	and.w	r3, r3, #12
 80012fc:	2b08      	cmp	r3, #8
 80012fe:	d00d      	beq.n	800131c <HAL_RCC_GetSysClockFreq+0x40>
 8001300:	2b08      	cmp	r3, #8
 8001302:	f200 80e1 	bhi.w	80014c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001306:	2b00      	cmp	r3, #0
 8001308:	d002      	beq.n	8001310 <HAL_RCC_GetSysClockFreq+0x34>
 800130a:	2b04      	cmp	r3, #4
 800130c:	d003      	beq.n	8001316 <HAL_RCC_GetSysClockFreq+0x3a>
 800130e:	e0db      	b.n	80014c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001310:	4b73      	ldr	r3, [pc, #460]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8001312:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001314:	e0db      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001316:	4b73      	ldr	r3, [pc, #460]	; (80014e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8001318:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800131a:	e0d8      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800131c:	4b6f      	ldr	r3, [pc, #444]	; (80014dc <HAL_RCC_GetSysClockFreq+0x200>)
 800131e:	685b      	ldr	r3, [r3, #4]
 8001320:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001324:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001326:	4b6d      	ldr	r3, [pc, #436]	; (80014dc <HAL_RCC_GetSysClockFreq+0x200>)
 8001328:	685b      	ldr	r3, [r3, #4]
 800132a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800132e:	2b00      	cmp	r3, #0
 8001330:	d063      	beq.n	80013fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001332:	4b6a      	ldr	r3, [pc, #424]	; (80014dc <HAL_RCC_GetSysClockFreq+0x200>)
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	099b      	lsrs	r3, r3, #6
 8001338:	2200      	movs	r2, #0
 800133a:	63bb      	str	r3, [r7, #56]	; 0x38
 800133c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800133e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001340:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001344:	633b      	str	r3, [r7, #48]	; 0x30
 8001346:	2300      	movs	r3, #0
 8001348:	637b      	str	r3, [r7, #52]	; 0x34
 800134a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800134e:	4622      	mov	r2, r4
 8001350:	462b      	mov	r3, r5
 8001352:	f04f 0000 	mov.w	r0, #0
 8001356:	f04f 0100 	mov.w	r1, #0
 800135a:	0159      	lsls	r1, r3, #5
 800135c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001360:	0150      	lsls	r0, r2, #5
 8001362:	4602      	mov	r2, r0
 8001364:	460b      	mov	r3, r1
 8001366:	4621      	mov	r1, r4
 8001368:	1a51      	subs	r1, r2, r1
 800136a:	6139      	str	r1, [r7, #16]
 800136c:	4629      	mov	r1, r5
 800136e:	eb63 0301 	sbc.w	r3, r3, r1
 8001372:	617b      	str	r3, [r7, #20]
 8001374:	f04f 0200 	mov.w	r2, #0
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001380:	4659      	mov	r1, fp
 8001382:	018b      	lsls	r3, r1, #6
 8001384:	4651      	mov	r1, sl
 8001386:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800138a:	4651      	mov	r1, sl
 800138c:	018a      	lsls	r2, r1, #6
 800138e:	4651      	mov	r1, sl
 8001390:	ebb2 0801 	subs.w	r8, r2, r1
 8001394:	4659      	mov	r1, fp
 8001396:	eb63 0901 	sbc.w	r9, r3, r1
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80013a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80013aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80013ae:	4690      	mov	r8, r2
 80013b0:	4699      	mov	r9, r3
 80013b2:	4623      	mov	r3, r4
 80013b4:	eb18 0303 	adds.w	r3, r8, r3
 80013b8:	60bb      	str	r3, [r7, #8]
 80013ba:	462b      	mov	r3, r5
 80013bc:	eb49 0303 	adc.w	r3, r9, r3
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	f04f 0200 	mov.w	r2, #0
 80013c6:	f04f 0300 	mov.w	r3, #0
 80013ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80013ce:	4629      	mov	r1, r5
 80013d0:	024b      	lsls	r3, r1, #9
 80013d2:	4621      	mov	r1, r4
 80013d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80013d8:	4621      	mov	r1, r4
 80013da:	024a      	lsls	r2, r1, #9
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013e2:	2200      	movs	r2, #0
 80013e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80013e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80013e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80013ec:	f7fe fef0 	bl	80001d0 <__aeabi_uldivmod>
 80013f0:	4602      	mov	r2, r0
 80013f2:	460b      	mov	r3, r1
 80013f4:	4613      	mov	r3, r2
 80013f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80013f8:	e058      	b.n	80014ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80013fa:	4b38      	ldr	r3, [pc, #224]	; (80014dc <HAL_RCC_GetSysClockFreq+0x200>)
 80013fc:	685b      	ldr	r3, [r3, #4]
 80013fe:	099b      	lsrs	r3, r3, #6
 8001400:	2200      	movs	r2, #0
 8001402:	4618      	mov	r0, r3
 8001404:	4611      	mov	r1, r2
 8001406:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800140a:	623b      	str	r3, [r7, #32]
 800140c:	2300      	movs	r3, #0
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
 8001410:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001414:	4642      	mov	r2, r8
 8001416:	464b      	mov	r3, r9
 8001418:	f04f 0000 	mov.w	r0, #0
 800141c:	f04f 0100 	mov.w	r1, #0
 8001420:	0159      	lsls	r1, r3, #5
 8001422:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001426:	0150      	lsls	r0, r2, #5
 8001428:	4602      	mov	r2, r0
 800142a:	460b      	mov	r3, r1
 800142c:	4641      	mov	r1, r8
 800142e:	ebb2 0a01 	subs.w	sl, r2, r1
 8001432:	4649      	mov	r1, r9
 8001434:	eb63 0b01 	sbc.w	fp, r3, r1
 8001438:	f04f 0200 	mov.w	r2, #0
 800143c:	f04f 0300 	mov.w	r3, #0
 8001440:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001444:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001448:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800144c:	ebb2 040a 	subs.w	r4, r2, sl
 8001450:	eb63 050b 	sbc.w	r5, r3, fp
 8001454:	f04f 0200 	mov.w	r2, #0
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	00eb      	lsls	r3, r5, #3
 800145e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001462:	00e2      	lsls	r2, r4, #3
 8001464:	4614      	mov	r4, r2
 8001466:	461d      	mov	r5, r3
 8001468:	4643      	mov	r3, r8
 800146a:	18e3      	adds	r3, r4, r3
 800146c:	603b      	str	r3, [r7, #0]
 800146e:	464b      	mov	r3, r9
 8001470:	eb45 0303 	adc.w	r3, r5, r3
 8001474:	607b      	str	r3, [r7, #4]
 8001476:	f04f 0200 	mov.w	r2, #0
 800147a:	f04f 0300 	mov.w	r3, #0
 800147e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001482:	4629      	mov	r1, r5
 8001484:	028b      	lsls	r3, r1, #10
 8001486:	4621      	mov	r1, r4
 8001488:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800148c:	4621      	mov	r1, r4
 800148e:	028a      	lsls	r2, r1, #10
 8001490:	4610      	mov	r0, r2
 8001492:	4619      	mov	r1, r3
 8001494:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001496:	2200      	movs	r2, #0
 8001498:	61bb      	str	r3, [r7, #24]
 800149a:	61fa      	str	r2, [r7, #28]
 800149c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80014a0:	f7fe fe96 	bl	80001d0 <__aeabi_uldivmod>
 80014a4:	4602      	mov	r2, r0
 80014a6:	460b      	mov	r3, r1
 80014a8:	4613      	mov	r3, r2
 80014aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80014ac:	4b0b      	ldr	r3, [pc, #44]	; (80014dc <HAL_RCC_GetSysClockFreq+0x200>)
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	0c1b      	lsrs	r3, r3, #16
 80014b2:	f003 0303 	and.w	r3, r3, #3
 80014b6:	3301      	adds	r3, #1
 80014b8:	005b      	lsls	r3, r3, #1
 80014ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80014bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80014be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80014c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80014c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014c6:	e002      	b.n	80014ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80014c8:	4b05      	ldr	r3, [pc, #20]	; (80014e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80014ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80014cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80014ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80014d0:	4618      	mov	r0, r3
 80014d2:	3750      	adds	r7, #80	; 0x50
 80014d4:	46bd      	mov	sp, r7
 80014d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80014da:	bf00      	nop
 80014dc:	40023800 	.word	0x40023800
 80014e0:	00f42400 	.word	0x00f42400
 80014e4:	007a1200 	.word	0x007a1200

080014e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80014e8:	b480      	push	{r7}
 80014ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80014ec:	4b03      	ldr	r3, [pc, #12]	; (80014fc <HAL_RCC_GetHCLKFreq+0x14>)
 80014ee:	681b      	ldr	r3, [r3, #0]
}
 80014f0:	4618      	mov	r0, r3
 80014f2:	46bd      	mov	sp, r7
 80014f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f8:	4770      	bx	lr
 80014fa:	bf00      	nop
 80014fc:	20000000 	.word	0x20000000

08001500 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001504:	f7ff fff0 	bl	80014e8 <HAL_RCC_GetHCLKFreq>
 8001508:	4602      	mov	r2, r0
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_RCC_GetPCLK1Freq+0x20>)
 800150c:	689b      	ldr	r3, [r3, #8]
 800150e:	0a9b      	lsrs	r3, r3, #10
 8001510:	f003 0307 	and.w	r3, r3, #7
 8001514:	4903      	ldr	r1, [pc, #12]	; (8001524 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001516:	5ccb      	ldrb	r3, [r1, r3]
 8001518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800151c:	4618      	mov	r0, r3
 800151e:	bd80      	pop	{r7, pc}
 8001520:	40023800 	.word	0x40023800
 8001524:	08005670 	.word	0x08005670

08001528 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001528:	b480      	push	{r7}
 800152a:	b083      	sub	sp, #12
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
 8001530:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	220f      	movs	r2, #15
 8001536:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001538:	4b12      	ldr	r3, [pc, #72]	; (8001584 <HAL_RCC_GetClockConfig+0x5c>)
 800153a:	689b      	ldr	r3, [r3, #8]
 800153c:	f003 0203 	and.w	r2, r3, #3
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001544:	4b0f      	ldr	r3, [pc, #60]	; (8001584 <HAL_RCC_GetClockConfig+0x5c>)
 8001546:	689b      	ldr	r3, [r3, #8]
 8001548:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001550:	4b0c      	ldr	r3, [pc, #48]	; (8001584 <HAL_RCC_GetClockConfig+0x5c>)
 8001552:	689b      	ldr	r3, [r3, #8]
 8001554:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800155c:	4b09      	ldr	r3, [pc, #36]	; (8001584 <HAL_RCC_GetClockConfig+0x5c>)
 800155e:	689b      	ldr	r3, [r3, #8]
 8001560:	08db      	lsrs	r3, r3, #3
 8001562:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001566:	687b      	ldr	r3, [r7, #4]
 8001568:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <HAL_RCC_GetClockConfig+0x60>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	f003 0207 	and.w	r2, r3, #7
 8001572:	683b      	ldr	r3, [r7, #0]
 8001574:	601a      	str	r2, [r3, #0]
}
 8001576:	bf00      	nop
 8001578:	370c      	adds	r7, #12
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40023c00 	.word	0x40023c00

0800158c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	b082      	sub	sp, #8
 8001590:	af00      	add	r7, sp, #0
 8001592:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2b00      	cmp	r3, #0
 8001598:	d101      	bne.n	800159e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	e041      	b.n	8001622 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a4:	b2db      	uxtb	r3, r3
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d106      	bne.n	80015b8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80015b2:	6878      	ldr	r0, [r7, #4]
 80015b4:	f000 f839 	bl	800162a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	2202      	movs	r2, #2
 80015bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681a      	ldr	r2, [r3, #0]
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	3304      	adds	r3, #4
 80015c8:	4619      	mov	r1, r3
 80015ca:	4610      	mov	r0, r2
 80015cc:	f000 f9d8 	bl	8001980 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2201      	movs	r2, #1
 80015d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2201      	movs	r2, #1
 80015e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2201      	movs	r2, #1
 80015ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	2201      	movs	r2, #1
 80015f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	2201      	movs	r2, #1
 80015fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	2201      	movs	r2, #1
 8001604:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2201      	movs	r2, #1
 800160c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2201      	movs	r2, #1
 8001614:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	2201      	movs	r2, #1
 800161c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001620:	2300      	movs	r3, #0
}
 8001622:	4618      	mov	r0, r3
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800162a:	b480      	push	{r7}
 800162c:	b083      	sub	sp, #12
 800162e:	af00      	add	r7, sp, #0
 8001630:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
	...

08001640 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001640:	b480      	push	{r7}
 8001642:	b085      	sub	sp, #20
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800164e:	b2db      	uxtb	r3, r3
 8001650:	2b01      	cmp	r3, #1
 8001652:	d001      	beq.n	8001658 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001654:	2301      	movs	r3, #1
 8001656:	e04e      	b.n	80016f6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	68da      	ldr	r2, [r3, #12]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	f042 0201 	orr.w	r2, r2, #1
 800166e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	4a23      	ldr	r2, [pc, #140]	; (8001704 <HAL_TIM_Base_Start_IT+0xc4>)
 8001676:	4293      	cmp	r3, r2
 8001678:	d022      	beq.n	80016c0 <HAL_TIM_Base_Start_IT+0x80>
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001682:	d01d      	beq.n	80016c0 <HAL_TIM_Base_Start_IT+0x80>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a1f      	ldr	r2, [pc, #124]	; (8001708 <HAL_TIM_Base_Start_IT+0xc8>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d018      	beq.n	80016c0 <HAL_TIM_Base_Start_IT+0x80>
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a1e      	ldr	r2, [pc, #120]	; (800170c <HAL_TIM_Base_Start_IT+0xcc>)
 8001694:	4293      	cmp	r3, r2
 8001696:	d013      	beq.n	80016c0 <HAL_TIM_Base_Start_IT+0x80>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a1c      	ldr	r2, [pc, #112]	; (8001710 <HAL_TIM_Base_Start_IT+0xd0>)
 800169e:	4293      	cmp	r3, r2
 80016a0:	d00e      	beq.n	80016c0 <HAL_TIM_Base_Start_IT+0x80>
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a1b      	ldr	r2, [pc, #108]	; (8001714 <HAL_TIM_Base_Start_IT+0xd4>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d009      	beq.n	80016c0 <HAL_TIM_Base_Start_IT+0x80>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a19      	ldr	r2, [pc, #100]	; (8001718 <HAL_TIM_Base_Start_IT+0xd8>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d004      	beq.n	80016c0 <HAL_TIM_Base_Start_IT+0x80>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a18      	ldr	r2, [pc, #96]	; (800171c <HAL_TIM_Base_Start_IT+0xdc>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d111      	bne.n	80016e4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f003 0307 	and.w	r3, r3, #7
 80016ca:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016cc:	68fb      	ldr	r3, [r7, #12]
 80016ce:	2b06      	cmp	r3, #6
 80016d0:	d010      	beq.n	80016f4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	f042 0201 	orr.w	r2, r2, #1
 80016e0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80016e2:	e007      	b.n	80016f4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	681a      	ldr	r2, [r3, #0]
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f042 0201 	orr.w	r2, r2, #1
 80016f2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80016f4:	2300      	movs	r3, #0
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3714      	adds	r7, #20
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	40010000 	.word	0x40010000
 8001708:	40000400 	.word	0x40000400
 800170c:	40000800 	.word	0x40000800
 8001710:	40000c00 	.word	0x40000c00
 8001714:	40010400 	.word	0x40010400
 8001718:	40014000 	.word	0x40014000
 800171c:	40001800 	.word	0x40001800

08001720 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b082      	sub	sp, #8
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	691b      	ldr	r3, [r3, #16]
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	2b02      	cmp	r3, #2
 8001734:	d122      	bne.n	800177c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	f003 0302 	and.w	r3, r3, #2
 8001740:	2b02      	cmp	r3, #2
 8001742:	d11b      	bne.n	800177c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	f06f 0202 	mvn.w	r2, #2
 800174c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	2201      	movs	r2, #1
 8001752:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	699b      	ldr	r3, [r3, #24]
 800175a:	f003 0303 	and.w	r3, r3, #3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d003      	beq.n	800176a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001762:	6878      	ldr	r0, [r7, #4]
 8001764:	f000 f8ee 	bl	8001944 <HAL_TIM_IC_CaptureCallback>
 8001768:	e005      	b.n	8001776 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800176a:	6878      	ldr	r0, [r7, #4]
 800176c:	f000 f8e0 	bl	8001930 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001770:	6878      	ldr	r0, [r7, #4]
 8001772:	f000 f8f1 	bl	8001958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2200      	movs	r2, #0
 800177a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	691b      	ldr	r3, [r3, #16]
 8001782:	f003 0304 	and.w	r3, r3, #4
 8001786:	2b04      	cmp	r3, #4
 8001788:	d122      	bne.n	80017d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	68db      	ldr	r3, [r3, #12]
 8001790:	f003 0304 	and.w	r3, r3, #4
 8001794:	2b04      	cmp	r3, #4
 8001796:	d11b      	bne.n	80017d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f06f 0204 	mvn.w	r2, #4
 80017a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2202      	movs	r2, #2
 80017a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	699b      	ldr	r3, [r3, #24]
 80017ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d003      	beq.n	80017be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f000 f8c4 	bl	8001944 <HAL_TIM_IC_CaptureCallback>
 80017bc:	e005      	b.n	80017ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017be:	6878      	ldr	r0, [r7, #4]
 80017c0:	f000 f8b6 	bl	8001930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c4:	6878      	ldr	r0, [r7, #4]
 80017c6:	f000 f8c7 	bl	8001958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2200      	movs	r2, #0
 80017ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	691b      	ldr	r3, [r3, #16]
 80017d6:	f003 0308 	and.w	r3, r3, #8
 80017da:	2b08      	cmp	r3, #8
 80017dc:	d122      	bne.n	8001824 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	68db      	ldr	r3, [r3, #12]
 80017e4:	f003 0308 	and.w	r3, r3, #8
 80017e8:	2b08      	cmp	r3, #8
 80017ea:	d11b      	bne.n	8001824 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	f06f 0208 	mvn.w	r2, #8
 80017f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	2204      	movs	r2, #4
 80017fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	681b      	ldr	r3, [r3, #0]
 8001800:	69db      	ldr	r3, [r3, #28]
 8001802:	f003 0303 	and.w	r3, r3, #3
 8001806:	2b00      	cmp	r3, #0
 8001808:	d003      	beq.n	8001812 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800180a:	6878      	ldr	r0, [r7, #4]
 800180c:	f000 f89a 	bl	8001944 <HAL_TIM_IC_CaptureCallback>
 8001810:	e005      	b.n	800181e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001812:	6878      	ldr	r0, [r7, #4]
 8001814:	f000 f88c 	bl	8001930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001818:	6878      	ldr	r0, [r7, #4]
 800181a:	f000 f89d 	bl	8001958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	2200      	movs	r2, #0
 8001822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0310 	and.w	r3, r3, #16
 800182e:	2b10      	cmp	r3, #16
 8001830:	d122      	bne.n	8001878 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 0310 	and.w	r3, r3, #16
 800183c:	2b10      	cmp	r3, #16
 800183e:	d11b      	bne.n	8001878 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f06f 0210 	mvn.w	r2, #16
 8001848:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	2208      	movs	r2, #8
 800184e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800185a:	2b00      	cmp	r3, #0
 800185c:	d003      	beq.n	8001866 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800185e:	6878      	ldr	r0, [r7, #4]
 8001860:	f000 f870 	bl	8001944 <HAL_TIM_IC_CaptureCallback>
 8001864:	e005      	b.n	8001872 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001866:	6878      	ldr	r0, [r7, #4]
 8001868:	f000 f862 	bl	8001930 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800186c:	6878      	ldr	r0, [r7, #4]
 800186e:	f000 f873 	bl	8001958 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	2200      	movs	r2, #0
 8001876:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	691b      	ldr	r3, [r3, #16]
 800187e:	f003 0301 	and.w	r3, r3, #1
 8001882:	2b01      	cmp	r3, #1
 8001884:	d10e      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	68db      	ldr	r3, [r3, #12]
 800188c:	f003 0301 	and.w	r3, r3, #1
 8001890:	2b01      	cmp	r3, #1
 8001892:	d107      	bne.n	80018a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	f06f 0201 	mvn.w	r2, #1
 800189c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800189e:	6878      	ldr	r0, [r7, #4]
 80018a0:	f7fe ff7e 	bl	80007a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018ae:	2b80      	cmp	r3, #128	; 0x80
 80018b0:	d10e      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018bc:	2b80      	cmp	r3, #128	; 0x80
 80018be:	d107      	bne.n	80018d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80018c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80018ca:	6878      	ldr	r0, [r7, #4]
 80018cc:	f000 f902 	bl	8001ad4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	691b      	ldr	r3, [r3, #16]
 80018d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018da:	2b40      	cmp	r3, #64	; 0x40
 80018dc:	d10e      	bne.n	80018fc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	68db      	ldr	r3, [r3, #12]
 80018e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80018e8:	2b40      	cmp	r3, #64	; 0x40
 80018ea:	d107      	bne.n	80018fc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80018f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f838 	bl	800196c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	691b      	ldr	r3, [r3, #16]
 8001902:	f003 0320 	and.w	r3, r3, #32
 8001906:	2b20      	cmp	r3, #32
 8001908:	d10e      	bne.n	8001928 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	f003 0320 	and.w	r3, r3, #32
 8001914:	2b20      	cmp	r3, #32
 8001916:	d107      	bne.n	8001928 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	f06f 0220 	mvn.w	r2, #32
 8001920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 f8cc 	bl	8001ac0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001928:	bf00      	nop
 800192a:	3708      	adds	r7, #8
 800192c:	46bd      	mov	sp, r7
 800192e:	bd80      	pop	{r7, pc}

08001930 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001938:	bf00      	nop
 800193a:	370c      	adds	r7, #12
 800193c:	46bd      	mov	sp, r7
 800193e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001942:	4770      	bx	lr

08001944 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001944:	b480      	push	{r7}
 8001946:	b083      	sub	sp, #12
 8001948:	af00      	add	r7, sp, #0
 800194a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800194c:	bf00      	nop
 800194e:	370c      	adds	r7, #12
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr

08001958 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001960:	bf00      	nop
 8001962:	370c      	adds	r7, #12
 8001964:	46bd      	mov	sp, r7
 8001966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196a:	4770      	bx	lr

0800196c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001974:	bf00      	nop
 8001976:	370c      	adds	r7, #12
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001980:	b480      	push	{r7}
 8001982:	b085      	sub	sp, #20
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	4a40      	ldr	r2, [pc, #256]	; (8001a94 <TIM_Base_SetConfig+0x114>)
 8001994:	4293      	cmp	r3, r2
 8001996:	d013      	beq.n	80019c0 <TIM_Base_SetConfig+0x40>
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800199e:	d00f      	beq.n	80019c0 <TIM_Base_SetConfig+0x40>
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	4a3d      	ldr	r2, [pc, #244]	; (8001a98 <TIM_Base_SetConfig+0x118>)
 80019a4:	4293      	cmp	r3, r2
 80019a6:	d00b      	beq.n	80019c0 <TIM_Base_SetConfig+0x40>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	4a3c      	ldr	r2, [pc, #240]	; (8001a9c <TIM_Base_SetConfig+0x11c>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d007      	beq.n	80019c0 <TIM_Base_SetConfig+0x40>
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	4a3b      	ldr	r2, [pc, #236]	; (8001aa0 <TIM_Base_SetConfig+0x120>)
 80019b4:	4293      	cmp	r3, r2
 80019b6:	d003      	beq.n	80019c0 <TIM_Base_SetConfig+0x40>
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	4a3a      	ldr	r2, [pc, #232]	; (8001aa4 <TIM_Base_SetConfig+0x124>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d108      	bne.n	80019d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80019c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	685b      	ldr	r3, [r3, #4]
 80019cc:	68fa      	ldr	r2, [r7, #12]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	4a2f      	ldr	r2, [pc, #188]	; (8001a94 <TIM_Base_SetConfig+0x114>)
 80019d6:	4293      	cmp	r3, r2
 80019d8:	d02b      	beq.n	8001a32 <TIM_Base_SetConfig+0xb2>
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019e0:	d027      	beq.n	8001a32 <TIM_Base_SetConfig+0xb2>
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	4a2c      	ldr	r2, [pc, #176]	; (8001a98 <TIM_Base_SetConfig+0x118>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d023      	beq.n	8001a32 <TIM_Base_SetConfig+0xb2>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	4a2b      	ldr	r2, [pc, #172]	; (8001a9c <TIM_Base_SetConfig+0x11c>)
 80019ee:	4293      	cmp	r3, r2
 80019f0:	d01f      	beq.n	8001a32 <TIM_Base_SetConfig+0xb2>
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	4a2a      	ldr	r2, [pc, #168]	; (8001aa0 <TIM_Base_SetConfig+0x120>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d01b      	beq.n	8001a32 <TIM_Base_SetConfig+0xb2>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	4a29      	ldr	r2, [pc, #164]	; (8001aa4 <TIM_Base_SetConfig+0x124>)
 80019fe:	4293      	cmp	r3, r2
 8001a00:	d017      	beq.n	8001a32 <TIM_Base_SetConfig+0xb2>
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <TIM_Base_SetConfig+0x128>)
 8001a06:	4293      	cmp	r3, r2
 8001a08:	d013      	beq.n	8001a32 <TIM_Base_SetConfig+0xb2>
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	4a27      	ldr	r2, [pc, #156]	; (8001aac <TIM_Base_SetConfig+0x12c>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d00f      	beq.n	8001a32 <TIM_Base_SetConfig+0xb2>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4a26      	ldr	r2, [pc, #152]	; (8001ab0 <TIM_Base_SetConfig+0x130>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d00b      	beq.n	8001a32 <TIM_Base_SetConfig+0xb2>
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	4a25      	ldr	r2, [pc, #148]	; (8001ab4 <TIM_Base_SetConfig+0x134>)
 8001a1e:	4293      	cmp	r3, r2
 8001a20:	d007      	beq.n	8001a32 <TIM_Base_SetConfig+0xb2>
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	4a24      	ldr	r2, [pc, #144]	; (8001ab8 <TIM_Base_SetConfig+0x138>)
 8001a26:	4293      	cmp	r3, r2
 8001a28:	d003      	beq.n	8001a32 <TIM_Base_SetConfig+0xb2>
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	4a23      	ldr	r2, [pc, #140]	; (8001abc <TIM_Base_SetConfig+0x13c>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d108      	bne.n	8001a44 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001a38:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001a3a:	683b      	ldr	r3, [r7, #0]
 8001a3c:	68db      	ldr	r3, [r3, #12]
 8001a3e:	68fa      	ldr	r2, [r7, #12]
 8001a40:	4313      	orrs	r3, r2
 8001a42:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001a44:	68fb      	ldr	r3, [r7, #12]
 8001a46:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001a4a:	683b      	ldr	r3, [r7, #0]
 8001a4c:	695b      	ldr	r3, [r3, #20]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	689a      	ldr	r2, [r3, #8]
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	681a      	ldr	r2, [r3, #0]
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	4a0a      	ldr	r2, [pc, #40]	; (8001a94 <TIM_Base_SetConfig+0x114>)
 8001a6c:	4293      	cmp	r3, r2
 8001a6e:	d003      	beq.n	8001a78 <TIM_Base_SetConfig+0xf8>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	4a0c      	ldr	r2, [pc, #48]	; (8001aa4 <TIM_Base_SetConfig+0x124>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d103      	bne.n	8001a80 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	691a      	ldr	r2, [r3, #16]
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2201      	movs	r2, #1
 8001a84:	615a      	str	r2, [r3, #20]
}
 8001a86:	bf00      	nop
 8001a88:	3714      	adds	r7, #20
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a90:	4770      	bx	lr
 8001a92:	bf00      	nop
 8001a94:	40010000 	.word	0x40010000
 8001a98:	40000400 	.word	0x40000400
 8001a9c:	40000800 	.word	0x40000800
 8001aa0:	40000c00 	.word	0x40000c00
 8001aa4:	40010400 	.word	0x40010400
 8001aa8:	40014000 	.word	0x40014000
 8001aac:	40014400 	.word	0x40014400
 8001ab0:	40014800 	.word	0x40014800
 8001ab4:	40001800 	.word	0x40001800
 8001ab8:	40001c00 	.word	0x40001c00
 8001abc:	40002000 	.word	0x40002000

08001ac0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr

08001ad4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr

08001ae8 <__NVIC_SetPriority>:
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b083      	sub	sp, #12
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	4603      	mov	r3, r0
 8001af0:	6039      	str	r1, [r7, #0]
 8001af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	db0a      	blt.n	8001b12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	b2da      	uxtb	r2, r3
 8001b00:	490c      	ldr	r1, [pc, #48]	; (8001b34 <__NVIC_SetPriority+0x4c>)
 8001b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b06:	0112      	lsls	r2, r2, #4
 8001b08:	b2d2      	uxtb	r2, r2
 8001b0a:	440b      	add	r3, r1
 8001b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001b10:	e00a      	b.n	8001b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b12:	683b      	ldr	r3, [r7, #0]
 8001b14:	b2da      	uxtb	r2, r3
 8001b16:	4908      	ldr	r1, [pc, #32]	; (8001b38 <__NVIC_SetPriority+0x50>)
 8001b18:	79fb      	ldrb	r3, [r7, #7]
 8001b1a:	f003 030f 	and.w	r3, r3, #15
 8001b1e:	3b04      	subs	r3, #4
 8001b20:	0112      	lsls	r2, r2, #4
 8001b22:	b2d2      	uxtb	r2, r2
 8001b24:	440b      	add	r3, r1
 8001b26:	761a      	strb	r2, [r3, #24]
}
 8001b28:	bf00      	nop
 8001b2a:	370c      	adds	r7, #12
 8001b2c:	46bd      	mov	sp, r7
 8001b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b32:	4770      	bx	lr
 8001b34:	e000e100 	.word	0xe000e100
 8001b38:	e000ed00 	.word	0xe000ed00

08001b3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001b40:	4b05      	ldr	r3, [pc, #20]	; (8001b58 <SysTick_Handler+0x1c>)
 8001b42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001b44:	f002 fab4 	bl	80040b0 <xTaskGetSchedulerState>
 8001b48:	4603      	mov	r3, r0
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d001      	beq.n	8001b52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001b4e:	f003 f99b 	bl	8004e88 <xPortSysTickHandler>
  }
}
 8001b52:	bf00      	nop
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	e000e010 	.word	0xe000e010

08001b5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001b60:	2100      	movs	r1, #0
 8001b62:	f06f 0004 	mvn.w	r0, #4
 8001b66:	f7ff ffbf 	bl	8001ae8 <__NVIC_SetPriority>
#endif
}
 8001b6a:	bf00      	nop
 8001b6c:	bd80      	pop	{r7, pc}
	...

08001b70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001b70:	b480      	push	{r7}
 8001b72:	b083      	sub	sp, #12
 8001b74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b76:	f3ef 8305 	mrs	r3, IPSR
 8001b7a:	603b      	str	r3, [r7, #0]
  return(result);
 8001b7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001b82:	f06f 0305 	mvn.w	r3, #5
 8001b86:	607b      	str	r3, [r7, #4]
 8001b88:	e00c      	b.n	8001ba4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b8a:	4b0a      	ldr	r3, [pc, #40]	; (8001bb4 <osKernelInitialize+0x44>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d105      	bne.n	8001b9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001b92:	4b08      	ldr	r3, [pc, #32]	; (8001bb4 <osKernelInitialize+0x44>)
 8001b94:	2201      	movs	r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b98:	2300      	movs	r3, #0
 8001b9a:	607b      	str	r3, [r7, #4]
 8001b9c:	e002      	b.n	8001ba4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001b9e:	f04f 33ff 	mov.w	r3, #4294967295
 8001ba2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ba4:	687b      	ldr	r3, [r7, #4]
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb0:	4770      	bx	lr
 8001bb2:	bf00      	nop
 8001bb4:	200000f0 	.word	0x200000f0

08001bb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001bbe:	f3ef 8305 	mrs	r3, IPSR
 8001bc2:	603b      	str	r3, [r7, #0]
  return(result);
 8001bc4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d003      	beq.n	8001bd2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001bca:	f06f 0305 	mvn.w	r3, #5
 8001bce:	607b      	str	r3, [r7, #4]
 8001bd0:	e010      	b.n	8001bf4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001bd2:	4b0b      	ldr	r3, [pc, #44]	; (8001c00 <osKernelStart+0x48>)
 8001bd4:	681b      	ldr	r3, [r3, #0]
 8001bd6:	2b01      	cmp	r3, #1
 8001bd8:	d109      	bne.n	8001bee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001bda:	f7ff ffbf 	bl	8001b5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001bde:	4b08      	ldr	r3, [pc, #32]	; (8001c00 <osKernelStart+0x48>)
 8001be0:	2202      	movs	r2, #2
 8001be2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001be4:	f001 fe08 	bl	80037f8 <vTaskStartScheduler>
      stat = osOK;
 8001be8:	2300      	movs	r3, #0
 8001bea:	607b      	str	r3, [r7, #4]
 8001bec:	e002      	b.n	8001bf4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001bee:	f04f 33ff 	mov.w	r3, #4294967295
 8001bf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001bf4:	687b      	ldr	r3, [r7, #4]
}
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	3708      	adds	r7, #8
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bd80      	pop	{r7, pc}
 8001bfe:	bf00      	nop
 8001c00:	200000f0 	.word	0x200000f0

08001c04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b08e      	sub	sp, #56	; 0x38
 8001c08:	af04      	add	r7, sp, #16
 8001c0a:	60f8      	str	r0, [r7, #12]
 8001c0c:	60b9      	str	r1, [r7, #8]
 8001c0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001c10:	2300      	movs	r3, #0
 8001c12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c14:	f3ef 8305 	mrs	r3, IPSR
 8001c18:	617b      	str	r3, [r7, #20]
  return(result);
 8001c1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d17e      	bne.n	8001d1e <osThreadNew+0x11a>
 8001c20:	68fb      	ldr	r3, [r7, #12]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d07b      	beq.n	8001d1e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001c26:	2380      	movs	r3, #128	; 0x80
 8001c28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001c2a:	2318      	movs	r3, #24
 8001c2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001c32:	f04f 33ff 	mov.w	r3, #4294967295
 8001c36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d045      	beq.n	8001cca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d002      	beq.n	8001c4c <osThreadNew+0x48>
        name = attr->name;
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	2b00      	cmp	r3, #0
 8001c52:	d002      	beq.n	8001c5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	699b      	ldr	r3, [r3, #24]
 8001c58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d008      	beq.n	8001c72 <osThreadNew+0x6e>
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	2b38      	cmp	r3, #56	; 0x38
 8001c64:	d805      	bhi.n	8001c72 <osThreadNew+0x6e>
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	685b      	ldr	r3, [r3, #4]
 8001c6a:	f003 0301 	and.w	r3, r3, #1
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d001      	beq.n	8001c76 <osThreadNew+0x72>
        return (NULL);
 8001c72:	2300      	movs	r3, #0
 8001c74:	e054      	b.n	8001d20 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	695b      	ldr	r3, [r3, #20]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	695b      	ldr	r3, [r3, #20]
 8001c82:	089b      	lsrs	r3, r3, #2
 8001c84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	689b      	ldr	r3, [r3, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d00e      	beq.n	8001cac <osThreadNew+0xa8>
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	2bbb      	cmp	r3, #187	; 0xbb
 8001c94:	d90a      	bls.n	8001cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d006      	beq.n	8001cac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d002      	beq.n	8001cac <osThreadNew+0xa8>
        mem = 1;
 8001ca6:	2301      	movs	r3, #1
 8001ca8:	61bb      	str	r3, [r7, #24]
 8001caa:	e010      	b.n	8001cce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	2b00      	cmp	r3, #0
 8001cb2:	d10c      	bne.n	8001cce <osThreadNew+0xca>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	68db      	ldr	r3, [r3, #12]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d108      	bne.n	8001cce <osThreadNew+0xca>
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	691b      	ldr	r3, [r3, #16]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d104      	bne.n	8001cce <osThreadNew+0xca>
          mem = 0;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	e001      	b.n	8001cce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b01      	cmp	r3, #1
 8001cd2:	d110      	bne.n	8001cf6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001cd8:	687a      	ldr	r2, [r7, #4]
 8001cda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001cdc:	9202      	str	r2, [sp, #8]
 8001cde:	9301      	str	r3, [sp, #4]
 8001ce0:	69fb      	ldr	r3, [r7, #28]
 8001ce2:	9300      	str	r3, [sp, #0]
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	6a3a      	ldr	r2, [r7, #32]
 8001ce8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001cea:	68f8      	ldr	r0, [r7, #12]
 8001cec:	f001 fb2e 	bl	800334c <xTaskCreateStatic>
 8001cf0:	4603      	mov	r3, r0
 8001cf2:	613b      	str	r3, [r7, #16]
 8001cf4:	e013      	b.n	8001d1e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d110      	bne.n	8001d1e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001cfc:	6a3b      	ldr	r3, [r7, #32]
 8001cfe:	b29a      	uxth	r2, r3
 8001d00:	f107 0310 	add.w	r3, r7, #16
 8001d04:	9301      	str	r3, [sp, #4]
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	9300      	str	r3, [sp, #0]
 8001d0a:	68bb      	ldr	r3, [r7, #8]
 8001d0c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f001 fb79 	bl	8003406 <xTaskCreate>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b01      	cmp	r3, #1
 8001d18:	d001      	beq.n	8001d1e <osThreadNew+0x11a>
            hTask = NULL;
 8001d1a:	2300      	movs	r3, #0
 8001d1c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001d1e:	693b      	ldr	r3, [r7, #16]
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3728      	adds	r7, #40	; 0x28
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b086      	sub	sp, #24
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
 8001d30:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d36:	f3ef 8305 	mrs	r3, IPSR
 8001d3a:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d3c:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d003      	beq.n	8001d4a <osThreadSetPriority+0x22>
    stat = osErrorISR;
 8001d42:	f06f 0305 	mvn.w	r3, #5
 8001d46:	617b      	str	r3, [r7, #20]
 8001d48:	e013      	b.n	8001d72 <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d005      	beq.n	8001d5c <osThreadSetPriority+0x34>
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	dd02      	ble.n	8001d5c <osThreadSetPriority+0x34>
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	2b38      	cmp	r3, #56	; 0x38
 8001d5a:	dd03      	ble.n	8001d64 <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 8001d5c:	f06f 0303 	mvn.w	r3, #3
 8001d60:	617b      	str	r3, [r7, #20]
 8001d62:	e006      	b.n	8001d72 <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	6938      	ldr	r0, [r7, #16]
 8001d6e:	f001 fca5 	bl	80036bc <vTaskPrioritySet>
  }

  return (stat);
 8001d72:	697b      	ldr	r3, [r7, #20]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3718      	adds	r7, #24
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}

08001d7c <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b088      	sub	sp, #32
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8001d84:	2300      	movs	r3, #0
 8001d86:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d88:	f3ef 8305 	mrs	r3, IPSR
 8001d8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8001d8e:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d174      	bne.n	8001e7e <osMutexNew+0x102>
    if (attr != NULL) {
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2b00      	cmp	r3, #0
 8001d98:	d003      	beq.n	8001da2 <osMutexNew+0x26>
      type = attr->attr_bits;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	61bb      	str	r3, [r7, #24]
 8001da0:	e001      	b.n	8001da6 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8001da2:	2300      	movs	r3, #0
 8001da4:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8001da6:	69bb      	ldr	r3, [r7, #24]
 8001da8:	f003 0301 	and.w	r3, r3, #1
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d002      	beq.n	8001db6 <osMutexNew+0x3a>
      rmtx = 1U;
 8001db0:	2301      	movs	r3, #1
 8001db2:	617b      	str	r3, [r7, #20]
 8001db4:	e001      	b.n	8001dba <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8001db6:	2300      	movs	r3, #0
 8001db8:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	f003 0308 	and.w	r3, r3, #8
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d15c      	bne.n	8001e7e <osMutexNew+0x102>
      mem = -1;
 8001dc4:	f04f 33ff 	mov.w	r3, #4294967295
 8001dc8:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d015      	beq.n	8001dfc <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	689b      	ldr	r3, [r3, #8]
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d006      	beq.n	8001de6 <osMutexNew+0x6a>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b4f      	cmp	r3, #79	; 0x4f
 8001dde:	d902      	bls.n	8001de6 <osMutexNew+0x6a>
          mem = 1;
 8001de0:	2301      	movs	r3, #1
 8001de2:	613b      	str	r3, [r7, #16]
 8001de4:	e00c      	b.n	8001e00 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	689b      	ldr	r3, [r3, #8]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d108      	bne.n	8001e00 <osMutexNew+0x84>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	68db      	ldr	r3, [r3, #12]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d104      	bne.n	8001e00 <osMutexNew+0x84>
            mem = 0;
 8001df6:	2300      	movs	r3, #0
 8001df8:	613b      	str	r3, [r7, #16]
 8001dfa:	e001      	b.n	8001e00 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	2b01      	cmp	r3, #1
 8001e04:	d112      	bne.n	8001e2c <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8001e06:	697b      	ldr	r3, [r7, #20]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d007      	beq.n	8001e1c <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	689b      	ldr	r3, [r3, #8]
 8001e10:	4619      	mov	r1, r3
 8001e12:	2004      	movs	r0, #4
 8001e14:	f000 fbaf 	bl	8002576 <xQueueCreateMutexStatic>
 8001e18:	61f8      	str	r0, [r7, #28]
 8001e1a:	e016      	b.n	8001e4a <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	4619      	mov	r1, r3
 8001e22:	2001      	movs	r0, #1
 8001e24:	f000 fba7 	bl	8002576 <xQueueCreateMutexStatic>
 8001e28:	61f8      	str	r0, [r7, #28]
 8001e2a:	e00e      	b.n	8001e4a <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8001e2c:	693b      	ldr	r3, [r7, #16]
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d10b      	bne.n	8001e4a <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8001e32:	697b      	ldr	r3, [r7, #20]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d004      	beq.n	8001e42 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8001e38:	2004      	movs	r0, #4
 8001e3a:	f000 fb84 	bl	8002546 <xQueueCreateMutex>
 8001e3e:	61f8      	str	r0, [r7, #28]
 8001e40:	e003      	b.n	8001e4a <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8001e42:	2001      	movs	r0, #1
 8001e44:	f000 fb7f 	bl	8002546 <xQueueCreateMutex>
 8001e48:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8001e4a:	69fb      	ldr	r3, [r7, #28]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d00c      	beq.n	8001e6a <osMutexNew+0xee>
        if (attr != NULL) {
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d003      	beq.n	8001e5e <osMutexNew+0xe2>
          name = attr->name;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	60fb      	str	r3, [r7, #12]
 8001e5c:	e001      	b.n	8001e62 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8001e5e:	2300      	movs	r3, #0
 8001e60:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8001e62:	68f9      	ldr	r1, [r7, #12]
 8001e64:	69f8      	ldr	r0, [r7, #28]
 8001e66:	f001 f9e9 	bl	800323c <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8001e6a:	69fb      	ldr	r3, [r7, #28]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d006      	beq.n	8001e7e <osMutexNew+0x102>
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d003      	beq.n	8001e7e <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8001e76:	69fb      	ldr	r3, [r7, #28]
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8001e7e:	69fb      	ldr	r3, [r7, #28]
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3720      	adds	r7, #32
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b08a      	sub	sp, #40	; 0x28
 8001e8c:	af02      	add	r7, sp, #8
 8001e8e:	60f8      	str	r0, [r7, #12]
 8001e90:	60b9      	str	r1, [r7, #8]
 8001e92:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e98:	f3ef 8305 	mrs	r3, IPSR
 8001e9c:	613b      	str	r3, [r7, #16]
  return(result);
 8001e9e:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d175      	bne.n	8001f90 <osSemaphoreNew+0x108>
 8001ea4:	68fb      	ldr	r3, [r7, #12]
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d072      	beq.n	8001f90 <osSemaphoreNew+0x108>
 8001eaa:	68ba      	ldr	r2, [r7, #8]
 8001eac:	68fb      	ldr	r3, [r7, #12]
 8001eae:	429a      	cmp	r2, r3
 8001eb0:	d86e      	bhi.n	8001f90 <osSemaphoreNew+0x108>
    mem = -1;
 8001eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001eb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d015      	beq.n	8001eea <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	689b      	ldr	r3, [r3, #8]
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d006      	beq.n	8001ed4 <osSemaphoreNew+0x4c>
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	68db      	ldr	r3, [r3, #12]
 8001eca:	2b4f      	cmp	r3, #79	; 0x4f
 8001ecc:	d902      	bls.n	8001ed4 <osSemaphoreNew+0x4c>
        mem = 1;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	61bb      	str	r3, [r7, #24]
 8001ed2:	e00c      	b.n	8001eee <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d108      	bne.n	8001eee <osSemaphoreNew+0x66>
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	68db      	ldr	r3, [r3, #12]
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d104      	bne.n	8001eee <osSemaphoreNew+0x66>
          mem = 0;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	61bb      	str	r3, [r7, #24]
 8001ee8:	e001      	b.n	8001eee <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8001eea:	2300      	movs	r3, #0
 8001eec:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8001eee:	69bb      	ldr	r3, [r7, #24]
 8001ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ef4:	d04c      	beq.n	8001f90 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2b01      	cmp	r3, #1
 8001efa:	d128      	bne.n	8001f4e <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8001efc:	69bb      	ldr	r3, [r7, #24]
 8001efe:	2b01      	cmp	r3, #1
 8001f00:	d10a      	bne.n	8001f18 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	2203      	movs	r2, #3
 8001f08:	9200      	str	r2, [sp, #0]
 8001f0a:	2200      	movs	r2, #0
 8001f0c:	2100      	movs	r1, #0
 8001f0e:	2001      	movs	r0, #1
 8001f10:	f000 fa2a 	bl	8002368 <xQueueGenericCreateStatic>
 8001f14:	61f8      	str	r0, [r7, #28]
 8001f16:	e005      	b.n	8001f24 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8001f18:	2203      	movs	r2, #3
 8001f1a:	2100      	movs	r1, #0
 8001f1c:	2001      	movs	r0, #1
 8001f1e:	f000 fa9b 	bl	8002458 <xQueueGenericCreate>
 8001f22:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8001f24:	69fb      	ldr	r3, [r7, #28]
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d022      	beq.n	8001f70 <osSemaphoreNew+0xe8>
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d01f      	beq.n	8001f70 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8001f30:	2300      	movs	r3, #0
 8001f32:	2200      	movs	r2, #0
 8001f34:	2100      	movs	r1, #0
 8001f36:	69f8      	ldr	r0, [r7, #28]
 8001f38:	f000 fba2 	bl	8002680 <xQueueGenericSend>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b01      	cmp	r3, #1
 8001f40:	d016      	beq.n	8001f70 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8001f42:	69f8      	ldr	r0, [r7, #28]
 8001f44:	f001 f82e 	bl	8002fa4 <vQueueDelete>
            hSemaphore = NULL;
 8001f48:	2300      	movs	r3, #0
 8001f4a:	61fb      	str	r3, [r7, #28]
 8001f4c:	e010      	b.n	8001f70 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8001f4e:	69bb      	ldr	r3, [r7, #24]
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d108      	bne.n	8001f66 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	689b      	ldr	r3, [r3, #8]
 8001f58:	461a      	mov	r2, r3
 8001f5a:	68b9      	ldr	r1, [r7, #8]
 8001f5c:	68f8      	ldr	r0, [r7, #12]
 8001f5e:	f000 fb25 	bl	80025ac <xQueueCreateCountingSemaphoreStatic>
 8001f62:	61f8      	str	r0, [r7, #28]
 8001f64:	e004      	b.n	8001f70 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8001f66:	68b9      	ldr	r1, [r7, #8]
 8001f68:	68f8      	ldr	r0, [r7, #12]
 8001f6a:	f000 fb56 	bl	800261a <xQueueCreateCountingSemaphore>
 8001f6e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8001f70:	69fb      	ldr	r3, [r7, #28]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d00c      	beq.n	8001f90 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d003      	beq.n	8001f84 <osSemaphoreNew+0xfc>
          name = attr->name;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	617b      	str	r3, [r7, #20]
 8001f82:	e001      	b.n	8001f88 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8001f84:	2300      	movs	r3, #0
 8001f86:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8001f88:	6979      	ldr	r1, [r7, #20]
 8001f8a:	69f8      	ldr	r0, [r7, #28]
 8001f8c:	f001 f956 	bl	800323c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8001f90:	69fb      	ldr	r3, [r7, #28]
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3720      	adds	r7, #32
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b086      	sub	sp, #24
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
 8001fa4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8001faa:	2300      	movs	r3, #0
 8001fac:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d103      	bne.n	8001fbc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8001fb4:	f06f 0303 	mvn.w	r3, #3
 8001fb8:	617b      	str	r3, [r7, #20]
 8001fba:	e039      	b.n	8002030 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001fbc:	f3ef 8305 	mrs	r3, IPSR
 8001fc0:	60fb      	str	r3, [r7, #12]
  return(result);
 8001fc2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d022      	beq.n	800200e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8001fc8:	683b      	ldr	r3, [r7, #0]
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d003      	beq.n	8001fd6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8001fce:	f06f 0303 	mvn.w	r3, #3
 8001fd2:	617b      	str	r3, [r7, #20]
 8001fd4:	e02c      	b.n	8002030 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8001fd6:	2300      	movs	r3, #0
 8001fd8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8001fda:	f107 0308 	add.w	r3, r7, #8
 8001fde:	461a      	mov	r2, r3
 8001fe0:	2100      	movs	r1, #0
 8001fe2:	6938      	ldr	r0, [r7, #16]
 8001fe4:	f000 ff5e 	bl	8002ea4 <xQueueReceiveFromISR>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d003      	beq.n	8001ff6 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8001fee:	f06f 0302 	mvn.w	r3, #2
 8001ff2:	617b      	str	r3, [r7, #20]
 8001ff4:	e01c      	b.n	8002030 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8001ff6:	68bb      	ldr	r3, [r7, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d019      	beq.n	8002030 <osSemaphoreAcquire+0x94>
 8001ffc:	4b0f      	ldr	r3, [pc, #60]	; (800203c <osSemaphoreAcquire+0xa0>)
 8001ffe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002002:	601a      	str	r2, [r3, #0]
 8002004:	f3bf 8f4f 	dsb	sy
 8002008:	f3bf 8f6f 	isb	sy
 800200c:	e010      	b.n	8002030 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800200e:	6839      	ldr	r1, [r7, #0]
 8002010:	6938      	ldr	r0, [r7, #16]
 8002012:	f000 fe3b 	bl	8002c8c <xQueueSemaphoreTake>
 8002016:	4603      	mov	r3, r0
 8002018:	2b01      	cmp	r3, #1
 800201a:	d009      	beq.n	8002030 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002022:	f06f 0301 	mvn.w	r3, #1
 8002026:	617b      	str	r3, [r7, #20]
 8002028:	e002      	b.n	8002030 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800202a:	f06f 0302 	mvn.w	r3, #2
 800202e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002030:	697b      	ldr	r3, [r7, #20]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3718      	adds	r7, #24
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	e000ed04 	.word	0xe000ed04

08002040 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800204c:	2300      	movs	r3, #0
 800204e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d103      	bne.n	800205e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002056:	f06f 0303 	mvn.w	r3, #3
 800205a:	617b      	str	r3, [r7, #20]
 800205c:	e02c      	b.n	80020b8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800205e:	f3ef 8305 	mrs	r3, IPSR
 8002062:	60fb      	str	r3, [r7, #12]
  return(result);
 8002064:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002066:	2b00      	cmp	r3, #0
 8002068:	d01a      	beq.n	80020a0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800206a:	2300      	movs	r3, #0
 800206c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800206e:	f107 0308 	add.w	r3, r7, #8
 8002072:	4619      	mov	r1, r3
 8002074:	6938      	ldr	r0, [r7, #16]
 8002076:	f000 fc9c 	bl	80029b2 <xQueueGiveFromISR>
 800207a:	4603      	mov	r3, r0
 800207c:	2b01      	cmp	r3, #1
 800207e:	d003      	beq.n	8002088 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8002080:	f06f 0302 	mvn.w	r3, #2
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	e017      	b.n	80020b8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d014      	beq.n	80020b8 <osSemaphoreRelease+0x78>
 800208e:	4b0d      	ldr	r3, [pc, #52]	; (80020c4 <osSemaphoreRelease+0x84>)
 8002090:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002094:	601a      	str	r2, [r3, #0]
 8002096:	f3bf 8f4f 	dsb	sy
 800209a:	f3bf 8f6f 	isb	sy
 800209e:	e00b      	b.n	80020b8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80020a0:	2300      	movs	r3, #0
 80020a2:	2200      	movs	r2, #0
 80020a4:	2100      	movs	r1, #0
 80020a6:	6938      	ldr	r0, [r7, #16]
 80020a8:	f000 faea 	bl	8002680 <xQueueGenericSend>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b01      	cmp	r3, #1
 80020b0:	d002      	beq.n	80020b8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80020b2:	f06f 0302 	mvn.w	r3, #2
 80020b6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80020b8:	697b      	ldr	r3, [r7, #20]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3718      	adds	r7, #24
 80020be:	46bd      	mov	sp, r7
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	e000ed04 	.word	0xe000ed04

080020c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80020c8:	b480      	push	{r7}
 80020ca:	b085      	sub	sp, #20
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	4a07      	ldr	r2, [pc, #28]	; (80020f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80020d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80020da:	68bb      	ldr	r3, [r7, #8]
 80020dc:	4a06      	ldr	r2, [pc, #24]	; (80020f8 <vApplicationGetIdleTaskMemory+0x30>)
 80020de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2280      	movs	r2, #128	; 0x80
 80020e4:	601a      	str	r2, [r3, #0]
}
 80020e6:	bf00      	nop
 80020e8:	3714      	adds	r7, #20
 80020ea:	46bd      	mov	sp, r7
 80020ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020f0:	4770      	bx	lr
 80020f2:	bf00      	nop
 80020f4:	200000f4 	.word	0x200000f4
 80020f8:	200001b0 	.word	0x200001b0

080020fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80020fc:	b480      	push	{r7}
 80020fe:	b085      	sub	sp, #20
 8002100:	af00      	add	r7, sp, #0
 8002102:	60f8      	str	r0, [r7, #12]
 8002104:	60b9      	str	r1, [r7, #8]
 8002106:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002108:	68fb      	ldr	r3, [r7, #12]
 800210a:	4a07      	ldr	r2, [pc, #28]	; (8002128 <vApplicationGetTimerTaskMemory+0x2c>)
 800210c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	4a06      	ldr	r2, [pc, #24]	; (800212c <vApplicationGetTimerTaskMemory+0x30>)
 8002112:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	f44f 7280 	mov.w	r2, #256	; 0x100
 800211a:	601a      	str	r2, [r3, #0]
}
 800211c:	bf00      	nop
 800211e:	3714      	adds	r7, #20
 8002120:	46bd      	mov	sp, r7
 8002122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002126:	4770      	bx	lr
 8002128:	200003b0 	.word	0x200003b0
 800212c:	2000046c 	.word	0x2000046c

08002130 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002130:	b480      	push	{r7}
 8002132:	b083      	sub	sp, #12
 8002134:	af00      	add	r7, sp, #0
 8002136:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	f103 0208 	add.w	r2, r3, #8
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	f04f 32ff 	mov.w	r2, #4294967295
 8002148:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	f103 0208 	add.w	r2, r3, #8
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f103 0208 	add.w	r2, r3, #8
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002164:	bf00      	nop
 8002166:	370c      	adds	r7, #12
 8002168:	46bd      	mov	sp, r7
 800216a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800216e:	4770      	bx	lr

08002170 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8002170:	b480      	push	{r7}
 8002172:	b083      	sub	sp, #12
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2200      	movs	r2, #0
 800217c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800217e:	bf00      	nop
 8002180:	370c      	adds	r7, #12
 8002182:	46bd      	mov	sp, r7
 8002184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002188:	4770      	bx	lr

0800218a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800218a:	b480      	push	{r7}
 800218c:	b085      	sub	sp, #20
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
 8002192:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	685b      	ldr	r3, [r3, #4]
 8002198:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	68fa      	ldr	r2, [r7, #12]
 800219e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80021a0:	68fb      	ldr	r3, [r7, #12]
 80021a2:	689a      	ldr	r2, [r3, #8]
 80021a4:	683b      	ldr	r3, [r7, #0]
 80021a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	689b      	ldr	r3, [r3, #8]
 80021ac:	683a      	ldr	r2, [r7, #0]
 80021ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	683a      	ldr	r2, [r7, #0]
 80021b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	1c5a      	adds	r2, r3, #1
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	601a      	str	r2, [r3, #0]
}
 80021c6:	bf00      	nop
 80021c8:	3714      	adds	r7, #20
 80021ca:	46bd      	mov	sp, r7
 80021cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d0:	4770      	bx	lr

080021d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80021d2:	b480      	push	{r7}
 80021d4:	b085      	sub	sp, #20
 80021d6:	af00      	add	r7, sp, #0
 80021d8:	6078      	str	r0, [r7, #4]
 80021da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80021e2:	68bb      	ldr	r3, [r7, #8]
 80021e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80021e8:	d103      	bne.n	80021f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	60fb      	str	r3, [r7, #12]
 80021f0:	e00c      	b.n	800220c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	3308      	adds	r3, #8
 80021f6:	60fb      	str	r3, [r7, #12]
 80021f8:	e002      	b.n	8002200 <vListInsert+0x2e>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	60fb      	str	r3, [r7, #12]
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	68ba      	ldr	r2, [r7, #8]
 8002208:	429a      	cmp	r2, r3
 800220a:	d2f6      	bcs.n	80021fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	685a      	ldr	r2, [r3, #4]
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	685b      	ldr	r3, [r3, #4]
 8002218:	683a      	ldr	r2, [r7, #0]
 800221a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800221c:	683b      	ldr	r3, [r7, #0]
 800221e:	68fa      	ldr	r2, [r7, #12]
 8002220:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	687a      	ldr	r2, [r7, #4]
 800222c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	1c5a      	adds	r2, r3, #1
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	601a      	str	r2, [r3, #0]
}
 8002238:	bf00      	nop
 800223a:	3714      	adds	r7, #20
 800223c:	46bd      	mov	sp, r7
 800223e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002242:	4770      	bx	lr

08002244 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002244:	b480      	push	{r7}
 8002246:	b085      	sub	sp, #20
 8002248:	af00      	add	r7, sp, #0
 800224a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	691b      	ldr	r3, [r3, #16]
 8002250:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	687a      	ldr	r2, [r7, #4]
 8002258:	6892      	ldr	r2, [r2, #8]
 800225a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6852      	ldr	r2, [r2, #4]
 8002264:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	685b      	ldr	r3, [r3, #4]
 800226a:	687a      	ldr	r2, [r7, #4]
 800226c:	429a      	cmp	r2, r3
 800226e:	d103      	bne.n	8002278 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	68fb      	ldr	r3, [r7, #12]
 8002276:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	1e5a      	subs	r2, r3, #1
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b084      	sub	sp, #16
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
 80022a0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d10a      	bne.n	80022c2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022b0:	f383 8811 	msr	BASEPRI, r3
 80022b4:	f3bf 8f6f 	isb	sy
 80022b8:	f3bf 8f4f 	dsb	sy
 80022bc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022be:	bf00      	nop
 80022c0:	e7fe      	b.n	80022c0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80022c2:	f002 fd4f 	bl	8004d64 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681a      	ldr	r2, [r3, #0]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022ce:	68f9      	ldr	r1, [r7, #12]
 80022d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022d2:	fb01 f303 	mul.w	r3, r1, r3
 80022d6:	441a      	add	r2, r3
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80022dc:	68fb      	ldr	r3, [r7, #12]
 80022de:	2200      	movs	r2, #0
 80022e0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80022e2:	68fb      	ldr	r3, [r7, #12]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	681a      	ldr	r2, [r3, #0]
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f2:	3b01      	subs	r3, #1
 80022f4:	68f9      	ldr	r1, [r7, #12]
 80022f6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80022f8:	fb01 f303 	mul.w	r3, r1, r3
 80022fc:	441a      	add	r2, r3
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002302:	68fb      	ldr	r3, [r7, #12]
 8002304:	22ff      	movs	r2, #255	; 0xff
 8002306:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	22ff      	movs	r2, #255	; 0xff
 800230e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d114      	bne.n	8002342 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	691b      	ldr	r3, [r3, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	d01a      	beq.n	8002356 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	3310      	adds	r3, #16
 8002324:	4618      	mov	r0, r3
 8002326:	f001 fd01 	bl	8003d2c <xTaskRemoveFromEventList>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d012      	beq.n	8002356 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002330:	4b0c      	ldr	r3, [pc, #48]	; (8002364 <xQueueGenericReset+0xcc>)
 8002332:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002336:	601a      	str	r2, [r3, #0]
 8002338:	f3bf 8f4f 	dsb	sy
 800233c:	f3bf 8f6f 	isb	sy
 8002340:	e009      	b.n	8002356 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002342:	68fb      	ldr	r3, [r7, #12]
 8002344:	3310      	adds	r3, #16
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fef2 	bl	8002130 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	3324      	adds	r3, #36	; 0x24
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff feed 	bl	8002130 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002356:	f002 fd35 	bl	8004dc4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800235a:	2301      	movs	r3, #1
}
 800235c:	4618      	mov	r0, r3
 800235e:	3710      	adds	r7, #16
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}
 8002364:	e000ed04 	.word	0xe000ed04

08002368 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002368:	b580      	push	{r7, lr}
 800236a:	b08e      	sub	sp, #56	; 0x38
 800236c:	af02      	add	r7, sp, #8
 800236e:	60f8      	str	r0, [r7, #12]
 8002370:	60b9      	str	r1, [r7, #8]
 8002372:	607a      	str	r2, [r7, #4]
 8002374:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d10a      	bne.n	8002392 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800237c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002380:	f383 8811 	msr	BASEPRI, r3
 8002384:	f3bf 8f6f 	isb	sy
 8002388:	f3bf 8f4f 	dsb	sy
 800238c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800238e:	bf00      	nop
 8002390:	e7fe      	b.n	8002390 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	2b00      	cmp	r3, #0
 8002396:	d10a      	bne.n	80023ae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800239c:	f383 8811 	msr	BASEPRI, r3
 80023a0:	f3bf 8f6f 	isb	sy
 80023a4:	f3bf 8f4f 	dsb	sy
 80023a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80023aa:	bf00      	nop
 80023ac:	e7fe      	b.n	80023ac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d002      	beq.n	80023ba <xQueueGenericCreateStatic+0x52>
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d001      	beq.n	80023be <xQueueGenericCreateStatic+0x56>
 80023ba:	2301      	movs	r3, #1
 80023bc:	e000      	b.n	80023c0 <xQueueGenericCreateStatic+0x58>
 80023be:	2300      	movs	r3, #0
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10a      	bne.n	80023da <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80023c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c8:	f383 8811 	msr	BASEPRI, r3
 80023cc:	f3bf 8f6f 	isb	sy
 80023d0:	f3bf 8f4f 	dsb	sy
 80023d4:	623b      	str	r3, [r7, #32]
}
 80023d6:	bf00      	nop
 80023d8:	e7fe      	b.n	80023d8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d102      	bne.n	80023e6 <xQueueGenericCreateStatic+0x7e>
 80023e0:	68bb      	ldr	r3, [r7, #8]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d101      	bne.n	80023ea <xQueueGenericCreateStatic+0x82>
 80023e6:	2301      	movs	r3, #1
 80023e8:	e000      	b.n	80023ec <xQueueGenericCreateStatic+0x84>
 80023ea:	2300      	movs	r3, #0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d10a      	bne.n	8002406 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80023f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023f4:	f383 8811 	msr	BASEPRI, r3
 80023f8:	f3bf 8f6f 	isb	sy
 80023fc:	f3bf 8f4f 	dsb	sy
 8002400:	61fb      	str	r3, [r7, #28]
}
 8002402:	bf00      	nop
 8002404:	e7fe      	b.n	8002404 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002406:	2350      	movs	r3, #80	; 0x50
 8002408:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800240a:	697b      	ldr	r3, [r7, #20]
 800240c:	2b50      	cmp	r3, #80	; 0x50
 800240e:	d00a      	beq.n	8002426 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002410:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002414:	f383 8811 	msr	BASEPRI, r3
 8002418:	f3bf 8f6f 	isb	sy
 800241c:	f3bf 8f4f 	dsb	sy
 8002420:	61bb      	str	r3, [r7, #24]
}
 8002422:	bf00      	nop
 8002424:	e7fe      	b.n	8002424 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002426:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800242c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800242e:	2b00      	cmp	r3, #0
 8002430:	d00d      	beq.n	800244e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002434:	2201      	movs	r2, #1
 8002436:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800243a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	9300      	str	r3, [sp, #0]
 8002442:	4613      	mov	r3, r2
 8002444:	687a      	ldr	r2, [r7, #4]
 8002446:	68b9      	ldr	r1, [r7, #8]
 8002448:	68f8      	ldr	r0, [r7, #12]
 800244a:	f000 f83f 	bl	80024cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800244e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002450:	4618      	mov	r0, r3
 8002452:	3730      	adds	r7, #48	; 0x30
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}

08002458 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af02      	add	r7, sp, #8
 800245e:	60f8      	str	r0, [r7, #12]
 8002460:	60b9      	str	r1, [r7, #8]
 8002462:	4613      	mov	r3, r2
 8002464:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d10a      	bne.n	8002482 <xQueueGenericCreate+0x2a>
	__asm volatile
 800246c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002470:	f383 8811 	msr	BASEPRI, r3
 8002474:	f3bf 8f6f 	isb	sy
 8002478:	f3bf 8f4f 	dsb	sy
 800247c:	613b      	str	r3, [r7, #16]
}
 800247e:	bf00      	nop
 8002480:	e7fe      	b.n	8002480 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	68ba      	ldr	r2, [r7, #8]
 8002486:	fb02 f303 	mul.w	r3, r2, r3
 800248a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	3350      	adds	r3, #80	; 0x50
 8002490:	4618      	mov	r0, r3
 8002492:	f002 fd89 	bl	8004fa8 <pvPortMalloc>
 8002496:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8002498:	69bb      	ldr	r3, [r7, #24]
 800249a:	2b00      	cmp	r3, #0
 800249c:	d011      	beq.n	80024c2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024a2:	697b      	ldr	r3, [r7, #20]
 80024a4:	3350      	adds	r3, #80	; 0x50
 80024a6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80024a8:	69bb      	ldr	r3, [r7, #24]
 80024aa:	2200      	movs	r2, #0
 80024ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80024b0:	79fa      	ldrb	r2, [r7, #7]
 80024b2:	69bb      	ldr	r3, [r7, #24]
 80024b4:	9300      	str	r3, [sp, #0]
 80024b6:	4613      	mov	r3, r2
 80024b8:	697a      	ldr	r2, [r7, #20]
 80024ba:	68b9      	ldr	r1, [r7, #8]
 80024bc:	68f8      	ldr	r0, [r7, #12]
 80024be:	f000 f805 	bl	80024cc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80024c2:	69bb      	ldr	r3, [r7, #24]
	}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3720      	adds	r7, #32
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}

080024cc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b084      	sub	sp, #16
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	60f8      	str	r0, [r7, #12]
 80024d4:	60b9      	str	r1, [r7, #8]
 80024d6:	607a      	str	r2, [r7, #4]
 80024d8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d103      	bne.n	80024e8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80024e0:	69bb      	ldr	r3, [r7, #24]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	601a      	str	r2, [r3, #0]
 80024e6:	e002      	b.n	80024ee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	68fa      	ldr	r2, [r7, #12]
 80024f2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80024f4:	69bb      	ldr	r3, [r7, #24]
 80024f6:	68ba      	ldr	r2, [r7, #8]
 80024f8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80024fa:	2101      	movs	r1, #1
 80024fc:	69b8      	ldr	r0, [r7, #24]
 80024fe:	f7ff fecb 	bl	8002298 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002502:	69bb      	ldr	r3, [r7, #24]
 8002504:	78fa      	ldrb	r2, [r7, #3]
 8002506:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800250a:	bf00      	nop
 800250c:	3710      	adds	r7, #16
 800250e:	46bd      	mov	sp, r7
 8002510:	bd80      	pop	{r7, pc}

08002512 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 8002512:	b580      	push	{r7, lr}
 8002514:	b082      	sub	sp, #8
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d00e      	beq.n	800253e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2200      	movs	r2, #0
 8002524:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 8002532:	2300      	movs	r3, #0
 8002534:	2200      	movs	r2, #0
 8002536:	2100      	movs	r1, #0
 8002538:	6878      	ldr	r0, [r7, #4]
 800253a:	f000 f8a1 	bl	8002680 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800253e:	bf00      	nop
 8002540:	3708      	adds	r7, #8
 8002542:	46bd      	mov	sp, r7
 8002544:	bd80      	pop	{r7, pc}

08002546 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 8002546:	b580      	push	{r7, lr}
 8002548:	b086      	sub	sp, #24
 800254a:	af00      	add	r7, sp, #0
 800254c:	4603      	mov	r3, r0
 800254e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002550:	2301      	movs	r3, #1
 8002552:	617b      	str	r3, [r7, #20]
 8002554:	2300      	movs	r3, #0
 8002556:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002558:	79fb      	ldrb	r3, [r7, #7]
 800255a:	461a      	mov	r2, r3
 800255c:	6939      	ldr	r1, [r7, #16]
 800255e:	6978      	ldr	r0, [r7, #20]
 8002560:	f7ff ff7a 	bl	8002458 <xQueueGenericCreate>
 8002564:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 8002566:	68f8      	ldr	r0, [r7, #12]
 8002568:	f7ff ffd3 	bl	8002512 <prvInitialiseMutex>

		return xNewQueue;
 800256c:	68fb      	ldr	r3, [r7, #12]
	}
 800256e:	4618      	mov	r0, r3
 8002570:	3718      	adds	r7, #24
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8002576:	b580      	push	{r7, lr}
 8002578:	b088      	sub	sp, #32
 800257a:	af02      	add	r7, sp, #8
 800257c:	4603      	mov	r3, r0
 800257e:	6039      	str	r1, [r7, #0]
 8002580:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002582:	2301      	movs	r3, #1
 8002584:	617b      	str	r3, [r7, #20]
 8002586:	2300      	movs	r3, #0
 8002588:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800258a:	79fb      	ldrb	r3, [r7, #7]
 800258c:	9300      	str	r3, [sp, #0]
 800258e:	683b      	ldr	r3, [r7, #0]
 8002590:	2200      	movs	r2, #0
 8002592:	6939      	ldr	r1, [r7, #16]
 8002594:	6978      	ldr	r0, [r7, #20]
 8002596:	f7ff fee7 	bl	8002368 <xQueueGenericCreateStatic>
 800259a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800259c:	68f8      	ldr	r0, [r7, #12]
 800259e:	f7ff ffb8 	bl	8002512 <prvInitialiseMutex>

		return xNewQueue;
 80025a2:	68fb      	ldr	r3, [r7, #12]
	}
 80025a4:	4618      	mov	r0, r3
 80025a6:	3718      	adds	r7, #24
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}

080025ac <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b08a      	sub	sp, #40	; 0x28
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	60b9      	str	r1, [r7, #8]
 80025b6:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d10a      	bne.n	80025d4 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 80025be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025c2:	f383 8811 	msr	BASEPRI, r3
 80025c6:	f3bf 8f6f 	isb	sy
 80025ca:	f3bf 8f4f 	dsb	sy
 80025ce:	61bb      	str	r3, [r7, #24]
}
 80025d0:	bf00      	nop
 80025d2:	e7fe      	b.n	80025d2 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 80025d4:	68ba      	ldr	r2, [r7, #8]
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d90a      	bls.n	80025f2 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 80025dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025e0:	f383 8811 	msr	BASEPRI, r3
 80025e4:	f3bf 8f6f 	isb	sy
 80025e8:	f3bf 8f4f 	dsb	sy
 80025ec:	617b      	str	r3, [r7, #20]
}
 80025ee:	bf00      	nop
 80025f0:	e7fe      	b.n	80025f0 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80025f2:	2302      	movs	r3, #2
 80025f4:	9300      	str	r3, [sp, #0]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2200      	movs	r2, #0
 80025fa:	2100      	movs	r1, #0
 80025fc:	68f8      	ldr	r0, [r7, #12]
 80025fe:	f7ff feb3 	bl	8002368 <xQueueGenericCreateStatic>
 8002602:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8002604:	69fb      	ldr	r3, [r7, #28]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d002      	beq.n	8002610 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	68ba      	ldr	r2, [r7, #8]
 800260e:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002610:	69fb      	ldr	r3, [r7, #28]
	}
 8002612:	4618      	mov	r0, r3
 8002614:	3720      	adds	r7, #32
 8002616:	46bd      	mov	sp, r7
 8002618:	bd80      	pop	{r7, pc}

0800261a <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800261a:	b580      	push	{r7, lr}
 800261c:	b086      	sub	sp, #24
 800261e:	af00      	add	r7, sp, #0
 8002620:	6078      	str	r0, [r7, #4]
 8002622:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d10a      	bne.n	8002640 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800262a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800262e:	f383 8811 	msr	BASEPRI, r3
 8002632:	f3bf 8f6f 	isb	sy
 8002636:	f3bf 8f4f 	dsb	sy
 800263a:	613b      	str	r3, [r7, #16]
}
 800263c:	bf00      	nop
 800263e:	e7fe      	b.n	800263e <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8002640:	683a      	ldr	r2, [r7, #0]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	429a      	cmp	r2, r3
 8002646:	d90a      	bls.n	800265e <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8002648:	f04f 0350 	mov.w	r3, #80	; 0x50
 800264c:	f383 8811 	msr	BASEPRI, r3
 8002650:	f3bf 8f6f 	isb	sy
 8002654:	f3bf 8f4f 	dsb	sy
 8002658:	60fb      	str	r3, [r7, #12]
}
 800265a:	bf00      	nop
 800265c:	e7fe      	b.n	800265c <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800265e:	2202      	movs	r2, #2
 8002660:	2100      	movs	r1, #0
 8002662:	6878      	ldr	r0, [r7, #4]
 8002664:	f7ff fef8 	bl	8002458 <xQueueGenericCreate>
 8002668:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	2b00      	cmp	r3, #0
 800266e:	d002      	beq.n	8002676 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	683a      	ldr	r2, [r7, #0]
 8002674:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8002676:	697b      	ldr	r3, [r7, #20]
	}
 8002678:	4618      	mov	r0, r3
 800267a:	3718      	adds	r7, #24
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}

08002680 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b08e      	sub	sp, #56	; 0x38
 8002684:	af00      	add	r7, sp, #0
 8002686:	60f8      	str	r0, [r7, #12]
 8002688:	60b9      	str	r1, [r7, #8]
 800268a:	607a      	str	r2, [r7, #4]
 800268c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800268e:	2300      	movs	r3, #0
 8002690:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <xQueueGenericSend+0x32>
	__asm volatile
 800269c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026ae:	bf00      	nop
 80026b0:	e7fe      	b.n	80026b0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d103      	bne.n	80026c0 <xQueueGenericSend+0x40>
 80026b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <xQueueGenericSend+0x44>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <xQueueGenericSend+0x46>
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <xQueueGenericSend+0x60>
	__asm volatile
 80026ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ce:	f383 8811 	msr	BASEPRI, r3
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026dc:	bf00      	nop
 80026de:	e7fe      	b.n	80026de <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d103      	bne.n	80026ee <xQueueGenericSend+0x6e>
 80026e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <xQueueGenericSend+0x72>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <xQueueGenericSend+0x74>
 80026f2:	2300      	movs	r3, #0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <xQueueGenericSend+0x8e>
	__asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	623b      	str	r3, [r7, #32]
}
 800270a:	bf00      	nop
 800270c:	e7fe      	b.n	800270c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800270e:	f001 fccf 	bl	80040b0 <xTaskGetSchedulerState>
 8002712:	4603      	mov	r3, r0
 8002714:	2b00      	cmp	r3, #0
 8002716:	d102      	bne.n	800271e <xQueueGenericSend+0x9e>
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2b00      	cmp	r3, #0
 800271c:	d101      	bne.n	8002722 <xQueueGenericSend+0xa2>
 800271e:	2301      	movs	r3, #1
 8002720:	e000      	b.n	8002724 <xQueueGenericSend+0xa4>
 8002722:	2300      	movs	r3, #0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d10a      	bne.n	800273e <xQueueGenericSend+0xbe>
	__asm volatile
 8002728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800272c:	f383 8811 	msr	BASEPRI, r3
 8002730:	f3bf 8f6f 	isb	sy
 8002734:	f3bf 8f4f 	dsb	sy
 8002738:	61fb      	str	r3, [r7, #28]
}
 800273a:	bf00      	nop
 800273c:	e7fe      	b.n	800273c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800273e:	f002 fb11 	bl	8004d64 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002742:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002744:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002748:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800274a:	429a      	cmp	r2, r3
 800274c:	d302      	bcc.n	8002754 <xQueueGenericSend+0xd4>
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	2b02      	cmp	r3, #2
 8002752:	d129      	bne.n	80027a8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002754:	683a      	ldr	r2, [r7, #0]
 8002756:	68b9      	ldr	r1, [r7, #8]
 8002758:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800275a:	f000 fc5e 	bl	800301a <prvCopyDataToQueue>
 800275e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002760:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002764:	2b00      	cmp	r3, #0
 8002766:	d010      	beq.n	800278a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800276a:	3324      	adds	r3, #36	; 0x24
 800276c:	4618      	mov	r0, r3
 800276e:	f001 fadd 	bl	8003d2c <xTaskRemoveFromEventList>
 8002772:	4603      	mov	r3, r0
 8002774:	2b00      	cmp	r3, #0
 8002776:	d013      	beq.n	80027a0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002778:	4b3f      	ldr	r3, [pc, #252]	; (8002878 <xQueueGenericSend+0x1f8>)
 800277a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	f3bf 8f4f 	dsb	sy
 8002784:	f3bf 8f6f 	isb	sy
 8002788:	e00a      	b.n	80027a0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800278a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002790:	4b39      	ldr	r3, [pc, #228]	; (8002878 <xQueueGenericSend+0x1f8>)
 8002792:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002796:	601a      	str	r2, [r3, #0]
 8002798:	f3bf 8f4f 	dsb	sy
 800279c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80027a0:	f002 fb10 	bl	8004dc4 <vPortExitCritical>
				return pdPASS;
 80027a4:	2301      	movs	r3, #1
 80027a6:	e063      	b.n	8002870 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d103      	bne.n	80027b6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80027ae:	f002 fb09 	bl	8004dc4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80027b2:	2300      	movs	r3, #0
 80027b4:	e05c      	b.n	8002870 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80027b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d106      	bne.n	80027ca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80027bc:	f107 0314 	add.w	r3, r7, #20
 80027c0:	4618      	mov	r0, r3
 80027c2:	f001 fb17 	bl	8003df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80027c6:	2301      	movs	r3, #1
 80027c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80027ca:	f002 fafb 	bl	8004dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80027ce:	f001 f883 	bl	80038d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80027d2:	f002 fac7 	bl	8004d64 <vPortEnterCritical>
 80027d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80027dc:	b25b      	sxtb	r3, r3
 80027de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027e2:	d103      	bne.n	80027ec <xQueueGenericSend+0x16c>
 80027e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027e6:	2200      	movs	r2, #0
 80027e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80027f2:	b25b      	sxtb	r3, r3
 80027f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80027f8:	d103      	bne.n	8002802 <xQueueGenericSend+0x182>
 80027fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80027fc:	2200      	movs	r2, #0
 80027fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002802:	f002 fadf 	bl	8004dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002806:	1d3a      	adds	r2, r7, #4
 8002808:	f107 0314 	add.w	r3, r7, #20
 800280c:	4611      	mov	r1, r2
 800280e:	4618      	mov	r0, r3
 8002810:	f001 fb06 	bl	8003e20 <xTaskCheckForTimeOut>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d124      	bne.n	8002864 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800281a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800281c:	f000 fcf5 	bl	800320a <prvIsQueueFull>
 8002820:	4603      	mov	r3, r0
 8002822:	2b00      	cmp	r3, #0
 8002824:	d018      	beq.n	8002858 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002826:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002828:	3310      	adds	r3, #16
 800282a:	687a      	ldr	r2, [r7, #4]
 800282c:	4611      	mov	r1, r2
 800282e:	4618      	mov	r0, r3
 8002830:	f001 fa2c 	bl	8003c8c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002834:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002836:	f000 fc80 	bl	800313a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800283a:	f001 f85b 	bl	80038f4 <xTaskResumeAll>
 800283e:	4603      	mov	r3, r0
 8002840:	2b00      	cmp	r3, #0
 8002842:	f47f af7c 	bne.w	800273e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002846:	4b0c      	ldr	r3, [pc, #48]	; (8002878 <xQueueGenericSend+0x1f8>)
 8002848:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800284c:	601a      	str	r2, [r3, #0]
 800284e:	f3bf 8f4f 	dsb	sy
 8002852:	f3bf 8f6f 	isb	sy
 8002856:	e772      	b.n	800273e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002858:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800285a:	f000 fc6e 	bl	800313a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800285e:	f001 f849 	bl	80038f4 <xTaskResumeAll>
 8002862:	e76c      	b.n	800273e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002864:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002866:	f000 fc68 	bl	800313a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800286a:	f001 f843 	bl	80038f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800286e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002870:	4618      	mov	r0, r3
 8002872:	3738      	adds	r7, #56	; 0x38
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	e000ed04 	.word	0xe000ed04

0800287c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b090      	sub	sp, #64	; 0x40
 8002880:	af00      	add	r7, sp, #0
 8002882:	60f8      	str	r0, [r7, #12]
 8002884:	60b9      	str	r1, [r7, #8]
 8002886:	607a      	str	r2, [r7, #4]
 8002888:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800288e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002890:	2b00      	cmp	r3, #0
 8002892:	d10a      	bne.n	80028aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002898:	f383 8811 	msr	BASEPRI, r3
 800289c:	f3bf 8f6f 	isb	sy
 80028a0:	f3bf 8f4f 	dsb	sy
 80028a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80028a6:	bf00      	nop
 80028a8:	e7fe      	b.n	80028a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d103      	bne.n	80028b8 <xQueueGenericSendFromISR+0x3c>
 80028b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d101      	bne.n	80028bc <xQueueGenericSendFromISR+0x40>
 80028b8:	2301      	movs	r3, #1
 80028ba:	e000      	b.n	80028be <xQueueGenericSendFromISR+0x42>
 80028bc:	2300      	movs	r3, #0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10a      	bne.n	80028d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80028c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c6:	f383 8811 	msr	BASEPRI, r3
 80028ca:	f3bf 8f6f 	isb	sy
 80028ce:	f3bf 8f4f 	dsb	sy
 80028d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80028d4:	bf00      	nop
 80028d6:	e7fe      	b.n	80028d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	2b02      	cmp	r3, #2
 80028dc:	d103      	bne.n	80028e6 <xQueueGenericSendFromISR+0x6a>
 80028de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	2b01      	cmp	r3, #1
 80028e4:	d101      	bne.n	80028ea <xQueueGenericSendFromISR+0x6e>
 80028e6:	2301      	movs	r3, #1
 80028e8:	e000      	b.n	80028ec <xQueueGenericSendFromISR+0x70>
 80028ea:	2300      	movs	r3, #0
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d10a      	bne.n	8002906 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80028f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f4:	f383 8811 	msr	BASEPRI, r3
 80028f8:	f3bf 8f6f 	isb	sy
 80028fc:	f3bf 8f4f 	dsb	sy
 8002900:	623b      	str	r3, [r7, #32]
}
 8002902:	bf00      	nop
 8002904:	e7fe      	b.n	8002904 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002906:	f002 fb0f 	bl	8004f28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800290a:	f3ef 8211 	mrs	r2, BASEPRI
 800290e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002912:	f383 8811 	msr	BASEPRI, r3
 8002916:	f3bf 8f6f 	isb	sy
 800291a:	f3bf 8f4f 	dsb	sy
 800291e:	61fa      	str	r2, [r7, #28]
 8002920:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002922:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002924:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002926:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800292a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800292c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800292e:	429a      	cmp	r2, r3
 8002930:	d302      	bcc.n	8002938 <xQueueGenericSendFromISR+0xbc>
 8002932:	683b      	ldr	r3, [r7, #0]
 8002934:	2b02      	cmp	r3, #2
 8002936:	d12f      	bne.n	8002998 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002938:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800293a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800293e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002942:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002944:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002946:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002948:	683a      	ldr	r2, [r7, #0]
 800294a:	68b9      	ldr	r1, [r7, #8]
 800294c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800294e:	f000 fb64 	bl	800301a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002952:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800295a:	d112      	bne.n	8002982 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800295c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800295e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002960:	2b00      	cmp	r3, #0
 8002962:	d016      	beq.n	8002992 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002964:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002966:	3324      	adds	r3, #36	; 0x24
 8002968:	4618      	mov	r0, r3
 800296a:	f001 f9df 	bl	8003d2c <xTaskRemoveFromEventList>
 800296e:	4603      	mov	r3, r0
 8002970:	2b00      	cmp	r3, #0
 8002972:	d00e      	beq.n	8002992 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2b00      	cmp	r3, #0
 8002978:	d00b      	beq.n	8002992 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	e007      	b.n	8002992 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002982:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002986:	3301      	adds	r3, #1
 8002988:	b2db      	uxtb	r3, r3
 800298a:	b25a      	sxtb	r2, r3
 800298c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800298e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002992:	2301      	movs	r3, #1
 8002994:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002996:	e001      	b.n	800299c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002998:	2300      	movs	r3, #0
 800299a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800299c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800299e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80029a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80029a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80029aa:	4618      	mov	r0, r3
 80029ac:	3740      	adds	r7, #64	; 0x40
 80029ae:	46bd      	mov	sp, r7
 80029b0:	bd80      	pop	{r7, pc}

080029b2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80029b2:	b580      	push	{r7, lr}
 80029b4:	b08e      	sub	sp, #56	; 0x38
 80029b6:	af00      	add	r7, sp, #0
 80029b8:	6078      	str	r0, [r7, #4]
 80029ba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80029c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d10a      	bne.n	80029dc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80029c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ca:	f383 8811 	msr	BASEPRI, r3
 80029ce:	f3bf 8f6f 	isb	sy
 80029d2:	f3bf 8f4f 	dsb	sy
 80029d6:	623b      	str	r3, [r7, #32]
}
 80029d8:	bf00      	nop
 80029da:	e7fe      	b.n	80029da <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d00a      	beq.n	80029fa <xQueueGiveFromISR+0x48>
	__asm volatile
 80029e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029e8:	f383 8811 	msr	BASEPRI, r3
 80029ec:	f3bf 8f6f 	isb	sy
 80029f0:	f3bf 8f4f 	dsb	sy
 80029f4:	61fb      	str	r3, [r7, #28]
}
 80029f6:	bf00      	nop
 80029f8:	e7fe      	b.n	80029f8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80029fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d103      	bne.n	8002a0a <xQueueGiveFromISR+0x58>
 8002a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d101      	bne.n	8002a0e <xQueueGiveFromISR+0x5c>
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e000      	b.n	8002a10 <xQueueGiveFromISR+0x5e>
 8002a0e:	2300      	movs	r3, #0
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d10a      	bne.n	8002a2a <xQueueGiveFromISR+0x78>
	__asm volatile
 8002a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a18:	f383 8811 	msr	BASEPRI, r3
 8002a1c:	f3bf 8f6f 	isb	sy
 8002a20:	f3bf 8f4f 	dsb	sy
 8002a24:	61bb      	str	r3, [r7, #24]
}
 8002a26:	bf00      	nop
 8002a28:	e7fe      	b.n	8002a28 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a2a:	f002 fa7d 	bl	8004f28 <vPortValidateInterruptPriority>
	__asm volatile
 8002a2e:	f3ef 8211 	mrs	r2, BASEPRI
 8002a32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a36:	f383 8811 	msr	BASEPRI, r3
 8002a3a:	f3bf 8f6f 	isb	sy
 8002a3e:	f3bf 8f4f 	dsb	sy
 8002a42:	617a      	str	r2, [r7, #20]
 8002a44:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002a46:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002a48:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002a4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a4e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a52:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a54:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002a56:	429a      	cmp	r2, r3
 8002a58:	d22b      	bcs.n	8002ab2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002a5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002a60:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002a64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a66:	1c5a      	adds	r2, r3, #1
 8002a68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a6a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002a6c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002a70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a74:	d112      	bne.n	8002a9c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d016      	beq.n	8002aac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002a7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a80:	3324      	adds	r3, #36	; 0x24
 8002a82:	4618      	mov	r0, r3
 8002a84:	f001 f952 	bl	8003d2c <xTaskRemoveFromEventList>
 8002a88:	4603      	mov	r3, r0
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d00e      	beq.n	8002aac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002a8e:	683b      	ldr	r3, [r7, #0]
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d00b      	beq.n	8002aac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	2201      	movs	r2, #1
 8002a98:	601a      	str	r2, [r3, #0]
 8002a9a:	e007      	b.n	8002aac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	b2db      	uxtb	r3, r3
 8002aa4:	b25a      	sxtb	r2, r3
 8002aa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aa8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002aac:	2301      	movs	r3, #1
 8002aae:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab0:	e001      	b.n	8002ab6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	637b      	str	r3, [r7, #52]	; 0x34
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	f383 8811 	msr	BASEPRI, r3
}
 8002ac0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002ac2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3738      	adds	r7, #56	; 0x38
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}

08002acc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b08c      	sub	sp, #48	; 0x30
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	60f8      	str	r0, [r7, #12]
 8002ad4:	60b9      	str	r1, [r7, #8]
 8002ad6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002ad8:	2300      	movs	r3, #0
 8002ada:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d10a      	bne.n	8002afc <xQueueReceive+0x30>
	__asm volatile
 8002ae6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aea:	f383 8811 	msr	BASEPRI, r3
 8002aee:	f3bf 8f6f 	isb	sy
 8002af2:	f3bf 8f4f 	dsb	sy
 8002af6:	623b      	str	r3, [r7, #32]
}
 8002af8:	bf00      	nop
 8002afa:	e7fe      	b.n	8002afa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002afc:	68bb      	ldr	r3, [r7, #8]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d103      	bne.n	8002b0a <xQueueReceive+0x3e>
 8002b02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <xQueueReceive+0x42>
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e000      	b.n	8002b10 <xQueueReceive+0x44>
 8002b0e:	2300      	movs	r3, #0
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d10a      	bne.n	8002b2a <xQueueReceive+0x5e>
	__asm volatile
 8002b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b18:	f383 8811 	msr	BASEPRI, r3
 8002b1c:	f3bf 8f6f 	isb	sy
 8002b20:	f3bf 8f4f 	dsb	sy
 8002b24:	61fb      	str	r3, [r7, #28]
}
 8002b26:	bf00      	nop
 8002b28:	e7fe      	b.n	8002b28 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002b2a:	f001 fac1 	bl	80040b0 <xTaskGetSchedulerState>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d102      	bne.n	8002b3a <xQueueReceive+0x6e>
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d101      	bne.n	8002b3e <xQueueReceive+0x72>
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e000      	b.n	8002b40 <xQueueReceive+0x74>
 8002b3e:	2300      	movs	r3, #0
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d10a      	bne.n	8002b5a <xQueueReceive+0x8e>
	__asm volatile
 8002b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b48:	f383 8811 	msr	BASEPRI, r3
 8002b4c:	f3bf 8f6f 	isb	sy
 8002b50:	f3bf 8f4f 	dsb	sy
 8002b54:	61bb      	str	r3, [r7, #24]
}
 8002b56:	bf00      	nop
 8002b58:	e7fe      	b.n	8002b58 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002b5a:	f002 f903 	bl	8004d64 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b62:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002b64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d01f      	beq.n	8002baa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002b6a:	68b9      	ldr	r1, [r7, #8]
 8002b6c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002b6e:	f000 fabe 	bl	80030ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b74:	1e5a      	subs	r2, r3, #1
 8002b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b78:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002b7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d00f      	beq.n	8002ba2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002b82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b84:	3310      	adds	r3, #16
 8002b86:	4618      	mov	r0, r3
 8002b88:	f001 f8d0 	bl	8003d2c <xTaskRemoveFromEventList>
 8002b8c:	4603      	mov	r3, r0
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d007      	beq.n	8002ba2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002b92:	4b3d      	ldr	r3, [pc, #244]	; (8002c88 <xQueueReceive+0x1bc>)
 8002b94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b98:	601a      	str	r2, [r3, #0]
 8002b9a:	f3bf 8f4f 	dsb	sy
 8002b9e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ba2:	f002 f90f 	bl	8004dc4 <vPortExitCritical>
				return pdPASS;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e069      	b.n	8002c7e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d103      	bne.n	8002bb8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002bb0:	f002 f908 	bl	8004dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	e062      	b.n	8002c7e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002bb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d106      	bne.n	8002bcc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002bbe:	f107 0310 	add.w	r3, r7, #16
 8002bc2:	4618      	mov	r0, r3
 8002bc4:	f001 f916 	bl	8003df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002bcc:	f002 f8fa 	bl	8004dc4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002bd0:	f000 fe82 	bl	80038d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002bd4:	f002 f8c6 	bl	8004d64 <vPortEnterCritical>
 8002bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bda:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002bde:	b25b      	sxtb	r3, r3
 8002be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002be4:	d103      	bne.n	8002bee <xQueueReceive+0x122>
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	2200      	movs	r2, #0
 8002bea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002bee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bf0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf4:	b25b      	sxtb	r3, r3
 8002bf6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bfa:	d103      	bne.n	8002c04 <xQueueReceive+0x138>
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002c04:	f002 f8de 	bl	8004dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002c08:	1d3a      	adds	r2, r7, #4
 8002c0a:	f107 0310 	add.w	r3, r7, #16
 8002c0e:	4611      	mov	r1, r2
 8002c10:	4618      	mov	r0, r3
 8002c12:	f001 f905 	bl	8003e20 <xTaskCheckForTimeOut>
 8002c16:	4603      	mov	r3, r0
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d123      	bne.n	8002c64 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c1e:	f000 fade 	bl	80031de <prvIsQueueEmpty>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d017      	beq.n	8002c58 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c2a:	3324      	adds	r3, #36	; 0x24
 8002c2c:	687a      	ldr	r2, [r7, #4]
 8002c2e:	4611      	mov	r1, r2
 8002c30:	4618      	mov	r0, r3
 8002c32:	f001 f82b 	bl	8003c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002c36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c38:	f000 fa7f 	bl	800313a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002c3c:	f000 fe5a 	bl	80038f4 <xTaskResumeAll>
 8002c40:	4603      	mov	r3, r0
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d189      	bne.n	8002b5a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002c46:	4b10      	ldr	r3, [pc, #64]	; (8002c88 <xQueueReceive+0x1bc>)
 8002c48:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c4c:	601a      	str	r2, [r3, #0]
 8002c4e:	f3bf 8f4f 	dsb	sy
 8002c52:	f3bf 8f6f 	isb	sy
 8002c56:	e780      	b.n	8002b5a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002c58:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c5a:	f000 fa6e 	bl	800313a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c5e:	f000 fe49 	bl	80038f4 <xTaskResumeAll>
 8002c62:	e77a      	b.n	8002b5a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002c64:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c66:	f000 fa68 	bl	800313a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c6a:	f000 fe43 	bl	80038f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002c6e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002c70:	f000 fab5 	bl	80031de <prvIsQueueEmpty>
 8002c74:	4603      	mov	r3, r0
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	f43f af6f 	beq.w	8002b5a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002c7c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3730      	adds	r7, #48	; 0x30
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	e000ed04 	.word	0xe000ed04

08002c8c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08e      	sub	sp, #56	; 0x38
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
 8002c94:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c96:	2300      	movs	r3, #0
 8002c98:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002ca2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d10a      	bne.n	8002cbe <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cac:	f383 8811 	msr	BASEPRI, r3
 8002cb0:	f3bf 8f6f 	isb	sy
 8002cb4:	f3bf 8f4f 	dsb	sy
 8002cb8:	623b      	str	r3, [r7, #32]
}
 8002cba:	bf00      	nop
 8002cbc:	e7fe      	b.n	8002cbc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d00a      	beq.n	8002cdc <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cca:	f383 8811 	msr	BASEPRI, r3
 8002cce:	f3bf 8f6f 	isb	sy
 8002cd2:	f3bf 8f4f 	dsb	sy
 8002cd6:	61fb      	str	r3, [r7, #28]
}
 8002cd8:	bf00      	nop
 8002cda:	e7fe      	b.n	8002cda <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cdc:	f001 f9e8 	bl	80040b0 <xTaskGetSchedulerState>
 8002ce0:	4603      	mov	r3, r0
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d102      	bne.n	8002cec <xQueueSemaphoreTake+0x60>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d101      	bne.n	8002cf0 <xQueueSemaphoreTake+0x64>
 8002cec:	2301      	movs	r3, #1
 8002cee:	e000      	b.n	8002cf2 <xQueueSemaphoreTake+0x66>
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d10a      	bne.n	8002d0c <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002cf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cfa:	f383 8811 	msr	BASEPRI, r3
 8002cfe:	f3bf 8f6f 	isb	sy
 8002d02:	f3bf 8f4f 	dsb	sy
 8002d06:	61bb      	str	r3, [r7, #24]
}
 8002d08:	bf00      	nop
 8002d0a:	e7fe      	b.n	8002d0a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002d0c:	f002 f82a 	bl	8004d64 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002d10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d14:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002d16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d024      	beq.n	8002d66 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002d1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1e:	1e5a      	subs	r2, r3, #1
 8002d20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d22:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002d24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d104      	bne.n	8002d36 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002d2c:	f001 fb36 	bl	800439c <pvTaskIncrementMutexHeldCount>
 8002d30:	4602      	mov	r2, r0
 8002d32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d34:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d38:	691b      	ldr	r3, [r3, #16]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00f      	beq.n	8002d5e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d40:	3310      	adds	r3, #16
 8002d42:	4618      	mov	r0, r3
 8002d44:	f000 fff2 	bl	8003d2c <xTaskRemoveFromEventList>
 8002d48:	4603      	mov	r3, r0
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d007      	beq.n	8002d5e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d4e:	4b54      	ldr	r3, [pc, #336]	; (8002ea0 <xQueueSemaphoreTake+0x214>)
 8002d50:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d54:	601a      	str	r2, [r3, #0]
 8002d56:	f3bf 8f4f 	dsb	sy
 8002d5a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d5e:	f002 f831 	bl	8004dc4 <vPortExitCritical>
				return pdPASS;
 8002d62:	2301      	movs	r3, #1
 8002d64:	e097      	b.n	8002e96 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d111      	bne.n	8002d90 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002d6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d00a      	beq.n	8002d88 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002d72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d76:	f383 8811 	msr	BASEPRI, r3
 8002d7a:	f3bf 8f6f 	isb	sy
 8002d7e:	f3bf 8f4f 	dsb	sy
 8002d82:	617b      	str	r3, [r7, #20]
}
 8002d84:	bf00      	nop
 8002d86:	e7fe      	b.n	8002d86 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002d88:	f002 f81c 	bl	8004dc4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	e082      	b.n	8002e96 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d106      	bne.n	8002da4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d96:	f107 030c 	add.w	r3, r7, #12
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	f001 f82a 	bl	8003df4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002da0:	2301      	movs	r3, #1
 8002da2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002da4:	f002 f80e 	bl	8004dc4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002da8:	f000 fd96 	bl	80038d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002dac:	f001 ffda 	bl	8004d64 <vPortEnterCritical>
 8002db0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002db2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002db6:	b25b      	sxtb	r3, r3
 8002db8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dbc:	d103      	bne.n	8002dc6 <xQueueSemaphoreTake+0x13a>
 8002dbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dc8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dcc:	b25b      	sxtb	r3, r3
 8002dce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002dd2:	d103      	bne.n	8002ddc <xQueueSemaphoreTake+0x150>
 8002dd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002ddc:	f001 fff2 	bl	8004dc4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002de0:	463a      	mov	r2, r7
 8002de2:	f107 030c 	add.w	r3, r7, #12
 8002de6:	4611      	mov	r1, r2
 8002de8:	4618      	mov	r0, r3
 8002dea:	f001 f819 	bl	8003e20 <xTaskCheckForTimeOut>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d132      	bne.n	8002e5a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002df4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002df6:	f000 f9f2 	bl	80031de <prvIsQueueEmpty>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d026      	beq.n	8002e4e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002e00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d109      	bne.n	8002e1c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002e08:	f001 ffac 	bl	8004d64 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002e0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	4618      	mov	r0, r3
 8002e12:	f001 f96b 	bl	80040ec <xTaskPriorityInherit>
 8002e16:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002e18:	f001 ffd4 	bl	8004dc4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e1e:	3324      	adds	r3, #36	; 0x24
 8002e20:	683a      	ldr	r2, [r7, #0]
 8002e22:	4611      	mov	r1, r2
 8002e24:	4618      	mov	r0, r3
 8002e26:	f000 ff31 	bl	8003c8c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002e2a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e2c:	f000 f985 	bl	800313a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002e30:	f000 fd60 	bl	80038f4 <xTaskResumeAll>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	f47f af68 	bne.w	8002d0c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002e3c:	4b18      	ldr	r3, [pc, #96]	; (8002ea0 <xQueueSemaphoreTake+0x214>)
 8002e3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e42:	601a      	str	r2, [r3, #0]
 8002e44:	f3bf 8f4f 	dsb	sy
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	e75e      	b.n	8002d0c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002e4e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e50:	f000 f973 	bl	800313a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002e54:	f000 fd4e 	bl	80038f4 <xTaskResumeAll>
 8002e58:	e758      	b.n	8002d0c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002e5a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e5c:	f000 f96d 	bl	800313a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e60:	f000 fd48 	bl	80038f4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e64:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e66:	f000 f9ba 	bl	80031de <prvIsQueueEmpty>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f43f af4d 	beq.w	8002d0c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002e72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d00d      	beq.n	8002e94 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002e78:	f001 ff74 	bl	8004d64 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002e7c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002e7e:	f000 f8b4 	bl	8002fea <prvGetDisinheritPriorityAfterTimeout>
 8002e82:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e86:	689b      	ldr	r3, [r3, #8]
 8002e88:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f001 fa04 	bl	8004298 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002e90:	f001 ff98 	bl	8004dc4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3738      	adds	r7, #56	; 0x38
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bd80      	pop	{r7, pc}
 8002e9e:	bf00      	nop
 8002ea0:	e000ed04 	.word	0xe000ed04

08002ea4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b08e      	sub	sp, #56	; 0x38
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	60f8      	str	r0, [r7, #12]
 8002eac:	60b9      	str	r1, [r7, #8]
 8002eae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002eb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d10a      	bne.n	8002ed0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8002eba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ebe:	f383 8811 	msr	BASEPRI, r3
 8002ec2:	f3bf 8f6f 	isb	sy
 8002ec6:	f3bf 8f4f 	dsb	sy
 8002eca:	623b      	str	r3, [r7, #32]
}
 8002ecc:	bf00      	nop
 8002ece:	e7fe      	b.n	8002ece <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002ed0:	68bb      	ldr	r3, [r7, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d103      	bne.n	8002ede <xQueueReceiveFromISR+0x3a>
 8002ed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d101      	bne.n	8002ee2 <xQueueReceiveFromISR+0x3e>
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e000      	b.n	8002ee4 <xQueueReceiveFromISR+0x40>
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d10a      	bne.n	8002efe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8002ee8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eec:	f383 8811 	msr	BASEPRI, r3
 8002ef0:	f3bf 8f6f 	isb	sy
 8002ef4:	f3bf 8f4f 	dsb	sy
 8002ef8:	61fb      	str	r3, [r7, #28]
}
 8002efa:	bf00      	nop
 8002efc:	e7fe      	b.n	8002efc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002efe:	f002 f813 	bl	8004f28 <vPortValidateInterruptPriority>
	__asm volatile
 8002f02:	f3ef 8211 	mrs	r2, BASEPRI
 8002f06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0a:	f383 8811 	msr	BASEPRI, r3
 8002f0e:	f3bf 8f6f 	isb	sy
 8002f12:	f3bf 8f4f 	dsb	sy
 8002f16:	61ba      	str	r2, [r7, #24]
 8002f18:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8002f1a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f22:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d02f      	beq.n	8002f8a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8002f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f2c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002f34:	68b9      	ldr	r1, [r7, #8]
 8002f36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002f38:	f000 f8d9 	bl	80030ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002f3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f3e:	1e5a      	subs	r2, r3, #1
 8002f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f42:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8002f44:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002f48:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f4c:	d112      	bne.n	8002f74 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f50:	691b      	ldr	r3, [r3, #16]
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d016      	beq.n	8002f84 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f58:	3310      	adds	r3, #16
 8002f5a:	4618      	mov	r0, r3
 8002f5c:	f000 fee6 	bl	8003d2c <xTaskRemoveFromEventList>
 8002f60:	4603      	mov	r3, r0
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d00e      	beq.n	8002f84 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d00b      	beq.n	8002f84 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	601a      	str	r2, [r3, #0]
 8002f72:	e007      	b.n	8002f84 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8002f74:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002f78:	3301      	adds	r3, #1
 8002f7a:	b2db      	uxtb	r3, r3
 8002f7c:	b25a      	sxtb	r2, r3
 8002f7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f80:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8002f84:	2301      	movs	r3, #1
 8002f86:	637b      	str	r3, [r7, #52]	; 0x34
 8002f88:	e001      	b.n	8002f8e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8002f8a:	2300      	movs	r3, #0
 8002f8c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f90:	613b      	str	r3, [r7, #16]
	__asm volatile
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	f383 8811 	msr	BASEPRI, r3
}
 8002f98:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002f9a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	3738      	adds	r7, #56	; 0x38
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	bd80      	pop	{r7, pc}

08002fa4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8002fa4:	b580      	push	{r7, lr}
 8002fa6:	b084      	sub	sp, #16
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d10a      	bne.n	8002fcc <vQueueDelete+0x28>
	__asm volatile
 8002fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002fba:	f383 8811 	msr	BASEPRI, r3
 8002fbe:	f3bf 8f6f 	isb	sy
 8002fc2:	f3bf 8f4f 	dsb	sy
 8002fc6:	60bb      	str	r3, [r7, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	e7fe      	b.n	8002fca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8002fcc:	68f8      	ldr	r0, [r7, #12]
 8002fce:	f000 f95f 	bl	8003290 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8002fd8:	2b00      	cmp	r3, #0
 8002fda:	d102      	bne.n	8002fe2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8002fdc:	68f8      	ldr	r0, [r7, #12]
 8002fde:	f002 f8af 	bl	8005140 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8002fe2:	bf00      	nop
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}

08002fea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002fea:	b480      	push	{r7}
 8002fec:	b085      	sub	sp, #20
 8002fee:	af00      	add	r7, sp, #0
 8002ff0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d006      	beq.n	8003008 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8003004:	60fb      	str	r3, [r7, #12]
 8003006:	e001      	b.n	800300c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003008:	2300      	movs	r3, #0
 800300a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800300c:	68fb      	ldr	r3, [r7, #12]
	}
 800300e:	4618      	mov	r0, r3
 8003010:	3714      	adds	r7, #20
 8003012:	46bd      	mov	sp, r7
 8003014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003018:	4770      	bx	lr

0800301a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800301a:	b580      	push	{r7, lr}
 800301c:	b086      	sub	sp, #24
 800301e:	af00      	add	r7, sp, #0
 8003020:	60f8      	str	r0, [r7, #12]
 8003022:	60b9      	str	r1, [r7, #8]
 8003024:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003026:	2300      	movs	r3, #0
 8003028:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800302e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d14d      	bne.n	80030dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	689b      	ldr	r3, [r3, #8]
 8003044:	4618      	mov	r0, r3
 8003046:	f001 f8b9 	bl	80041bc <xTaskPriorityDisinherit>
 800304a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2200      	movs	r2, #0
 8003050:	609a      	str	r2, [r3, #8]
 8003052:	e043      	b.n	80030dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d119      	bne.n	800308e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	6858      	ldr	r0, [r3, #4]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003062:	461a      	mov	r2, r3
 8003064:	68b9      	ldr	r1, [r7, #8]
 8003066:	f002 f9af 	bl	80053c8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	685a      	ldr	r2, [r3, #4]
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	441a      	add	r2, r3
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	685a      	ldr	r2, [r3, #4]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	429a      	cmp	r2, r3
 8003082:	d32b      	bcc.n	80030dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003084:	68fb      	ldr	r3, [r7, #12]
 8003086:	681a      	ldr	r2, [r3, #0]
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	605a      	str	r2, [r3, #4]
 800308c:	e026      	b.n	80030dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	68d8      	ldr	r0, [r3, #12]
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	461a      	mov	r2, r3
 8003098:	68b9      	ldr	r1, [r7, #8]
 800309a:	f002 f995 	bl	80053c8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	68da      	ldr	r2, [r3, #12]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030a6:	425b      	negs	r3, r3
 80030a8:	441a      	add	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	68da      	ldr	r2, [r3, #12]
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d207      	bcs.n	80030ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	689a      	ldr	r2, [r3, #8]
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030c2:	425b      	negs	r3, r3
 80030c4:	441a      	add	r2, r3
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	2b02      	cmp	r3, #2
 80030ce:	d105      	bne.n	80030dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030d0:	693b      	ldr	r3, [r7, #16]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d002      	beq.n	80030dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80030d6:	693b      	ldr	r3, [r7, #16]
 80030d8:	3b01      	subs	r3, #1
 80030da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1c5a      	adds	r2, r3, #1
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80030e4:	697b      	ldr	r3, [r7, #20]
}
 80030e6:	4618      	mov	r0, r3
 80030e8:	3718      	adds	r7, #24
 80030ea:	46bd      	mov	sp, r7
 80030ec:	bd80      	pop	{r7, pc}

080030ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80030ee:	b580      	push	{r7, lr}
 80030f0:	b082      	sub	sp, #8
 80030f2:	af00      	add	r7, sp, #0
 80030f4:	6078      	str	r0, [r7, #4]
 80030f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d018      	beq.n	8003132 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	68da      	ldr	r2, [r3, #12]
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003108:	441a      	add	r2, r3
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	68da      	ldr	r2, [r3, #12]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	429a      	cmp	r2, r3
 8003118:	d303      	bcc.n	8003122 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	68d9      	ldr	r1, [r3, #12]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312a:	461a      	mov	r2, r3
 800312c:	6838      	ldr	r0, [r7, #0]
 800312e:	f002 f94b 	bl	80053c8 <memcpy>
	}
}
 8003132:	bf00      	nop
 8003134:	3708      	adds	r7, #8
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800313a:	b580      	push	{r7, lr}
 800313c:	b084      	sub	sp, #16
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003142:	f001 fe0f 	bl	8004d64 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800314c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800314e:	e011      	b.n	8003174 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	2b00      	cmp	r3, #0
 8003156:	d012      	beq.n	800317e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	3324      	adds	r3, #36	; 0x24
 800315c:	4618      	mov	r0, r3
 800315e:	f000 fde5 	bl	8003d2c <xTaskRemoveFromEventList>
 8003162:	4603      	mov	r3, r0
 8003164:	2b00      	cmp	r3, #0
 8003166:	d001      	beq.n	800316c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003168:	f000 febc 	bl	8003ee4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800316c:	7bfb      	ldrb	r3, [r7, #15]
 800316e:	3b01      	subs	r3, #1
 8003170:	b2db      	uxtb	r3, r3
 8003172:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003174:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003178:	2b00      	cmp	r3, #0
 800317a:	dce9      	bgt.n	8003150 <prvUnlockQueue+0x16>
 800317c:	e000      	b.n	8003180 <prvUnlockQueue+0x46>
					break;
 800317e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	22ff      	movs	r2, #255	; 0xff
 8003184:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003188:	f001 fe1c 	bl	8004dc4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800318c:	f001 fdea 	bl	8004d64 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003196:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003198:	e011      	b.n	80031be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	691b      	ldr	r3, [r3, #16]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d012      	beq.n	80031c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	3310      	adds	r3, #16
 80031a6:	4618      	mov	r0, r3
 80031a8:	f000 fdc0 	bl	8003d2c <xTaskRemoveFromEventList>
 80031ac:	4603      	mov	r3, r0
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d001      	beq.n	80031b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80031b2:	f000 fe97 	bl	8003ee4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80031b6:	7bbb      	ldrb	r3, [r7, #14]
 80031b8:	3b01      	subs	r3, #1
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80031be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	dce9      	bgt.n	800319a <prvUnlockQueue+0x60>
 80031c6:	e000      	b.n	80031ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80031c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	22ff      	movs	r2, #255	; 0xff
 80031ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80031d2:	f001 fdf7 	bl	8004dc4 <vPortExitCritical>
}
 80031d6:	bf00      	nop
 80031d8:	3710      	adds	r7, #16
 80031da:	46bd      	mov	sp, r7
 80031dc:	bd80      	pop	{r7, pc}

080031de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80031de:	b580      	push	{r7, lr}
 80031e0:	b084      	sub	sp, #16
 80031e2:	af00      	add	r7, sp, #0
 80031e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80031e6:	f001 fdbd 	bl	8004d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d102      	bne.n	80031f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80031f2:	2301      	movs	r3, #1
 80031f4:	60fb      	str	r3, [r7, #12]
 80031f6:	e001      	b.n	80031fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80031f8:	2300      	movs	r3, #0
 80031fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80031fc:	f001 fde2 	bl	8004dc4 <vPortExitCritical>

	return xReturn;
 8003200:	68fb      	ldr	r3, [r7, #12]
}
 8003202:	4618      	mov	r0, r3
 8003204:	3710      	adds	r7, #16
 8003206:	46bd      	mov	sp, r7
 8003208:	bd80      	pop	{r7, pc}

0800320a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800320a:	b580      	push	{r7, lr}
 800320c:	b084      	sub	sp, #16
 800320e:	af00      	add	r7, sp, #0
 8003210:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003212:	f001 fda7 	bl	8004d64 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800321e:	429a      	cmp	r2, r3
 8003220:	d102      	bne.n	8003228 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003222:	2301      	movs	r3, #1
 8003224:	60fb      	str	r3, [r7, #12]
 8003226:	e001      	b.n	800322c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003228:	2300      	movs	r3, #0
 800322a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800322c:	f001 fdca 	bl	8004dc4 <vPortExitCritical>

	return xReturn;
 8003230:	68fb      	ldr	r3, [r7, #12]
}
 8003232:	4618      	mov	r0, r3
 8003234:	3710      	adds	r7, #16
 8003236:	46bd      	mov	sp, r7
 8003238:	bd80      	pop	{r7, pc}
	...

0800323c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800323c:	b480      	push	{r7}
 800323e:	b085      	sub	sp, #20
 8003240:	af00      	add	r7, sp, #0
 8003242:	6078      	str	r0, [r7, #4]
 8003244:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003246:	2300      	movs	r3, #0
 8003248:	60fb      	str	r3, [r7, #12]
 800324a:	e014      	b.n	8003276 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800324c:	4a0f      	ldr	r2, [pc, #60]	; (800328c <vQueueAddToRegistry+0x50>)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d10b      	bne.n	8003270 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003258:	490c      	ldr	r1, [pc, #48]	; (800328c <vQueueAddToRegistry+0x50>)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	683a      	ldr	r2, [r7, #0]
 800325e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003262:	4a0a      	ldr	r2, [pc, #40]	; (800328c <vQueueAddToRegistry+0x50>)
 8003264:	68fb      	ldr	r3, [r7, #12]
 8003266:	00db      	lsls	r3, r3, #3
 8003268:	4413      	add	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800326e:	e006      	b.n	800327e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003270:	68fb      	ldr	r3, [r7, #12]
 8003272:	3301      	adds	r3, #1
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	2b07      	cmp	r3, #7
 800327a:	d9e7      	bls.n	800324c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800327c:	bf00      	nop
 800327e:	bf00      	nop
 8003280:	3714      	adds	r7, #20
 8003282:	46bd      	mov	sp, r7
 8003284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003288:	4770      	bx	lr
 800328a:	bf00      	nop
 800328c:	2000086c 	.word	0x2000086c

08003290 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003290:	b480      	push	{r7}
 8003292:	b085      	sub	sp, #20
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]
 800329c:	e016      	b.n	80032cc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <vQueueUnregisterQueue+0x50>)
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	00db      	lsls	r3, r3, #3
 80032a4:	4413      	add	r3, r2
 80032a6:	685b      	ldr	r3, [r3, #4]
 80032a8:	687a      	ldr	r2, [r7, #4]
 80032aa:	429a      	cmp	r2, r3
 80032ac:	d10b      	bne.n	80032c6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 80032ae:	4a0c      	ldr	r2, [pc, #48]	; (80032e0 <vQueueUnregisterQueue+0x50>)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	2100      	movs	r1, #0
 80032b4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 80032b8:	4a09      	ldr	r2, [pc, #36]	; (80032e0 <vQueueUnregisterQueue+0x50>)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	00db      	lsls	r3, r3, #3
 80032be:	4413      	add	r3, r2
 80032c0:	2200      	movs	r2, #0
 80032c2:	605a      	str	r2, [r3, #4]
				break;
 80032c4:	e006      	b.n	80032d4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	3301      	adds	r3, #1
 80032ca:	60fb      	str	r3, [r7, #12]
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	2b07      	cmp	r3, #7
 80032d0:	d9e5      	bls.n	800329e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80032d2:	bf00      	nop
 80032d4:	bf00      	nop
 80032d6:	3714      	adds	r7, #20
 80032d8:	46bd      	mov	sp, r7
 80032da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032de:	4770      	bx	lr
 80032e0:	2000086c 	.word	0x2000086c

080032e4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b086      	sub	sp, #24
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	60f8      	str	r0, [r7, #12]
 80032ec:	60b9      	str	r1, [r7, #8]
 80032ee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80032f4:	f001 fd36 	bl	8004d64 <vPortEnterCritical>
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80032fe:	b25b      	sxtb	r3, r3
 8003300:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003304:	d103      	bne.n	800330e <vQueueWaitForMessageRestricted+0x2a>
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800330e:	697b      	ldr	r3, [r7, #20]
 8003310:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003314:	b25b      	sxtb	r3, r3
 8003316:	f1b3 3fff 	cmp.w	r3, #4294967295
 800331a:	d103      	bne.n	8003324 <vQueueWaitForMessageRestricted+0x40>
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	2200      	movs	r2, #0
 8003320:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003324:	f001 fd4e 	bl	8004dc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800332c:	2b00      	cmp	r3, #0
 800332e:	d106      	bne.n	800333e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3324      	adds	r3, #36	; 0x24
 8003334:	687a      	ldr	r2, [r7, #4]
 8003336:	68b9      	ldr	r1, [r7, #8]
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fccb 	bl	8003cd4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800333e:	6978      	ldr	r0, [r7, #20]
 8003340:	f7ff fefb 	bl	800313a <prvUnlockQueue>
	}
 8003344:	bf00      	nop
 8003346:	3718      	adds	r7, #24
 8003348:	46bd      	mov	sp, r7
 800334a:	bd80      	pop	{r7, pc}

0800334c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800334c:	b580      	push	{r7, lr}
 800334e:	b08e      	sub	sp, #56	; 0x38
 8003350:	af04      	add	r7, sp, #16
 8003352:	60f8      	str	r0, [r7, #12]
 8003354:	60b9      	str	r1, [r7, #8]
 8003356:	607a      	str	r2, [r7, #4]
 8003358:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800335a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800335c:	2b00      	cmp	r3, #0
 800335e:	d10a      	bne.n	8003376 <xTaskCreateStatic+0x2a>
	__asm volatile
 8003360:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003364:	f383 8811 	msr	BASEPRI, r3
 8003368:	f3bf 8f6f 	isb	sy
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	623b      	str	r3, [r7, #32]
}
 8003372:	bf00      	nop
 8003374:	e7fe      	b.n	8003374 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003376:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003378:	2b00      	cmp	r3, #0
 800337a:	d10a      	bne.n	8003392 <xTaskCreateStatic+0x46>
	__asm volatile
 800337c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003380:	f383 8811 	msr	BASEPRI, r3
 8003384:	f3bf 8f6f 	isb	sy
 8003388:	f3bf 8f4f 	dsb	sy
 800338c:	61fb      	str	r3, [r7, #28]
}
 800338e:	bf00      	nop
 8003390:	e7fe      	b.n	8003390 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003392:	23bc      	movs	r3, #188	; 0xbc
 8003394:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	2bbc      	cmp	r3, #188	; 0xbc
 800339a:	d00a      	beq.n	80033b2 <xTaskCreateStatic+0x66>
	__asm volatile
 800339c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033a0:	f383 8811 	msr	BASEPRI, r3
 80033a4:	f3bf 8f6f 	isb	sy
 80033a8:	f3bf 8f4f 	dsb	sy
 80033ac:	61bb      	str	r3, [r7, #24]
}
 80033ae:	bf00      	nop
 80033b0:	e7fe      	b.n	80033b0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80033b2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80033b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d01e      	beq.n	80033f8 <xTaskCreateStatic+0xac>
 80033ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d01b      	beq.n	80033f8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80033c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033c2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80033c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80033c8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80033ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033cc:	2202      	movs	r2, #2
 80033ce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80033d2:	2300      	movs	r3, #0
 80033d4:	9303      	str	r3, [sp, #12]
 80033d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033d8:	9302      	str	r3, [sp, #8]
 80033da:	f107 0314 	add.w	r3, r7, #20
 80033de:	9301      	str	r3, [sp, #4]
 80033e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	683b      	ldr	r3, [r7, #0]
 80033e6:	687a      	ldr	r2, [r7, #4]
 80033e8:	68b9      	ldr	r1, [r7, #8]
 80033ea:	68f8      	ldr	r0, [r7, #12]
 80033ec:	f000 f850 	bl	8003490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80033f0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80033f2:	f000 f8f3 	bl	80035dc <prvAddNewTaskToReadyList>
 80033f6:	e001      	b.n	80033fc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80033f8:	2300      	movs	r3, #0
 80033fa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80033fc:	697b      	ldr	r3, [r7, #20]
	}
 80033fe:	4618      	mov	r0, r3
 8003400:	3728      	adds	r7, #40	; 0x28
 8003402:	46bd      	mov	sp, r7
 8003404:	bd80      	pop	{r7, pc}

08003406 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003406:	b580      	push	{r7, lr}
 8003408:	b08c      	sub	sp, #48	; 0x30
 800340a:	af04      	add	r7, sp, #16
 800340c:	60f8      	str	r0, [r7, #12]
 800340e:	60b9      	str	r1, [r7, #8]
 8003410:	603b      	str	r3, [r7, #0]
 8003412:	4613      	mov	r3, r2
 8003414:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003416:	88fb      	ldrh	r3, [r7, #6]
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f001 fdc4 	bl	8004fa8 <pvPortMalloc>
 8003420:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003422:	697b      	ldr	r3, [r7, #20]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d00e      	beq.n	8003446 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003428:	20bc      	movs	r0, #188	; 0xbc
 800342a:	f001 fdbd 	bl	8004fa8 <pvPortMalloc>
 800342e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003430:	69fb      	ldr	r3, [r7, #28]
 8003432:	2b00      	cmp	r3, #0
 8003434:	d003      	beq.n	800343e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003436:	69fb      	ldr	r3, [r7, #28]
 8003438:	697a      	ldr	r2, [r7, #20]
 800343a:	631a      	str	r2, [r3, #48]	; 0x30
 800343c:	e005      	b.n	800344a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800343e:	6978      	ldr	r0, [r7, #20]
 8003440:	f001 fe7e 	bl	8005140 <vPortFree>
 8003444:	e001      	b.n	800344a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003446:	2300      	movs	r3, #0
 8003448:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800344a:	69fb      	ldr	r3, [r7, #28]
 800344c:	2b00      	cmp	r3, #0
 800344e:	d017      	beq.n	8003480 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003450:	69fb      	ldr	r3, [r7, #28]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003458:	88fa      	ldrh	r2, [r7, #6]
 800345a:	2300      	movs	r3, #0
 800345c:	9303      	str	r3, [sp, #12]
 800345e:	69fb      	ldr	r3, [r7, #28]
 8003460:	9302      	str	r3, [sp, #8]
 8003462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003464:	9301      	str	r3, [sp, #4]
 8003466:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003468:	9300      	str	r3, [sp, #0]
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68b9      	ldr	r1, [r7, #8]
 800346e:	68f8      	ldr	r0, [r7, #12]
 8003470:	f000 f80e 	bl	8003490 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003474:	69f8      	ldr	r0, [r7, #28]
 8003476:	f000 f8b1 	bl	80035dc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800347a:	2301      	movs	r3, #1
 800347c:	61bb      	str	r3, [r7, #24]
 800347e:	e002      	b.n	8003486 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003480:	f04f 33ff 	mov.w	r3, #4294967295
 8003484:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003486:	69bb      	ldr	r3, [r7, #24]
	}
 8003488:	4618      	mov	r0, r3
 800348a:	3720      	adds	r7, #32
 800348c:	46bd      	mov	sp, r7
 800348e:	bd80      	pop	{r7, pc}

08003490 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003490:	b580      	push	{r7, lr}
 8003492:	b088      	sub	sp, #32
 8003494:	af00      	add	r7, sp, #0
 8003496:	60f8      	str	r0, [r7, #12]
 8003498:	60b9      	str	r1, [r7, #8]
 800349a:	607a      	str	r2, [r7, #4]
 800349c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800349e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	009b      	lsls	r3, r3, #2
 80034a6:	461a      	mov	r2, r3
 80034a8:	21a5      	movs	r1, #165	; 0xa5
 80034aa:	f001 ff9b 	bl	80053e4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80034ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034b0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80034b8:	3b01      	subs	r3, #1
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	4413      	add	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80034c0:	69bb      	ldr	r3, [r7, #24]
 80034c2:	f023 0307 	bic.w	r3, r3, #7
 80034c6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80034c8:	69bb      	ldr	r3, [r7, #24]
 80034ca:	f003 0307 	and.w	r3, r3, #7
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <prvInitialiseNewTask+0x58>
	__asm volatile
 80034d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034d6:	f383 8811 	msr	BASEPRI, r3
 80034da:	f3bf 8f6f 	isb	sy
 80034de:	f3bf 8f4f 	dsb	sy
 80034e2:	617b      	str	r3, [r7, #20]
}
 80034e4:	bf00      	nop
 80034e6:	e7fe      	b.n	80034e6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80034e8:	68bb      	ldr	r3, [r7, #8]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d01f      	beq.n	800352e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80034ee:	2300      	movs	r3, #0
 80034f0:	61fb      	str	r3, [r7, #28]
 80034f2:	e012      	b.n	800351a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80034f4:	68ba      	ldr	r2, [r7, #8]
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	4413      	add	r3, r2
 80034fa:	7819      	ldrb	r1, [r3, #0]
 80034fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80034fe:	69fb      	ldr	r3, [r7, #28]
 8003500:	4413      	add	r3, r2
 8003502:	3334      	adds	r3, #52	; 0x34
 8003504:	460a      	mov	r2, r1
 8003506:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003508:	68ba      	ldr	r2, [r7, #8]
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	4413      	add	r3, r2
 800350e:	781b      	ldrb	r3, [r3, #0]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d006      	beq.n	8003522 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003514:	69fb      	ldr	r3, [r7, #28]
 8003516:	3301      	adds	r3, #1
 8003518:	61fb      	str	r3, [r7, #28]
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	2b0f      	cmp	r3, #15
 800351e:	d9e9      	bls.n	80034f4 <prvInitialiseNewTask+0x64>
 8003520:	e000      	b.n	8003524 <prvInitialiseNewTask+0x94>
			{
				break;
 8003522:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003524:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003526:	2200      	movs	r2, #0
 8003528:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800352c:	e003      	b.n	8003536 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800352e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003530:	2200      	movs	r2, #0
 8003532:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8003536:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003538:	2b37      	cmp	r3, #55	; 0x37
 800353a:	d901      	bls.n	8003540 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800353c:	2337      	movs	r3, #55	; 0x37
 800353e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003542:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003544:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8003546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003548:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800354a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800354c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800354e:	2200      	movs	r2, #0
 8003550:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8003552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003554:	3304      	adds	r3, #4
 8003556:	4618      	mov	r0, r3
 8003558:	f7fe fe0a 	bl	8002170 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800355c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800355e:	3318      	adds	r3, #24
 8003560:	4618      	mov	r0, r3
 8003562:	f7fe fe05 	bl	8002170 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003568:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800356a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800356c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800356e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003572:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003574:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003578:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800357a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800357c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357e:	2200      	movs	r2, #0
 8003580:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003584:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003586:	2200      	movs	r2, #0
 8003588:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800358c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800358e:	3354      	adds	r3, #84	; 0x54
 8003590:	2260      	movs	r2, #96	; 0x60
 8003592:	2100      	movs	r1, #0
 8003594:	4618      	mov	r0, r3
 8003596:	f001 ff25 	bl	80053e4 <memset>
 800359a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800359c:	4a0c      	ldr	r2, [pc, #48]	; (80035d0 <prvInitialiseNewTask+0x140>)
 800359e:	659a      	str	r2, [r3, #88]	; 0x58
 80035a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a2:	4a0c      	ldr	r2, [pc, #48]	; (80035d4 <prvInitialiseNewTask+0x144>)
 80035a4:	65da      	str	r2, [r3, #92]	; 0x5c
 80035a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035a8:	4a0b      	ldr	r2, [pc, #44]	; (80035d8 <prvInitialiseNewTask+0x148>)
 80035aa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80035ac:	683a      	ldr	r2, [r7, #0]
 80035ae:	68f9      	ldr	r1, [r7, #12]
 80035b0:	69b8      	ldr	r0, [r7, #24]
 80035b2:	f001 faa9 	bl	8004b08 <pxPortInitialiseStack>
 80035b6:	4602      	mov	r2, r0
 80035b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80035ba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80035bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d002      	beq.n	80035c8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80035c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80035c6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80035c8:	bf00      	nop
 80035ca:	3720      	adds	r7, #32
 80035cc:	46bd      	mov	sp, r7
 80035ce:	bd80      	pop	{r7, pc}
 80035d0:	08005698 	.word	0x08005698
 80035d4:	080056b8 	.word	0x080056b8
 80035d8:	08005678 	.word	0x08005678

080035dc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b082      	sub	sp, #8
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80035e4:	f001 fbbe 	bl	8004d64 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80035e8:	4b2d      	ldr	r3, [pc, #180]	; (80036a0 <prvAddNewTaskToReadyList+0xc4>)
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	3301      	adds	r3, #1
 80035ee:	4a2c      	ldr	r2, [pc, #176]	; (80036a0 <prvAddNewTaskToReadyList+0xc4>)
 80035f0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80035f2:	4b2c      	ldr	r3, [pc, #176]	; (80036a4 <prvAddNewTaskToReadyList+0xc8>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d109      	bne.n	800360e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80035fa:	4a2a      	ldr	r2, [pc, #168]	; (80036a4 <prvAddNewTaskToReadyList+0xc8>)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003600:	4b27      	ldr	r3, [pc, #156]	; (80036a0 <prvAddNewTaskToReadyList+0xc4>)
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2b01      	cmp	r3, #1
 8003606:	d110      	bne.n	800362a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8003608:	f000 fc90 	bl	8003f2c <prvInitialiseTaskLists>
 800360c:	e00d      	b.n	800362a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800360e:	4b26      	ldr	r3, [pc, #152]	; (80036a8 <prvAddNewTaskToReadyList+0xcc>)
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	2b00      	cmp	r3, #0
 8003614:	d109      	bne.n	800362a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8003616:	4b23      	ldr	r3, [pc, #140]	; (80036a4 <prvAddNewTaskToReadyList+0xc8>)
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003620:	429a      	cmp	r2, r3
 8003622:	d802      	bhi.n	800362a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003624:	4a1f      	ldr	r2, [pc, #124]	; (80036a4 <prvAddNewTaskToReadyList+0xc8>)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800362a:	4b20      	ldr	r3, [pc, #128]	; (80036ac <prvAddNewTaskToReadyList+0xd0>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	3301      	adds	r3, #1
 8003630:	4a1e      	ldr	r2, [pc, #120]	; (80036ac <prvAddNewTaskToReadyList+0xd0>)
 8003632:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003634:	4b1d      	ldr	r3, [pc, #116]	; (80036ac <prvAddNewTaskToReadyList+0xd0>)
 8003636:	681a      	ldr	r2, [r3, #0]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003640:	4b1b      	ldr	r3, [pc, #108]	; (80036b0 <prvAddNewTaskToReadyList+0xd4>)
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	429a      	cmp	r2, r3
 8003646:	d903      	bls.n	8003650 <prvAddNewTaskToReadyList+0x74>
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800364c:	4a18      	ldr	r2, [pc, #96]	; (80036b0 <prvAddNewTaskToReadyList+0xd4>)
 800364e:	6013      	str	r3, [r2, #0]
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003654:	4613      	mov	r3, r2
 8003656:	009b      	lsls	r3, r3, #2
 8003658:	4413      	add	r3, r2
 800365a:	009b      	lsls	r3, r3, #2
 800365c:	4a15      	ldr	r2, [pc, #84]	; (80036b4 <prvAddNewTaskToReadyList+0xd8>)
 800365e:	441a      	add	r2, r3
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f7fe fd8f 	bl	800218a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800366c:	f001 fbaa 	bl	8004dc4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003670:	4b0d      	ldr	r3, [pc, #52]	; (80036a8 <prvAddNewTaskToReadyList+0xcc>)
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	2b00      	cmp	r3, #0
 8003676:	d00e      	beq.n	8003696 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003678:	4b0a      	ldr	r3, [pc, #40]	; (80036a4 <prvAddNewTaskToReadyList+0xc8>)
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003682:	429a      	cmp	r2, r3
 8003684:	d207      	bcs.n	8003696 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003686:	4b0c      	ldr	r3, [pc, #48]	; (80036b8 <prvAddNewTaskToReadyList+0xdc>)
 8003688:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	f3bf 8f4f 	dsb	sy
 8003692:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003696:	bf00      	nop
 8003698:	3708      	adds	r7, #8
 800369a:	46bd      	mov	sp, r7
 800369c:	bd80      	pop	{r7, pc}
 800369e:	bf00      	nop
 80036a0:	20000d80 	.word	0x20000d80
 80036a4:	200008ac 	.word	0x200008ac
 80036a8:	20000d8c 	.word	0x20000d8c
 80036ac:	20000d9c 	.word	0x20000d9c
 80036b0:	20000d88 	.word	0x20000d88
 80036b4:	200008b0 	.word	0x200008b0
 80036b8:	e000ed04 	.word	0xe000ed04

080036bc <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 80036c6:	2300      	movs	r3, #0
 80036c8:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	2b37      	cmp	r3, #55	; 0x37
 80036ce:	d90a      	bls.n	80036e6 <vTaskPrioritySet+0x2a>
	__asm volatile
 80036d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d4:	f383 8811 	msr	BASEPRI, r3
 80036d8:	f3bf 8f6f 	isb	sy
 80036dc:	f3bf 8f4f 	dsb	sy
 80036e0:	60fb      	str	r3, [r7, #12]
}
 80036e2:	bf00      	nop
 80036e4:	e7fe      	b.n	80036e4 <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036e6:	683b      	ldr	r3, [r7, #0]
 80036e8:	2b37      	cmp	r3, #55	; 0x37
 80036ea:	d901      	bls.n	80036f0 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036ec:	2337      	movs	r3, #55	; 0x37
 80036ee:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 80036f0:	f001 fb38 	bl	8004d64 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d102      	bne.n	8003700 <vTaskPrioritySet+0x44>
 80036fa:	4b3b      	ldr	r3, [pc, #236]	; (80037e8 <vTaskPrioritySet+0x12c>)
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	e000      	b.n	8003702 <vTaskPrioritySet+0x46>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8003704:	69bb      	ldr	r3, [r7, #24]
 8003706:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003708:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 800370a:	697a      	ldr	r2, [r7, #20]
 800370c:	683b      	ldr	r3, [r7, #0]
 800370e:	429a      	cmp	r2, r3
 8003710:	d063      	beq.n	80037da <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8003712:	683a      	ldr	r2, [r7, #0]
 8003714:	697b      	ldr	r3, [r7, #20]
 8003716:	429a      	cmp	r2, r3
 8003718:	d90d      	bls.n	8003736 <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 800371a:	4b33      	ldr	r3, [pc, #204]	; (80037e8 <vTaskPrioritySet+0x12c>)
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	69ba      	ldr	r2, [r7, #24]
 8003720:	429a      	cmp	r2, r3
 8003722:	d00f      	beq.n	8003744 <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8003724:	4b30      	ldr	r3, [pc, #192]	; (80037e8 <vTaskPrioritySet+0x12c>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372a:	683a      	ldr	r2, [r7, #0]
 800372c:	429a      	cmp	r2, r3
 800372e:	d309      	bcc.n	8003744 <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8003730:	2301      	movs	r3, #1
 8003732:	61fb      	str	r3, [r7, #28]
 8003734:	e006      	b.n	8003744 <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8003736:	4b2c      	ldr	r3, [pc, #176]	; (80037e8 <vTaskPrioritySet+0x12c>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	69ba      	ldr	r2, [r7, #24]
 800373c:	429a      	cmp	r2, r3
 800373e:	d101      	bne.n	8003744 <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8003740:	2301      	movs	r3, #1
 8003742:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003744:	69bb      	ldr	r3, [r7, #24]
 8003746:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003748:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 800374a:	69bb      	ldr	r3, [r7, #24]
 800374c:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800374e:	69bb      	ldr	r3, [r7, #24]
 8003750:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003752:	429a      	cmp	r2, r3
 8003754:	d102      	bne.n	800375c <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8003756:	69bb      	ldr	r3, [r7, #24]
 8003758:	683a      	ldr	r2, [r7, #0]
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003762:	69bb      	ldr	r3, [r7, #24]
 8003764:	699b      	ldr	r3, [r3, #24]
 8003766:	2b00      	cmp	r3, #0
 8003768:	db04      	blt.n	8003774 <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003770:	69bb      	ldr	r3, [r7, #24]
 8003772:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003774:	69bb      	ldr	r3, [r7, #24]
 8003776:	6959      	ldr	r1, [r3, #20]
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4613      	mov	r3, r2
 800377c:	009b      	lsls	r3, r3, #2
 800377e:	4413      	add	r3, r2
 8003780:	009b      	lsls	r3, r3, #2
 8003782:	4a1a      	ldr	r2, [pc, #104]	; (80037ec <vTaskPrioritySet+0x130>)
 8003784:	4413      	add	r3, r2
 8003786:	4299      	cmp	r1, r3
 8003788:	d11c      	bne.n	80037c4 <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800378a:	69bb      	ldr	r3, [r7, #24]
 800378c:	3304      	adds	r3, #4
 800378e:	4618      	mov	r0, r3
 8003790:	f7fe fd58 	bl	8002244 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8003794:	69bb      	ldr	r3, [r7, #24]
 8003796:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003798:	4b15      	ldr	r3, [pc, #84]	; (80037f0 <vTaskPrioritySet+0x134>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	429a      	cmp	r2, r3
 800379e:	d903      	bls.n	80037a8 <vTaskPrioritySet+0xec>
 80037a0:	69bb      	ldr	r3, [r7, #24]
 80037a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037a4:	4a12      	ldr	r2, [pc, #72]	; (80037f0 <vTaskPrioritySet+0x134>)
 80037a6:	6013      	str	r3, [r2, #0]
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ac:	4613      	mov	r3, r2
 80037ae:	009b      	lsls	r3, r3, #2
 80037b0:	4413      	add	r3, r2
 80037b2:	009b      	lsls	r3, r3, #2
 80037b4:	4a0d      	ldr	r2, [pc, #52]	; (80037ec <vTaskPrioritySet+0x130>)
 80037b6:	441a      	add	r2, r3
 80037b8:	69bb      	ldr	r3, [r7, #24]
 80037ba:	3304      	adds	r3, #4
 80037bc:	4619      	mov	r1, r3
 80037be:	4610      	mov	r0, r2
 80037c0:	f7fe fce3 	bl	800218a <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 80037c4:	69fb      	ldr	r3, [r7, #28]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d007      	beq.n	80037da <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 80037ca:	4b0a      	ldr	r3, [pc, #40]	; (80037f4 <vTaskPrioritySet+0x138>)
 80037cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037d0:	601a      	str	r2, [r3, #0]
 80037d2:	f3bf 8f4f 	dsb	sy
 80037d6:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 80037da:	f001 faf3 	bl	8004dc4 <vPortExitCritical>
	}
 80037de:	bf00      	nop
 80037e0:	3720      	adds	r7, #32
 80037e2:	46bd      	mov	sp, r7
 80037e4:	bd80      	pop	{r7, pc}
 80037e6:	bf00      	nop
 80037e8:	200008ac 	.word	0x200008ac
 80037ec:	200008b0 	.word	0x200008b0
 80037f0:	20000d88 	.word	0x20000d88
 80037f4:	e000ed04 	.word	0xe000ed04

080037f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	b08a      	sub	sp, #40	; 0x28
 80037fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80037fe:	2300      	movs	r3, #0
 8003800:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003802:	2300      	movs	r3, #0
 8003804:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003806:	463a      	mov	r2, r7
 8003808:	1d39      	adds	r1, r7, #4
 800380a:	f107 0308 	add.w	r3, r7, #8
 800380e:	4618      	mov	r0, r3
 8003810:	f7fe fc5a 	bl	80020c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003814:	6839      	ldr	r1, [r7, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	68ba      	ldr	r2, [r7, #8]
 800381a:	9202      	str	r2, [sp, #8]
 800381c:	9301      	str	r3, [sp, #4]
 800381e:	2300      	movs	r3, #0
 8003820:	9300      	str	r3, [sp, #0]
 8003822:	2300      	movs	r3, #0
 8003824:	460a      	mov	r2, r1
 8003826:	4924      	ldr	r1, [pc, #144]	; (80038b8 <vTaskStartScheduler+0xc0>)
 8003828:	4824      	ldr	r0, [pc, #144]	; (80038bc <vTaskStartScheduler+0xc4>)
 800382a:	f7ff fd8f 	bl	800334c <xTaskCreateStatic>
 800382e:	4603      	mov	r3, r0
 8003830:	4a23      	ldr	r2, [pc, #140]	; (80038c0 <vTaskStartScheduler+0xc8>)
 8003832:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8003834:	4b22      	ldr	r3, [pc, #136]	; (80038c0 <vTaskStartScheduler+0xc8>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d002      	beq.n	8003842 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800383c:	2301      	movs	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
 8003840:	e001      	b.n	8003846 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003842:	2300      	movs	r3, #0
 8003844:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8003846:	697b      	ldr	r3, [r7, #20]
 8003848:	2b01      	cmp	r3, #1
 800384a:	d102      	bne.n	8003852 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800384c:	f000 fe0e 	bl	800446c <xTimerCreateTimerTask>
 8003850:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003852:	697b      	ldr	r3, [r7, #20]
 8003854:	2b01      	cmp	r3, #1
 8003856:	d11b      	bne.n	8003890 <vTaskStartScheduler+0x98>
	__asm volatile
 8003858:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385c:	f383 8811 	msr	BASEPRI, r3
 8003860:	f3bf 8f6f 	isb	sy
 8003864:	f3bf 8f4f 	dsb	sy
 8003868:	613b      	str	r3, [r7, #16]
}
 800386a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800386c:	4b15      	ldr	r3, [pc, #84]	; (80038c4 <vTaskStartScheduler+0xcc>)
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	3354      	adds	r3, #84	; 0x54
 8003872:	4a15      	ldr	r2, [pc, #84]	; (80038c8 <vTaskStartScheduler+0xd0>)
 8003874:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8003876:	4b15      	ldr	r3, [pc, #84]	; (80038cc <vTaskStartScheduler+0xd4>)
 8003878:	f04f 32ff 	mov.w	r2, #4294967295
 800387c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800387e:	4b14      	ldr	r3, [pc, #80]	; (80038d0 <vTaskStartScheduler+0xd8>)
 8003880:	2201      	movs	r2, #1
 8003882:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003884:	4b13      	ldr	r3, [pc, #76]	; (80038d4 <vTaskStartScheduler+0xdc>)
 8003886:	2200      	movs	r2, #0
 8003888:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800388a:	f001 f9c9 	bl	8004c20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800388e:	e00e      	b.n	80038ae <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003896:	d10a      	bne.n	80038ae <vTaskStartScheduler+0xb6>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	60fb      	str	r3, [r7, #12]
}
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <vTaskStartScheduler+0xb4>
}
 80038ae:	bf00      	nop
 80038b0:	3718      	adds	r7, #24
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
 80038b6:	bf00      	nop
 80038b8:	080055bc 	.word	0x080055bc
 80038bc:	08003efd 	.word	0x08003efd
 80038c0:	20000da4 	.word	0x20000da4
 80038c4:	200008ac 	.word	0x200008ac
 80038c8:	20000010 	.word	0x20000010
 80038cc:	20000da0 	.word	0x20000da0
 80038d0:	20000d8c 	.word	0x20000d8c
 80038d4:	20000d84 	.word	0x20000d84

080038d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80038d8:	b480      	push	{r7}
 80038da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80038dc:	4b04      	ldr	r3, [pc, #16]	; (80038f0 <vTaskSuspendAll+0x18>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	3301      	adds	r3, #1
 80038e2:	4a03      	ldr	r2, [pc, #12]	; (80038f0 <vTaskSuspendAll+0x18>)
 80038e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80038e6:	bf00      	nop
 80038e8:	46bd      	mov	sp, r7
 80038ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038ee:	4770      	bx	lr
 80038f0:	20000da8 	.word	0x20000da8

080038f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80038fa:	2300      	movs	r3, #0
 80038fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80038fe:	2300      	movs	r3, #0
 8003900:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003902:	4b42      	ldr	r3, [pc, #264]	; (8003a0c <xTaskResumeAll+0x118>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10a      	bne.n	8003920 <xTaskResumeAll+0x2c>
	__asm volatile
 800390a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800390e:	f383 8811 	msr	BASEPRI, r3
 8003912:	f3bf 8f6f 	isb	sy
 8003916:	f3bf 8f4f 	dsb	sy
 800391a:	603b      	str	r3, [r7, #0]
}
 800391c:	bf00      	nop
 800391e:	e7fe      	b.n	800391e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8003920:	f001 fa20 	bl	8004d64 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8003924:	4b39      	ldr	r3, [pc, #228]	; (8003a0c <xTaskResumeAll+0x118>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	3b01      	subs	r3, #1
 800392a:	4a38      	ldr	r2, [pc, #224]	; (8003a0c <xTaskResumeAll+0x118>)
 800392c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800392e:	4b37      	ldr	r3, [pc, #220]	; (8003a0c <xTaskResumeAll+0x118>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d162      	bne.n	80039fc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8003936:	4b36      	ldr	r3, [pc, #216]	; (8003a10 <xTaskResumeAll+0x11c>)
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d05e      	beq.n	80039fc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800393e:	e02f      	b.n	80039a0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003940:	4b34      	ldr	r3, [pc, #208]	; (8003a14 <xTaskResumeAll+0x120>)
 8003942:	68db      	ldr	r3, [r3, #12]
 8003944:	68db      	ldr	r3, [r3, #12]
 8003946:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	3318      	adds	r3, #24
 800394c:	4618      	mov	r0, r3
 800394e:	f7fe fc79 	bl	8002244 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3304      	adds	r3, #4
 8003956:	4618      	mov	r0, r3
 8003958:	f7fe fc74 	bl	8002244 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003960:	4b2d      	ldr	r3, [pc, #180]	; (8003a18 <xTaskResumeAll+0x124>)
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d903      	bls.n	8003970 <xTaskResumeAll+0x7c>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	4a2a      	ldr	r2, [pc, #168]	; (8003a18 <xTaskResumeAll+0x124>)
 800396e:	6013      	str	r3, [r2, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003974:	4613      	mov	r3, r2
 8003976:	009b      	lsls	r3, r3, #2
 8003978:	4413      	add	r3, r2
 800397a:	009b      	lsls	r3, r3, #2
 800397c:	4a27      	ldr	r2, [pc, #156]	; (8003a1c <xTaskResumeAll+0x128>)
 800397e:	441a      	add	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	3304      	adds	r3, #4
 8003984:	4619      	mov	r1, r3
 8003986:	4610      	mov	r0, r2
 8003988:	f7fe fbff 	bl	800218a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003990:	4b23      	ldr	r3, [pc, #140]	; (8003a20 <xTaskResumeAll+0x12c>)
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003996:	429a      	cmp	r2, r3
 8003998:	d302      	bcc.n	80039a0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800399a:	4b22      	ldr	r3, [pc, #136]	; (8003a24 <xTaskResumeAll+0x130>)
 800399c:	2201      	movs	r2, #1
 800399e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80039a0:	4b1c      	ldr	r3, [pc, #112]	; (8003a14 <xTaskResumeAll+0x120>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d1cb      	bne.n	8003940 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80039ae:	f000 fb5f 	bl	8004070 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80039b2:	4b1d      	ldr	r3, [pc, #116]	; (8003a28 <xTaskResumeAll+0x134>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d010      	beq.n	80039e0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80039be:	f000 f847 	bl	8003a50 <xTaskIncrementTick>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d002      	beq.n	80039ce <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80039c8:	4b16      	ldr	r3, [pc, #88]	; (8003a24 <xTaskResumeAll+0x130>)
 80039ca:	2201      	movs	r2, #1
 80039cc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	3b01      	subs	r3, #1
 80039d2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1f1      	bne.n	80039be <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80039da:	4b13      	ldr	r3, [pc, #76]	; (8003a28 <xTaskResumeAll+0x134>)
 80039dc:	2200      	movs	r2, #0
 80039de:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80039e0:	4b10      	ldr	r3, [pc, #64]	; (8003a24 <xTaskResumeAll+0x130>)
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d009      	beq.n	80039fc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80039e8:	2301      	movs	r3, #1
 80039ea:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80039ec:	4b0f      	ldr	r3, [pc, #60]	; (8003a2c <xTaskResumeAll+0x138>)
 80039ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039f2:	601a      	str	r2, [r3, #0]
 80039f4:	f3bf 8f4f 	dsb	sy
 80039f8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80039fc:	f001 f9e2 	bl	8004dc4 <vPortExitCritical>

	return xAlreadyYielded;
 8003a00:	68bb      	ldr	r3, [r7, #8]
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3710      	adds	r7, #16
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	20000da8 	.word	0x20000da8
 8003a10:	20000d80 	.word	0x20000d80
 8003a14:	20000d40 	.word	0x20000d40
 8003a18:	20000d88 	.word	0x20000d88
 8003a1c:	200008b0 	.word	0x200008b0
 8003a20:	200008ac 	.word	0x200008ac
 8003a24:	20000d94 	.word	0x20000d94
 8003a28:	20000d90 	.word	0x20000d90
 8003a2c:	e000ed04 	.word	0xe000ed04

08003a30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003a30:	b480      	push	{r7}
 8003a32:	b083      	sub	sp, #12
 8003a34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003a36:	4b05      	ldr	r3, [pc, #20]	; (8003a4c <xTaskGetTickCount+0x1c>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003a3c:	687b      	ldr	r3, [r7, #4]
}
 8003a3e:	4618      	mov	r0, r3
 8003a40:	370c      	adds	r7, #12
 8003a42:	46bd      	mov	sp, r7
 8003a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a48:	4770      	bx	lr
 8003a4a:	bf00      	nop
 8003a4c:	20000d84 	.word	0x20000d84

08003a50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b086      	sub	sp, #24
 8003a54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003a56:	2300      	movs	r3, #0
 8003a58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003a5a:	4b4f      	ldr	r3, [pc, #316]	; (8003b98 <xTaskIncrementTick+0x148>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	f040 808f 	bne.w	8003b82 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003a64:	4b4d      	ldr	r3, [pc, #308]	; (8003b9c <xTaskIncrementTick+0x14c>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	3301      	adds	r3, #1
 8003a6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003a6c:	4a4b      	ldr	r2, [pc, #300]	; (8003b9c <xTaskIncrementTick+0x14c>)
 8003a6e:	693b      	ldr	r3, [r7, #16]
 8003a70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d120      	bne.n	8003aba <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003a78:	4b49      	ldr	r3, [pc, #292]	; (8003ba0 <xTaskIncrementTick+0x150>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <xTaskIncrementTick+0x48>
	__asm volatile
 8003a82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a86:	f383 8811 	msr	BASEPRI, r3
 8003a8a:	f3bf 8f6f 	isb	sy
 8003a8e:	f3bf 8f4f 	dsb	sy
 8003a92:	603b      	str	r3, [r7, #0]
}
 8003a94:	bf00      	nop
 8003a96:	e7fe      	b.n	8003a96 <xTaskIncrementTick+0x46>
 8003a98:	4b41      	ldr	r3, [pc, #260]	; (8003ba0 <xTaskIncrementTick+0x150>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	60fb      	str	r3, [r7, #12]
 8003a9e:	4b41      	ldr	r3, [pc, #260]	; (8003ba4 <xTaskIncrementTick+0x154>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	4a3f      	ldr	r2, [pc, #252]	; (8003ba0 <xTaskIncrementTick+0x150>)
 8003aa4:	6013      	str	r3, [r2, #0]
 8003aa6:	4a3f      	ldr	r2, [pc, #252]	; (8003ba4 <xTaskIncrementTick+0x154>)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6013      	str	r3, [r2, #0]
 8003aac:	4b3e      	ldr	r3, [pc, #248]	; (8003ba8 <xTaskIncrementTick+0x158>)
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	3301      	adds	r3, #1
 8003ab2:	4a3d      	ldr	r2, [pc, #244]	; (8003ba8 <xTaskIncrementTick+0x158>)
 8003ab4:	6013      	str	r3, [r2, #0]
 8003ab6:	f000 fadb 	bl	8004070 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003aba:	4b3c      	ldr	r3, [pc, #240]	; (8003bac <xTaskIncrementTick+0x15c>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	693a      	ldr	r2, [r7, #16]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d349      	bcc.n	8003b58 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003ac4:	4b36      	ldr	r3, [pc, #216]	; (8003ba0 <xTaskIncrementTick+0x150>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d104      	bne.n	8003ad8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ace:	4b37      	ldr	r3, [pc, #220]	; (8003bac <xTaskIncrementTick+0x15c>)
 8003ad0:	f04f 32ff 	mov.w	r2, #4294967295
 8003ad4:	601a      	str	r2, [r3, #0]
					break;
 8003ad6:	e03f      	b.n	8003b58 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ad8:	4b31      	ldr	r3, [pc, #196]	; (8003ba0 <xTaskIncrementTick+0x150>)
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	68db      	ldr	r3, [r3, #12]
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003ae8:	693a      	ldr	r2, [r7, #16]
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	429a      	cmp	r2, r3
 8003aee:	d203      	bcs.n	8003af8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003af0:	4a2e      	ldr	r2, [pc, #184]	; (8003bac <xTaskIncrementTick+0x15c>)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003af6:	e02f      	b.n	8003b58 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	3304      	adds	r3, #4
 8003afc:	4618      	mov	r0, r3
 8003afe:	f7fe fba1 	bl	8002244 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003b02:	68bb      	ldr	r3, [r7, #8]
 8003b04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b06:	2b00      	cmp	r3, #0
 8003b08:	d004      	beq.n	8003b14 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	3318      	adds	r3, #24
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f7fe fb98 	bl	8002244 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003b14:	68bb      	ldr	r3, [r7, #8]
 8003b16:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b18:	4b25      	ldr	r3, [pc, #148]	; (8003bb0 <xTaskIncrementTick+0x160>)
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	429a      	cmp	r2, r3
 8003b1e:	d903      	bls.n	8003b28 <xTaskIncrementTick+0xd8>
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b24:	4a22      	ldr	r2, [pc, #136]	; (8003bb0 <xTaskIncrementTick+0x160>)
 8003b26:	6013      	str	r3, [r2, #0]
 8003b28:	68bb      	ldr	r3, [r7, #8]
 8003b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b2c:	4613      	mov	r3, r2
 8003b2e:	009b      	lsls	r3, r3, #2
 8003b30:	4413      	add	r3, r2
 8003b32:	009b      	lsls	r3, r3, #2
 8003b34:	4a1f      	ldr	r2, [pc, #124]	; (8003bb4 <xTaskIncrementTick+0x164>)
 8003b36:	441a      	add	r2, r3
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	3304      	adds	r3, #4
 8003b3c:	4619      	mov	r1, r3
 8003b3e:	4610      	mov	r0, r2
 8003b40:	f7fe fb23 	bl	800218a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b48:	4b1b      	ldr	r3, [pc, #108]	; (8003bb8 <xTaskIncrementTick+0x168>)
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4e:	429a      	cmp	r2, r3
 8003b50:	d3b8      	bcc.n	8003ac4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003b52:	2301      	movs	r3, #1
 8003b54:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b56:	e7b5      	b.n	8003ac4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003b58:	4b17      	ldr	r3, [pc, #92]	; (8003bb8 <xTaskIncrementTick+0x168>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5e:	4915      	ldr	r1, [pc, #84]	; (8003bb4 <xTaskIncrementTick+0x164>)
 8003b60:	4613      	mov	r3, r2
 8003b62:	009b      	lsls	r3, r3, #2
 8003b64:	4413      	add	r3, r2
 8003b66:	009b      	lsls	r3, r3, #2
 8003b68:	440b      	add	r3, r1
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	2b01      	cmp	r3, #1
 8003b6e:	d901      	bls.n	8003b74 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003b70:	2301      	movs	r3, #1
 8003b72:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003b74:	4b11      	ldr	r3, [pc, #68]	; (8003bbc <xTaskIncrementTick+0x16c>)
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d007      	beq.n	8003b8c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003b7c:	2301      	movs	r3, #1
 8003b7e:	617b      	str	r3, [r7, #20]
 8003b80:	e004      	b.n	8003b8c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003b82:	4b0f      	ldr	r3, [pc, #60]	; (8003bc0 <xTaskIncrementTick+0x170>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	3301      	adds	r3, #1
 8003b88:	4a0d      	ldr	r2, [pc, #52]	; (8003bc0 <xTaskIncrementTick+0x170>)
 8003b8a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003b8c:	697b      	ldr	r3, [r7, #20]
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3718      	adds	r7, #24
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	20000da8 	.word	0x20000da8
 8003b9c:	20000d84 	.word	0x20000d84
 8003ba0:	20000d38 	.word	0x20000d38
 8003ba4:	20000d3c 	.word	0x20000d3c
 8003ba8:	20000d98 	.word	0x20000d98
 8003bac:	20000da0 	.word	0x20000da0
 8003bb0:	20000d88 	.word	0x20000d88
 8003bb4:	200008b0 	.word	0x200008b0
 8003bb8:	200008ac 	.word	0x200008ac
 8003bbc:	20000d94 	.word	0x20000d94
 8003bc0:	20000d90 	.word	0x20000d90

08003bc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b085      	sub	sp, #20
 8003bc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003bca:	4b2a      	ldr	r3, [pc, #168]	; (8003c74 <vTaskSwitchContext+0xb0>)
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d003      	beq.n	8003bda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003bd2:	4b29      	ldr	r3, [pc, #164]	; (8003c78 <vTaskSwitchContext+0xb4>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003bd8:	e046      	b.n	8003c68 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003bda:	4b27      	ldr	r3, [pc, #156]	; (8003c78 <vTaskSwitchContext+0xb4>)
 8003bdc:	2200      	movs	r2, #0
 8003bde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003be0:	4b26      	ldr	r3, [pc, #152]	; (8003c7c <vTaskSwitchContext+0xb8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]
 8003be6:	e010      	b.n	8003c0a <vTaskSwitchContext+0x46>
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d10a      	bne.n	8003c04 <vTaskSwitchContext+0x40>
	__asm volatile
 8003bee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bf2:	f383 8811 	msr	BASEPRI, r3
 8003bf6:	f3bf 8f6f 	isb	sy
 8003bfa:	f3bf 8f4f 	dsb	sy
 8003bfe:	607b      	str	r3, [r7, #4]
}
 8003c00:	bf00      	nop
 8003c02:	e7fe      	b.n	8003c02 <vTaskSwitchContext+0x3e>
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	3b01      	subs	r3, #1
 8003c08:	60fb      	str	r3, [r7, #12]
 8003c0a:	491d      	ldr	r1, [pc, #116]	; (8003c80 <vTaskSwitchContext+0xbc>)
 8003c0c:	68fa      	ldr	r2, [r7, #12]
 8003c0e:	4613      	mov	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4413      	add	r3, r2
 8003c14:	009b      	lsls	r3, r3, #2
 8003c16:	440b      	add	r3, r1
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	2b00      	cmp	r3, #0
 8003c1c:	d0e4      	beq.n	8003be8 <vTaskSwitchContext+0x24>
 8003c1e:	68fa      	ldr	r2, [r7, #12]
 8003c20:	4613      	mov	r3, r2
 8003c22:	009b      	lsls	r3, r3, #2
 8003c24:	4413      	add	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4a15      	ldr	r2, [pc, #84]	; (8003c80 <vTaskSwitchContext+0xbc>)
 8003c2a:	4413      	add	r3, r2
 8003c2c:	60bb      	str	r3, [r7, #8]
 8003c2e:	68bb      	ldr	r3, [r7, #8]
 8003c30:	685b      	ldr	r3, [r3, #4]
 8003c32:	685a      	ldr	r2, [r3, #4]
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	605a      	str	r2, [r3, #4]
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	685a      	ldr	r2, [r3, #4]
 8003c3c:	68bb      	ldr	r3, [r7, #8]
 8003c3e:	3308      	adds	r3, #8
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d104      	bne.n	8003c4e <vTaskSwitchContext+0x8a>
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	685b      	ldr	r3, [r3, #4]
 8003c48:	685a      	ldr	r2, [r3, #4]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	605a      	str	r2, [r3, #4]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	68db      	ldr	r3, [r3, #12]
 8003c54:	4a0b      	ldr	r2, [pc, #44]	; (8003c84 <vTaskSwitchContext+0xc0>)
 8003c56:	6013      	str	r3, [r2, #0]
 8003c58:	4a08      	ldr	r2, [pc, #32]	; (8003c7c <vTaskSwitchContext+0xb8>)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003c5e:	4b09      	ldr	r3, [pc, #36]	; (8003c84 <vTaskSwitchContext+0xc0>)
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	3354      	adds	r3, #84	; 0x54
 8003c64:	4a08      	ldr	r2, [pc, #32]	; (8003c88 <vTaskSwitchContext+0xc4>)
 8003c66:	6013      	str	r3, [r2, #0]
}
 8003c68:	bf00      	nop
 8003c6a:	3714      	adds	r7, #20
 8003c6c:	46bd      	mov	sp, r7
 8003c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c72:	4770      	bx	lr
 8003c74:	20000da8 	.word	0x20000da8
 8003c78:	20000d94 	.word	0x20000d94
 8003c7c:	20000d88 	.word	0x20000d88
 8003c80:	200008b0 	.word	0x200008b0
 8003c84:	200008ac 	.word	0x200008ac
 8003c88:	20000010 	.word	0x20000010

08003c8c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003c8c:	b580      	push	{r7, lr}
 8003c8e:	b084      	sub	sp, #16
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
 8003c94:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d10a      	bne.n	8003cb2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ca0:	f383 8811 	msr	BASEPRI, r3
 8003ca4:	f3bf 8f6f 	isb	sy
 8003ca8:	f3bf 8f4f 	dsb	sy
 8003cac:	60fb      	str	r3, [r7, #12]
}
 8003cae:	bf00      	nop
 8003cb0:	e7fe      	b.n	8003cb0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cb2:	4b07      	ldr	r3, [pc, #28]	; (8003cd0 <vTaskPlaceOnEventList+0x44>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	3318      	adds	r3, #24
 8003cb8:	4619      	mov	r1, r3
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f7fe fa89 	bl	80021d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003cc0:	2101      	movs	r1, #1
 8003cc2:	6838      	ldr	r0, [r7, #0]
 8003cc4:	f000 fb7e 	bl	80043c4 <prvAddCurrentTaskToDelayedList>
}
 8003cc8:	bf00      	nop
 8003cca:	3710      	adds	r7, #16
 8003ccc:	46bd      	mov	sp, r7
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	200008ac 	.word	0x200008ac

08003cd4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003cd4:	b580      	push	{r7, lr}
 8003cd6:	b086      	sub	sp, #24
 8003cd8:	af00      	add	r7, sp, #0
 8003cda:	60f8      	str	r0, [r7, #12]
 8003cdc:	60b9      	str	r1, [r7, #8]
 8003cde:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d10a      	bne.n	8003cfc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003ce6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cea:	f383 8811 	msr	BASEPRI, r3
 8003cee:	f3bf 8f6f 	isb	sy
 8003cf2:	f3bf 8f4f 	dsb	sy
 8003cf6:	617b      	str	r3, [r7, #20]
}
 8003cf8:	bf00      	nop
 8003cfa:	e7fe      	b.n	8003cfa <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003cfc:	4b0a      	ldr	r3, [pc, #40]	; (8003d28 <vTaskPlaceOnEventListRestricted+0x54>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	3318      	adds	r3, #24
 8003d02:	4619      	mov	r1, r3
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f7fe fa40 	bl	800218a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d002      	beq.n	8003d16 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003d10:	f04f 33ff 	mov.w	r3, #4294967295
 8003d14:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003d16:	6879      	ldr	r1, [r7, #4]
 8003d18:	68b8      	ldr	r0, [r7, #8]
 8003d1a:	f000 fb53 	bl	80043c4 <prvAddCurrentTaskToDelayedList>
	}
 8003d1e:	bf00      	nop
 8003d20:	3718      	adds	r7, #24
 8003d22:	46bd      	mov	sp, r7
 8003d24:	bd80      	pop	{r7, pc}
 8003d26:	bf00      	nop
 8003d28:	200008ac 	.word	0x200008ac

08003d2c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	b086      	sub	sp, #24
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	68db      	ldr	r3, [r3, #12]
 8003d38:	68db      	ldr	r3, [r3, #12]
 8003d3a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d10a      	bne.n	8003d58 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d46:	f383 8811 	msr	BASEPRI, r3
 8003d4a:	f3bf 8f6f 	isb	sy
 8003d4e:	f3bf 8f4f 	dsb	sy
 8003d52:	60fb      	str	r3, [r7, #12]
}
 8003d54:	bf00      	nop
 8003d56:	e7fe      	b.n	8003d56 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003d58:	693b      	ldr	r3, [r7, #16]
 8003d5a:	3318      	adds	r3, #24
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	f7fe fa71 	bl	8002244 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003d62:	4b1e      	ldr	r3, [pc, #120]	; (8003ddc <xTaskRemoveFromEventList+0xb0>)
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d11d      	bne.n	8003da6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003d6a:	693b      	ldr	r3, [r7, #16]
 8003d6c:	3304      	adds	r3, #4
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe fa68 	bl	8002244 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003d74:	693b      	ldr	r3, [r7, #16]
 8003d76:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d78:	4b19      	ldr	r3, [pc, #100]	; (8003de0 <xTaskRemoveFromEventList+0xb4>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d903      	bls.n	8003d88 <xTaskRemoveFromEventList+0x5c>
 8003d80:	693b      	ldr	r3, [r7, #16]
 8003d82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d84:	4a16      	ldr	r2, [pc, #88]	; (8003de0 <xTaskRemoveFromEventList+0xb4>)
 8003d86:	6013      	str	r3, [r2, #0]
 8003d88:	693b      	ldr	r3, [r7, #16]
 8003d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d8c:	4613      	mov	r3, r2
 8003d8e:	009b      	lsls	r3, r3, #2
 8003d90:	4413      	add	r3, r2
 8003d92:	009b      	lsls	r3, r3, #2
 8003d94:	4a13      	ldr	r2, [pc, #76]	; (8003de4 <xTaskRemoveFromEventList+0xb8>)
 8003d96:	441a      	add	r2, r3
 8003d98:	693b      	ldr	r3, [r7, #16]
 8003d9a:	3304      	adds	r3, #4
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4610      	mov	r0, r2
 8003da0:	f7fe f9f3 	bl	800218a <vListInsertEnd>
 8003da4:	e005      	b.n	8003db2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	3318      	adds	r3, #24
 8003daa:	4619      	mov	r1, r3
 8003dac:	480e      	ldr	r0, [pc, #56]	; (8003de8 <xTaskRemoveFromEventList+0xbc>)
 8003dae:	f7fe f9ec 	bl	800218a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db6:	4b0d      	ldr	r3, [pc, #52]	; (8003dec <xTaskRemoveFromEventList+0xc0>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d905      	bls.n	8003dcc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003dc4:	4b0a      	ldr	r3, [pc, #40]	; (8003df0 <xTaskRemoveFromEventList+0xc4>)
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	601a      	str	r2, [r3, #0]
 8003dca:	e001      	b.n	8003dd0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003dd0:	697b      	ldr	r3, [r7, #20]
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3718      	adds	r7, #24
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}
 8003dda:	bf00      	nop
 8003ddc:	20000da8 	.word	0x20000da8
 8003de0:	20000d88 	.word	0x20000d88
 8003de4:	200008b0 	.word	0x200008b0
 8003de8:	20000d40 	.word	0x20000d40
 8003dec:	200008ac 	.word	0x200008ac
 8003df0:	20000d94 	.word	0x20000d94

08003df4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003df4:	b480      	push	{r7}
 8003df6:	b083      	sub	sp, #12
 8003df8:	af00      	add	r7, sp, #0
 8003dfa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003dfc:	4b06      	ldr	r3, [pc, #24]	; (8003e18 <vTaskInternalSetTimeOutState+0x24>)
 8003dfe:	681a      	ldr	r2, [r3, #0]
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003e04:	4b05      	ldr	r3, [pc, #20]	; (8003e1c <vTaskInternalSetTimeOutState+0x28>)
 8003e06:	681a      	ldr	r2, [r3, #0]
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	605a      	str	r2, [r3, #4]
}
 8003e0c:	bf00      	nop
 8003e0e:	370c      	adds	r7, #12
 8003e10:	46bd      	mov	sp, r7
 8003e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e16:	4770      	bx	lr
 8003e18:	20000d98 	.word	0x20000d98
 8003e1c:	20000d84 	.word	0x20000d84

08003e20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003e20:	b580      	push	{r7, lr}
 8003e22:	b088      	sub	sp, #32
 8003e24:	af00      	add	r7, sp, #0
 8003e26:	6078      	str	r0, [r7, #4]
 8003e28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d10a      	bne.n	8003e46 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003e30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e34:	f383 8811 	msr	BASEPRI, r3
 8003e38:	f3bf 8f6f 	isb	sy
 8003e3c:	f3bf 8f4f 	dsb	sy
 8003e40:	613b      	str	r3, [r7, #16]
}
 8003e42:	bf00      	nop
 8003e44:	e7fe      	b.n	8003e44 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003e46:	683b      	ldr	r3, [r7, #0]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d10a      	bne.n	8003e62 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003e4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e50:	f383 8811 	msr	BASEPRI, r3
 8003e54:	f3bf 8f6f 	isb	sy
 8003e58:	f3bf 8f4f 	dsb	sy
 8003e5c:	60fb      	str	r3, [r7, #12]
}
 8003e5e:	bf00      	nop
 8003e60:	e7fe      	b.n	8003e60 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003e62:	f000 ff7f 	bl	8004d64 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003e66:	4b1d      	ldr	r3, [pc, #116]	; (8003edc <xTaskCheckForTimeOut+0xbc>)
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	685b      	ldr	r3, [r3, #4]
 8003e70:	69ba      	ldr	r2, [r7, #24]
 8003e72:	1ad3      	subs	r3, r2, r3
 8003e74:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e7e:	d102      	bne.n	8003e86 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003e80:	2300      	movs	r3, #0
 8003e82:	61fb      	str	r3, [r7, #28]
 8003e84:	e023      	b.n	8003ece <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681a      	ldr	r2, [r3, #0]
 8003e8a:	4b15      	ldr	r3, [pc, #84]	; (8003ee0 <xTaskCheckForTimeOut+0xc0>)
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	429a      	cmp	r2, r3
 8003e90:	d007      	beq.n	8003ea2 <xTaskCheckForTimeOut+0x82>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	429a      	cmp	r2, r3
 8003e9a:	d302      	bcc.n	8003ea2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003e9c:	2301      	movs	r3, #1
 8003e9e:	61fb      	str	r3, [r7, #28]
 8003ea0:	e015      	b.n	8003ece <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	697a      	ldr	r2, [r7, #20]
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d20b      	bcs.n	8003ec4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003eac:	683b      	ldr	r3, [r7, #0]
 8003eae:	681a      	ldr	r2, [r3, #0]
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	1ad2      	subs	r2, r2, r3
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f7ff ff9b 	bl	8003df4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003ebe:	2300      	movs	r3, #0
 8003ec0:	61fb      	str	r3, [r7, #28]
 8003ec2:	e004      	b.n	8003ece <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003ec4:	683b      	ldr	r3, [r7, #0]
 8003ec6:	2200      	movs	r2, #0
 8003ec8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003ece:	f000 ff79 	bl	8004dc4 <vPortExitCritical>

	return xReturn;
 8003ed2:	69fb      	ldr	r3, [r7, #28]
}
 8003ed4:	4618      	mov	r0, r3
 8003ed6:	3720      	adds	r7, #32
 8003ed8:	46bd      	mov	sp, r7
 8003eda:	bd80      	pop	{r7, pc}
 8003edc:	20000d84 	.word	0x20000d84
 8003ee0:	20000d98 	.word	0x20000d98

08003ee4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003ee4:	b480      	push	{r7}
 8003ee6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003ee8:	4b03      	ldr	r3, [pc, #12]	; (8003ef8 <vTaskMissedYield+0x14>)
 8003eea:	2201      	movs	r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
}
 8003eee:	bf00      	nop
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef6:	4770      	bx	lr
 8003ef8:	20000d94 	.word	0x20000d94

08003efc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003f04:	f000 f852 	bl	8003fac <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003f08:	4b06      	ldr	r3, [pc, #24]	; (8003f24 <prvIdleTask+0x28>)
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d9f9      	bls.n	8003f04 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003f10:	4b05      	ldr	r3, [pc, #20]	; (8003f28 <prvIdleTask+0x2c>)
 8003f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f16:	601a      	str	r2, [r3, #0]
 8003f18:	f3bf 8f4f 	dsb	sy
 8003f1c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003f20:	e7f0      	b.n	8003f04 <prvIdleTask+0x8>
 8003f22:	bf00      	nop
 8003f24:	200008b0 	.word	0x200008b0
 8003f28:	e000ed04 	.word	0xe000ed04

08003f2c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f32:	2300      	movs	r3, #0
 8003f34:	607b      	str	r3, [r7, #4]
 8003f36:	e00c      	b.n	8003f52 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	009b      	lsls	r3, r3, #2
 8003f3e:	4413      	add	r3, r2
 8003f40:	009b      	lsls	r3, r3, #2
 8003f42:	4a12      	ldr	r2, [pc, #72]	; (8003f8c <prvInitialiseTaskLists+0x60>)
 8003f44:	4413      	add	r3, r2
 8003f46:	4618      	mov	r0, r3
 8003f48:	f7fe f8f2 	bl	8002130 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	3301      	adds	r3, #1
 8003f50:	607b      	str	r3, [r7, #4]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	2b37      	cmp	r3, #55	; 0x37
 8003f56:	d9ef      	bls.n	8003f38 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003f58:	480d      	ldr	r0, [pc, #52]	; (8003f90 <prvInitialiseTaskLists+0x64>)
 8003f5a:	f7fe f8e9 	bl	8002130 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003f5e:	480d      	ldr	r0, [pc, #52]	; (8003f94 <prvInitialiseTaskLists+0x68>)
 8003f60:	f7fe f8e6 	bl	8002130 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003f64:	480c      	ldr	r0, [pc, #48]	; (8003f98 <prvInitialiseTaskLists+0x6c>)
 8003f66:	f7fe f8e3 	bl	8002130 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003f6a:	480c      	ldr	r0, [pc, #48]	; (8003f9c <prvInitialiseTaskLists+0x70>)
 8003f6c:	f7fe f8e0 	bl	8002130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003f70:	480b      	ldr	r0, [pc, #44]	; (8003fa0 <prvInitialiseTaskLists+0x74>)
 8003f72:	f7fe f8dd 	bl	8002130 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003f76:	4b0b      	ldr	r3, [pc, #44]	; (8003fa4 <prvInitialiseTaskLists+0x78>)
 8003f78:	4a05      	ldr	r2, [pc, #20]	; (8003f90 <prvInitialiseTaskLists+0x64>)
 8003f7a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003f7c:	4b0a      	ldr	r3, [pc, #40]	; (8003fa8 <prvInitialiseTaskLists+0x7c>)
 8003f7e:	4a05      	ldr	r2, [pc, #20]	; (8003f94 <prvInitialiseTaskLists+0x68>)
 8003f80:	601a      	str	r2, [r3, #0]
}
 8003f82:	bf00      	nop
 8003f84:	3708      	adds	r7, #8
 8003f86:	46bd      	mov	sp, r7
 8003f88:	bd80      	pop	{r7, pc}
 8003f8a:	bf00      	nop
 8003f8c:	200008b0 	.word	0x200008b0
 8003f90:	20000d10 	.word	0x20000d10
 8003f94:	20000d24 	.word	0x20000d24
 8003f98:	20000d40 	.word	0x20000d40
 8003f9c:	20000d54 	.word	0x20000d54
 8003fa0:	20000d6c 	.word	0x20000d6c
 8003fa4:	20000d38 	.word	0x20000d38
 8003fa8:	20000d3c 	.word	0x20000d3c

08003fac <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fb2:	e019      	b.n	8003fe8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003fb4:	f000 fed6 	bl	8004d64 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003fb8:	4b10      	ldr	r3, [pc, #64]	; (8003ffc <prvCheckTasksWaitingTermination+0x50>)
 8003fba:	68db      	ldr	r3, [r3, #12]
 8003fbc:	68db      	ldr	r3, [r3, #12]
 8003fbe:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	3304      	adds	r3, #4
 8003fc4:	4618      	mov	r0, r3
 8003fc6:	f7fe f93d 	bl	8002244 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003fca:	4b0d      	ldr	r3, [pc, #52]	; (8004000 <prvCheckTasksWaitingTermination+0x54>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	3b01      	subs	r3, #1
 8003fd0:	4a0b      	ldr	r2, [pc, #44]	; (8004000 <prvCheckTasksWaitingTermination+0x54>)
 8003fd2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003fd4:	4b0b      	ldr	r3, [pc, #44]	; (8004004 <prvCheckTasksWaitingTermination+0x58>)
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	4a0a      	ldr	r2, [pc, #40]	; (8004004 <prvCheckTasksWaitingTermination+0x58>)
 8003fdc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003fde:	f000 fef1 	bl	8004dc4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f000 f810 	bl	8004008 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003fe8:	4b06      	ldr	r3, [pc, #24]	; (8004004 <prvCheckTasksWaitingTermination+0x58>)
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d1e1      	bne.n	8003fb4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003ff0:	bf00      	nop
 8003ff2:	bf00      	nop
 8003ff4:	3708      	adds	r7, #8
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	bd80      	pop	{r7, pc}
 8003ffa:	bf00      	nop
 8003ffc:	20000d54 	.word	0x20000d54
 8004000:	20000d80 	.word	0x20000d80
 8004004:	20000d68 	.word	0x20000d68

08004008 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3354      	adds	r3, #84	; 0x54
 8004014:	4618      	mov	r0, r3
 8004016:	f001 f9fb 	bl	8005410 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004020:	2b00      	cmp	r3, #0
 8004022:	d108      	bne.n	8004036 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004028:	4618      	mov	r0, r3
 800402a:	f001 f889 	bl	8005140 <vPortFree>
				vPortFree( pxTCB );
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f001 f886 	bl	8005140 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004034:	e018      	b.n	8004068 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800403c:	2b01      	cmp	r3, #1
 800403e:	d103      	bne.n	8004048 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f001 f87d 	bl	8005140 <vPortFree>
	}
 8004046:	e00f      	b.n	8004068 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800404e:	2b02      	cmp	r3, #2
 8004050:	d00a      	beq.n	8004068 <prvDeleteTCB+0x60>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	60fb      	str	r3, [r7, #12]
}
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <prvDeleteTCB+0x5e>
	}
 8004068:	bf00      	nop
 800406a:	3710      	adds	r7, #16
 800406c:	46bd      	mov	sp, r7
 800406e:	bd80      	pop	{r7, pc}

08004070 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004070:	b480      	push	{r7}
 8004072:	b083      	sub	sp, #12
 8004074:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004076:	4b0c      	ldr	r3, [pc, #48]	; (80040a8 <prvResetNextTaskUnblockTime+0x38>)
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d104      	bne.n	800408a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004080:	4b0a      	ldr	r3, [pc, #40]	; (80040ac <prvResetNextTaskUnblockTime+0x3c>)
 8004082:	f04f 32ff 	mov.w	r2, #4294967295
 8004086:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004088:	e008      	b.n	800409c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800408a:	4b07      	ldr	r3, [pc, #28]	; (80040a8 <prvResetNextTaskUnblockTime+0x38>)
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	68db      	ldr	r3, [r3, #12]
 8004092:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	685b      	ldr	r3, [r3, #4]
 8004098:	4a04      	ldr	r2, [pc, #16]	; (80040ac <prvResetNextTaskUnblockTime+0x3c>)
 800409a:	6013      	str	r3, [r2, #0]
}
 800409c:	bf00      	nop
 800409e:	370c      	adds	r7, #12
 80040a0:	46bd      	mov	sp, r7
 80040a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a6:	4770      	bx	lr
 80040a8:	20000d38 	.word	0x20000d38
 80040ac:	20000da0 	.word	0x20000da0

080040b0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80040b6:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <xTaskGetSchedulerState+0x34>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d102      	bne.n	80040c4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80040be:	2301      	movs	r3, #1
 80040c0:	607b      	str	r3, [r7, #4]
 80040c2:	e008      	b.n	80040d6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80040c4:	4b08      	ldr	r3, [pc, #32]	; (80040e8 <xTaskGetSchedulerState+0x38>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d102      	bne.n	80040d2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80040cc:	2302      	movs	r3, #2
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	e001      	b.n	80040d6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80040d2:	2300      	movs	r3, #0
 80040d4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80040d6:	687b      	ldr	r3, [r7, #4]
	}
 80040d8:	4618      	mov	r0, r3
 80040da:	370c      	adds	r7, #12
 80040dc:	46bd      	mov	sp, r7
 80040de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e2:	4770      	bx	lr
 80040e4:	20000d8c 	.word	0x20000d8c
 80040e8:	20000da8 	.word	0x20000da8

080040ec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80040f8:	2300      	movs	r3, #0
 80040fa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d051      	beq.n	80041a6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004106:	4b2a      	ldr	r3, [pc, #168]	; (80041b0 <xTaskPriorityInherit+0xc4>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800410c:	429a      	cmp	r2, r3
 800410e:	d241      	bcs.n	8004194 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004110:	68bb      	ldr	r3, [r7, #8]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	2b00      	cmp	r3, #0
 8004116:	db06      	blt.n	8004126 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004118:	4b25      	ldr	r3, [pc, #148]	; (80041b0 <xTaskPriorityInherit+0xc4>)
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004122:	68bb      	ldr	r3, [r7, #8]
 8004124:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004126:	68bb      	ldr	r3, [r7, #8]
 8004128:	6959      	ldr	r1, [r3, #20]
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800412e:	4613      	mov	r3, r2
 8004130:	009b      	lsls	r3, r3, #2
 8004132:	4413      	add	r3, r2
 8004134:	009b      	lsls	r3, r3, #2
 8004136:	4a1f      	ldr	r2, [pc, #124]	; (80041b4 <xTaskPriorityInherit+0xc8>)
 8004138:	4413      	add	r3, r2
 800413a:	4299      	cmp	r1, r3
 800413c:	d122      	bne.n	8004184 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	3304      	adds	r3, #4
 8004142:	4618      	mov	r0, r3
 8004144:	f7fe f87e 	bl	8002244 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004148:	4b19      	ldr	r3, [pc, #100]	; (80041b0 <xTaskPriorityInherit+0xc4>)
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004156:	4b18      	ldr	r3, [pc, #96]	; (80041b8 <xTaskPriorityInherit+0xcc>)
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	429a      	cmp	r2, r3
 800415c:	d903      	bls.n	8004166 <xTaskPriorityInherit+0x7a>
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004162:	4a15      	ldr	r2, [pc, #84]	; (80041b8 <xTaskPriorityInherit+0xcc>)
 8004164:	6013      	str	r3, [r2, #0]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800416a:	4613      	mov	r3, r2
 800416c:	009b      	lsls	r3, r3, #2
 800416e:	4413      	add	r3, r2
 8004170:	009b      	lsls	r3, r3, #2
 8004172:	4a10      	ldr	r2, [pc, #64]	; (80041b4 <xTaskPriorityInherit+0xc8>)
 8004174:	441a      	add	r2, r3
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	3304      	adds	r3, #4
 800417a:	4619      	mov	r1, r3
 800417c:	4610      	mov	r0, r2
 800417e:	f7fe f804 	bl	800218a <vListInsertEnd>
 8004182:	e004      	b.n	800418e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <xTaskPriorityInherit+0xc4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800418a:	68bb      	ldr	r3, [r7, #8]
 800418c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800418e:	2301      	movs	r3, #1
 8004190:	60fb      	str	r3, [r7, #12]
 8004192:	e008      	b.n	80041a6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004194:	68bb      	ldr	r3, [r7, #8]
 8004196:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004198:	4b05      	ldr	r3, [pc, #20]	; (80041b0 <xTaskPriorityInherit+0xc4>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419e:	429a      	cmp	r2, r3
 80041a0:	d201      	bcs.n	80041a6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80041a2:	2301      	movs	r3, #1
 80041a4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80041a6:	68fb      	ldr	r3, [r7, #12]
	}
 80041a8:	4618      	mov	r0, r3
 80041aa:	3710      	adds	r7, #16
 80041ac:	46bd      	mov	sp, r7
 80041ae:	bd80      	pop	{r7, pc}
 80041b0:	200008ac 	.word	0x200008ac
 80041b4:	200008b0 	.word	0x200008b0
 80041b8:	20000d88 	.word	0x20000d88

080041bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b086      	sub	sp, #24
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80041c8:	2300      	movs	r3, #0
 80041ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d056      	beq.n	8004280 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80041d2:	4b2e      	ldr	r3, [pc, #184]	; (800428c <xTaskPriorityDisinherit+0xd0>)
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	693a      	ldr	r2, [r7, #16]
 80041d8:	429a      	cmp	r2, r3
 80041da:	d00a      	beq.n	80041f2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80041dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041e0:	f383 8811 	msr	BASEPRI, r3
 80041e4:	f3bf 8f6f 	isb	sy
 80041e8:	f3bf 8f4f 	dsb	sy
 80041ec:	60fb      	str	r3, [r7, #12]
}
 80041ee:	bf00      	nop
 80041f0:	e7fe      	b.n	80041f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80041f2:	693b      	ldr	r3, [r7, #16]
 80041f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d10a      	bne.n	8004210 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80041fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041fe:	f383 8811 	msr	BASEPRI, r3
 8004202:	f3bf 8f6f 	isb	sy
 8004206:	f3bf 8f4f 	dsb	sy
 800420a:	60bb      	str	r3, [r7, #8]
}
 800420c:	bf00      	nop
 800420e:	e7fe      	b.n	800420e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004214:	1e5a      	subs	r2, r3, #1
 8004216:	693b      	ldr	r3, [r7, #16]
 8004218:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421e:	693b      	ldr	r3, [r7, #16]
 8004220:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004222:	429a      	cmp	r2, r3
 8004224:	d02c      	beq.n	8004280 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004226:	693b      	ldr	r3, [r7, #16]
 8004228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422a:	2b00      	cmp	r3, #0
 800422c:	d128      	bne.n	8004280 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	3304      	adds	r3, #4
 8004232:	4618      	mov	r0, r3
 8004234:	f7fe f806 	bl	8002244 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004240:	693b      	ldr	r3, [r7, #16]
 8004242:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004244:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004250:	4b0f      	ldr	r3, [pc, #60]	; (8004290 <xTaskPriorityDisinherit+0xd4>)
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d903      	bls.n	8004260 <xTaskPriorityDisinherit+0xa4>
 8004258:	693b      	ldr	r3, [r7, #16]
 800425a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800425c:	4a0c      	ldr	r2, [pc, #48]	; (8004290 <xTaskPriorityDisinherit+0xd4>)
 800425e:	6013      	str	r3, [r2, #0]
 8004260:	693b      	ldr	r3, [r7, #16]
 8004262:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004264:	4613      	mov	r3, r2
 8004266:	009b      	lsls	r3, r3, #2
 8004268:	4413      	add	r3, r2
 800426a:	009b      	lsls	r3, r3, #2
 800426c:	4a09      	ldr	r2, [pc, #36]	; (8004294 <xTaskPriorityDisinherit+0xd8>)
 800426e:	441a      	add	r2, r3
 8004270:	693b      	ldr	r3, [r7, #16]
 8004272:	3304      	adds	r3, #4
 8004274:	4619      	mov	r1, r3
 8004276:	4610      	mov	r0, r2
 8004278:	f7fd ff87 	bl	800218a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800427c:	2301      	movs	r3, #1
 800427e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004280:	697b      	ldr	r3, [r7, #20]
	}
 8004282:	4618      	mov	r0, r3
 8004284:	3718      	adds	r7, #24
 8004286:	46bd      	mov	sp, r7
 8004288:	bd80      	pop	{r7, pc}
 800428a:	bf00      	nop
 800428c:	200008ac 	.word	0x200008ac
 8004290:	20000d88 	.word	0x20000d88
 8004294:	200008b0 	.word	0x200008b0

08004298 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004298:	b580      	push	{r7, lr}
 800429a:	b088      	sub	sp, #32
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
 80042a0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 80042a6:	2301      	movs	r3, #1
 80042a8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d06a      	beq.n	8004386 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 80042b0:	69bb      	ldr	r3, [r7, #24]
 80042b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	60fb      	str	r3, [r7, #12]
}
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 80042ce:	69bb      	ldr	r3, [r7, #24]
 80042d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042d2:	683a      	ldr	r2, [r7, #0]
 80042d4:	429a      	cmp	r2, r3
 80042d6:	d902      	bls.n	80042de <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	61fb      	str	r3, [r7, #28]
 80042dc:	e002      	b.n	80042e4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80042de:	69bb      	ldr	r3, [r7, #24]
 80042e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80042e4:	69bb      	ldr	r3, [r7, #24]
 80042e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80042e8:	69fa      	ldr	r2, [r7, #28]
 80042ea:	429a      	cmp	r2, r3
 80042ec:	d04b      	beq.n	8004386 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80042ee:	69bb      	ldr	r3, [r7, #24]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f2:	697a      	ldr	r2, [r7, #20]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d146      	bne.n	8004386 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80042f8:	4b25      	ldr	r3, [pc, #148]	; (8004390 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	69ba      	ldr	r2, [r7, #24]
 80042fe:	429a      	cmp	r2, r3
 8004300:	d10a      	bne.n	8004318 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8004302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004306:	f383 8811 	msr	BASEPRI, r3
 800430a:	f3bf 8f6f 	isb	sy
 800430e:	f3bf 8f4f 	dsb	sy
 8004312:	60bb      	str	r3, [r7, #8]
}
 8004314:	bf00      	nop
 8004316:	e7fe      	b.n	8004316 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004318:	69bb      	ldr	r3, [r7, #24]
 800431a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800431c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800431e:	69bb      	ldr	r3, [r7, #24]
 8004320:	69fa      	ldr	r2, [r7, #28]
 8004322:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004324:	69bb      	ldr	r3, [r7, #24]
 8004326:	699b      	ldr	r3, [r3, #24]
 8004328:	2b00      	cmp	r3, #0
 800432a:	db04      	blt.n	8004336 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800432c:	69fb      	ldr	r3, [r7, #28]
 800432e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004332:	69bb      	ldr	r3, [r7, #24]
 8004334:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	6959      	ldr	r1, [r3, #20]
 800433a:	693a      	ldr	r2, [r7, #16]
 800433c:	4613      	mov	r3, r2
 800433e:	009b      	lsls	r3, r3, #2
 8004340:	4413      	add	r3, r2
 8004342:	009b      	lsls	r3, r3, #2
 8004344:	4a13      	ldr	r2, [pc, #76]	; (8004394 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004346:	4413      	add	r3, r2
 8004348:	4299      	cmp	r1, r3
 800434a:	d11c      	bne.n	8004386 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800434c:	69bb      	ldr	r3, [r7, #24]
 800434e:	3304      	adds	r3, #4
 8004350:	4618      	mov	r0, r3
 8004352:	f7fd ff77 	bl	8002244 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004356:	69bb      	ldr	r3, [r7, #24]
 8004358:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800435a:	4b0f      	ldr	r3, [pc, #60]	; (8004398 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	429a      	cmp	r2, r3
 8004360:	d903      	bls.n	800436a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004362:	69bb      	ldr	r3, [r7, #24]
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	4a0c      	ldr	r2, [pc, #48]	; (8004398 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004368:	6013      	str	r3, [r2, #0]
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800436e:	4613      	mov	r3, r2
 8004370:	009b      	lsls	r3, r3, #2
 8004372:	4413      	add	r3, r2
 8004374:	009b      	lsls	r3, r3, #2
 8004376:	4a07      	ldr	r2, [pc, #28]	; (8004394 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8004378:	441a      	add	r2, r3
 800437a:	69bb      	ldr	r3, [r7, #24]
 800437c:	3304      	adds	r3, #4
 800437e:	4619      	mov	r1, r3
 8004380:	4610      	mov	r0, r2
 8004382:	f7fd ff02 	bl	800218a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004386:	bf00      	nop
 8004388:	3720      	adds	r7, #32
 800438a:	46bd      	mov	sp, r7
 800438c:	bd80      	pop	{r7, pc}
 800438e:	bf00      	nop
 8004390:	200008ac 	.word	0x200008ac
 8004394:	200008b0 	.word	0x200008b0
 8004398:	20000d88 	.word	0x20000d88

0800439c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800439c:	b480      	push	{r7}
 800439e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80043a0:	4b07      	ldr	r3, [pc, #28]	; (80043c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d004      	beq.n	80043b2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80043a8:	4b05      	ldr	r3, [pc, #20]	; (80043c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80043ae:	3201      	adds	r2, #1
 80043b0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 80043b2:	4b03      	ldr	r3, [pc, #12]	; (80043c0 <pvTaskIncrementMutexHeldCount+0x24>)
 80043b4:	681b      	ldr	r3, [r3, #0]
	}
 80043b6:	4618      	mov	r0, r3
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	200008ac 	.word	0x200008ac

080043c4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b084      	sub	sp, #16
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80043ce:	4b21      	ldr	r3, [pc, #132]	; (8004454 <prvAddCurrentTaskToDelayedList+0x90>)
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80043d4:	4b20      	ldr	r3, [pc, #128]	; (8004458 <prvAddCurrentTaskToDelayedList+0x94>)
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	3304      	adds	r3, #4
 80043da:	4618      	mov	r0, r3
 80043dc:	f7fd ff32 	bl	8002244 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043e6:	d10a      	bne.n	80043fe <prvAddCurrentTaskToDelayedList+0x3a>
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d007      	beq.n	80043fe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80043ee:	4b1a      	ldr	r3, [pc, #104]	; (8004458 <prvAddCurrentTaskToDelayedList+0x94>)
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	3304      	adds	r3, #4
 80043f4:	4619      	mov	r1, r3
 80043f6:	4819      	ldr	r0, [pc, #100]	; (800445c <prvAddCurrentTaskToDelayedList+0x98>)
 80043f8:	f7fd fec7 	bl	800218a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80043fc:	e026      	b.n	800444c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80043fe:	68fa      	ldr	r2, [r7, #12]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	4413      	add	r3, r2
 8004404:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004406:	4b14      	ldr	r3, [pc, #80]	; (8004458 <prvAddCurrentTaskToDelayedList+0x94>)
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	68ba      	ldr	r2, [r7, #8]
 800440c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800440e:	68ba      	ldr	r2, [r7, #8]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	429a      	cmp	r2, r3
 8004414:	d209      	bcs.n	800442a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004416:	4b12      	ldr	r3, [pc, #72]	; (8004460 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	4b0f      	ldr	r3, [pc, #60]	; (8004458 <prvAddCurrentTaskToDelayedList+0x94>)
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	3304      	adds	r3, #4
 8004420:	4619      	mov	r1, r3
 8004422:	4610      	mov	r0, r2
 8004424:	f7fd fed5 	bl	80021d2 <vListInsert>
}
 8004428:	e010      	b.n	800444c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800442a:	4b0e      	ldr	r3, [pc, #56]	; (8004464 <prvAddCurrentTaskToDelayedList+0xa0>)
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	4b0a      	ldr	r3, [pc, #40]	; (8004458 <prvAddCurrentTaskToDelayedList+0x94>)
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3304      	adds	r3, #4
 8004434:	4619      	mov	r1, r3
 8004436:	4610      	mov	r0, r2
 8004438:	f7fd fecb 	bl	80021d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800443c:	4b0a      	ldr	r3, [pc, #40]	; (8004468 <prvAddCurrentTaskToDelayedList+0xa4>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	68ba      	ldr	r2, [r7, #8]
 8004442:	429a      	cmp	r2, r3
 8004444:	d202      	bcs.n	800444c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004446:	4a08      	ldr	r2, [pc, #32]	; (8004468 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004448:	68bb      	ldr	r3, [r7, #8]
 800444a:	6013      	str	r3, [r2, #0]
}
 800444c:	bf00      	nop
 800444e:	3710      	adds	r7, #16
 8004450:	46bd      	mov	sp, r7
 8004452:	bd80      	pop	{r7, pc}
 8004454:	20000d84 	.word	0x20000d84
 8004458:	200008ac 	.word	0x200008ac
 800445c:	20000d6c 	.word	0x20000d6c
 8004460:	20000d3c 	.word	0x20000d3c
 8004464:	20000d38 	.word	0x20000d38
 8004468:	20000da0 	.word	0x20000da0

0800446c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b08a      	sub	sp, #40	; 0x28
 8004470:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004472:	2300      	movs	r3, #0
 8004474:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004476:	f000 fb07 	bl	8004a88 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800447a:	4b1c      	ldr	r3, [pc, #112]	; (80044ec <xTimerCreateTimerTask+0x80>)
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d021      	beq.n	80044c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004482:	2300      	movs	r3, #0
 8004484:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004486:	2300      	movs	r3, #0
 8004488:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800448a:	1d3a      	adds	r2, r7, #4
 800448c:	f107 0108 	add.w	r1, r7, #8
 8004490:	f107 030c 	add.w	r3, r7, #12
 8004494:	4618      	mov	r0, r3
 8004496:	f7fd fe31 	bl	80020fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800449a:	6879      	ldr	r1, [r7, #4]
 800449c:	68bb      	ldr	r3, [r7, #8]
 800449e:	68fa      	ldr	r2, [r7, #12]
 80044a0:	9202      	str	r2, [sp, #8]
 80044a2:	9301      	str	r3, [sp, #4]
 80044a4:	2302      	movs	r3, #2
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	2300      	movs	r3, #0
 80044aa:	460a      	mov	r2, r1
 80044ac:	4910      	ldr	r1, [pc, #64]	; (80044f0 <xTimerCreateTimerTask+0x84>)
 80044ae:	4811      	ldr	r0, [pc, #68]	; (80044f4 <xTimerCreateTimerTask+0x88>)
 80044b0:	f7fe ff4c 	bl	800334c <xTaskCreateStatic>
 80044b4:	4603      	mov	r3, r0
 80044b6:	4a10      	ldr	r2, [pc, #64]	; (80044f8 <xTimerCreateTimerTask+0x8c>)
 80044b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80044ba:	4b0f      	ldr	r3, [pc, #60]	; (80044f8 <xTimerCreateTimerTask+0x8c>)
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	2b00      	cmp	r3, #0
 80044c0:	d001      	beq.n	80044c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80044c2:	2301      	movs	r3, #1
 80044c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80044c6:	697b      	ldr	r3, [r7, #20]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d10a      	bne.n	80044e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80044cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044d0:	f383 8811 	msr	BASEPRI, r3
 80044d4:	f3bf 8f6f 	isb	sy
 80044d8:	f3bf 8f4f 	dsb	sy
 80044dc:	613b      	str	r3, [r7, #16]
}
 80044de:	bf00      	nop
 80044e0:	e7fe      	b.n	80044e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80044e2:	697b      	ldr	r3, [r7, #20]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	3718      	adds	r7, #24
 80044e8:	46bd      	mov	sp, r7
 80044ea:	bd80      	pop	{r7, pc}
 80044ec:	20000ddc 	.word	0x20000ddc
 80044f0:	080055c4 	.word	0x080055c4
 80044f4:	08004631 	.word	0x08004631
 80044f8:	20000de0 	.word	0x20000de0

080044fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	b08a      	sub	sp, #40	; 0x28
 8004500:	af00      	add	r7, sp, #0
 8004502:	60f8      	str	r0, [r7, #12]
 8004504:	60b9      	str	r1, [r7, #8]
 8004506:	607a      	str	r2, [r7, #4]
 8004508:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800450a:	2300      	movs	r3, #0
 800450c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d10a      	bne.n	800452a <xTimerGenericCommand+0x2e>
	__asm volatile
 8004514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004518:	f383 8811 	msr	BASEPRI, r3
 800451c:	f3bf 8f6f 	isb	sy
 8004520:	f3bf 8f4f 	dsb	sy
 8004524:	623b      	str	r3, [r7, #32]
}
 8004526:	bf00      	nop
 8004528:	e7fe      	b.n	8004528 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800452a:	4b1a      	ldr	r3, [pc, #104]	; (8004594 <xTimerGenericCommand+0x98>)
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d02a      	beq.n	8004588 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	2b05      	cmp	r3, #5
 8004542:	dc18      	bgt.n	8004576 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004544:	f7ff fdb4 	bl	80040b0 <xTaskGetSchedulerState>
 8004548:	4603      	mov	r3, r0
 800454a:	2b02      	cmp	r3, #2
 800454c:	d109      	bne.n	8004562 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800454e:	4b11      	ldr	r3, [pc, #68]	; (8004594 <xTimerGenericCommand+0x98>)
 8004550:	6818      	ldr	r0, [r3, #0]
 8004552:	f107 0110 	add.w	r1, r7, #16
 8004556:	2300      	movs	r3, #0
 8004558:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800455a:	f7fe f891 	bl	8002680 <xQueueGenericSend>
 800455e:	6278      	str	r0, [r7, #36]	; 0x24
 8004560:	e012      	b.n	8004588 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004562:	4b0c      	ldr	r3, [pc, #48]	; (8004594 <xTimerGenericCommand+0x98>)
 8004564:	6818      	ldr	r0, [r3, #0]
 8004566:	f107 0110 	add.w	r1, r7, #16
 800456a:	2300      	movs	r3, #0
 800456c:	2200      	movs	r2, #0
 800456e:	f7fe f887 	bl	8002680 <xQueueGenericSend>
 8004572:	6278      	str	r0, [r7, #36]	; 0x24
 8004574:	e008      	b.n	8004588 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004576:	4b07      	ldr	r3, [pc, #28]	; (8004594 <xTimerGenericCommand+0x98>)
 8004578:	6818      	ldr	r0, [r3, #0]
 800457a:	f107 0110 	add.w	r1, r7, #16
 800457e:	2300      	movs	r3, #0
 8004580:	683a      	ldr	r2, [r7, #0]
 8004582:	f7fe f97b 	bl	800287c <xQueueGenericSendFromISR>
 8004586:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800458a:	4618      	mov	r0, r3
 800458c:	3728      	adds	r7, #40	; 0x28
 800458e:	46bd      	mov	sp, r7
 8004590:	bd80      	pop	{r7, pc}
 8004592:	bf00      	nop
 8004594:	20000ddc 	.word	0x20000ddc

08004598 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004598:	b580      	push	{r7, lr}
 800459a:	b088      	sub	sp, #32
 800459c:	af02      	add	r7, sp, #8
 800459e:	6078      	str	r0, [r7, #4]
 80045a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045a2:	4b22      	ldr	r3, [pc, #136]	; (800462c <prvProcessExpiredTimer+0x94>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	68db      	ldr	r3, [r3, #12]
 80045aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80045ac:	697b      	ldr	r3, [r7, #20]
 80045ae:	3304      	adds	r3, #4
 80045b0:	4618      	mov	r0, r3
 80045b2:	f7fd fe47 	bl	8002244 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d022      	beq.n	800460a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	699a      	ldr	r2, [r3, #24]
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	18d1      	adds	r1, r2, r3
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	683a      	ldr	r2, [r7, #0]
 80045d0:	6978      	ldr	r0, [r7, #20]
 80045d2:	f000 f8d1 	bl	8004778 <prvInsertTimerInActiveList>
 80045d6:	4603      	mov	r3, r0
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d01f      	beq.n	800461c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80045dc:	2300      	movs	r3, #0
 80045de:	9300      	str	r3, [sp, #0]
 80045e0:	2300      	movs	r3, #0
 80045e2:	687a      	ldr	r2, [r7, #4]
 80045e4:	2100      	movs	r1, #0
 80045e6:	6978      	ldr	r0, [r7, #20]
 80045e8:	f7ff ff88 	bl	80044fc <xTimerGenericCommand>
 80045ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d113      	bne.n	800461c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80045f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045f8:	f383 8811 	msr	BASEPRI, r3
 80045fc:	f3bf 8f6f 	isb	sy
 8004600:	f3bf 8f4f 	dsb	sy
 8004604:	60fb      	str	r3, [r7, #12]
}
 8004606:	bf00      	nop
 8004608:	e7fe      	b.n	8004608 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800460a:	697b      	ldr	r3, [r7, #20]
 800460c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004610:	f023 0301 	bic.w	r3, r3, #1
 8004614:	b2da      	uxtb	r2, r3
 8004616:	697b      	ldr	r3, [r7, #20]
 8004618:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	6a1b      	ldr	r3, [r3, #32]
 8004620:	6978      	ldr	r0, [r7, #20]
 8004622:	4798      	blx	r3
}
 8004624:	bf00      	nop
 8004626:	3718      	adds	r7, #24
 8004628:	46bd      	mov	sp, r7
 800462a:	bd80      	pop	{r7, pc}
 800462c:	20000dd4 	.word	0x20000dd4

08004630 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004630:	b580      	push	{r7, lr}
 8004632:	b084      	sub	sp, #16
 8004634:	af00      	add	r7, sp, #0
 8004636:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004638:	f107 0308 	add.w	r3, r7, #8
 800463c:	4618      	mov	r0, r3
 800463e:	f000 f857 	bl	80046f0 <prvGetNextExpireTime>
 8004642:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4619      	mov	r1, r3
 8004648:	68f8      	ldr	r0, [r7, #12]
 800464a:	f000 f803 	bl	8004654 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800464e:	f000 f8d5 	bl	80047fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004652:	e7f1      	b.n	8004638 <prvTimerTask+0x8>

08004654 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
 800465c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800465e:	f7ff f93b 	bl	80038d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004662:	f107 0308 	add.w	r3, r7, #8
 8004666:	4618      	mov	r0, r3
 8004668:	f000 f866 	bl	8004738 <prvSampleTimeNow>
 800466c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800466e:	68bb      	ldr	r3, [r7, #8]
 8004670:	2b00      	cmp	r3, #0
 8004672:	d130      	bne.n	80046d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	2b00      	cmp	r3, #0
 8004678:	d10a      	bne.n	8004690 <prvProcessTimerOrBlockTask+0x3c>
 800467a:	687a      	ldr	r2, [r7, #4]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	429a      	cmp	r2, r3
 8004680:	d806      	bhi.n	8004690 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004682:	f7ff f937 	bl	80038f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004686:	68f9      	ldr	r1, [r7, #12]
 8004688:	6878      	ldr	r0, [r7, #4]
 800468a:	f7ff ff85 	bl	8004598 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800468e:	e024      	b.n	80046da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d008      	beq.n	80046a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004696:	4b13      	ldr	r3, [pc, #76]	; (80046e4 <prvProcessTimerOrBlockTask+0x90>)
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d101      	bne.n	80046a4 <prvProcessTimerOrBlockTask+0x50>
 80046a0:	2301      	movs	r3, #1
 80046a2:	e000      	b.n	80046a6 <prvProcessTimerOrBlockTask+0x52>
 80046a4:	2300      	movs	r3, #0
 80046a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80046a8:	4b0f      	ldr	r3, [pc, #60]	; (80046e8 <prvProcessTimerOrBlockTask+0x94>)
 80046aa:	6818      	ldr	r0, [r3, #0]
 80046ac:	687a      	ldr	r2, [r7, #4]
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	1ad3      	subs	r3, r2, r3
 80046b2:	683a      	ldr	r2, [r7, #0]
 80046b4:	4619      	mov	r1, r3
 80046b6:	f7fe fe15 	bl	80032e4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80046ba:	f7ff f91b 	bl	80038f4 <xTaskResumeAll>
 80046be:	4603      	mov	r3, r0
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d10a      	bne.n	80046da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80046c4:	4b09      	ldr	r3, [pc, #36]	; (80046ec <prvProcessTimerOrBlockTask+0x98>)
 80046c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046ca:	601a      	str	r2, [r3, #0]
 80046cc:	f3bf 8f4f 	dsb	sy
 80046d0:	f3bf 8f6f 	isb	sy
}
 80046d4:	e001      	b.n	80046da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80046d6:	f7ff f90d 	bl	80038f4 <xTaskResumeAll>
}
 80046da:	bf00      	nop
 80046dc:	3710      	adds	r7, #16
 80046de:	46bd      	mov	sp, r7
 80046e0:	bd80      	pop	{r7, pc}
 80046e2:	bf00      	nop
 80046e4:	20000dd8 	.word	0x20000dd8
 80046e8:	20000ddc 	.word	0x20000ddc
 80046ec:	e000ed04 	.word	0xe000ed04

080046f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80046f0:	b480      	push	{r7}
 80046f2:	b085      	sub	sp, #20
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80046f8:	4b0e      	ldr	r3, [pc, #56]	; (8004734 <prvGetNextExpireTime+0x44>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d101      	bne.n	8004706 <prvGetNextExpireTime+0x16>
 8004702:	2201      	movs	r2, #1
 8004704:	e000      	b.n	8004708 <prvGetNextExpireTime+0x18>
 8004706:	2200      	movs	r2, #0
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d105      	bne.n	8004720 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004714:	4b07      	ldr	r3, [pc, #28]	; (8004734 <prvGetNextExpireTime+0x44>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	68db      	ldr	r3, [r3, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	60fb      	str	r3, [r7, #12]
 800471e:	e001      	b.n	8004724 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004720:	2300      	movs	r3, #0
 8004722:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004724:	68fb      	ldr	r3, [r7, #12]
}
 8004726:	4618      	mov	r0, r3
 8004728:	3714      	adds	r7, #20
 800472a:	46bd      	mov	sp, r7
 800472c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004730:	4770      	bx	lr
 8004732:	bf00      	nop
 8004734:	20000dd4 	.word	0x20000dd4

08004738 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004738:	b580      	push	{r7, lr}
 800473a:	b084      	sub	sp, #16
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004740:	f7ff f976 	bl	8003a30 <xTaskGetTickCount>
 8004744:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004746:	4b0b      	ldr	r3, [pc, #44]	; (8004774 <prvSampleTimeNow+0x3c>)
 8004748:	681b      	ldr	r3, [r3, #0]
 800474a:	68fa      	ldr	r2, [r7, #12]
 800474c:	429a      	cmp	r2, r3
 800474e:	d205      	bcs.n	800475c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004750:	f000 f936 	bl	80049c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	601a      	str	r2, [r3, #0]
 800475a:	e002      	b.n	8004762 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004762:	4a04      	ldr	r2, [pc, #16]	; (8004774 <prvSampleTimeNow+0x3c>)
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004768:	68fb      	ldr	r3, [r7, #12]
}
 800476a:	4618      	mov	r0, r3
 800476c:	3710      	adds	r7, #16
 800476e:	46bd      	mov	sp, r7
 8004770:	bd80      	pop	{r7, pc}
 8004772:	bf00      	nop
 8004774:	20000de4 	.word	0x20000de4

08004778 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004778:	b580      	push	{r7, lr}
 800477a:	b086      	sub	sp, #24
 800477c:	af00      	add	r7, sp, #0
 800477e:	60f8      	str	r0, [r7, #12]
 8004780:	60b9      	str	r1, [r7, #8]
 8004782:	607a      	str	r2, [r7, #4]
 8004784:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004786:	2300      	movs	r3, #0
 8004788:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	68ba      	ldr	r2, [r7, #8]
 800478e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	68fa      	ldr	r2, [r7, #12]
 8004794:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004796:	68ba      	ldr	r2, [r7, #8]
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	429a      	cmp	r2, r3
 800479c:	d812      	bhi.n	80047c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800479e:	687a      	ldr	r2, [r7, #4]
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	1ad2      	subs	r2, r2, r3
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	429a      	cmp	r2, r3
 80047aa:	d302      	bcc.n	80047b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80047ac:	2301      	movs	r3, #1
 80047ae:	617b      	str	r3, [r7, #20]
 80047b0:	e01b      	b.n	80047ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80047b2:	4b10      	ldr	r3, [pc, #64]	; (80047f4 <prvInsertTimerInActiveList+0x7c>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	3304      	adds	r3, #4
 80047ba:	4619      	mov	r1, r3
 80047bc:	4610      	mov	r0, r2
 80047be:	f7fd fd08 	bl	80021d2 <vListInsert>
 80047c2:	e012      	b.n	80047ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80047c4:	687a      	ldr	r2, [r7, #4]
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d206      	bcs.n	80047da <prvInsertTimerInActiveList+0x62>
 80047cc:	68ba      	ldr	r2, [r7, #8]
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	429a      	cmp	r2, r3
 80047d2:	d302      	bcc.n	80047da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80047d4:	2301      	movs	r3, #1
 80047d6:	617b      	str	r3, [r7, #20]
 80047d8:	e007      	b.n	80047ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80047da:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <prvInsertTimerInActiveList+0x80>)
 80047dc:	681a      	ldr	r2, [r3, #0]
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	3304      	adds	r3, #4
 80047e2:	4619      	mov	r1, r3
 80047e4:	4610      	mov	r0, r2
 80047e6:	f7fd fcf4 	bl	80021d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80047ea:	697b      	ldr	r3, [r7, #20]
}
 80047ec:	4618      	mov	r0, r3
 80047ee:	3718      	adds	r7, #24
 80047f0:	46bd      	mov	sp, r7
 80047f2:	bd80      	pop	{r7, pc}
 80047f4:	20000dd8 	.word	0x20000dd8
 80047f8:	20000dd4 	.word	0x20000dd4

080047fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b08e      	sub	sp, #56	; 0x38
 8004800:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004802:	e0ca      	b.n	800499a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	2b00      	cmp	r3, #0
 8004808:	da18      	bge.n	800483c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800480a:	1d3b      	adds	r3, r7, #4
 800480c:	3304      	adds	r3, #4
 800480e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004810:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004812:	2b00      	cmp	r3, #0
 8004814:	d10a      	bne.n	800482c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8004816:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481a:	f383 8811 	msr	BASEPRI, r3
 800481e:	f3bf 8f6f 	isb	sy
 8004822:	f3bf 8f4f 	dsb	sy
 8004826:	61fb      	str	r3, [r7, #28]
}
 8004828:	bf00      	nop
 800482a:	e7fe      	b.n	800482a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800482c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004832:	6850      	ldr	r0, [r2, #4]
 8004834:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004836:	6892      	ldr	r2, [r2, #8]
 8004838:	4611      	mov	r1, r2
 800483a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	f2c0 80aa 	blt.w	8004998 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d004      	beq.n	800485a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004852:	3304      	adds	r3, #4
 8004854:	4618      	mov	r0, r3
 8004856:	f7fd fcf5 	bl	8002244 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800485a:	463b      	mov	r3, r7
 800485c:	4618      	mov	r0, r3
 800485e:	f7ff ff6b 	bl	8004738 <prvSampleTimeNow>
 8004862:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2b09      	cmp	r3, #9
 8004868:	f200 8097 	bhi.w	800499a <prvProcessReceivedCommands+0x19e>
 800486c:	a201      	add	r2, pc, #4	; (adr r2, 8004874 <prvProcessReceivedCommands+0x78>)
 800486e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004872:	bf00      	nop
 8004874:	0800489d 	.word	0x0800489d
 8004878:	0800489d 	.word	0x0800489d
 800487c:	0800489d 	.word	0x0800489d
 8004880:	08004911 	.word	0x08004911
 8004884:	08004925 	.word	0x08004925
 8004888:	0800496f 	.word	0x0800496f
 800488c:	0800489d 	.word	0x0800489d
 8004890:	0800489d 	.word	0x0800489d
 8004894:	08004911 	.word	0x08004911
 8004898:	08004925 	.word	0x08004925
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800489c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048a2:	f043 0301 	orr.w	r3, r3, #1
 80048a6:	b2da      	uxtb	r2, r3
 80048a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80048ae:	68ba      	ldr	r2, [r7, #8]
 80048b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b2:	699b      	ldr	r3, [r3, #24]
 80048b4:	18d1      	adds	r1, r2, r3
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048bc:	f7ff ff5c 	bl	8004778 <prvInsertTimerInActiveList>
 80048c0:	4603      	mov	r3, r0
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d069      	beq.n	800499a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80048c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048c8:	6a1b      	ldr	r3, [r3, #32]
 80048ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80048d4:	f003 0304 	and.w	r3, r3, #4
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d05e      	beq.n	800499a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80048dc:	68ba      	ldr	r2, [r7, #8]
 80048de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	441a      	add	r2, r3
 80048e4:	2300      	movs	r3, #0
 80048e6:	9300      	str	r3, [sp, #0]
 80048e8:	2300      	movs	r3, #0
 80048ea:	2100      	movs	r1, #0
 80048ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80048ee:	f7ff fe05 	bl	80044fc <xTimerGenericCommand>
 80048f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80048f4:	6a3b      	ldr	r3, [r7, #32]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d14f      	bne.n	800499a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80048fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048fe:	f383 8811 	msr	BASEPRI, r3
 8004902:	f3bf 8f6f 	isb	sy
 8004906:	f3bf 8f4f 	dsb	sy
 800490a:	61bb      	str	r3, [r7, #24]
}
 800490c:	bf00      	nop
 800490e:	e7fe      	b.n	800490e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004912:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004916:	f023 0301 	bic.w	r3, r3, #1
 800491a:	b2da      	uxtb	r2, r3
 800491c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800491e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8004922:	e03a      	b.n	800499a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004926:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	b2da      	uxtb	r2, r3
 8004930:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004932:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8004936:	68ba      	ldr	r2, [r7, #8]
 8004938:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800493c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800493e:	699b      	ldr	r3, [r3, #24]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10a      	bne.n	800495a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	617b      	str	r3, [r7, #20]
}
 8004956:	bf00      	nop
 8004958:	e7fe      	b.n	8004958 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800495a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	18d1      	adds	r1, r2, r3
 8004962:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004964:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004966:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004968:	f7ff ff06 	bl	8004778 <prvInsertTimerInActiveList>
					break;
 800496c:	e015      	b.n	800499a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800496e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004970:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d103      	bne.n	8004984 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800497c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800497e:	f000 fbdf 	bl	8005140 <vPortFree>
 8004982:	e00a      	b.n	800499a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004984:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004986:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800498a:	f023 0301 	bic.w	r3, r3, #1
 800498e:	b2da      	uxtb	r2, r3
 8004990:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004992:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004996:	e000      	b.n	800499a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004998:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800499a:	4b08      	ldr	r3, [pc, #32]	; (80049bc <prvProcessReceivedCommands+0x1c0>)
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	1d39      	adds	r1, r7, #4
 80049a0:	2200      	movs	r2, #0
 80049a2:	4618      	mov	r0, r3
 80049a4:	f7fe f892 	bl	8002acc <xQueueReceive>
 80049a8:	4603      	mov	r3, r0
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	f47f af2a 	bne.w	8004804 <prvProcessReceivedCommands+0x8>
	}
}
 80049b0:	bf00      	nop
 80049b2:	bf00      	nop
 80049b4:	3730      	adds	r7, #48	; 0x30
 80049b6:	46bd      	mov	sp, r7
 80049b8:	bd80      	pop	{r7, pc}
 80049ba:	bf00      	nop
 80049bc:	20000ddc 	.word	0x20000ddc

080049c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80049c6:	e048      	b.n	8004a5a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80049c8:	4b2d      	ldr	r3, [pc, #180]	; (8004a80 <prvSwitchTimerLists+0xc0>)
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049d2:	4b2b      	ldr	r3, [pc, #172]	; (8004a80 <prvSwitchTimerLists+0xc0>)
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	68db      	ldr	r3, [r3, #12]
 80049da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3304      	adds	r3, #4
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7fd fc2f 	bl	8002244 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	6a1b      	ldr	r3, [r3, #32]
 80049ea:	68f8      	ldr	r0, [r7, #12]
 80049ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80049ee:	68fb      	ldr	r3, [r7, #12]
 80049f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049f4:	f003 0304 	and.w	r3, r3, #4
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d02e      	beq.n	8004a5a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	693a      	ldr	r2, [r7, #16]
 8004a02:	4413      	add	r3, r2
 8004a04:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004a06:	68ba      	ldr	r2, [r7, #8]
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	429a      	cmp	r2, r3
 8004a0c:	d90e      	bls.n	8004a2c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	68ba      	ldr	r2, [r7, #8]
 8004a12:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	68fa      	ldr	r2, [r7, #12]
 8004a18:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004a1a:	4b19      	ldr	r3, [pc, #100]	; (8004a80 <prvSwitchTimerLists+0xc0>)
 8004a1c:	681a      	ldr	r2, [r3, #0]
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	3304      	adds	r3, #4
 8004a22:	4619      	mov	r1, r3
 8004a24:	4610      	mov	r0, r2
 8004a26:	f7fd fbd4 	bl	80021d2 <vListInsert>
 8004a2a:	e016      	b.n	8004a5a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004a2c:	2300      	movs	r3, #0
 8004a2e:	9300      	str	r3, [sp, #0]
 8004a30:	2300      	movs	r3, #0
 8004a32:	693a      	ldr	r2, [r7, #16]
 8004a34:	2100      	movs	r1, #0
 8004a36:	68f8      	ldr	r0, [r7, #12]
 8004a38:	f7ff fd60 	bl	80044fc <xTimerGenericCommand>
 8004a3c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d10a      	bne.n	8004a5a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a48:	f383 8811 	msr	BASEPRI, r3
 8004a4c:	f3bf 8f6f 	isb	sy
 8004a50:	f3bf 8f4f 	dsb	sy
 8004a54:	603b      	str	r3, [r7, #0]
}
 8004a56:	bf00      	nop
 8004a58:	e7fe      	b.n	8004a58 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a5a:	4b09      	ldr	r3, [pc, #36]	; (8004a80 <prvSwitchTimerLists+0xc0>)
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d1b1      	bne.n	80049c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004a64:	4b06      	ldr	r3, [pc, #24]	; (8004a80 <prvSwitchTimerLists+0xc0>)
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004a6a:	4b06      	ldr	r3, [pc, #24]	; (8004a84 <prvSwitchTimerLists+0xc4>)
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	4a04      	ldr	r2, [pc, #16]	; (8004a80 <prvSwitchTimerLists+0xc0>)
 8004a70:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004a72:	4a04      	ldr	r2, [pc, #16]	; (8004a84 <prvSwitchTimerLists+0xc4>)
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	6013      	str	r3, [r2, #0]
}
 8004a78:	bf00      	nop
 8004a7a:	3718      	adds	r7, #24
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}
 8004a80:	20000dd4 	.word	0x20000dd4
 8004a84:	20000dd8 	.word	0x20000dd8

08004a88 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b082      	sub	sp, #8
 8004a8c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004a8e:	f000 f969 	bl	8004d64 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004a92:	4b15      	ldr	r3, [pc, #84]	; (8004ae8 <prvCheckForValidListAndQueue+0x60>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d120      	bne.n	8004adc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004a9a:	4814      	ldr	r0, [pc, #80]	; (8004aec <prvCheckForValidListAndQueue+0x64>)
 8004a9c:	f7fd fb48 	bl	8002130 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004aa0:	4813      	ldr	r0, [pc, #76]	; (8004af0 <prvCheckForValidListAndQueue+0x68>)
 8004aa2:	f7fd fb45 	bl	8002130 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004aa6:	4b13      	ldr	r3, [pc, #76]	; (8004af4 <prvCheckForValidListAndQueue+0x6c>)
 8004aa8:	4a10      	ldr	r2, [pc, #64]	; (8004aec <prvCheckForValidListAndQueue+0x64>)
 8004aaa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004aac:	4b12      	ldr	r3, [pc, #72]	; (8004af8 <prvCheckForValidListAndQueue+0x70>)
 8004aae:	4a10      	ldr	r2, [pc, #64]	; (8004af0 <prvCheckForValidListAndQueue+0x68>)
 8004ab0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004ab2:	2300      	movs	r3, #0
 8004ab4:	9300      	str	r3, [sp, #0]
 8004ab6:	4b11      	ldr	r3, [pc, #68]	; (8004afc <prvCheckForValidListAndQueue+0x74>)
 8004ab8:	4a11      	ldr	r2, [pc, #68]	; (8004b00 <prvCheckForValidListAndQueue+0x78>)
 8004aba:	2110      	movs	r1, #16
 8004abc:	200a      	movs	r0, #10
 8004abe:	f7fd fc53 	bl	8002368 <xQueueGenericCreateStatic>
 8004ac2:	4603      	mov	r3, r0
 8004ac4:	4a08      	ldr	r2, [pc, #32]	; (8004ae8 <prvCheckForValidListAndQueue+0x60>)
 8004ac6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004ac8:	4b07      	ldr	r3, [pc, #28]	; (8004ae8 <prvCheckForValidListAndQueue+0x60>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d005      	beq.n	8004adc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004ad0:	4b05      	ldr	r3, [pc, #20]	; (8004ae8 <prvCheckForValidListAndQueue+0x60>)
 8004ad2:	681b      	ldr	r3, [r3, #0]
 8004ad4:	490b      	ldr	r1, [pc, #44]	; (8004b04 <prvCheckForValidListAndQueue+0x7c>)
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7fe fbb0 	bl	800323c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004adc:	f000 f972 	bl	8004dc4 <vPortExitCritical>
}
 8004ae0:	bf00      	nop
 8004ae2:	46bd      	mov	sp, r7
 8004ae4:	bd80      	pop	{r7, pc}
 8004ae6:	bf00      	nop
 8004ae8:	20000ddc 	.word	0x20000ddc
 8004aec:	20000dac 	.word	0x20000dac
 8004af0:	20000dc0 	.word	0x20000dc0
 8004af4:	20000dd4 	.word	0x20000dd4
 8004af8:	20000dd8 	.word	0x20000dd8
 8004afc:	20000e88 	.word	0x20000e88
 8004b00:	20000de8 	.word	0x20000de8
 8004b04:	080055cc 	.word	0x080055cc

08004b08 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004b08:	b480      	push	{r7}
 8004b0a:	b085      	sub	sp, #20
 8004b0c:	af00      	add	r7, sp, #0
 8004b0e:	60f8      	str	r0, [r7, #12]
 8004b10:	60b9      	str	r1, [r7, #8]
 8004b12:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3b04      	subs	r3, #4
 8004b18:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004b20:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	3b04      	subs	r3, #4
 8004b26:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004b28:	68bb      	ldr	r3, [r7, #8]
 8004b2a:	f023 0201 	bic.w	r2, r3, #1
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	3b04      	subs	r3, #4
 8004b36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004b38:	4a0c      	ldr	r2, [pc, #48]	; (8004b6c <pxPortInitialiseStack+0x64>)
 8004b3a:	68fb      	ldr	r3, [r7, #12]
 8004b3c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	3b14      	subs	r3, #20
 8004b42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004b44:	687a      	ldr	r2, [r7, #4]
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	3b04      	subs	r3, #4
 8004b4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	f06f 0202 	mvn.w	r2, #2
 8004b56:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	3b20      	subs	r3, #32
 8004b5c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004b5e:	68fb      	ldr	r3, [r7, #12]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3714      	adds	r7, #20
 8004b64:	46bd      	mov	sp, r7
 8004b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b6a:	4770      	bx	lr
 8004b6c:	08004b71 	.word	0x08004b71

08004b70 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004b70:	b480      	push	{r7}
 8004b72:	b085      	sub	sp, #20
 8004b74:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004b76:	2300      	movs	r3, #0
 8004b78:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004b7a:	4b12      	ldr	r3, [pc, #72]	; (8004bc4 <prvTaskExitError+0x54>)
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b82:	d00a      	beq.n	8004b9a <prvTaskExitError+0x2a>
	__asm volatile
 8004b84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b88:	f383 8811 	msr	BASEPRI, r3
 8004b8c:	f3bf 8f6f 	isb	sy
 8004b90:	f3bf 8f4f 	dsb	sy
 8004b94:	60fb      	str	r3, [r7, #12]
}
 8004b96:	bf00      	nop
 8004b98:	e7fe      	b.n	8004b98 <prvTaskExitError+0x28>
	__asm volatile
 8004b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9e:	f383 8811 	msr	BASEPRI, r3
 8004ba2:	f3bf 8f6f 	isb	sy
 8004ba6:	f3bf 8f4f 	dsb	sy
 8004baa:	60bb      	str	r3, [r7, #8]
}
 8004bac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004bae:	bf00      	nop
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d0fc      	beq.n	8004bb0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004bb6:	bf00      	nop
 8004bb8:	bf00      	nop
 8004bba:	3714      	adds	r7, #20
 8004bbc:	46bd      	mov	sp, r7
 8004bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc2:	4770      	bx	lr
 8004bc4:	2000000c 	.word	0x2000000c
	...

08004bd0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004bd0:	4b07      	ldr	r3, [pc, #28]	; (8004bf0 <pxCurrentTCBConst2>)
 8004bd2:	6819      	ldr	r1, [r3, #0]
 8004bd4:	6808      	ldr	r0, [r1, #0]
 8004bd6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bda:	f380 8809 	msr	PSP, r0
 8004bde:	f3bf 8f6f 	isb	sy
 8004be2:	f04f 0000 	mov.w	r0, #0
 8004be6:	f380 8811 	msr	BASEPRI, r0
 8004bea:	4770      	bx	lr
 8004bec:	f3af 8000 	nop.w

08004bf0 <pxCurrentTCBConst2>:
 8004bf0:	200008ac 	.word	0x200008ac
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004bf4:	bf00      	nop
 8004bf6:	bf00      	nop

08004bf8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004bf8:	4808      	ldr	r0, [pc, #32]	; (8004c1c <prvPortStartFirstTask+0x24>)
 8004bfa:	6800      	ldr	r0, [r0, #0]
 8004bfc:	6800      	ldr	r0, [r0, #0]
 8004bfe:	f380 8808 	msr	MSP, r0
 8004c02:	f04f 0000 	mov.w	r0, #0
 8004c06:	f380 8814 	msr	CONTROL, r0
 8004c0a:	b662      	cpsie	i
 8004c0c:	b661      	cpsie	f
 8004c0e:	f3bf 8f4f 	dsb	sy
 8004c12:	f3bf 8f6f 	isb	sy
 8004c16:	df00      	svc	0
 8004c18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004c1a:	bf00      	nop
 8004c1c:	e000ed08 	.word	0xe000ed08

08004c20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b086      	sub	sp, #24
 8004c24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004c26:	4b46      	ldr	r3, [pc, #280]	; (8004d40 <xPortStartScheduler+0x120>)
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	4a46      	ldr	r2, [pc, #280]	; (8004d44 <xPortStartScheduler+0x124>)
 8004c2c:	4293      	cmp	r3, r2
 8004c2e:	d10a      	bne.n	8004c46 <xPortStartScheduler+0x26>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	613b      	str	r3, [r7, #16]
}
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004c46:	4b3e      	ldr	r3, [pc, #248]	; (8004d40 <xPortStartScheduler+0x120>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a3f      	ldr	r2, [pc, #252]	; (8004d48 <xPortStartScheduler+0x128>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d10a      	bne.n	8004c66 <xPortStartScheduler+0x46>
	__asm volatile
 8004c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c54:	f383 8811 	msr	BASEPRI, r3
 8004c58:	f3bf 8f6f 	isb	sy
 8004c5c:	f3bf 8f4f 	dsb	sy
 8004c60:	60fb      	str	r3, [r7, #12]
}
 8004c62:	bf00      	nop
 8004c64:	e7fe      	b.n	8004c64 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004c66:	4b39      	ldr	r3, [pc, #228]	; (8004d4c <xPortStartScheduler+0x12c>)
 8004c68:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	b2db      	uxtb	r3, r3
 8004c70:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	22ff      	movs	r2, #255	; 0xff
 8004c76:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	781b      	ldrb	r3, [r3, #0]
 8004c7c:	b2db      	uxtb	r3, r3
 8004c7e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004c80:	78fb      	ldrb	r3, [r7, #3]
 8004c82:	b2db      	uxtb	r3, r3
 8004c84:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004c88:	b2da      	uxtb	r2, r3
 8004c8a:	4b31      	ldr	r3, [pc, #196]	; (8004d50 <xPortStartScheduler+0x130>)
 8004c8c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004c8e:	4b31      	ldr	r3, [pc, #196]	; (8004d54 <xPortStartScheduler+0x134>)
 8004c90:	2207      	movs	r2, #7
 8004c92:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004c94:	e009      	b.n	8004caa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004c96:	4b2f      	ldr	r3, [pc, #188]	; (8004d54 <xPortStartScheduler+0x134>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	4a2d      	ldr	r2, [pc, #180]	; (8004d54 <xPortStartScheduler+0x134>)
 8004c9e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004ca0:	78fb      	ldrb	r3, [r7, #3]
 8004ca2:	b2db      	uxtb	r3, r3
 8004ca4:	005b      	lsls	r3, r3, #1
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004caa:	78fb      	ldrb	r3, [r7, #3]
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004cb2:	2b80      	cmp	r3, #128	; 0x80
 8004cb4:	d0ef      	beq.n	8004c96 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004cb6:	4b27      	ldr	r3, [pc, #156]	; (8004d54 <xPortStartScheduler+0x134>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	f1c3 0307 	rsb	r3, r3, #7
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d00a      	beq.n	8004cd8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cc6:	f383 8811 	msr	BASEPRI, r3
 8004cca:	f3bf 8f6f 	isb	sy
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	60bb      	str	r3, [r7, #8]
}
 8004cd4:	bf00      	nop
 8004cd6:	e7fe      	b.n	8004cd6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004cd8:	4b1e      	ldr	r3, [pc, #120]	; (8004d54 <xPortStartScheduler+0x134>)
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	021b      	lsls	r3, r3, #8
 8004cde:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <xPortStartScheduler+0x134>)
 8004ce0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <xPortStartScheduler+0x134>)
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004cea:	4a1a      	ldr	r2, [pc, #104]	; (8004d54 <xPortStartScheduler+0x134>)
 8004cec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	b2da      	uxtb	r2, r3
 8004cf2:	697b      	ldr	r3, [r7, #20]
 8004cf4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004cf6:	4b18      	ldr	r3, [pc, #96]	; (8004d58 <xPortStartScheduler+0x138>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	4a17      	ldr	r2, [pc, #92]	; (8004d58 <xPortStartScheduler+0x138>)
 8004cfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004d02:	4b15      	ldr	r3, [pc, #84]	; (8004d58 <xPortStartScheduler+0x138>)
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	4a14      	ldr	r2, [pc, #80]	; (8004d58 <xPortStartScheduler+0x138>)
 8004d08:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004d0c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004d0e:	f000 f8dd 	bl	8004ecc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004d12:	4b12      	ldr	r3, [pc, #72]	; (8004d5c <xPortStartScheduler+0x13c>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004d18:	f000 f8fc 	bl	8004f14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004d1c:	4b10      	ldr	r3, [pc, #64]	; (8004d60 <xPortStartScheduler+0x140>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	4a0f      	ldr	r2, [pc, #60]	; (8004d60 <xPortStartScheduler+0x140>)
 8004d22:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004d26:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004d28:	f7ff ff66 	bl	8004bf8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004d2c:	f7fe ff4a 	bl	8003bc4 <vTaskSwitchContext>
	prvTaskExitError();
 8004d30:	f7ff ff1e 	bl	8004b70 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004d34:	2300      	movs	r3, #0
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3718      	adds	r7, #24
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	e000ed00 	.word	0xe000ed00
 8004d44:	410fc271 	.word	0x410fc271
 8004d48:	410fc270 	.word	0x410fc270
 8004d4c:	e000e400 	.word	0xe000e400
 8004d50:	20000ed8 	.word	0x20000ed8
 8004d54:	20000edc 	.word	0x20000edc
 8004d58:	e000ed20 	.word	0xe000ed20
 8004d5c:	2000000c 	.word	0x2000000c
 8004d60:	e000ef34 	.word	0xe000ef34

08004d64 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004d64:	b480      	push	{r7}
 8004d66:	b083      	sub	sp, #12
 8004d68:	af00      	add	r7, sp, #0
	__asm volatile
 8004d6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d6e:	f383 8811 	msr	BASEPRI, r3
 8004d72:	f3bf 8f6f 	isb	sy
 8004d76:	f3bf 8f4f 	dsb	sy
 8004d7a:	607b      	str	r3, [r7, #4]
}
 8004d7c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004d7e:	4b0f      	ldr	r3, [pc, #60]	; (8004dbc <vPortEnterCritical+0x58>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	3301      	adds	r3, #1
 8004d84:	4a0d      	ldr	r2, [pc, #52]	; (8004dbc <vPortEnterCritical+0x58>)
 8004d86:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004d88:	4b0c      	ldr	r3, [pc, #48]	; (8004dbc <vPortEnterCritical+0x58>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d10f      	bne.n	8004db0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004d90:	4b0b      	ldr	r3, [pc, #44]	; (8004dc0 <vPortEnterCritical+0x5c>)
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	b2db      	uxtb	r3, r3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d00a      	beq.n	8004db0 <vPortEnterCritical+0x4c>
	__asm volatile
 8004d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9e:	f383 8811 	msr	BASEPRI, r3
 8004da2:	f3bf 8f6f 	isb	sy
 8004da6:	f3bf 8f4f 	dsb	sy
 8004daa:	603b      	str	r3, [r7, #0]
}
 8004dac:	bf00      	nop
 8004dae:	e7fe      	b.n	8004dae <vPortEnterCritical+0x4a>
	}
}
 8004db0:	bf00      	nop
 8004db2:	370c      	adds	r7, #12
 8004db4:	46bd      	mov	sp, r7
 8004db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dba:	4770      	bx	lr
 8004dbc:	2000000c 	.word	0x2000000c
 8004dc0:	e000ed04 	.word	0xe000ed04

08004dc4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b083      	sub	sp, #12
 8004dc8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004dca:	4b12      	ldr	r3, [pc, #72]	; (8004e14 <vPortExitCritical+0x50>)
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d10a      	bne.n	8004de8 <vPortExitCritical+0x24>
	__asm volatile
 8004dd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dd6:	f383 8811 	msr	BASEPRI, r3
 8004dda:	f3bf 8f6f 	isb	sy
 8004dde:	f3bf 8f4f 	dsb	sy
 8004de2:	607b      	str	r3, [r7, #4]
}
 8004de4:	bf00      	nop
 8004de6:	e7fe      	b.n	8004de6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004de8:	4b0a      	ldr	r3, [pc, #40]	; (8004e14 <vPortExitCritical+0x50>)
 8004dea:	681b      	ldr	r3, [r3, #0]
 8004dec:	3b01      	subs	r3, #1
 8004dee:	4a09      	ldr	r2, [pc, #36]	; (8004e14 <vPortExitCritical+0x50>)
 8004df0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004df2:	4b08      	ldr	r3, [pc, #32]	; (8004e14 <vPortExitCritical+0x50>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d105      	bne.n	8004e06 <vPortExitCritical+0x42>
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004dfe:	683b      	ldr	r3, [r7, #0]
 8004e00:	f383 8811 	msr	BASEPRI, r3
}
 8004e04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004e06:	bf00      	nop
 8004e08:	370c      	adds	r7, #12
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	2000000c 	.word	0x2000000c
	...

08004e20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004e20:	f3ef 8009 	mrs	r0, PSP
 8004e24:	f3bf 8f6f 	isb	sy
 8004e28:	4b15      	ldr	r3, [pc, #84]	; (8004e80 <pxCurrentTCBConst>)
 8004e2a:	681a      	ldr	r2, [r3, #0]
 8004e2c:	f01e 0f10 	tst.w	lr, #16
 8004e30:	bf08      	it	eq
 8004e32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004e36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e3a:	6010      	str	r0, [r2, #0]
 8004e3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004e40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004e44:	f380 8811 	msr	BASEPRI, r0
 8004e48:	f3bf 8f4f 	dsb	sy
 8004e4c:	f3bf 8f6f 	isb	sy
 8004e50:	f7fe feb8 	bl	8003bc4 <vTaskSwitchContext>
 8004e54:	f04f 0000 	mov.w	r0, #0
 8004e58:	f380 8811 	msr	BASEPRI, r0
 8004e5c:	bc09      	pop	{r0, r3}
 8004e5e:	6819      	ldr	r1, [r3, #0]
 8004e60:	6808      	ldr	r0, [r1, #0]
 8004e62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e66:	f01e 0f10 	tst.w	lr, #16
 8004e6a:	bf08      	it	eq
 8004e6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004e70:	f380 8809 	msr	PSP, r0
 8004e74:	f3bf 8f6f 	isb	sy
 8004e78:	4770      	bx	lr
 8004e7a:	bf00      	nop
 8004e7c:	f3af 8000 	nop.w

08004e80 <pxCurrentTCBConst>:
 8004e80:	200008ac 	.word	0x200008ac
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004e84:	bf00      	nop
 8004e86:	bf00      	nop

08004e88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004e88:	b580      	push	{r7, lr}
 8004e8a:	b082      	sub	sp, #8
 8004e8c:	af00      	add	r7, sp, #0
	__asm volatile
 8004e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e92:	f383 8811 	msr	BASEPRI, r3
 8004e96:	f3bf 8f6f 	isb	sy
 8004e9a:	f3bf 8f4f 	dsb	sy
 8004e9e:	607b      	str	r3, [r7, #4]
}
 8004ea0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004ea2:	f7fe fdd5 	bl	8003a50 <xTaskIncrementTick>
 8004ea6:	4603      	mov	r3, r0
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d003      	beq.n	8004eb4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004eac:	4b06      	ldr	r3, [pc, #24]	; (8004ec8 <xPortSysTickHandler+0x40>)
 8004eae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004eb2:	601a      	str	r2, [r3, #0]
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	f383 8811 	msr	BASEPRI, r3
}
 8004ebe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004ec0:	bf00      	nop
 8004ec2:	3708      	adds	r7, #8
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}
 8004ec8:	e000ed04 	.word	0xe000ed04

08004ecc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004ecc:	b480      	push	{r7}
 8004ece:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004ed0:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <vPortSetupTimerInterrupt+0x34>)
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004ed6:	4b0b      	ldr	r3, [pc, #44]	; (8004f04 <vPortSetupTimerInterrupt+0x38>)
 8004ed8:	2200      	movs	r2, #0
 8004eda:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004edc:	4b0a      	ldr	r3, [pc, #40]	; (8004f08 <vPortSetupTimerInterrupt+0x3c>)
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a0a      	ldr	r2, [pc, #40]	; (8004f0c <vPortSetupTimerInterrupt+0x40>)
 8004ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee6:	099b      	lsrs	r3, r3, #6
 8004ee8:	4a09      	ldr	r2, [pc, #36]	; (8004f10 <vPortSetupTimerInterrupt+0x44>)
 8004eea:	3b01      	subs	r3, #1
 8004eec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004eee:	4b04      	ldr	r3, [pc, #16]	; (8004f00 <vPortSetupTimerInterrupt+0x34>)
 8004ef0:	2207      	movs	r2, #7
 8004ef2:	601a      	str	r2, [r3, #0]
}
 8004ef4:	bf00      	nop
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efc:	4770      	bx	lr
 8004efe:	bf00      	nop
 8004f00:	e000e010 	.word	0xe000e010
 8004f04:	e000e018 	.word	0xe000e018
 8004f08:	20000000 	.word	0x20000000
 8004f0c:	10624dd3 	.word	0x10624dd3
 8004f10:	e000e014 	.word	0xe000e014

08004f14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004f14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004f24 <vPortEnableVFP+0x10>
 8004f18:	6801      	ldr	r1, [r0, #0]
 8004f1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004f1e:	6001      	str	r1, [r0, #0]
 8004f20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004f22:	bf00      	nop
 8004f24:	e000ed88 	.word	0xe000ed88

08004f28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004f28:	b480      	push	{r7}
 8004f2a:	b085      	sub	sp, #20
 8004f2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004f2e:	f3ef 8305 	mrs	r3, IPSR
 8004f32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2b0f      	cmp	r3, #15
 8004f38:	d914      	bls.n	8004f64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004f3a:	4a17      	ldr	r2, [pc, #92]	; (8004f98 <vPortValidateInterruptPriority+0x70>)
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	4413      	add	r3, r2
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004f44:	4b15      	ldr	r3, [pc, #84]	; (8004f9c <vPortValidateInterruptPriority+0x74>)
 8004f46:	781b      	ldrb	r3, [r3, #0]
 8004f48:	7afa      	ldrb	r2, [r7, #11]
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d20a      	bcs.n	8004f64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	607b      	str	r3, [r7, #4]
}
 8004f60:	bf00      	nop
 8004f62:	e7fe      	b.n	8004f62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004f64:	4b0e      	ldr	r3, [pc, #56]	; (8004fa0 <vPortValidateInterruptPriority+0x78>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004f6c:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <vPortValidateInterruptPriority+0x7c>)
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	429a      	cmp	r2, r3
 8004f72:	d90a      	bls.n	8004f8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004f74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f78:	f383 8811 	msr	BASEPRI, r3
 8004f7c:	f3bf 8f6f 	isb	sy
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	603b      	str	r3, [r7, #0]
}
 8004f86:	bf00      	nop
 8004f88:	e7fe      	b.n	8004f88 <vPortValidateInterruptPriority+0x60>
	}
 8004f8a:	bf00      	nop
 8004f8c:	3714      	adds	r7, #20
 8004f8e:	46bd      	mov	sp, r7
 8004f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f94:	4770      	bx	lr
 8004f96:	bf00      	nop
 8004f98:	e000e3f0 	.word	0xe000e3f0
 8004f9c:	20000ed8 	.word	0x20000ed8
 8004fa0:	e000ed0c 	.word	0xe000ed0c
 8004fa4:	20000edc 	.word	0x20000edc

08004fa8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004fb0:	2300      	movs	r3, #0
 8004fb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004fb4:	f7fe fc90 	bl	80038d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004fb8:	4b5b      	ldr	r3, [pc, #364]	; (8005128 <pvPortMalloc+0x180>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d101      	bne.n	8004fc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004fc0:	f000 f920 	bl	8005204 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004fc4:	4b59      	ldr	r3, [pc, #356]	; (800512c <pvPortMalloc+0x184>)
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4013      	ands	r3, r2
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	f040 8093 	bne.w	80050f8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d01d      	beq.n	8005014 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004fd8:	2208      	movs	r2, #8
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	4413      	add	r3, r2
 8004fde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	f003 0307 	and.w	r3, r3, #7
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d014      	beq.n	8005014 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f023 0307 	bic.w	r3, r3, #7
 8004ff0:	3308      	adds	r3, #8
 8004ff2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f003 0307 	and.w	r3, r3, #7
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d00a      	beq.n	8005014 <pvPortMalloc+0x6c>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	617b      	str	r3, [r7, #20]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2b00      	cmp	r3, #0
 8005018:	d06e      	beq.n	80050f8 <pvPortMalloc+0x150>
 800501a:	4b45      	ldr	r3, [pc, #276]	; (8005130 <pvPortMalloc+0x188>)
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	429a      	cmp	r2, r3
 8005022:	d869      	bhi.n	80050f8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005024:	4b43      	ldr	r3, [pc, #268]	; (8005134 <pvPortMalloc+0x18c>)
 8005026:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005028:	4b42      	ldr	r3, [pc, #264]	; (8005134 <pvPortMalloc+0x18c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800502e:	e004      	b.n	800503a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005032:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800503a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800503c:	685b      	ldr	r3, [r3, #4]
 800503e:	687a      	ldr	r2, [r7, #4]
 8005040:	429a      	cmp	r2, r3
 8005042:	d903      	bls.n	800504c <pvPortMalloc+0xa4>
 8005044:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1f1      	bne.n	8005030 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800504c:	4b36      	ldr	r3, [pc, #216]	; (8005128 <pvPortMalloc+0x180>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005052:	429a      	cmp	r2, r3
 8005054:	d050      	beq.n	80050f8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005056:	6a3b      	ldr	r3, [r7, #32]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	2208      	movs	r2, #8
 800505c:	4413      	add	r3, r2
 800505e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005062:	681a      	ldr	r2, [r3, #0]
 8005064:	6a3b      	ldr	r3, [r7, #32]
 8005066:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005068:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506a:	685a      	ldr	r2, [r3, #4]
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	1ad2      	subs	r2, r2, r3
 8005070:	2308      	movs	r3, #8
 8005072:	005b      	lsls	r3, r3, #1
 8005074:	429a      	cmp	r2, r3
 8005076:	d91f      	bls.n	80050b8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4413      	add	r3, r2
 800507e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f003 0307 	and.w	r3, r3, #7
 8005086:	2b00      	cmp	r3, #0
 8005088:	d00a      	beq.n	80050a0 <pvPortMalloc+0xf8>
	__asm volatile
 800508a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800508e:	f383 8811 	msr	BASEPRI, r3
 8005092:	f3bf 8f6f 	isb	sy
 8005096:	f3bf 8f4f 	dsb	sy
 800509a:	613b      	str	r3, [r7, #16]
}
 800509c:	bf00      	nop
 800509e:	e7fe      	b.n	800509e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80050a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a2:	685a      	ldr	r2, [r3, #4]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	1ad2      	subs	r2, r2, r3
 80050a8:	69bb      	ldr	r3, [r7, #24]
 80050aa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80050ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ae:	687a      	ldr	r2, [r7, #4]
 80050b0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80050b2:	69b8      	ldr	r0, [r7, #24]
 80050b4:	f000 f908 	bl	80052c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80050b8:	4b1d      	ldr	r3, [pc, #116]	; (8005130 <pvPortMalloc+0x188>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	1ad3      	subs	r3, r2, r3
 80050c2:	4a1b      	ldr	r2, [pc, #108]	; (8005130 <pvPortMalloc+0x188>)
 80050c4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80050c6:	4b1a      	ldr	r3, [pc, #104]	; (8005130 <pvPortMalloc+0x188>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	4b1b      	ldr	r3, [pc, #108]	; (8005138 <pvPortMalloc+0x190>)
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	429a      	cmp	r2, r3
 80050d0:	d203      	bcs.n	80050da <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80050d2:	4b17      	ldr	r3, [pc, #92]	; (8005130 <pvPortMalloc+0x188>)
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	4a18      	ldr	r2, [pc, #96]	; (8005138 <pvPortMalloc+0x190>)
 80050d8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80050da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050dc:	685a      	ldr	r2, [r3, #4]
 80050de:	4b13      	ldr	r3, [pc, #76]	; (800512c <pvPortMalloc+0x184>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	431a      	orrs	r2, r3
 80050e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050e6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80050e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050ea:	2200      	movs	r2, #0
 80050ec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80050ee:	4b13      	ldr	r3, [pc, #76]	; (800513c <pvPortMalloc+0x194>)
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	3301      	adds	r3, #1
 80050f4:	4a11      	ldr	r2, [pc, #68]	; (800513c <pvPortMalloc+0x194>)
 80050f6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80050f8:	f7fe fbfc 	bl	80038f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80050fc:	69fb      	ldr	r3, [r7, #28]
 80050fe:	f003 0307 	and.w	r3, r3, #7
 8005102:	2b00      	cmp	r3, #0
 8005104:	d00a      	beq.n	800511c <pvPortMalloc+0x174>
	__asm volatile
 8005106:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510a:	f383 8811 	msr	BASEPRI, r3
 800510e:	f3bf 8f6f 	isb	sy
 8005112:	f3bf 8f4f 	dsb	sy
 8005116:	60fb      	str	r3, [r7, #12]
}
 8005118:	bf00      	nop
 800511a:	e7fe      	b.n	800511a <pvPortMalloc+0x172>
	return pvReturn;
 800511c:	69fb      	ldr	r3, [r7, #28]
}
 800511e:	4618      	mov	r0, r3
 8005120:	3728      	adds	r7, #40	; 0x28
 8005122:	46bd      	mov	sp, r7
 8005124:	bd80      	pop	{r7, pc}
 8005126:	bf00      	nop
 8005128:	20004ae8 	.word	0x20004ae8
 800512c:	20004afc 	.word	0x20004afc
 8005130:	20004aec 	.word	0x20004aec
 8005134:	20004ae0 	.word	0x20004ae0
 8005138:	20004af0 	.word	0x20004af0
 800513c:	20004af4 	.word	0x20004af4

08005140 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b086      	sub	sp, #24
 8005144:	af00      	add	r7, sp, #0
 8005146:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	2b00      	cmp	r3, #0
 8005150:	d04d      	beq.n	80051ee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005152:	2308      	movs	r3, #8
 8005154:	425b      	negs	r3, r3
 8005156:	697a      	ldr	r2, [r7, #20]
 8005158:	4413      	add	r3, r2
 800515a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800515c:	697b      	ldr	r3, [r7, #20]
 800515e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005160:	693b      	ldr	r3, [r7, #16]
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	4b24      	ldr	r3, [pc, #144]	; (80051f8 <vPortFree+0xb8>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	4013      	ands	r3, r2
 800516a:	2b00      	cmp	r3, #0
 800516c:	d10a      	bne.n	8005184 <vPortFree+0x44>
	__asm volatile
 800516e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005172:	f383 8811 	msr	BASEPRI, r3
 8005176:	f3bf 8f6f 	isb	sy
 800517a:	f3bf 8f4f 	dsb	sy
 800517e:	60fb      	str	r3, [r7, #12]
}
 8005180:	bf00      	nop
 8005182:	e7fe      	b.n	8005182 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	2b00      	cmp	r3, #0
 800518a:	d00a      	beq.n	80051a2 <vPortFree+0x62>
	__asm volatile
 800518c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005190:	f383 8811 	msr	BASEPRI, r3
 8005194:	f3bf 8f6f 	isb	sy
 8005198:	f3bf 8f4f 	dsb	sy
 800519c:	60bb      	str	r3, [r7, #8]
}
 800519e:	bf00      	nop
 80051a0:	e7fe      	b.n	80051a0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80051a2:	693b      	ldr	r3, [r7, #16]
 80051a4:	685a      	ldr	r2, [r3, #4]
 80051a6:	4b14      	ldr	r3, [pc, #80]	; (80051f8 <vPortFree+0xb8>)
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	4013      	ands	r3, r2
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d01e      	beq.n	80051ee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80051b0:	693b      	ldr	r3, [r7, #16]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d11a      	bne.n	80051ee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	685a      	ldr	r2, [r3, #4]
 80051bc:	4b0e      	ldr	r3, [pc, #56]	; (80051f8 <vPortFree+0xb8>)
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	43db      	mvns	r3, r3
 80051c2:	401a      	ands	r2, r3
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80051c8:	f7fe fb86 	bl	80038d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	685a      	ldr	r2, [r3, #4]
 80051d0:	4b0a      	ldr	r3, [pc, #40]	; (80051fc <vPortFree+0xbc>)
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	4413      	add	r3, r2
 80051d6:	4a09      	ldr	r2, [pc, #36]	; (80051fc <vPortFree+0xbc>)
 80051d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80051da:	6938      	ldr	r0, [r7, #16]
 80051dc:	f000 f874 	bl	80052c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80051e0:	4b07      	ldr	r3, [pc, #28]	; (8005200 <vPortFree+0xc0>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	3301      	adds	r3, #1
 80051e6:	4a06      	ldr	r2, [pc, #24]	; (8005200 <vPortFree+0xc0>)
 80051e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80051ea:	f7fe fb83 	bl	80038f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80051ee:	bf00      	nop
 80051f0:	3718      	adds	r7, #24
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	20004afc 	.word	0x20004afc
 80051fc:	20004aec 	.word	0x20004aec
 8005200:	20004af8 	.word	0x20004af8

08005204 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005204:	b480      	push	{r7}
 8005206:	b085      	sub	sp, #20
 8005208:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800520a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800520e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005210:	4b27      	ldr	r3, [pc, #156]	; (80052b0 <prvHeapInit+0xac>)
 8005212:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	f003 0307 	and.w	r3, r3, #7
 800521a:	2b00      	cmp	r3, #0
 800521c:	d00c      	beq.n	8005238 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	3307      	adds	r3, #7
 8005222:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	f023 0307 	bic.w	r3, r3, #7
 800522a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800522c:	68ba      	ldr	r2, [r7, #8]
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	1ad3      	subs	r3, r2, r3
 8005232:	4a1f      	ldr	r2, [pc, #124]	; (80052b0 <prvHeapInit+0xac>)
 8005234:	4413      	add	r3, r2
 8005236:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800523c:	4a1d      	ldr	r2, [pc, #116]	; (80052b4 <prvHeapInit+0xb0>)
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005242:	4b1c      	ldr	r3, [pc, #112]	; (80052b4 <prvHeapInit+0xb0>)
 8005244:	2200      	movs	r2, #0
 8005246:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	68ba      	ldr	r2, [r7, #8]
 800524c:	4413      	add	r3, r2
 800524e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005250:	2208      	movs	r2, #8
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	1a9b      	subs	r3, r3, r2
 8005256:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	f023 0307 	bic.w	r3, r3, #7
 800525e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	4a15      	ldr	r2, [pc, #84]	; (80052b8 <prvHeapInit+0xb4>)
 8005264:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <prvHeapInit+0xb4>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2200      	movs	r2, #0
 800526c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800526e:	4b12      	ldr	r3, [pc, #72]	; (80052b8 <prvHeapInit+0xb4>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	68fa      	ldr	r2, [r7, #12]
 800527e:	1ad2      	subs	r2, r2, r3
 8005280:	683b      	ldr	r3, [r7, #0]
 8005282:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005284:	4b0c      	ldr	r3, [pc, #48]	; (80052b8 <prvHeapInit+0xb4>)
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800528c:	683b      	ldr	r3, [r7, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	4a0a      	ldr	r2, [pc, #40]	; (80052bc <prvHeapInit+0xb8>)
 8005292:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	685b      	ldr	r3, [r3, #4]
 8005298:	4a09      	ldr	r2, [pc, #36]	; (80052c0 <prvHeapInit+0xbc>)
 800529a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800529c:	4b09      	ldr	r3, [pc, #36]	; (80052c4 <prvHeapInit+0xc0>)
 800529e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80052a2:	601a      	str	r2, [r3, #0]
}
 80052a4:	bf00      	nop
 80052a6:	3714      	adds	r7, #20
 80052a8:	46bd      	mov	sp, r7
 80052aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ae:	4770      	bx	lr
 80052b0:	20000ee0 	.word	0x20000ee0
 80052b4:	20004ae0 	.word	0x20004ae0
 80052b8:	20004ae8 	.word	0x20004ae8
 80052bc:	20004af0 	.word	0x20004af0
 80052c0:	20004aec 	.word	0x20004aec
 80052c4:	20004afc 	.word	0x20004afc

080052c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80052c8:	b480      	push	{r7}
 80052ca:	b085      	sub	sp, #20
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80052d0:	4b28      	ldr	r3, [pc, #160]	; (8005374 <prvInsertBlockIntoFreeList+0xac>)
 80052d2:	60fb      	str	r3, [r7, #12]
 80052d4:	e002      	b.n	80052dc <prvInsertBlockIntoFreeList+0x14>
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	60fb      	str	r3, [r7, #12]
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	687a      	ldr	r2, [r7, #4]
 80052e2:	429a      	cmp	r2, r3
 80052e4:	d8f7      	bhi.n	80052d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	685b      	ldr	r3, [r3, #4]
 80052ee:	68ba      	ldr	r2, [r7, #8]
 80052f0:	4413      	add	r3, r2
 80052f2:	687a      	ldr	r2, [r7, #4]
 80052f4:	429a      	cmp	r2, r3
 80052f6:	d108      	bne.n	800530a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	685a      	ldr	r2, [r3, #4]
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	441a      	add	r2, r3
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	685b      	ldr	r3, [r3, #4]
 8005312:	68ba      	ldr	r2, [r7, #8]
 8005314:	441a      	add	r2, r3
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d118      	bne.n	8005350 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681a      	ldr	r2, [r3, #0]
 8005322:	4b15      	ldr	r3, [pc, #84]	; (8005378 <prvInsertBlockIntoFreeList+0xb0>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	429a      	cmp	r2, r3
 8005328:	d00d      	beq.n	8005346 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	685a      	ldr	r2, [r3, #4]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	441a      	add	r2, r3
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681a      	ldr	r2, [r3, #0]
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	601a      	str	r2, [r3, #0]
 8005344:	e008      	b.n	8005358 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005346:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <prvInsertBlockIntoFreeList+0xb0>)
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	601a      	str	r2, [r3, #0]
 800534e:	e003      	b.n	8005358 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005350:	68fb      	ldr	r3, [r7, #12]
 8005352:	681a      	ldr	r2, [r3, #0]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	429a      	cmp	r2, r3
 800535e:	d002      	beq.n	8005366 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	687a      	ldr	r2, [r7, #4]
 8005364:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005366:	bf00      	nop
 8005368:	3714      	adds	r7, #20
 800536a:	46bd      	mov	sp, r7
 800536c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005370:	4770      	bx	lr
 8005372:	bf00      	nop
 8005374:	20004ae0 	.word	0x20004ae0
 8005378:	20004ae8 	.word	0x20004ae8

0800537c <__libc_init_array>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4d0d      	ldr	r5, [pc, #52]	; (80053b4 <__libc_init_array+0x38>)
 8005380:	4c0d      	ldr	r4, [pc, #52]	; (80053b8 <__libc_init_array+0x3c>)
 8005382:	1b64      	subs	r4, r4, r5
 8005384:	10a4      	asrs	r4, r4, #2
 8005386:	2600      	movs	r6, #0
 8005388:	42a6      	cmp	r6, r4
 800538a:	d109      	bne.n	80053a0 <__libc_init_array+0x24>
 800538c:	4d0b      	ldr	r5, [pc, #44]	; (80053bc <__libc_init_array+0x40>)
 800538e:	4c0c      	ldr	r4, [pc, #48]	; (80053c0 <__libc_init_array+0x44>)
 8005390:	f000 f8f2 	bl	8005578 <_init>
 8005394:	1b64      	subs	r4, r4, r5
 8005396:	10a4      	asrs	r4, r4, #2
 8005398:	2600      	movs	r6, #0
 800539a:	42a6      	cmp	r6, r4
 800539c:	d105      	bne.n	80053aa <__libc_init_array+0x2e>
 800539e:	bd70      	pop	{r4, r5, r6, pc}
 80053a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80053a4:	4798      	blx	r3
 80053a6:	3601      	adds	r6, #1
 80053a8:	e7ee      	b.n	8005388 <__libc_init_array+0xc>
 80053aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80053ae:	4798      	blx	r3
 80053b0:	3601      	adds	r6, #1
 80053b2:	e7f2      	b.n	800539a <__libc_init_array+0x1e>
 80053b4:	080056e0 	.word	0x080056e0
 80053b8:	080056e0 	.word	0x080056e0
 80053bc:	080056e0 	.word	0x080056e0
 80053c0:	080056e4 	.word	0x080056e4

080053c4 <__retarget_lock_acquire_recursive>:
 80053c4:	4770      	bx	lr

080053c6 <__retarget_lock_release_recursive>:
 80053c6:	4770      	bx	lr

080053c8 <memcpy>:
 80053c8:	440a      	add	r2, r1
 80053ca:	4291      	cmp	r1, r2
 80053cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80053d0:	d100      	bne.n	80053d4 <memcpy+0xc>
 80053d2:	4770      	bx	lr
 80053d4:	b510      	push	{r4, lr}
 80053d6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053da:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053de:	4291      	cmp	r1, r2
 80053e0:	d1f9      	bne.n	80053d6 <memcpy+0xe>
 80053e2:	bd10      	pop	{r4, pc}

080053e4 <memset>:
 80053e4:	4402      	add	r2, r0
 80053e6:	4603      	mov	r3, r0
 80053e8:	4293      	cmp	r3, r2
 80053ea:	d100      	bne.n	80053ee <memset+0xa>
 80053ec:	4770      	bx	lr
 80053ee:	f803 1b01 	strb.w	r1, [r3], #1
 80053f2:	e7f9      	b.n	80053e8 <memset+0x4>

080053f4 <cleanup_glue>:
 80053f4:	b538      	push	{r3, r4, r5, lr}
 80053f6:	460c      	mov	r4, r1
 80053f8:	6809      	ldr	r1, [r1, #0]
 80053fa:	4605      	mov	r5, r0
 80053fc:	b109      	cbz	r1, 8005402 <cleanup_glue+0xe>
 80053fe:	f7ff fff9 	bl	80053f4 <cleanup_glue>
 8005402:	4621      	mov	r1, r4
 8005404:	4628      	mov	r0, r5
 8005406:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800540a:	f000 b869 	b.w	80054e0 <_free_r>
	...

08005410 <_reclaim_reent>:
 8005410:	4b2c      	ldr	r3, [pc, #176]	; (80054c4 <_reclaim_reent+0xb4>)
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	4283      	cmp	r3, r0
 8005416:	b570      	push	{r4, r5, r6, lr}
 8005418:	4604      	mov	r4, r0
 800541a:	d051      	beq.n	80054c0 <_reclaim_reent+0xb0>
 800541c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800541e:	b143      	cbz	r3, 8005432 <_reclaim_reent+0x22>
 8005420:	68db      	ldr	r3, [r3, #12]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d14a      	bne.n	80054bc <_reclaim_reent+0xac>
 8005426:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005428:	6819      	ldr	r1, [r3, #0]
 800542a:	b111      	cbz	r1, 8005432 <_reclaim_reent+0x22>
 800542c:	4620      	mov	r0, r4
 800542e:	f000 f857 	bl	80054e0 <_free_r>
 8005432:	6961      	ldr	r1, [r4, #20]
 8005434:	b111      	cbz	r1, 800543c <_reclaim_reent+0x2c>
 8005436:	4620      	mov	r0, r4
 8005438:	f000 f852 	bl	80054e0 <_free_r>
 800543c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800543e:	b111      	cbz	r1, 8005446 <_reclaim_reent+0x36>
 8005440:	4620      	mov	r0, r4
 8005442:	f000 f84d 	bl	80054e0 <_free_r>
 8005446:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005448:	b111      	cbz	r1, 8005450 <_reclaim_reent+0x40>
 800544a:	4620      	mov	r0, r4
 800544c:	f000 f848 	bl	80054e0 <_free_r>
 8005450:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005452:	b111      	cbz	r1, 800545a <_reclaim_reent+0x4a>
 8005454:	4620      	mov	r0, r4
 8005456:	f000 f843 	bl	80054e0 <_free_r>
 800545a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800545c:	b111      	cbz	r1, 8005464 <_reclaim_reent+0x54>
 800545e:	4620      	mov	r0, r4
 8005460:	f000 f83e 	bl	80054e0 <_free_r>
 8005464:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005466:	b111      	cbz	r1, 800546e <_reclaim_reent+0x5e>
 8005468:	4620      	mov	r0, r4
 800546a:	f000 f839 	bl	80054e0 <_free_r>
 800546e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005470:	b111      	cbz	r1, 8005478 <_reclaim_reent+0x68>
 8005472:	4620      	mov	r0, r4
 8005474:	f000 f834 	bl	80054e0 <_free_r>
 8005478:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800547a:	b111      	cbz	r1, 8005482 <_reclaim_reent+0x72>
 800547c:	4620      	mov	r0, r4
 800547e:	f000 f82f 	bl	80054e0 <_free_r>
 8005482:	69a3      	ldr	r3, [r4, #24]
 8005484:	b1e3      	cbz	r3, 80054c0 <_reclaim_reent+0xb0>
 8005486:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005488:	4620      	mov	r0, r4
 800548a:	4798      	blx	r3
 800548c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800548e:	b1b9      	cbz	r1, 80054c0 <_reclaim_reent+0xb0>
 8005490:	4620      	mov	r0, r4
 8005492:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005496:	f7ff bfad 	b.w	80053f4 <cleanup_glue>
 800549a:	5949      	ldr	r1, [r1, r5]
 800549c:	b941      	cbnz	r1, 80054b0 <_reclaim_reent+0xa0>
 800549e:	3504      	adds	r5, #4
 80054a0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054a2:	2d80      	cmp	r5, #128	; 0x80
 80054a4:	68d9      	ldr	r1, [r3, #12]
 80054a6:	d1f8      	bne.n	800549a <_reclaim_reent+0x8a>
 80054a8:	4620      	mov	r0, r4
 80054aa:	f000 f819 	bl	80054e0 <_free_r>
 80054ae:	e7ba      	b.n	8005426 <_reclaim_reent+0x16>
 80054b0:	680e      	ldr	r6, [r1, #0]
 80054b2:	4620      	mov	r0, r4
 80054b4:	f000 f814 	bl	80054e0 <_free_r>
 80054b8:	4631      	mov	r1, r6
 80054ba:	e7ef      	b.n	800549c <_reclaim_reent+0x8c>
 80054bc:	2500      	movs	r5, #0
 80054be:	e7ef      	b.n	80054a0 <_reclaim_reent+0x90>
 80054c0:	bd70      	pop	{r4, r5, r6, pc}
 80054c2:	bf00      	nop
 80054c4:	20000010 	.word	0x20000010

080054c8 <__malloc_lock>:
 80054c8:	4801      	ldr	r0, [pc, #4]	; (80054d0 <__malloc_lock+0x8>)
 80054ca:	f7ff bf7b 	b.w	80053c4 <__retarget_lock_acquire_recursive>
 80054ce:	bf00      	nop
 80054d0:	20004b00 	.word	0x20004b00

080054d4 <__malloc_unlock>:
 80054d4:	4801      	ldr	r0, [pc, #4]	; (80054dc <__malloc_unlock+0x8>)
 80054d6:	f7ff bf76 	b.w	80053c6 <__retarget_lock_release_recursive>
 80054da:	bf00      	nop
 80054dc:	20004b00 	.word	0x20004b00

080054e0 <_free_r>:
 80054e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80054e2:	2900      	cmp	r1, #0
 80054e4:	d044      	beq.n	8005570 <_free_r+0x90>
 80054e6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80054ea:	9001      	str	r0, [sp, #4]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f1a1 0404 	sub.w	r4, r1, #4
 80054f2:	bfb8      	it	lt
 80054f4:	18e4      	addlt	r4, r4, r3
 80054f6:	f7ff ffe7 	bl	80054c8 <__malloc_lock>
 80054fa:	4a1e      	ldr	r2, [pc, #120]	; (8005574 <_free_r+0x94>)
 80054fc:	9801      	ldr	r0, [sp, #4]
 80054fe:	6813      	ldr	r3, [r2, #0]
 8005500:	b933      	cbnz	r3, 8005510 <_free_r+0x30>
 8005502:	6063      	str	r3, [r4, #4]
 8005504:	6014      	str	r4, [r2, #0]
 8005506:	b003      	add	sp, #12
 8005508:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800550c:	f7ff bfe2 	b.w	80054d4 <__malloc_unlock>
 8005510:	42a3      	cmp	r3, r4
 8005512:	d908      	bls.n	8005526 <_free_r+0x46>
 8005514:	6825      	ldr	r5, [r4, #0]
 8005516:	1961      	adds	r1, r4, r5
 8005518:	428b      	cmp	r3, r1
 800551a:	bf01      	itttt	eq
 800551c:	6819      	ldreq	r1, [r3, #0]
 800551e:	685b      	ldreq	r3, [r3, #4]
 8005520:	1949      	addeq	r1, r1, r5
 8005522:	6021      	streq	r1, [r4, #0]
 8005524:	e7ed      	b.n	8005502 <_free_r+0x22>
 8005526:	461a      	mov	r2, r3
 8005528:	685b      	ldr	r3, [r3, #4]
 800552a:	b10b      	cbz	r3, 8005530 <_free_r+0x50>
 800552c:	42a3      	cmp	r3, r4
 800552e:	d9fa      	bls.n	8005526 <_free_r+0x46>
 8005530:	6811      	ldr	r1, [r2, #0]
 8005532:	1855      	adds	r5, r2, r1
 8005534:	42a5      	cmp	r5, r4
 8005536:	d10b      	bne.n	8005550 <_free_r+0x70>
 8005538:	6824      	ldr	r4, [r4, #0]
 800553a:	4421      	add	r1, r4
 800553c:	1854      	adds	r4, r2, r1
 800553e:	42a3      	cmp	r3, r4
 8005540:	6011      	str	r1, [r2, #0]
 8005542:	d1e0      	bne.n	8005506 <_free_r+0x26>
 8005544:	681c      	ldr	r4, [r3, #0]
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	6053      	str	r3, [r2, #4]
 800554a:	4421      	add	r1, r4
 800554c:	6011      	str	r1, [r2, #0]
 800554e:	e7da      	b.n	8005506 <_free_r+0x26>
 8005550:	d902      	bls.n	8005558 <_free_r+0x78>
 8005552:	230c      	movs	r3, #12
 8005554:	6003      	str	r3, [r0, #0]
 8005556:	e7d6      	b.n	8005506 <_free_r+0x26>
 8005558:	6825      	ldr	r5, [r4, #0]
 800555a:	1961      	adds	r1, r4, r5
 800555c:	428b      	cmp	r3, r1
 800555e:	bf04      	itt	eq
 8005560:	6819      	ldreq	r1, [r3, #0]
 8005562:	685b      	ldreq	r3, [r3, #4]
 8005564:	6063      	str	r3, [r4, #4]
 8005566:	bf04      	itt	eq
 8005568:	1949      	addeq	r1, r1, r5
 800556a:	6021      	streq	r1, [r4, #0]
 800556c:	6054      	str	r4, [r2, #4]
 800556e:	e7ca      	b.n	8005506 <_free_r+0x26>
 8005570:	b003      	add	sp, #12
 8005572:	bd30      	pop	{r4, r5, pc}
 8005574:	20004b04 	.word	0x20004b04

08005578 <_init>:
 8005578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800557a:	bf00      	nop
 800557c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557e:	bc08      	pop	{r3}
 8005580:	469e      	mov	lr, r3
 8005582:	4770      	bx	lr

08005584 <_fini>:
 8005584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005586:	bf00      	nop
 8005588:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800558a:	bc08      	pop	{r3}
 800558c:	469e      	mov	lr, r3
 800558e:	4770      	bx	lr
