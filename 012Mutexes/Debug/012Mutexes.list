
012Mutexes.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004ea0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000100  08005030  08005030  00015030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005130  08005130  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005130  08005130  00015130  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005138  08005138  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005138  08005138  00015138  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800513c  0800513c  0001513c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005140  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a8c  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004b00  20004b00  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000146e7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002aa8  00000000  00000000  0003478b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  00037238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001018  00000000  00000000  00038368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b45  00000000  00000000  00039380  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001186f  00000000  00000000  0003bec5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d20d3  00000000  00000000  0004d734  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011f807  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b4c  00000000  00000000  0011f858  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005018 	.word	0x08005018

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005018 	.word	0x08005018

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	e000      	b.n	8000500 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fa00 	bl	800092c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f82e 	bl	800058c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f894 	bl	800065c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f001 fac6 	bl	8001ac4 <osKernelInitialize>
  /* Create the mutex(es) */
  /* creation of Mutex1 */
  Mutex1Handle = osMutexNew(&Mutex1_attributes);
 8000538:	480c      	ldr	r0, [pc, #48]	; (800056c <main+0x48>)
 800053a:	f001 fbba 	bl	8001cb2 <osMutexNew>
 800053e:	4603      	mov	r3, r0
 8000540:	4a0b      	ldr	r2, [pc, #44]	; (8000570 <main+0x4c>)
 8000542:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000544:	4a0b      	ldr	r2, [pc, #44]	; (8000574 <main+0x50>)
 8000546:	2100      	movs	r1, #0
 8000548:	480b      	ldr	r0, [pc, #44]	; (8000578 <main+0x54>)
 800054a:	f001 fb05 	bl	8001b58 <osThreadNew>
 800054e:	4603      	mov	r3, r0
 8000550:	4a0a      	ldr	r2, [pc, #40]	; (800057c <main+0x58>)
 8000552:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000554:	4a0a      	ldr	r2, [pc, #40]	; (8000580 <main+0x5c>)
 8000556:	2100      	movs	r1, #0
 8000558:	480a      	ldr	r0, [pc, #40]	; (8000584 <main+0x60>)
 800055a:	f001 fafd 	bl	8001b58 <osThreadNew>
 800055e:	4603      	mov	r3, r0
 8000560:	4a09      	ldr	r2, [pc, #36]	; (8000588 <main+0x64>)
 8000562:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000564:	f001 fad2 	bl	8001b0c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000568:	e7fe      	b.n	8000568 <main+0x44>
 800056a:	bf00      	nop
 800056c:	080050a8 	.word	0x080050a8
 8000570:	20000098 	.word	0x20000098
 8000574:	08005060 	.word	0x08005060
 8000578:	080006cd 	.word	0x080006cd
 800057c:	20000090 	.word	0x20000090
 8000580:	08005084 	.word	0x08005084
 8000584:	08000705 	.word	0x08000705
 8000588:	20000094 	.word	0x20000094

0800058c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	b094      	sub	sp, #80	; 0x50
 8000590:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000592:	f107 0320 	add.w	r3, r7, #32
 8000596:	2230      	movs	r2, #48	; 0x30
 8000598:	2100      	movs	r1, #0
 800059a:	4618      	mov	r0, r3
 800059c:	f004 fc72 	bl	8004e84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a0:	f107 030c 	add.w	r3, r7, #12
 80005a4:	2200      	movs	r2, #0
 80005a6:	601a      	str	r2, [r3, #0]
 80005a8:	605a      	str	r2, [r3, #4]
 80005aa:	609a      	str	r2, [r3, #8]
 80005ac:	60da      	str	r2, [r3, #12]
 80005ae:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b0:	2300      	movs	r3, #0
 80005b2:	60bb      	str	r3, [r7, #8]
 80005b4:	4b27      	ldr	r3, [pc, #156]	; (8000654 <SystemClock_Config+0xc8>)
 80005b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b8:	4a26      	ldr	r2, [pc, #152]	; (8000654 <SystemClock_Config+0xc8>)
 80005ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005be:	6413      	str	r3, [r2, #64]	; 0x40
 80005c0:	4b24      	ldr	r3, [pc, #144]	; (8000654 <SystemClock_Config+0xc8>)
 80005c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005c8:	60bb      	str	r3, [r7, #8]
 80005ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005cc:	2300      	movs	r3, #0
 80005ce:	607b      	str	r3, [r7, #4]
 80005d0:	4b21      	ldr	r3, [pc, #132]	; (8000658 <SystemClock_Config+0xcc>)
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	4a20      	ldr	r2, [pc, #128]	; (8000658 <SystemClock_Config+0xcc>)
 80005d6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005da:	6013      	str	r3, [r2, #0]
 80005dc:	4b1e      	ldr	r3, [pc, #120]	; (8000658 <SystemClock_Config+0xcc>)
 80005de:	681b      	ldr	r3, [r3, #0]
 80005e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e4:	607b      	str	r3, [r7, #4]
 80005e6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005e8:	2302      	movs	r3, #2
 80005ea:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005ec:	2301      	movs	r3, #1
 80005ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f0:	2310      	movs	r3, #16
 80005f2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005f4:	2302      	movs	r3, #2
 80005f6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005fc:	2308      	movs	r3, #8
 80005fe:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000600:	2340      	movs	r3, #64	; 0x40
 8000602:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000604:	2302      	movs	r3, #2
 8000606:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000608:	2307      	movs	r3, #7
 800060a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060c:	f107 0320 	add.w	r3, r7, #32
 8000610:	4618      	mov	r0, r3
 8000612:	f000 faaf 	bl	8000b74 <HAL_RCC_OscConfig>
 8000616:	4603      	mov	r3, r0
 8000618:	2b00      	cmp	r3, #0
 800061a:	d001      	beq.n	8000620 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800061c:	f000 f8a0 	bl	8000760 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000620:	230f      	movs	r3, #15
 8000622:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000624:	2302      	movs	r3, #2
 8000626:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000628:	23b0      	movs	r3, #176	; 0xb0
 800062a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800062c:	2300      	movs	r3, #0
 800062e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	2100      	movs	r1, #0
 800063a:	4618      	mov	r0, r3
 800063c:	f000 fd12 	bl	8001064 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000646:	f000 f88b 	bl	8000760 <Error_Handler>
  }
}
 800064a:	bf00      	nop
 800064c:	3750      	adds	r7, #80	; 0x50
 800064e:	46bd      	mov	sp, r7
 8000650:	bd80      	pop	{r7, pc}
 8000652:	bf00      	nop
 8000654:	40023800 	.word	0x40023800
 8000658:	40007000 	.word	0x40007000

0800065c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	607b      	str	r3, [r7, #4]
 8000666:	4b10      	ldr	r3, [pc, #64]	; (80006a8 <MX_GPIO_Init+0x4c>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800066a:	4a0f      	ldr	r2, [pc, #60]	; (80006a8 <MX_GPIO_Init+0x4c>)
 800066c:	f043 0301 	orr.w	r3, r3, #1
 8000670:	6313      	str	r3, [r2, #48]	; 0x30
 8000672:	4b0d      	ldr	r3, [pc, #52]	; (80006a8 <MX_GPIO_Init+0x4c>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000676:	f003 0301 	and.w	r3, r3, #1
 800067a:	607b      	str	r3, [r7, #4]
 800067c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	603b      	str	r3, [r7, #0]
 8000682:	4b09      	ldr	r3, [pc, #36]	; (80006a8 <MX_GPIO_Init+0x4c>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000686:	4a08      	ldr	r2, [pc, #32]	; (80006a8 <MX_GPIO_Init+0x4c>)
 8000688:	f043 0302 	orr.w	r3, r3, #2
 800068c:	6313      	str	r3, [r2, #48]	; 0x30
 800068e:	4b06      	ldr	r3, [pc, #24]	; (80006a8 <MX_GPIO_Init+0x4c>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	f003 0302 	and.w	r3, r3, #2
 8000696:	603b      	str	r3, [r7, #0]
 8000698:	683b      	ldr	r3, [r7, #0]

}
 800069a:	bf00      	nop
 800069c:	370c      	adds	r7, #12
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	40023800 	.word	0x40023800

080006ac <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b082      	sub	sp, #8
 80006b0:	af00      	add	r7, sp, #0
 80006b2:	4603      	mov	r3, r0
 80006b4:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80006b6:	79fb      	ldrb	r3, [r7, #7]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f7ff ff0b 	bl	80004d4 <ITM_SendChar>
	ITM_SendChar('\n');
 80006be:	200a      	movs	r0, #10
 80006c0:	f7ff ff08 	bl	80004d4 <ITM_SendChar>
}
 80006c4:	bf00      	nop
 80006c6:	3708      	adds	r7, #8
 80006c8:	46bd      	mov	sp, r7
 80006ca:	bd80      	pop	{r7, pc}

080006cc <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80006cc:	b580      	push	{r7, lr}
 80006ce:	b082      	sub	sp, #8
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(2000);
 80006d4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80006d8:	f001 fad0 	bl	8001c7c <osDelay>
    osMutexAcquire(Mutex1Handle, 1000);
 80006dc:	4b07      	ldr	r3, [pc, #28]	; (80006fc <StartTask1+0x30>)
 80006de:	681b      	ldr	r3, [r3, #0]
 80006e0:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80006e4:	4618      	mov	r0, r3
 80006e6:	f001 fb6a 	bl	8001dbe <osMutexAcquire>
    task_action('1');
 80006ea:	2031      	movs	r0, #49	; 0x31
 80006ec:	f7ff ffde 	bl	80006ac <task_action>
    osMutexRelease(Task1Handle);
 80006f0:	4b03      	ldr	r3, [pc, #12]	; (8000700 <StartTask1+0x34>)
 80006f2:	681b      	ldr	r3, [r3, #0]
 80006f4:	4618      	mov	r0, r3
 80006f6:	f001 fbad 	bl	8001e54 <osMutexRelease>
    osDelay(2000);
 80006fa:	e7eb      	b.n	80006d4 <StartTask1+0x8>
 80006fc:	20000098 	.word	0x20000098
 8000700:	20000090 	.word	0x20000090

08000704 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	 osDelay(2000);
 800070c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000710:	f001 fab4 	bl	8001c7c <osDelay>
	 osMutexAcquire(Mutex1Handle, 1000);
 8000714:	4b07      	ldr	r3, [pc, #28]	; (8000734 <StartTask2+0x30>)
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800071c:	4618      	mov	r0, r3
 800071e:	f001 fb4e 	bl	8001dbe <osMutexAcquire>
	 task_action('2');
 8000722:	2032      	movs	r0, #50	; 0x32
 8000724:	f7ff ffc2 	bl	80006ac <task_action>
	 osMutexRelease(Task1Handle);
 8000728:	4b03      	ldr	r3, [pc, #12]	; (8000738 <StartTask2+0x34>)
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fb91 	bl	8001e54 <osMutexRelease>
	 osDelay(2000);
 8000732:	e7eb      	b.n	800070c <StartTask2+0x8>
 8000734:	20000098 	.word	0x20000098
 8000738:	20000090 	.word	0x20000090

0800073c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
 8000742:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000744:	687b      	ldr	r3, [r7, #4]
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800074a:	4293      	cmp	r3, r2
 800074c:	d101      	bne.n	8000752 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800074e:	f000 f90f 	bl	8000970 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000752:	bf00      	nop
 8000754:	3708      	adds	r7, #8
 8000756:	46bd      	mov	sp, r7
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	40001000 	.word	0x40001000

08000760 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000764:	b672      	cpsid	i
}
 8000766:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000768:	e7fe      	b.n	8000768 <Error_Handler+0x8>
	...

0800076c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b082      	sub	sp, #8
 8000770:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	607b      	str	r3, [r7, #4]
 8000776:	4b12      	ldr	r3, [pc, #72]	; (80007c0 <HAL_MspInit+0x54>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a11      	ldr	r2, [pc, #68]	; (80007c0 <HAL_MspInit+0x54>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
 8000782:	4b0f      	ldr	r3, [pc, #60]	; (80007c0 <HAL_MspInit+0x54>)
 8000784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000786:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800078a:	607b      	str	r3, [r7, #4]
 800078c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800078e:	2300      	movs	r3, #0
 8000790:	603b      	str	r3, [r7, #0]
 8000792:	4b0b      	ldr	r3, [pc, #44]	; (80007c0 <HAL_MspInit+0x54>)
 8000794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000796:	4a0a      	ldr	r2, [pc, #40]	; (80007c0 <HAL_MspInit+0x54>)
 8000798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079c:	6413      	str	r3, [r2, #64]	; 0x40
 800079e:	4b08      	ldr	r3, [pc, #32]	; (80007c0 <HAL_MspInit+0x54>)
 80007a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a6:	603b      	str	r3, [r7, #0]
 80007a8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80007aa:	2200      	movs	r2, #0
 80007ac:	210f      	movs	r1, #15
 80007ae:	f06f 0001 	mvn.w	r0, #1
 80007b2:	f000 f9b5 	bl	8000b20 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007b6:	bf00      	nop
 80007b8:	3708      	adds	r7, #8
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40023800 	.word	0x40023800

080007c4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b08c      	sub	sp, #48	; 0x30
 80007c8:	af00      	add	r7, sp, #0
 80007ca:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007cc:	2300      	movs	r3, #0
 80007ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007d0:	2300      	movs	r3, #0
 80007d2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80007d4:	2200      	movs	r2, #0
 80007d6:	6879      	ldr	r1, [r7, #4]
 80007d8:	2036      	movs	r0, #54	; 0x36
 80007da:	f000 f9a1 	bl	8000b20 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007de:	2036      	movs	r0, #54	; 0x36
 80007e0:	f000 f9ba 	bl	8000b58 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007e4:	2300      	movs	r3, #0
 80007e6:	60fb      	str	r3, [r7, #12]
 80007e8:	4b1e      	ldr	r3, [pc, #120]	; (8000864 <HAL_InitTick+0xa0>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a1d      	ldr	r2, [pc, #116]	; (8000864 <HAL_InitTick+0xa0>)
 80007ee:	f043 0310 	orr.w	r3, r3, #16
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40
 80007f4:	4b1b      	ldr	r3, [pc, #108]	; (8000864 <HAL_InitTick+0xa0>)
 80007f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f8:	f003 0310 	and.w	r3, r3, #16
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000800:	f107 0210 	add.w	r2, r7, #16
 8000804:	f107 0314 	add.w	r3, r7, #20
 8000808:	4611      	mov	r1, r2
 800080a:	4618      	mov	r0, r3
 800080c:	f000 fe36 	bl	800147c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000810:	f000 fe20 	bl	8001454 <HAL_RCC_GetPCLK1Freq>
 8000814:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000816:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000818:	4a13      	ldr	r2, [pc, #76]	; (8000868 <HAL_InitTick+0xa4>)
 800081a:	fba2 2303 	umull	r2, r3, r2, r3
 800081e:	0c9b      	lsrs	r3, r3, #18
 8000820:	3b01      	subs	r3, #1
 8000822:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000824:	4b11      	ldr	r3, [pc, #68]	; (800086c <HAL_InitTick+0xa8>)
 8000826:	4a12      	ldr	r2, [pc, #72]	; (8000870 <HAL_InitTick+0xac>)
 8000828:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800082a:	4b10      	ldr	r3, [pc, #64]	; (800086c <HAL_InitTick+0xa8>)
 800082c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000830:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000832:	4a0e      	ldr	r2, [pc, #56]	; (800086c <HAL_InitTick+0xa8>)
 8000834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000836:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000838:	4b0c      	ldr	r3, [pc, #48]	; (800086c <HAL_InitTick+0xa8>)
 800083a:	2200      	movs	r2, #0
 800083c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800083e:	4b0b      	ldr	r3, [pc, #44]	; (800086c <HAL_InitTick+0xa8>)
 8000840:	2200      	movs	r2, #0
 8000842:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000844:	4809      	ldr	r0, [pc, #36]	; (800086c <HAL_InitTick+0xa8>)
 8000846:	f000 fe4b 	bl	80014e0 <HAL_TIM_Base_Init>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d104      	bne.n	800085a <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000850:	4806      	ldr	r0, [pc, #24]	; (800086c <HAL_InitTick+0xa8>)
 8000852:	f000 fe9f 	bl	8001594 <HAL_TIM_Base_Start_IT>
 8000856:	4603      	mov	r3, r0
 8000858:	e000      	b.n	800085c <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800085a:	2301      	movs	r3, #1
}
 800085c:	4618      	mov	r0, r3
 800085e:	3730      	adds	r7, #48	; 0x30
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	40023800 	.word	0x40023800
 8000868:	431bde83 	.word	0x431bde83
 800086c:	2000009c 	.word	0x2000009c
 8000870:	40001000 	.word	0x40001000

08000874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000874:	b480      	push	{r7}
 8000876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000878:	e7fe      	b.n	8000878 <NMI_Handler+0x4>

0800087a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800087a:	b480      	push	{r7}
 800087c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800087e:	e7fe      	b.n	800087e <HardFault_Handler+0x4>

08000880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000880:	b480      	push	{r7}
 8000882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000884:	e7fe      	b.n	8000884 <MemManage_Handler+0x4>

08000886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000886:	b480      	push	{r7}
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800088a:	e7fe      	b.n	800088a <BusFault_Handler+0x4>

0800088c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800088c:	b480      	push	{r7}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000890:	e7fe      	b.n	8000890 <UsageFault_Handler+0x4>

08000892 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000892:	b480      	push	{r7}
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	46bd      	mov	sp, r7
 800089a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800089e:	4770      	bx	lr

080008a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <TIM6_DAC_IRQHandler+0x10>)
 80008a6:	f000 fee5 	bl	8001674 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000009c 	.word	0x2000009c

080008b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <SystemInit+0x20>)
 80008ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <SystemInit+0x20>)
 80008c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000910 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008dc:	480d      	ldr	r0, [pc, #52]	; (8000914 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008de:	490e      	ldr	r1, [pc, #56]	; (8000918 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008e0:	4a0e      	ldr	r2, [pc, #56]	; (800091c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008e4:	e002      	b.n	80008ec <LoopCopyDataInit>

080008e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ea:	3304      	adds	r3, #4

080008ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008f0:	d3f9      	bcc.n	80008e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008f2:	4a0b      	ldr	r2, [pc, #44]	; (8000920 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008f4:	4c0b      	ldr	r4, [pc, #44]	; (8000924 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008f8:	e001      	b.n	80008fe <LoopFillZerobss>

080008fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008fc:	3204      	adds	r2, #4

080008fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000900:	d3fb      	bcc.n	80008fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000902:	f7ff ffd7 	bl	80008b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000906:	f004 fa89 	bl	8004e1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800090a:	f7ff fe0b 	bl	8000524 <main>
  bx  lr    
 800090e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000910:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000914:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000918:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 800091c:	08005140 	.word	0x08005140
  ldr r2, =_sbss
 8000920:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000924:	20004b00 	.word	0x20004b00

08000928 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000928:	e7fe      	b.n	8000928 <ADC_IRQHandler>
	...

0800092c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000930:	4b0e      	ldr	r3, [pc, #56]	; (800096c <HAL_Init+0x40>)
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a0d      	ldr	r2, [pc, #52]	; (800096c <HAL_Init+0x40>)
 8000936:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800093a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800093c:	4b0b      	ldr	r3, [pc, #44]	; (800096c <HAL_Init+0x40>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	4a0a      	ldr	r2, [pc, #40]	; (800096c <HAL_Init+0x40>)
 8000942:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000946:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000948:	4b08      	ldr	r3, [pc, #32]	; (800096c <HAL_Init+0x40>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a07      	ldr	r2, [pc, #28]	; (800096c <HAL_Init+0x40>)
 800094e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000952:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000954:	2003      	movs	r0, #3
 8000956:	f000 f8d8 	bl	8000b0a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800095a:	200f      	movs	r0, #15
 800095c:	f7ff ff32 	bl	80007c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000960:	f7ff ff04 	bl	800076c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000964:	2300      	movs	r3, #0
}
 8000966:	4618      	mov	r0, r3
 8000968:	bd80      	pop	{r7, pc}
 800096a:	bf00      	nop
 800096c:	40023c00 	.word	0x40023c00

08000970 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000970:	b480      	push	{r7}
 8000972:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000974:	4b06      	ldr	r3, [pc, #24]	; (8000990 <HAL_IncTick+0x20>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	461a      	mov	r2, r3
 800097a:	4b06      	ldr	r3, [pc, #24]	; (8000994 <HAL_IncTick+0x24>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4413      	add	r3, r2
 8000980:	4a04      	ldr	r2, [pc, #16]	; (8000994 <HAL_IncTick+0x24>)
 8000982:	6013      	str	r3, [r2, #0]
}
 8000984:	bf00      	nop
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	20000008 	.word	0x20000008
 8000994:	200000e4 	.word	0x200000e4

08000998 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  return uwTick;
 800099c:	4b03      	ldr	r3, [pc, #12]	; (80009ac <HAL_GetTick+0x14>)
 800099e:	681b      	ldr	r3, [r3, #0]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
 80009aa:	bf00      	nop
 80009ac:	200000e4 	.word	0x200000e4

080009b0 <__NVIC_SetPriorityGrouping>:
{
 80009b0:	b480      	push	{r7}
 80009b2:	b085      	sub	sp, #20
 80009b4:	af00      	add	r7, sp, #0
 80009b6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009b8:	687b      	ldr	r3, [r7, #4]
 80009ba:	f003 0307 	and.w	r3, r3, #7
 80009be:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009c0:	4b0c      	ldr	r3, [pc, #48]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009c6:	68ba      	ldr	r2, [r7, #8]
 80009c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009cc:	4013      	ands	r3, r2
 80009ce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009d0:	68fb      	ldr	r3, [r7, #12]
 80009d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80009d4:	68bb      	ldr	r3, [r7, #8]
 80009d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80009d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80009dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80009e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009e2:	4a04      	ldr	r2, [pc, #16]	; (80009f4 <__NVIC_SetPriorityGrouping+0x44>)
 80009e4:	68bb      	ldr	r3, [r7, #8]
 80009e6:	60d3      	str	r3, [r2, #12]
}
 80009e8:	bf00      	nop
 80009ea:	3714      	adds	r7, #20
 80009ec:	46bd      	mov	sp, r7
 80009ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f2:	4770      	bx	lr
 80009f4:	e000ed00 	.word	0xe000ed00

080009f8 <__NVIC_GetPriorityGrouping>:
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009fc:	4b04      	ldr	r3, [pc, #16]	; (8000a10 <__NVIC_GetPriorityGrouping+0x18>)
 80009fe:	68db      	ldr	r3, [r3, #12]
 8000a00:	0a1b      	lsrs	r3, r3, #8
 8000a02:	f003 0307 	and.w	r3, r3, #7
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	46bd      	mov	sp, r7
 8000a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a0e:	4770      	bx	lr
 8000a10:	e000ed00 	.word	0xe000ed00

08000a14 <__NVIC_EnableIRQ>:
{
 8000a14:	b480      	push	{r7}
 8000a16:	b083      	sub	sp, #12
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	4603      	mov	r3, r0
 8000a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	db0b      	blt.n	8000a3e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a26:	79fb      	ldrb	r3, [r7, #7]
 8000a28:	f003 021f 	and.w	r2, r3, #31
 8000a2c:	4907      	ldr	r1, [pc, #28]	; (8000a4c <__NVIC_EnableIRQ+0x38>)
 8000a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a32:	095b      	lsrs	r3, r3, #5
 8000a34:	2001      	movs	r0, #1
 8000a36:	fa00 f202 	lsl.w	r2, r0, r2
 8000a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a3e:	bf00      	nop
 8000a40:	370c      	adds	r7, #12
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	e000e100 	.word	0xe000e100

08000a50 <__NVIC_SetPriority>:
{
 8000a50:	b480      	push	{r7}
 8000a52:	b083      	sub	sp, #12
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	4603      	mov	r3, r0
 8000a58:	6039      	str	r1, [r7, #0]
 8000a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	db0a      	blt.n	8000a7a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	b2da      	uxtb	r2, r3
 8000a68:	490c      	ldr	r1, [pc, #48]	; (8000a9c <__NVIC_SetPriority+0x4c>)
 8000a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a6e:	0112      	lsls	r2, r2, #4
 8000a70:	b2d2      	uxtb	r2, r2
 8000a72:	440b      	add	r3, r1
 8000a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000a78:	e00a      	b.n	8000a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a7a:	683b      	ldr	r3, [r7, #0]
 8000a7c:	b2da      	uxtb	r2, r3
 8000a7e:	4908      	ldr	r1, [pc, #32]	; (8000aa0 <__NVIC_SetPriority+0x50>)
 8000a80:	79fb      	ldrb	r3, [r7, #7]
 8000a82:	f003 030f 	and.w	r3, r3, #15
 8000a86:	3b04      	subs	r3, #4
 8000a88:	0112      	lsls	r2, r2, #4
 8000a8a:	b2d2      	uxtb	r2, r2
 8000a8c:	440b      	add	r3, r1
 8000a8e:	761a      	strb	r2, [r3, #24]
}
 8000a90:	bf00      	nop
 8000a92:	370c      	adds	r7, #12
 8000a94:	46bd      	mov	sp, r7
 8000a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9a:	4770      	bx	lr
 8000a9c:	e000e100 	.word	0xe000e100
 8000aa0:	e000ed00 	.word	0xe000ed00

08000aa4 <NVIC_EncodePriority>:
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	b089      	sub	sp, #36	; 0x24
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	60f8      	str	r0, [r7, #12]
 8000aac:	60b9      	str	r1, [r7, #8]
 8000aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ab0:	68fb      	ldr	r3, [r7, #12]
 8000ab2:	f003 0307 	and.w	r3, r3, #7
 8000ab6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ab8:	69fb      	ldr	r3, [r7, #28]
 8000aba:	f1c3 0307 	rsb	r3, r3, #7
 8000abe:	2b04      	cmp	r3, #4
 8000ac0:	bf28      	it	cs
 8000ac2:	2304      	movcs	r3, #4
 8000ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ac6:	69fb      	ldr	r3, [r7, #28]
 8000ac8:	3304      	adds	r3, #4
 8000aca:	2b06      	cmp	r3, #6
 8000acc:	d902      	bls.n	8000ad4 <NVIC_EncodePriority+0x30>
 8000ace:	69fb      	ldr	r3, [r7, #28]
 8000ad0:	3b03      	subs	r3, #3
 8000ad2:	e000      	b.n	8000ad6 <NVIC_EncodePriority+0x32>
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ad8:	f04f 32ff 	mov.w	r2, #4294967295
 8000adc:	69bb      	ldr	r3, [r7, #24]
 8000ade:	fa02 f303 	lsl.w	r3, r2, r3
 8000ae2:	43da      	mvns	r2, r3
 8000ae4:	68bb      	ldr	r3, [r7, #8]
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	697b      	ldr	r3, [r7, #20]
 8000aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aec:	f04f 31ff 	mov.w	r1, #4294967295
 8000af0:	697b      	ldr	r3, [r7, #20]
 8000af2:	fa01 f303 	lsl.w	r3, r1, r3
 8000af6:	43d9      	mvns	r1, r3
 8000af8:	687b      	ldr	r3, [r7, #4]
 8000afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000afc:	4313      	orrs	r3, r2
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3724      	adds	r7, #36	; 0x24
 8000b02:	46bd      	mov	sp, r7
 8000b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b08:	4770      	bx	lr

08000b0a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0a:	b580      	push	{r7, lr}
 8000b0c:	b082      	sub	sp, #8
 8000b0e:	af00      	add	r7, sp, #0
 8000b10:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b12:	6878      	ldr	r0, [r7, #4]
 8000b14:	f7ff ff4c 	bl	80009b0 <__NVIC_SetPriorityGrouping>
}
 8000b18:	bf00      	nop
 8000b1a:	3708      	adds	r7, #8
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}

08000b20 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b086      	sub	sp, #24
 8000b24:	af00      	add	r7, sp, #0
 8000b26:	4603      	mov	r3, r0
 8000b28:	60b9      	str	r1, [r7, #8]
 8000b2a:	607a      	str	r2, [r7, #4]
 8000b2c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b2e:	2300      	movs	r3, #0
 8000b30:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b32:	f7ff ff61 	bl	80009f8 <__NVIC_GetPriorityGrouping>
 8000b36:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b38:	687a      	ldr	r2, [r7, #4]
 8000b3a:	68b9      	ldr	r1, [r7, #8]
 8000b3c:	6978      	ldr	r0, [r7, #20]
 8000b3e:	f7ff ffb1 	bl	8000aa4 <NVIC_EncodePriority>
 8000b42:	4602      	mov	r2, r0
 8000b44:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b48:	4611      	mov	r1, r2
 8000b4a:	4618      	mov	r0, r3
 8000b4c:	f7ff ff80 	bl	8000a50 <__NVIC_SetPriority>
}
 8000b50:	bf00      	nop
 8000b52:	3718      	adds	r7, #24
 8000b54:	46bd      	mov	sp, r7
 8000b56:	bd80      	pop	{r7, pc}

08000b58 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b082      	sub	sp, #8
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	4603      	mov	r3, r0
 8000b60:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b66:	4618      	mov	r0, r3
 8000b68:	f7ff ff54 	bl	8000a14 <__NVIC_EnableIRQ>
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}

08000b74 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000b74:	b580      	push	{r7, lr}
 8000b76:	b086      	sub	sp, #24
 8000b78:	af00      	add	r7, sp, #0
 8000b7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d101      	bne.n	8000b86 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000b82:	2301      	movs	r3, #1
 8000b84:	e267      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d075      	beq.n	8000c7e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000b92:	4b88      	ldr	r3, [pc, #544]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000b94:	689b      	ldr	r3, [r3, #8]
 8000b96:	f003 030c 	and.w	r3, r3, #12
 8000b9a:	2b04      	cmp	r3, #4
 8000b9c:	d00c      	beq.n	8000bb8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000b9e:	4b85      	ldr	r3, [pc, #532]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000ba0:	689b      	ldr	r3, [r3, #8]
 8000ba2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000ba6:	2b08      	cmp	r3, #8
 8000ba8:	d112      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000baa:	4b82      	ldr	r3, [pc, #520]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000bac:	685b      	ldr	r3, [r3, #4]
 8000bae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bb2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000bb6:	d10b      	bne.n	8000bd0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000bb8:	4b7e      	ldr	r3, [pc, #504]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d05b      	beq.n	8000c7c <HAL_RCC_OscConfig+0x108>
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	685b      	ldr	r3, [r3, #4]
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d157      	bne.n	8000c7c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bcc:	2301      	movs	r3, #1
 8000bce:	e242      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	685b      	ldr	r3, [r3, #4]
 8000bd4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000bd8:	d106      	bne.n	8000be8 <HAL_RCC_OscConfig+0x74>
 8000bda:	4b76      	ldr	r3, [pc, #472]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000bdc:	681b      	ldr	r3, [r3, #0]
 8000bde:	4a75      	ldr	r2, [pc, #468]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000be4:	6013      	str	r3, [r2, #0]
 8000be6:	e01d      	b.n	8000c24 <HAL_RCC_OscConfig+0xb0>
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	685b      	ldr	r3, [r3, #4]
 8000bec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000bf0:	d10c      	bne.n	8000c0c <HAL_RCC_OscConfig+0x98>
 8000bf2:	4b70      	ldr	r3, [pc, #448]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a6f      	ldr	r2, [pc, #444]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000bf8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000bfc:	6013      	str	r3, [r2, #0]
 8000bfe:	4b6d      	ldr	r3, [pc, #436]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	4a6c      	ldr	r2, [pc, #432]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000c04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c08:	6013      	str	r3, [r2, #0]
 8000c0a:	e00b      	b.n	8000c24 <HAL_RCC_OscConfig+0xb0>
 8000c0c:	4b69      	ldr	r3, [pc, #420]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000c0e:	681b      	ldr	r3, [r3, #0]
 8000c10:	4a68      	ldr	r2, [pc, #416]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000c12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c16:	6013      	str	r3, [r2, #0]
 8000c18:	4b66      	ldr	r3, [pc, #408]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a65      	ldr	r2, [pc, #404]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000c1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c22:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	685b      	ldr	r3, [r3, #4]
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d013      	beq.n	8000c54 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c2c:	f7ff feb4 	bl	8000998 <HAL_GetTick>
 8000c30:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c32:	e008      	b.n	8000c46 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c34:	f7ff feb0 	bl	8000998 <HAL_GetTick>
 8000c38:	4602      	mov	r2, r0
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	1ad3      	subs	r3, r2, r3
 8000c3e:	2b64      	cmp	r3, #100	; 0x64
 8000c40:	d901      	bls.n	8000c46 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c42:	2303      	movs	r3, #3
 8000c44:	e207      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c46:	4b5b      	ldr	r3, [pc, #364]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000c48:	681b      	ldr	r3, [r3, #0]
 8000c4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d0f0      	beq.n	8000c34 <HAL_RCC_OscConfig+0xc0>
 8000c52:	e014      	b.n	8000c7e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c54:	f7ff fea0 	bl	8000998 <HAL_GetTick>
 8000c58:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c5a:	e008      	b.n	8000c6e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c5c:	f7ff fe9c 	bl	8000998 <HAL_GetTick>
 8000c60:	4602      	mov	r2, r0
 8000c62:	693b      	ldr	r3, [r7, #16]
 8000c64:	1ad3      	subs	r3, r2, r3
 8000c66:	2b64      	cmp	r3, #100	; 0x64
 8000c68:	d901      	bls.n	8000c6e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c6a:	2303      	movs	r3, #3
 8000c6c:	e1f3      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c6e:	4b51      	ldr	r3, [pc, #324]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000c70:	681b      	ldr	r3, [r3, #0]
 8000c72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	d1f0      	bne.n	8000c5c <HAL_RCC_OscConfig+0xe8>
 8000c7a:	e000      	b.n	8000c7e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000c7c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	f003 0302 	and.w	r3, r3, #2
 8000c86:	2b00      	cmp	r3, #0
 8000c88:	d063      	beq.n	8000d52 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c8a:	4b4a      	ldr	r3, [pc, #296]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000c8c:	689b      	ldr	r3, [r3, #8]
 8000c8e:	f003 030c 	and.w	r3, r3, #12
 8000c92:	2b00      	cmp	r3, #0
 8000c94:	d00b      	beq.n	8000cae <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000c96:	4b47      	ldr	r3, [pc, #284]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000c98:	689b      	ldr	r3, [r3, #8]
 8000c9a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000c9e:	2b08      	cmp	r3, #8
 8000ca0:	d11c      	bne.n	8000cdc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000ca2:	4b44      	ldr	r3, [pc, #272]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000ca4:	685b      	ldr	r3, [r3, #4]
 8000ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d116      	bne.n	8000cdc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cae:	4b41      	ldr	r3, [pc, #260]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	f003 0302 	and.w	r3, r3, #2
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d005      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x152>
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	2b01      	cmp	r3, #1
 8000cc0:	d001      	beq.n	8000cc6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cc2:	2301      	movs	r3, #1
 8000cc4:	e1c7      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cc6:	4b3b      	ldr	r3, [pc, #236]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000cc8:	681b      	ldr	r3, [r3, #0]
 8000cca:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	691b      	ldr	r3, [r3, #16]
 8000cd2:	00db      	lsls	r3, r3, #3
 8000cd4:	4937      	ldr	r1, [pc, #220]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000cd6:	4313      	orrs	r3, r2
 8000cd8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cda:	e03a      	b.n	8000d52 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	68db      	ldr	r3, [r3, #12]
 8000ce0:	2b00      	cmp	r3, #0
 8000ce2:	d020      	beq.n	8000d26 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000ce4:	4b34      	ldr	r3, [pc, #208]	; (8000db8 <HAL_RCC_OscConfig+0x244>)
 8000ce6:	2201      	movs	r2, #1
 8000ce8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000cea:	f7ff fe55 	bl	8000998 <HAL_GetTick>
 8000cee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000cf0:	e008      	b.n	8000d04 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000cf2:	f7ff fe51 	bl	8000998 <HAL_GetTick>
 8000cf6:	4602      	mov	r2, r0
 8000cf8:	693b      	ldr	r3, [r7, #16]
 8000cfa:	1ad3      	subs	r3, r2, r3
 8000cfc:	2b02      	cmp	r3, #2
 8000cfe:	d901      	bls.n	8000d04 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d00:	2303      	movs	r3, #3
 8000d02:	e1a8      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d04:	4b2b      	ldr	r3, [pc, #172]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f003 0302 	and.w	r3, r3, #2
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d0f0      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d10:	4b28      	ldr	r3, [pc, #160]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000d12:	681b      	ldr	r3, [r3, #0]
 8000d14:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	691b      	ldr	r3, [r3, #16]
 8000d1c:	00db      	lsls	r3, r3, #3
 8000d1e:	4925      	ldr	r1, [pc, #148]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000d20:	4313      	orrs	r3, r2
 8000d22:	600b      	str	r3, [r1, #0]
 8000d24:	e015      	b.n	8000d52 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d26:	4b24      	ldr	r3, [pc, #144]	; (8000db8 <HAL_RCC_OscConfig+0x244>)
 8000d28:	2200      	movs	r2, #0
 8000d2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d2c:	f7ff fe34 	bl	8000998 <HAL_GetTick>
 8000d30:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d32:	e008      	b.n	8000d46 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d34:	f7ff fe30 	bl	8000998 <HAL_GetTick>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	693b      	ldr	r3, [r7, #16]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	2b02      	cmp	r3, #2
 8000d40:	d901      	bls.n	8000d46 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d42:	2303      	movs	r3, #3
 8000d44:	e187      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d46:	4b1b      	ldr	r3, [pc, #108]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d1f0      	bne.n	8000d34 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	f003 0308 	and.w	r3, r3, #8
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d036      	beq.n	8000dcc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	695b      	ldr	r3, [r3, #20]
 8000d62:	2b00      	cmp	r3, #0
 8000d64:	d016      	beq.n	8000d94 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d66:	4b15      	ldr	r3, [pc, #84]	; (8000dbc <HAL_RCC_OscConfig+0x248>)
 8000d68:	2201      	movs	r2, #1
 8000d6a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d6c:	f7ff fe14 	bl	8000998 <HAL_GetTick>
 8000d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d72:	e008      	b.n	8000d86 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000d74:	f7ff fe10 	bl	8000998 <HAL_GetTick>
 8000d78:	4602      	mov	r2, r0
 8000d7a:	693b      	ldr	r3, [r7, #16]
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	2b02      	cmp	r3, #2
 8000d80:	d901      	bls.n	8000d86 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000d82:	2303      	movs	r3, #3
 8000d84:	e167      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d86:	4b0b      	ldr	r3, [pc, #44]	; (8000db4 <HAL_RCC_OscConfig+0x240>)
 8000d88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000d8a:	f003 0302 	and.w	r3, r3, #2
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d0f0      	beq.n	8000d74 <HAL_RCC_OscConfig+0x200>
 8000d92:	e01b      	b.n	8000dcc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000d94:	4b09      	ldr	r3, [pc, #36]	; (8000dbc <HAL_RCC_OscConfig+0x248>)
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000d9a:	f7ff fdfd 	bl	8000998 <HAL_GetTick>
 8000d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000da0:	e00e      	b.n	8000dc0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da2:	f7ff fdf9 	bl	8000998 <HAL_GetTick>
 8000da6:	4602      	mov	r2, r0
 8000da8:	693b      	ldr	r3, [r7, #16]
 8000daa:	1ad3      	subs	r3, r2, r3
 8000dac:	2b02      	cmp	r3, #2
 8000dae:	d907      	bls.n	8000dc0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000db0:	2303      	movs	r3, #3
 8000db2:	e150      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
 8000db4:	40023800 	.word	0x40023800
 8000db8:	42470000 	.word	0x42470000
 8000dbc:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dc0:	4b88      	ldr	r3, [pc, #544]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000dc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000dc4:	f003 0302 	and.w	r3, r3, #2
 8000dc8:	2b00      	cmp	r3, #0
 8000dca:	d1ea      	bne.n	8000da2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	681b      	ldr	r3, [r3, #0]
 8000dd0:	f003 0304 	and.w	r3, r3, #4
 8000dd4:	2b00      	cmp	r3, #0
 8000dd6:	f000 8097 	beq.w	8000f08 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000dda:	2300      	movs	r3, #0
 8000ddc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000dde:	4b81      	ldr	r3, [pc, #516]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000de0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d10f      	bne.n	8000e0a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000dea:	2300      	movs	r3, #0
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	4b7d      	ldr	r3, [pc, #500]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000df2:	4a7c      	ldr	r2, [pc, #496]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000df4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000df8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dfa:	4b7a      	ldr	r3, [pc, #488]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e02:	60bb      	str	r3, [r7, #8]
 8000e04:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e06:	2301      	movs	r3, #1
 8000e08:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e0a:	4b77      	ldr	r3, [pc, #476]	; (8000fe8 <HAL_RCC_OscConfig+0x474>)
 8000e0c:	681b      	ldr	r3, [r3, #0]
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d118      	bne.n	8000e48 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e16:	4b74      	ldr	r3, [pc, #464]	; (8000fe8 <HAL_RCC_OscConfig+0x474>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	4a73      	ldr	r2, [pc, #460]	; (8000fe8 <HAL_RCC_OscConfig+0x474>)
 8000e1c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e20:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e22:	f7ff fdb9 	bl	8000998 <HAL_GetTick>
 8000e26:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e28:	e008      	b.n	8000e3c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e2a:	f7ff fdb5 	bl	8000998 <HAL_GetTick>
 8000e2e:	4602      	mov	r2, r0
 8000e30:	693b      	ldr	r3, [r7, #16]
 8000e32:	1ad3      	subs	r3, r2, r3
 8000e34:	2b02      	cmp	r3, #2
 8000e36:	d901      	bls.n	8000e3c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e38:	2303      	movs	r3, #3
 8000e3a:	e10c      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e3c:	4b6a      	ldr	r3, [pc, #424]	; (8000fe8 <HAL_RCC_OscConfig+0x474>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d0f0      	beq.n	8000e2a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	689b      	ldr	r3, [r3, #8]
 8000e4c:	2b01      	cmp	r3, #1
 8000e4e:	d106      	bne.n	8000e5e <HAL_RCC_OscConfig+0x2ea>
 8000e50:	4b64      	ldr	r3, [pc, #400]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e54:	4a63      	ldr	r2, [pc, #396]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000e56:	f043 0301 	orr.w	r3, r3, #1
 8000e5a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e5c:	e01c      	b.n	8000e98 <HAL_RCC_OscConfig+0x324>
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	689b      	ldr	r3, [r3, #8]
 8000e62:	2b05      	cmp	r3, #5
 8000e64:	d10c      	bne.n	8000e80 <HAL_RCC_OscConfig+0x30c>
 8000e66:	4b5f      	ldr	r3, [pc, #380]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e6a:	4a5e      	ldr	r2, [pc, #376]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000e6c:	f043 0304 	orr.w	r3, r3, #4
 8000e70:	6713      	str	r3, [r2, #112]	; 0x70
 8000e72:	4b5c      	ldr	r3, [pc, #368]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000e74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e76:	4a5b      	ldr	r2, [pc, #364]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000e78:	f043 0301 	orr.w	r3, r3, #1
 8000e7c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e7e:	e00b      	b.n	8000e98 <HAL_RCC_OscConfig+0x324>
 8000e80:	4b58      	ldr	r3, [pc, #352]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000e82:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e84:	4a57      	ldr	r2, [pc, #348]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000e86:	f023 0301 	bic.w	r3, r3, #1
 8000e8a:	6713      	str	r3, [r2, #112]	; 0x70
 8000e8c:	4b55      	ldr	r3, [pc, #340]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e90:	4a54      	ldr	r2, [pc, #336]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000e92:	f023 0304 	bic.w	r3, r3, #4
 8000e96:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	689b      	ldr	r3, [r3, #8]
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d015      	beq.n	8000ecc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ea0:	f7ff fd7a 	bl	8000998 <HAL_GetTick>
 8000ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ea6:	e00a      	b.n	8000ebe <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ea8:	f7ff fd76 	bl	8000998 <HAL_GetTick>
 8000eac:	4602      	mov	r2, r0
 8000eae:	693b      	ldr	r3, [r7, #16]
 8000eb0:	1ad3      	subs	r3, r2, r3
 8000eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8000eb6:	4293      	cmp	r3, r2
 8000eb8:	d901      	bls.n	8000ebe <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000eba:	2303      	movs	r3, #3
 8000ebc:	e0cb      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ebe:	4b49      	ldr	r3, [pc, #292]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000ec0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ec2:	f003 0302 	and.w	r3, r3, #2
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d0ee      	beq.n	8000ea8 <HAL_RCC_OscConfig+0x334>
 8000eca:	e014      	b.n	8000ef6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fd64 	bl	8000998 <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000ed2:	e00a      	b.n	8000eea <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed4:	f7ff fd60 	bl	8000998 <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e0b5      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000eea:	4b3e      	ldr	r3, [pc, #248]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1ee      	bne.n	8000ed4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000ef6:	7dfb      	ldrb	r3, [r7, #23]
 8000ef8:	2b01      	cmp	r3, #1
 8000efa:	d105      	bne.n	8000f08 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000efc:	4b39      	ldr	r3, [pc, #228]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000efe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f00:	4a38      	ldr	r2, [pc, #224]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000f02:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f06:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	699b      	ldr	r3, [r3, #24]
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80a1 	beq.w	8001054 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f12:	4b34      	ldr	r3, [pc, #208]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000f14:	689b      	ldr	r3, [r3, #8]
 8000f16:	f003 030c 	and.w	r3, r3, #12
 8000f1a:	2b08      	cmp	r3, #8
 8000f1c:	d05c      	beq.n	8000fd8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	699b      	ldr	r3, [r3, #24]
 8000f22:	2b02      	cmp	r3, #2
 8000f24:	d141      	bne.n	8000faa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f26:	4b31      	ldr	r3, [pc, #196]	; (8000fec <HAL_RCC_OscConfig+0x478>)
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f2c:	f7ff fd34 	bl	8000998 <HAL_GetTick>
 8000f30:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f32:	e008      	b.n	8000f46 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f34:	f7ff fd30 	bl	8000998 <HAL_GetTick>
 8000f38:	4602      	mov	r2, r0
 8000f3a:	693b      	ldr	r3, [r7, #16]
 8000f3c:	1ad3      	subs	r3, r2, r3
 8000f3e:	2b02      	cmp	r3, #2
 8000f40:	d901      	bls.n	8000f46 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f42:	2303      	movs	r3, #3
 8000f44:	e087      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f46:	4b27      	ldr	r3, [pc, #156]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d1f0      	bne.n	8000f34 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	69da      	ldr	r2, [r3, #28]
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	6a1b      	ldr	r3, [r3, #32]
 8000f5a:	431a      	orrs	r2, r3
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f60:	019b      	lsls	r3, r3, #6
 8000f62:	431a      	orrs	r2, r3
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f68:	085b      	lsrs	r3, r3, #1
 8000f6a:	3b01      	subs	r3, #1
 8000f6c:	041b      	lsls	r3, r3, #16
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000f74:	061b      	lsls	r3, r3, #24
 8000f76:	491b      	ldr	r1, [pc, #108]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000f78:	4313      	orrs	r3, r2
 8000f7a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000f7c:	4b1b      	ldr	r3, [pc, #108]	; (8000fec <HAL_RCC_OscConfig+0x478>)
 8000f7e:	2201      	movs	r2, #1
 8000f80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f82:	f7ff fd09 	bl	8000998 <HAL_GetTick>
 8000f86:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f88:	e008      	b.n	8000f9c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f8a:	f7ff fd05 	bl	8000998 <HAL_GetTick>
 8000f8e:	4602      	mov	r2, r0
 8000f90:	693b      	ldr	r3, [r7, #16]
 8000f92:	1ad3      	subs	r3, r2, r3
 8000f94:	2b02      	cmp	r3, #2
 8000f96:	d901      	bls.n	8000f9c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000f98:	2303      	movs	r3, #3
 8000f9a:	e05c      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000f9c:	4b11      	ldr	r3, [pc, #68]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d0f0      	beq.n	8000f8a <HAL_RCC_OscConfig+0x416>
 8000fa8:	e054      	b.n	8001054 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000faa:	4b10      	ldr	r3, [pc, #64]	; (8000fec <HAL_RCC_OscConfig+0x478>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fb0:	f7ff fcf2 	bl	8000998 <HAL_GetTick>
 8000fb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fb6:	e008      	b.n	8000fca <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb8:	f7ff fcee 	bl	8000998 <HAL_GetTick>
 8000fbc:	4602      	mov	r2, r0
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	1ad3      	subs	r3, r2, r3
 8000fc2:	2b02      	cmp	r3, #2
 8000fc4:	d901      	bls.n	8000fca <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000fc6:	2303      	movs	r3, #3
 8000fc8:	e045      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fca:	4b06      	ldr	r3, [pc, #24]	; (8000fe4 <HAL_RCC_OscConfig+0x470>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	d1f0      	bne.n	8000fb8 <HAL_RCC_OscConfig+0x444>
 8000fd6:	e03d      	b.n	8001054 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	699b      	ldr	r3, [r3, #24]
 8000fdc:	2b01      	cmp	r3, #1
 8000fde:	d107      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8000fe0:	2301      	movs	r3, #1
 8000fe2:	e038      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
 8000fe4:	40023800 	.word	0x40023800
 8000fe8:	40007000 	.word	0x40007000
 8000fec:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8000ff0:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <HAL_RCC_OscConfig+0x4ec>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	699b      	ldr	r3, [r3, #24]
 8000ffa:	2b01      	cmp	r3, #1
 8000ffc:	d028      	beq.n	8001050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001008:	429a      	cmp	r2, r3
 800100a:	d121      	bne.n	8001050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800100c:	68fb      	ldr	r3, [r7, #12]
 800100e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001016:	429a      	cmp	r2, r3
 8001018:	d11a      	bne.n	8001050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800101a:	68fa      	ldr	r2, [r7, #12]
 800101c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001020:	4013      	ands	r3, r2
 8001022:	687a      	ldr	r2, [r7, #4]
 8001024:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001026:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001028:	4293      	cmp	r3, r2
 800102a:	d111      	bne.n	8001050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001036:	085b      	lsrs	r3, r3, #1
 8001038:	3b01      	subs	r3, #1
 800103a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800103c:	429a      	cmp	r2, r3
 800103e:	d107      	bne.n	8001050 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800104a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800104c:	429a      	cmp	r2, r3
 800104e:	d001      	beq.n	8001054 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001050:	2301      	movs	r3, #1
 8001052:	e000      	b.n	8001056 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001054:	2300      	movs	r3, #0
}
 8001056:	4618      	mov	r0, r3
 8001058:	3718      	adds	r7, #24
 800105a:	46bd      	mov	sp, r7
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	b084      	sub	sp, #16
 8001068:	af00      	add	r7, sp, #0
 800106a:	6078      	str	r0, [r7, #4]
 800106c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	2b00      	cmp	r3, #0
 8001072:	d101      	bne.n	8001078 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001074:	2301      	movs	r3, #1
 8001076:	e0cc      	b.n	8001212 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001078:	4b68      	ldr	r3, [pc, #416]	; (800121c <HAL_RCC_ClockConfig+0x1b8>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	f003 0307 	and.w	r3, r3, #7
 8001080:	683a      	ldr	r2, [r7, #0]
 8001082:	429a      	cmp	r2, r3
 8001084:	d90c      	bls.n	80010a0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001086:	4b65      	ldr	r3, [pc, #404]	; (800121c <HAL_RCC_ClockConfig+0x1b8>)
 8001088:	683a      	ldr	r2, [r7, #0]
 800108a:	b2d2      	uxtb	r2, r2
 800108c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800108e:	4b63      	ldr	r3, [pc, #396]	; (800121c <HAL_RCC_ClockConfig+0x1b8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	683a      	ldr	r2, [r7, #0]
 8001098:	429a      	cmp	r2, r3
 800109a:	d001      	beq.n	80010a0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800109c:	2301      	movs	r3, #1
 800109e:	e0b8      	b.n	8001212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d020      	beq.n	80010ee <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0304 	and.w	r3, r3, #4
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d005      	beq.n	80010c4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010b8:	4b59      	ldr	r3, [pc, #356]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 80010ba:	689b      	ldr	r3, [r3, #8]
 80010bc:	4a58      	ldr	r2, [pc, #352]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 80010be:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010c2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	f003 0308 	and.w	r3, r3, #8
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d005      	beq.n	80010dc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010d0:	4b53      	ldr	r3, [pc, #332]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 80010d2:	689b      	ldr	r3, [r3, #8]
 80010d4:	4a52      	ldr	r2, [pc, #328]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 80010d6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80010da:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80010dc:	4b50      	ldr	r3, [pc, #320]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 80010de:	689b      	ldr	r3, [r3, #8]
 80010e0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	494d      	ldr	r1, [pc, #308]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	4313      	orrs	r3, r2
 80010ec:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d044      	beq.n	8001184 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	685b      	ldr	r3, [r3, #4]
 80010fe:	2b01      	cmp	r3, #1
 8001100:	d107      	bne.n	8001112 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001102:	4b47      	ldr	r3, [pc, #284]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800110a:	2b00      	cmp	r3, #0
 800110c:	d119      	bne.n	8001142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800110e:	2301      	movs	r3, #1
 8001110:	e07f      	b.n	8001212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	685b      	ldr	r3, [r3, #4]
 8001116:	2b02      	cmp	r3, #2
 8001118:	d003      	beq.n	8001122 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800111e:	2b03      	cmp	r3, #3
 8001120:	d107      	bne.n	8001132 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001122:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800112a:	2b00      	cmp	r3, #0
 800112c:	d109      	bne.n	8001142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800112e:	2301      	movs	r3, #1
 8001130:	e06f      	b.n	8001212 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001132:	4b3b      	ldr	r3, [pc, #236]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	f003 0302 	and.w	r3, r3, #2
 800113a:	2b00      	cmp	r3, #0
 800113c:	d101      	bne.n	8001142 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113e:	2301      	movs	r3, #1
 8001140:	e067      	b.n	8001212 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001142:	4b37      	ldr	r3, [pc, #220]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 8001144:	689b      	ldr	r3, [r3, #8]
 8001146:	f023 0203 	bic.w	r2, r3, #3
 800114a:	687b      	ldr	r3, [r7, #4]
 800114c:	685b      	ldr	r3, [r3, #4]
 800114e:	4934      	ldr	r1, [pc, #208]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	4313      	orrs	r3, r2
 8001152:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001154:	f7ff fc20 	bl	8000998 <HAL_GetTick>
 8001158:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800115a:	e00a      	b.n	8001172 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800115c:	f7ff fc1c 	bl	8000998 <HAL_GetTick>
 8001160:	4602      	mov	r2, r0
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	1ad3      	subs	r3, r2, r3
 8001166:	f241 3288 	movw	r2, #5000	; 0x1388
 800116a:	4293      	cmp	r3, r2
 800116c:	d901      	bls.n	8001172 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800116e:	2303      	movs	r3, #3
 8001170:	e04f      	b.n	8001212 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001172:	4b2b      	ldr	r3, [pc, #172]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 8001174:	689b      	ldr	r3, [r3, #8]
 8001176:	f003 020c 	and.w	r2, r3, #12
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	685b      	ldr	r3, [r3, #4]
 800117e:	009b      	lsls	r3, r3, #2
 8001180:	429a      	cmp	r2, r3
 8001182:	d1eb      	bne.n	800115c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001184:	4b25      	ldr	r3, [pc, #148]	; (800121c <HAL_RCC_ClockConfig+0x1b8>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	f003 0307 	and.w	r3, r3, #7
 800118c:	683a      	ldr	r2, [r7, #0]
 800118e:	429a      	cmp	r2, r3
 8001190:	d20c      	bcs.n	80011ac <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001192:	4b22      	ldr	r3, [pc, #136]	; (800121c <HAL_RCC_ClockConfig+0x1b8>)
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	b2d2      	uxtb	r2, r2
 8001198:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800119a:	4b20      	ldr	r3, [pc, #128]	; (800121c <HAL_RCC_ClockConfig+0x1b8>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	f003 0307 	and.w	r3, r3, #7
 80011a2:	683a      	ldr	r2, [r7, #0]
 80011a4:	429a      	cmp	r2, r3
 80011a6:	d001      	beq.n	80011ac <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011a8:	2301      	movs	r3, #1
 80011aa:	e032      	b.n	8001212 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	f003 0304 	and.w	r3, r3, #4
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	d008      	beq.n	80011ca <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011b8:	4b19      	ldr	r3, [pc, #100]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 80011ba:	689b      	ldr	r3, [r3, #8]
 80011bc:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	4916      	ldr	r1, [pc, #88]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 80011c6:	4313      	orrs	r3, r2
 80011c8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f003 0308 	and.w	r3, r3, #8
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d009      	beq.n	80011ea <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80011d6:	4b12      	ldr	r3, [pc, #72]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 80011d8:	689b      	ldr	r3, [r3, #8]
 80011da:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	691b      	ldr	r3, [r3, #16]
 80011e2:	00db      	lsls	r3, r3, #3
 80011e4:	490e      	ldr	r1, [pc, #56]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	4313      	orrs	r3, r2
 80011e8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80011ea:	f000 f821 	bl	8001230 <HAL_RCC_GetSysClockFreq>
 80011ee:	4602      	mov	r2, r0
 80011f0:	4b0b      	ldr	r3, [pc, #44]	; (8001220 <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	689b      	ldr	r3, [r3, #8]
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	490a      	ldr	r1, [pc, #40]	; (8001224 <HAL_RCC_ClockConfig+0x1c0>)
 80011fc:	5ccb      	ldrb	r3, [r1, r3]
 80011fe:	fa22 f303 	lsr.w	r3, r2, r3
 8001202:	4a09      	ldr	r2, [pc, #36]	; (8001228 <HAL_RCC_ClockConfig+0x1c4>)
 8001204:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001206:	4b09      	ldr	r3, [pc, #36]	; (800122c <HAL_RCC_ClockConfig+0x1c8>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4618      	mov	r0, r3
 800120c:	f7ff fada 	bl	80007c4 <HAL_InitTick>

  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	3710      	adds	r7, #16
 8001216:	46bd      	mov	sp, r7
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	40023c00 	.word	0x40023c00
 8001220:	40023800 	.word	0x40023800
 8001224:	080050b8 	.word	0x080050b8
 8001228:	20000000 	.word	0x20000000
 800122c:	20000004 	.word	0x20000004

08001230 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001230:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001234:	b094      	sub	sp, #80	; 0x50
 8001236:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001238:	2300      	movs	r3, #0
 800123a:	647b      	str	r3, [r7, #68]	; 0x44
 800123c:	2300      	movs	r3, #0
 800123e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001240:	2300      	movs	r3, #0
 8001242:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001244:	2300      	movs	r3, #0
 8001246:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001248:	4b79      	ldr	r3, [pc, #484]	; (8001430 <HAL_RCC_GetSysClockFreq+0x200>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	f003 030c 	and.w	r3, r3, #12
 8001250:	2b08      	cmp	r3, #8
 8001252:	d00d      	beq.n	8001270 <HAL_RCC_GetSysClockFreq+0x40>
 8001254:	2b08      	cmp	r3, #8
 8001256:	f200 80e1 	bhi.w	800141c <HAL_RCC_GetSysClockFreq+0x1ec>
 800125a:	2b00      	cmp	r3, #0
 800125c:	d002      	beq.n	8001264 <HAL_RCC_GetSysClockFreq+0x34>
 800125e:	2b04      	cmp	r3, #4
 8001260:	d003      	beq.n	800126a <HAL_RCC_GetSysClockFreq+0x3a>
 8001262:	e0db      	b.n	800141c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001264:	4b73      	ldr	r3, [pc, #460]	; (8001434 <HAL_RCC_GetSysClockFreq+0x204>)
 8001266:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001268:	e0db      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800126a:	4b73      	ldr	r3, [pc, #460]	; (8001438 <HAL_RCC_GetSysClockFreq+0x208>)
 800126c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800126e:	e0d8      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001270:	4b6f      	ldr	r3, [pc, #444]	; (8001430 <HAL_RCC_GetSysClockFreq+0x200>)
 8001272:	685b      	ldr	r3, [r3, #4]
 8001274:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001278:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800127a:	4b6d      	ldr	r3, [pc, #436]	; (8001430 <HAL_RCC_GetSysClockFreq+0x200>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	2b00      	cmp	r3, #0
 8001284:	d063      	beq.n	800134e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001286:	4b6a      	ldr	r3, [pc, #424]	; (8001430 <HAL_RCC_GetSysClockFreq+0x200>)
 8001288:	685b      	ldr	r3, [r3, #4]
 800128a:	099b      	lsrs	r3, r3, #6
 800128c:	2200      	movs	r2, #0
 800128e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001290:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001292:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001294:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001298:	633b      	str	r3, [r7, #48]	; 0x30
 800129a:	2300      	movs	r3, #0
 800129c:	637b      	str	r3, [r7, #52]	; 0x34
 800129e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80012a2:	4622      	mov	r2, r4
 80012a4:	462b      	mov	r3, r5
 80012a6:	f04f 0000 	mov.w	r0, #0
 80012aa:	f04f 0100 	mov.w	r1, #0
 80012ae:	0159      	lsls	r1, r3, #5
 80012b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012b4:	0150      	lsls	r0, r2, #5
 80012b6:	4602      	mov	r2, r0
 80012b8:	460b      	mov	r3, r1
 80012ba:	4621      	mov	r1, r4
 80012bc:	1a51      	subs	r1, r2, r1
 80012be:	6139      	str	r1, [r7, #16]
 80012c0:	4629      	mov	r1, r5
 80012c2:	eb63 0301 	sbc.w	r3, r3, r1
 80012c6:	617b      	str	r3, [r7, #20]
 80012c8:	f04f 0200 	mov.w	r2, #0
 80012cc:	f04f 0300 	mov.w	r3, #0
 80012d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80012d4:	4659      	mov	r1, fp
 80012d6:	018b      	lsls	r3, r1, #6
 80012d8:	4651      	mov	r1, sl
 80012da:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80012de:	4651      	mov	r1, sl
 80012e0:	018a      	lsls	r2, r1, #6
 80012e2:	4651      	mov	r1, sl
 80012e4:	ebb2 0801 	subs.w	r8, r2, r1
 80012e8:	4659      	mov	r1, fp
 80012ea:	eb63 0901 	sbc.w	r9, r3, r1
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	f04f 0300 	mov.w	r3, #0
 80012f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001302:	4690      	mov	r8, r2
 8001304:	4699      	mov	r9, r3
 8001306:	4623      	mov	r3, r4
 8001308:	eb18 0303 	adds.w	r3, r8, r3
 800130c:	60bb      	str	r3, [r7, #8]
 800130e:	462b      	mov	r3, r5
 8001310:	eb49 0303 	adc.w	r3, r9, r3
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	f04f 0200 	mov.w	r2, #0
 800131a:	f04f 0300 	mov.w	r3, #0
 800131e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001322:	4629      	mov	r1, r5
 8001324:	024b      	lsls	r3, r1, #9
 8001326:	4621      	mov	r1, r4
 8001328:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800132c:	4621      	mov	r1, r4
 800132e:	024a      	lsls	r2, r1, #9
 8001330:	4610      	mov	r0, r2
 8001332:	4619      	mov	r1, r3
 8001334:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001336:	2200      	movs	r2, #0
 8001338:	62bb      	str	r3, [r7, #40]	; 0x28
 800133a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800133c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001340:	f7fe ff46 	bl	80001d0 <__aeabi_uldivmod>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4613      	mov	r3, r2
 800134a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800134c:	e058      	b.n	8001400 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800134e:	4b38      	ldr	r3, [pc, #224]	; (8001430 <HAL_RCC_GetSysClockFreq+0x200>)
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	099b      	lsrs	r3, r3, #6
 8001354:	2200      	movs	r2, #0
 8001356:	4618      	mov	r0, r3
 8001358:	4611      	mov	r1, r2
 800135a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800135e:	623b      	str	r3, [r7, #32]
 8001360:	2300      	movs	r3, #0
 8001362:	627b      	str	r3, [r7, #36]	; 0x24
 8001364:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001368:	4642      	mov	r2, r8
 800136a:	464b      	mov	r3, r9
 800136c:	f04f 0000 	mov.w	r0, #0
 8001370:	f04f 0100 	mov.w	r1, #0
 8001374:	0159      	lsls	r1, r3, #5
 8001376:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800137a:	0150      	lsls	r0, r2, #5
 800137c:	4602      	mov	r2, r0
 800137e:	460b      	mov	r3, r1
 8001380:	4641      	mov	r1, r8
 8001382:	ebb2 0a01 	subs.w	sl, r2, r1
 8001386:	4649      	mov	r1, r9
 8001388:	eb63 0b01 	sbc.w	fp, r3, r1
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	f04f 0300 	mov.w	r3, #0
 8001394:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001398:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800139c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80013a0:	ebb2 040a 	subs.w	r4, r2, sl
 80013a4:	eb63 050b 	sbc.w	r5, r3, fp
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	00eb      	lsls	r3, r5, #3
 80013b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013b6:	00e2      	lsls	r2, r4, #3
 80013b8:	4614      	mov	r4, r2
 80013ba:	461d      	mov	r5, r3
 80013bc:	4643      	mov	r3, r8
 80013be:	18e3      	adds	r3, r4, r3
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	464b      	mov	r3, r9
 80013c4:	eb45 0303 	adc.w	r3, r5, r3
 80013c8:	607b      	str	r3, [r7, #4]
 80013ca:	f04f 0200 	mov.w	r2, #0
 80013ce:	f04f 0300 	mov.w	r3, #0
 80013d2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80013d6:	4629      	mov	r1, r5
 80013d8:	028b      	lsls	r3, r1, #10
 80013da:	4621      	mov	r1, r4
 80013dc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80013e0:	4621      	mov	r1, r4
 80013e2:	028a      	lsls	r2, r1, #10
 80013e4:	4610      	mov	r0, r2
 80013e6:	4619      	mov	r1, r3
 80013e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80013ea:	2200      	movs	r2, #0
 80013ec:	61bb      	str	r3, [r7, #24]
 80013ee:	61fa      	str	r2, [r7, #28]
 80013f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80013f4:	f7fe feec 	bl	80001d0 <__aeabi_uldivmod>
 80013f8:	4602      	mov	r2, r0
 80013fa:	460b      	mov	r3, r1
 80013fc:	4613      	mov	r3, r2
 80013fe:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001400:	4b0b      	ldr	r3, [pc, #44]	; (8001430 <HAL_RCC_GetSysClockFreq+0x200>)
 8001402:	685b      	ldr	r3, [r3, #4]
 8001404:	0c1b      	lsrs	r3, r3, #16
 8001406:	f003 0303 	and.w	r3, r3, #3
 800140a:	3301      	adds	r3, #1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001410:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001412:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001414:	fbb2 f3f3 	udiv	r3, r2, r3
 8001418:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800141a:	e002      	b.n	8001422 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800141c:	4b05      	ldr	r3, [pc, #20]	; (8001434 <HAL_RCC_GetSysClockFreq+0x204>)
 800141e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001420:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001422:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001424:	4618      	mov	r0, r3
 8001426:	3750      	adds	r7, #80	; 0x50
 8001428:	46bd      	mov	sp, r7
 800142a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800142e:	bf00      	nop
 8001430:	40023800 	.word	0x40023800
 8001434:	00f42400 	.word	0x00f42400
 8001438:	007a1200 	.word	0x007a1200

0800143c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800143c:	b480      	push	{r7}
 800143e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001440:	4b03      	ldr	r3, [pc, #12]	; (8001450 <HAL_RCC_GetHCLKFreq+0x14>)
 8001442:	681b      	ldr	r3, [r3, #0]
}
 8001444:	4618      	mov	r0, r3
 8001446:	46bd      	mov	sp, r7
 8001448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144c:	4770      	bx	lr
 800144e:	bf00      	nop
 8001450:	20000000 	.word	0x20000000

08001454 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001458:	f7ff fff0 	bl	800143c <HAL_RCC_GetHCLKFreq>
 800145c:	4602      	mov	r2, r0
 800145e:	4b05      	ldr	r3, [pc, #20]	; (8001474 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001460:	689b      	ldr	r3, [r3, #8]
 8001462:	0a9b      	lsrs	r3, r3, #10
 8001464:	f003 0307 	and.w	r3, r3, #7
 8001468:	4903      	ldr	r1, [pc, #12]	; (8001478 <HAL_RCC_GetPCLK1Freq+0x24>)
 800146a:	5ccb      	ldrb	r3, [r1, r3]
 800146c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001470:	4618      	mov	r0, r3
 8001472:	bd80      	pop	{r7, pc}
 8001474:	40023800 	.word	0x40023800
 8001478:	080050c8 	.word	0x080050c8

0800147c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800147c:	b480      	push	{r7}
 800147e:	b083      	sub	sp, #12
 8001480:	af00      	add	r7, sp, #0
 8001482:	6078      	str	r0, [r7, #4]
 8001484:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	220f      	movs	r2, #15
 800148a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800148c:	4b12      	ldr	r3, [pc, #72]	; (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	f003 0203 	and.w	r2, r3, #3
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001498:	4b0f      	ldr	r3, [pc, #60]	; (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 800149a:	689b      	ldr	r3, [r3, #8]
 800149c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <HAL_RCC_GetClockConfig+0x5c>)
 80014b2:	689b      	ldr	r3, [r3, #8]
 80014b4:	08db      	lsrs	r3, r3, #3
 80014b6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014be:	4b07      	ldr	r3, [pc, #28]	; (80014dc <HAL_RCC_GetClockConfig+0x60>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 0207 	and.w	r2, r3, #7
 80014c6:	683b      	ldr	r3, [r7, #0]
 80014c8:	601a      	str	r2, [r3, #0]
}
 80014ca:	bf00      	nop
 80014cc:	370c      	adds	r7, #12
 80014ce:	46bd      	mov	sp, r7
 80014d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014d4:	4770      	bx	lr
 80014d6:	bf00      	nop
 80014d8:	40023800 	.word	0x40023800
 80014dc:	40023c00 	.word	0x40023c00

080014e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b082      	sub	sp, #8
 80014e4:	af00      	add	r7, sp, #0
 80014e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d101      	bne.n	80014f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80014ee:	2301      	movs	r3, #1
 80014f0:	e041      	b.n	8001576 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d106      	bne.n	800150c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2200      	movs	r2, #0
 8001502:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001506:	6878      	ldr	r0, [r7, #4]
 8001508:	f000 f839 	bl	800157e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	2202      	movs	r2, #2
 8001510:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	3304      	adds	r3, #4
 800151c:	4619      	mov	r1, r3
 800151e:	4610      	mov	r0, r2
 8001520:	f000 f9d8 	bl	80018d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	2201      	movs	r2, #1
 8001528:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2201      	movs	r2, #1
 8001530:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	2201      	movs	r2, #1
 8001538:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	2201      	movs	r2, #1
 8001540:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2201      	movs	r2, #1
 8001548:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	2201      	movs	r2, #1
 8001550:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	2201      	movs	r2, #1
 8001558:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	2201      	movs	r2, #1
 8001560:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	2201      	movs	r2, #1
 8001568:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	2201      	movs	r2, #1
 8001570:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001574:	2300      	movs	r3, #0
}
 8001576:	4618      	mov	r0, r3
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}

0800157e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800157e:	b480      	push	{r7}
 8001580:	b083      	sub	sp, #12
 8001582:	af00      	add	r7, sp, #0
 8001584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001586:	bf00      	nop
 8001588:	370c      	adds	r7, #12
 800158a:	46bd      	mov	sp, r7
 800158c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001590:	4770      	bx	lr
	...

08001594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001594:	b480      	push	{r7}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b01      	cmp	r3, #1
 80015a6:	d001      	beq.n	80015ac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015a8:	2301      	movs	r3, #1
 80015aa:	e04e      	b.n	800164a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	2202      	movs	r2, #2
 80015b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	68da      	ldr	r2, [r3, #12]
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f042 0201 	orr.w	r2, r2, #1
 80015c2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a23      	ldr	r2, [pc, #140]	; (8001658 <HAL_TIM_Base_Start_IT+0xc4>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d022      	beq.n	8001614 <HAL_TIM_Base_Start_IT+0x80>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80015d6:	d01d      	beq.n	8001614 <HAL_TIM_Base_Start_IT+0x80>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a1f      	ldr	r2, [pc, #124]	; (800165c <HAL_TIM_Base_Start_IT+0xc8>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d018      	beq.n	8001614 <HAL_TIM_Base_Start_IT+0x80>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a1e      	ldr	r2, [pc, #120]	; (8001660 <HAL_TIM_Base_Start_IT+0xcc>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d013      	beq.n	8001614 <HAL_TIM_Base_Start_IT+0x80>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a1c      	ldr	r2, [pc, #112]	; (8001664 <HAL_TIM_Base_Start_IT+0xd0>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d00e      	beq.n	8001614 <HAL_TIM_Base_Start_IT+0x80>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a1b      	ldr	r2, [pc, #108]	; (8001668 <HAL_TIM_Base_Start_IT+0xd4>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d009      	beq.n	8001614 <HAL_TIM_Base_Start_IT+0x80>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a19      	ldr	r2, [pc, #100]	; (800166c <HAL_TIM_Base_Start_IT+0xd8>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d004      	beq.n	8001614 <HAL_TIM_Base_Start_IT+0x80>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a18      	ldr	r2, [pc, #96]	; (8001670 <HAL_TIM_Base_Start_IT+0xdc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d111      	bne.n	8001638 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 0307 	and.w	r3, r3, #7
 800161e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	2b06      	cmp	r3, #6
 8001624:	d010      	beq.n	8001648 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	681a      	ldr	r2, [r3, #0]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f042 0201 	orr.w	r2, r2, #1
 8001634:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001636:	e007      	b.n	8001648 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	681a      	ldr	r2, [r3, #0]
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	681b      	ldr	r3, [r3, #0]
 8001642:	f042 0201 	orr.w	r2, r2, #1
 8001646:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001648:	2300      	movs	r3, #0
}
 800164a:	4618      	mov	r0, r3
 800164c:	3714      	adds	r7, #20
 800164e:	46bd      	mov	sp, r7
 8001650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001654:	4770      	bx	lr
 8001656:	bf00      	nop
 8001658:	40010000 	.word	0x40010000
 800165c:	40000400 	.word	0x40000400
 8001660:	40000800 	.word	0x40000800
 8001664:	40000c00 	.word	0x40000c00
 8001668:	40010400 	.word	0x40010400
 800166c:	40014000 	.word	0x40014000
 8001670:	40001800 	.word	0x40001800

08001674 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b082      	sub	sp, #8
 8001678:	af00      	add	r7, sp, #0
 800167a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	691b      	ldr	r3, [r3, #16]
 8001682:	f003 0302 	and.w	r3, r3, #2
 8001686:	2b02      	cmp	r3, #2
 8001688:	d122      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	68db      	ldr	r3, [r3, #12]
 8001690:	f003 0302 	and.w	r3, r3, #2
 8001694:	2b02      	cmp	r3, #2
 8001696:	d11b      	bne.n	80016d0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f06f 0202 	mvn.w	r2, #2
 80016a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	2201      	movs	r2, #1
 80016a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	699b      	ldr	r3, [r3, #24]
 80016ae:	f003 0303 	and.w	r3, r3, #3
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f000 f8ee 	bl	8001898 <HAL_TIM_IC_CaptureCallback>
 80016bc:	e005      	b.n	80016ca <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016be:	6878      	ldr	r0, [r7, #4]
 80016c0:	f000 f8e0 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016c4:	6878      	ldr	r0, [r7, #4]
 80016c6:	f000 f8f1 	bl	80018ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2200      	movs	r2, #0
 80016ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	691b      	ldr	r3, [r3, #16]
 80016d6:	f003 0304 	and.w	r3, r3, #4
 80016da:	2b04      	cmp	r3, #4
 80016dc:	d122      	bne.n	8001724 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68db      	ldr	r3, [r3, #12]
 80016e4:	f003 0304 	and.w	r3, r3, #4
 80016e8:	2b04      	cmp	r3, #4
 80016ea:	d11b      	bne.n	8001724 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	f06f 0204 	mvn.w	r2, #4
 80016f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2202      	movs	r2, #2
 80016fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	699b      	ldr	r3, [r3, #24]
 8001702:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001706:	2b00      	cmp	r3, #0
 8001708:	d003      	beq.n	8001712 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800170a:	6878      	ldr	r0, [r7, #4]
 800170c:	f000 f8c4 	bl	8001898 <HAL_TIM_IC_CaptureCallback>
 8001710:	e005      	b.n	800171e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f000 f8b6 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001718:	6878      	ldr	r0, [r7, #4]
 800171a:	f000 f8c7 	bl	80018ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	691b      	ldr	r3, [r3, #16]
 800172a:	f003 0308 	and.w	r3, r3, #8
 800172e:	2b08      	cmp	r3, #8
 8001730:	d122      	bne.n	8001778 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	68db      	ldr	r3, [r3, #12]
 8001738:	f003 0308 	and.w	r3, r3, #8
 800173c:	2b08      	cmp	r3, #8
 800173e:	d11b      	bne.n	8001778 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	f06f 0208 	mvn.w	r2, #8
 8001748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2204      	movs	r2, #4
 800174e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	f003 0303 	and.w	r3, r3, #3
 800175a:	2b00      	cmp	r3, #0
 800175c:	d003      	beq.n	8001766 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800175e:	6878      	ldr	r0, [r7, #4]
 8001760:	f000 f89a 	bl	8001898 <HAL_TIM_IC_CaptureCallback>
 8001764:	e005      	b.n	8001772 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f000 f88c 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800176c:	6878      	ldr	r0, [r7, #4]
 800176e:	f000 f89d 	bl	80018ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	2200      	movs	r2, #0
 8001776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	691b      	ldr	r3, [r3, #16]
 800177e:	f003 0310 	and.w	r3, r3, #16
 8001782:	2b10      	cmp	r3, #16
 8001784:	d122      	bne.n	80017cc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	68db      	ldr	r3, [r3, #12]
 800178c:	f003 0310 	and.w	r3, r3, #16
 8001790:	2b10      	cmp	r3, #16
 8001792:	d11b      	bne.n	80017cc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f06f 0210 	mvn.w	r2, #16
 800179c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2208      	movs	r2, #8
 80017a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	69db      	ldr	r3, [r3, #28]
 80017aa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d003      	beq.n	80017ba <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017b2:	6878      	ldr	r0, [r7, #4]
 80017b4:	f000 f870 	bl	8001898 <HAL_TIM_IC_CaptureCallback>
 80017b8:	e005      	b.n	80017c6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017ba:	6878      	ldr	r0, [r7, #4]
 80017bc:	f000 f862 	bl	8001884 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017c0:	6878      	ldr	r0, [r7, #4]
 80017c2:	f000 f873 	bl	80018ac <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2200      	movs	r2, #0
 80017ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	691b      	ldr	r3, [r3, #16]
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	2b01      	cmp	r3, #1
 80017d8:	d10e      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	68db      	ldr	r3, [r3, #12]
 80017e0:	f003 0301 	and.w	r3, r3, #1
 80017e4:	2b01      	cmp	r3, #1
 80017e6:	d107      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f06f 0201 	mvn.w	r2, #1
 80017f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80017f2:	6878      	ldr	r0, [r7, #4]
 80017f4:	f7fe ffa2 	bl	800073c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001802:	2b80      	cmp	r3, #128	; 0x80
 8001804:	d10e      	bne.n	8001824 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001810:	2b80      	cmp	r3, #128	; 0x80
 8001812:	d107      	bne.n	8001824 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800181c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f000 f902 	bl	8001a28 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800182e:	2b40      	cmp	r3, #64	; 0x40
 8001830:	d10e      	bne.n	8001850 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800183c:	2b40      	cmp	r3, #64	; 0x40
 800183e:	d107      	bne.n	8001850 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f838 	bl	80018c0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0320 	and.w	r3, r3, #32
 800185a:	2b20      	cmp	r3, #32
 800185c:	d10e      	bne.n	800187c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0320 	and.w	r3, r3, #32
 8001868:	2b20      	cmp	r3, #32
 800186a:	d107      	bne.n	800187c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0220 	mvn.w	r2, #32
 8001874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f8cc 	bl	8001a14 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800187c:	bf00      	nop
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}

08001884 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800188c:	bf00      	nop
 800188e:	370c      	adds	r7, #12
 8001890:	46bd      	mov	sp, r7
 8001892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001896:	4770      	bx	lr

08001898 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001898:	b480      	push	{r7}
 800189a:	b083      	sub	sp, #12
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr

080018ac <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018ac:	b480      	push	{r7}
 80018ae:	b083      	sub	sp, #12
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018b4:	bf00      	nop
 80018b6:	370c      	adds	r7, #12
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr

080018c0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b083      	sub	sp, #12
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018c8:	bf00      	nop
 80018ca:	370c      	adds	r7, #12
 80018cc:	46bd      	mov	sp, r7
 80018ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d2:	4770      	bx	lr

080018d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80018d4:	b480      	push	{r7}
 80018d6:	b085      	sub	sp, #20
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]
 80018dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	4a40      	ldr	r2, [pc, #256]	; (80019e8 <TIM_Base_SetConfig+0x114>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d013      	beq.n	8001914 <TIM_Base_SetConfig+0x40>
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80018f2:	d00f      	beq.n	8001914 <TIM_Base_SetConfig+0x40>
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	4a3d      	ldr	r2, [pc, #244]	; (80019ec <TIM_Base_SetConfig+0x118>)
 80018f8:	4293      	cmp	r3, r2
 80018fa:	d00b      	beq.n	8001914 <TIM_Base_SetConfig+0x40>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	4a3c      	ldr	r2, [pc, #240]	; (80019f0 <TIM_Base_SetConfig+0x11c>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d007      	beq.n	8001914 <TIM_Base_SetConfig+0x40>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	4a3b      	ldr	r2, [pc, #236]	; (80019f4 <TIM_Base_SetConfig+0x120>)
 8001908:	4293      	cmp	r3, r2
 800190a:	d003      	beq.n	8001914 <TIM_Base_SetConfig+0x40>
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	4a3a      	ldr	r2, [pc, #232]	; (80019f8 <TIM_Base_SetConfig+0x124>)
 8001910:	4293      	cmp	r3, r2
 8001912:	d108      	bne.n	8001926 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001914:	68fb      	ldr	r3, [r7, #12]
 8001916:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800191a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	68fa      	ldr	r2, [r7, #12]
 8001922:	4313      	orrs	r3, r2
 8001924:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	4a2f      	ldr	r2, [pc, #188]	; (80019e8 <TIM_Base_SetConfig+0x114>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d02b      	beq.n	8001986 <TIM_Base_SetConfig+0xb2>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001934:	d027      	beq.n	8001986 <TIM_Base_SetConfig+0xb2>
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4a2c      	ldr	r2, [pc, #176]	; (80019ec <TIM_Base_SetConfig+0x118>)
 800193a:	4293      	cmp	r3, r2
 800193c:	d023      	beq.n	8001986 <TIM_Base_SetConfig+0xb2>
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4a2b      	ldr	r2, [pc, #172]	; (80019f0 <TIM_Base_SetConfig+0x11c>)
 8001942:	4293      	cmp	r3, r2
 8001944:	d01f      	beq.n	8001986 <TIM_Base_SetConfig+0xb2>
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	4a2a      	ldr	r2, [pc, #168]	; (80019f4 <TIM_Base_SetConfig+0x120>)
 800194a:	4293      	cmp	r3, r2
 800194c:	d01b      	beq.n	8001986 <TIM_Base_SetConfig+0xb2>
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	4a29      	ldr	r2, [pc, #164]	; (80019f8 <TIM_Base_SetConfig+0x124>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d017      	beq.n	8001986 <TIM_Base_SetConfig+0xb2>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	4a28      	ldr	r2, [pc, #160]	; (80019fc <TIM_Base_SetConfig+0x128>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d013      	beq.n	8001986 <TIM_Base_SetConfig+0xb2>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	4a27      	ldr	r2, [pc, #156]	; (8001a00 <TIM_Base_SetConfig+0x12c>)
 8001962:	4293      	cmp	r3, r2
 8001964:	d00f      	beq.n	8001986 <TIM_Base_SetConfig+0xb2>
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	4a26      	ldr	r2, [pc, #152]	; (8001a04 <TIM_Base_SetConfig+0x130>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d00b      	beq.n	8001986 <TIM_Base_SetConfig+0xb2>
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	4a25      	ldr	r2, [pc, #148]	; (8001a08 <TIM_Base_SetConfig+0x134>)
 8001972:	4293      	cmp	r3, r2
 8001974:	d007      	beq.n	8001986 <TIM_Base_SetConfig+0xb2>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	4a24      	ldr	r2, [pc, #144]	; (8001a0c <TIM_Base_SetConfig+0x138>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d003      	beq.n	8001986 <TIM_Base_SetConfig+0xb2>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	4a23      	ldr	r2, [pc, #140]	; (8001a10 <TIM_Base_SetConfig+0x13c>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d108      	bne.n	8001998 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800198c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800198e:	683b      	ldr	r3, [r7, #0]
 8001990:	68db      	ldr	r3, [r3, #12]
 8001992:	68fa      	ldr	r2, [r7, #12]
 8001994:	4313      	orrs	r3, r2
 8001996:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	695b      	ldr	r3, [r3, #20]
 80019a2:	4313      	orrs	r3, r2
 80019a4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	68fa      	ldr	r2, [r7, #12]
 80019aa:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	689a      	ldr	r2, [r3, #8]
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	4a0a      	ldr	r2, [pc, #40]	; (80019e8 <TIM_Base_SetConfig+0x114>)
 80019c0:	4293      	cmp	r3, r2
 80019c2:	d003      	beq.n	80019cc <TIM_Base_SetConfig+0xf8>
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	4a0c      	ldr	r2, [pc, #48]	; (80019f8 <TIM_Base_SetConfig+0x124>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d103      	bne.n	80019d4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019cc:	683b      	ldr	r3, [r7, #0]
 80019ce:	691a      	ldr	r2, [r3, #16]
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2201      	movs	r2, #1
 80019d8:	615a      	str	r2, [r3, #20]
}
 80019da:	bf00      	nop
 80019dc:	3714      	adds	r7, #20
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	40010000 	.word	0x40010000
 80019ec:	40000400 	.word	0x40000400
 80019f0:	40000800 	.word	0x40000800
 80019f4:	40000c00 	.word	0x40000c00
 80019f8:	40010400 	.word	0x40010400
 80019fc:	40014000 	.word	0x40014000
 8001a00:	40014400 	.word	0x40014400
 8001a04:	40014800 	.word	0x40014800
 8001a08:	40001800 	.word	0x40001800
 8001a0c:	40001c00 	.word	0x40001c00
 8001a10:	40002000 	.word	0x40002000

08001a14 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a1c:	bf00      	nop
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr

08001a28 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b083      	sub	sp, #12
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a30:	bf00      	nop
 8001a32:	370c      	adds	r7, #12
 8001a34:	46bd      	mov	sp, r7
 8001a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3a:	4770      	bx	lr

08001a3c <__NVIC_SetPriority>:
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b083      	sub	sp, #12
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	db0a      	blt.n	8001a66 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a50:	683b      	ldr	r3, [r7, #0]
 8001a52:	b2da      	uxtb	r2, r3
 8001a54:	490c      	ldr	r1, [pc, #48]	; (8001a88 <__NVIC_SetPriority+0x4c>)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	0112      	lsls	r2, r2, #4
 8001a5c:	b2d2      	uxtb	r2, r2
 8001a5e:	440b      	add	r3, r1
 8001a60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a64:	e00a      	b.n	8001a7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a66:	683b      	ldr	r3, [r7, #0]
 8001a68:	b2da      	uxtb	r2, r3
 8001a6a:	4908      	ldr	r1, [pc, #32]	; (8001a8c <__NVIC_SetPriority+0x50>)
 8001a6c:	79fb      	ldrb	r3, [r7, #7]
 8001a6e:	f003 030f 	and.w	r3, r3, #15
 8001a72:	3b04      	subs	r3, #4
 8001a74:	0112      	lsls	r2, r2, #4
 8001a76:	b2d2      	uxtb	r2, r2
 8001a78:	440b      	add	r3, r1
 8001a7a:	761a      	strb	r2, [r3, #24]
}
 8001a7c:	bf00      	nop
 8001a7e:	370c      	adds	r7, #12
 8001a80:	46bd      	mov	sp, r7
 8001a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a86:	4770      	bx	lr
 8001a88:	e000e100 	.word	0xe000e100
 8001a8c:	e000ed00 	.word	0xe000ed00

08001a90 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001a90:	b580      	push	{r7, lr}
 8001a92:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001a94:	4b05      	ldr	r3, [pc, #20]	; (8001aac <SysTick_Handler+0x1c>)
 8001a96:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001a98:	f002 f85a 	bl	8003b50 <xTaskGetSchedulerState>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b01      	cmp	r3, #1
 8001aa0:	d001      	beq.n	8001aa6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001aa2:	f002 ff41 	bl	8004928 <xPortSysTickHandler>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	e000e010 	.word	0xe000e010

08001ab0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ab4:	2100      	movs	r1, #0
 8001ab6:	f06f 0004 	mvn.w	r0, #4
 8001aba:	f7ff ffbf 	bl	8001a3c <__NVIC_SetPriority>
#endif
}
 8001abe:	bf00      	nop
 8001ac0:	bd80      	pop	{r7, pc}
	...

08001ac4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ac4:	b480      	push	{r7}
 8001ac6:	b083      	sub	sp, #12
 8001ac8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001aca:	f3ef 8305 	mrs	r3, IPSR
 8001ace:	603b      	str	r3, [r7, #0]
  return(result);
 8001ad0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d003      	beq.n	8001ade <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001ad6:	f06f 0305 	mvn.w	r3, #5
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	e00c      	b.n	8001af8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <osKernelInitialize+0x44>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d105      	bne.n	8001af2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001ae6:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <osKernelInitialize+0x44>)
 8001ae8:	2201      	movs	r2, #1
 8001aea:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001aec:	2300      	movs	r3, #0
 8001aee:	607b      	str	r3, [r7, #4]
 8001af0:	e002      	b.n	8001af8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001af2:	f04f 33ff 	mov.w	r3, #4294967295
 8001af6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001af8:	687b      	ldr	r3, [r7, #4]
}
 8001afa:	4618      	mov	r0, r3
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	200000e8 	.word	0x200000e8

08001b0c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b12:	f3ef 8305 	mrs	r3, IPSR
 8001b16:	603b      	str	r3, [r7, #0]
  return(result);
 8001b18:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d003      	beq.n	8001b26 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001b1e:	f06f 0305 	mvn.w	r3, #5
 8001b22:	607b      	str	r3, [r7, #4]
 8001b24:	e010      	b.n	8001b48 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001b26:	4b0b      	ldr	r3, [pc, #44]	; (8001b54 <osKernelStart+0x48>)
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d109      	bne.n	8001b42 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001b2e:	f7ff ffbf 	bl	8001ab0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001b32:	4b08      	ldr	r3, [pc, #32]	; (8001b54 <osKernelStart+0x48>)
 8001b34:	2202      	movs	r2, #2
 8001b36:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001b38:	f001 fb9e 	bl	8003278 <vTaskStartScheduler>
      stat = osOK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	607b      	str	r3, [r7, #4]
 8001b40:	e002      	b.n	8001b48 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001b42:	f04f 33ff 	mov.w	r3, #4294967295
 8001b46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b48:	687b      	ldr	r3, [r7, #4]
}
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	3708      	adds	r7, #8
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd80      	pop	{r7, pc}
 8001b52:	bf00      	nop
 8001b54:	200000e8 	.word	0x200000e8

08001b58 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b08e      	sub	sp, #56	; 0x38
 8001b5c:	af04      	add	r7, sp, #16
 8001b5e:	60f8      	str	r0, [r7, #12]
 8001b60:	60b9      	str	r1, [r7, #8]
 8001b62:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b68:	f3ef 8305 	mrs	r3, IPSR
 8001b6c:	617b      	str	r3, [r7, #20]
  return(result);
 8001b6e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d17e      	bne.n	8001c72 <osThreadNew+0x11a>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d07b      	beq.n	8001c72 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001b7a:	2380      	movs	r3, #128	; 0x80
 8001b7c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001b7e:	2318      	movs	r3, #24
 8001b80:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001b86:	f04f 33ff 	mov.w	r3, #4294967295
 8001b8a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d045      	beq.n	8001c1e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d002      	beq.n	8001ba0 <osThreadNew+0x48>
        name = attr->name;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d002      	beq.n	8001bae <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	699b      	ldr	r3, [r3, #24]
 8001bac:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d008      	beq.n	8001bc6 <osThreadNew+0x6e>
 8001bb4:	69fb      	ldr	r3, [r7, #28]
 8001bb6:	2b38      	cmp	r3, #56	; 0x38
 8001bb8:	d805      	bhi.n	8001bc6 <osThreadNew+0x6e>
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	685b      	ldr	r3, [r3, #4]
 8001bbe:	f003 0301 	and.w	r3, r3, #1
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <osThreadNew+0x72>
        return (NULL);
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	e054      	b.n	8001c74 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	695b      	ldr	r3, [r3, #20]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	695b      	ldr	r3, [r3, #20]
 8001bd6:	089b      	lsrs	r3, r3, #2
 8001bd8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	689b      	ldr	r3, [r3, #8]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d00e      	beq.n	8001c00 <osThreadNew+0xa8>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	68db      	ldr	r3, [r3, #12]
 8001be6:	2bbb      	cmp	r3, #187	; 0xbb
 8001be8:	d90a      	bls.n	8001c00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d006      	beq.n	8001c00 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	695b      	ldr	r3, [r3, #20]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d002      	beq.n	8001c00 <osThreadNew+0xa8>
        mem = 1;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	61bb      	str	r3, [r7, #24]
 8001bfe:	e010      	b.n	8001c22 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d10c      	bne.n	8001c22 <osThreadNew+0xca>
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d108      	bne.n	8001c22 <osThreadNew+0xca>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	691b      	ldr	r3, [r3, #16]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d104      	bne.n	8001c22 <osThreadNew+0xca>
          mem = 0;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	61bb      	str	r3, [r7, #24]
 8001c1c:	e001      	b.n	8001c22 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001c22:	69bb      	ldr	r3, [r7, #24]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d110      	bne.n	8001c4a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001c2c:	687a      	ldr	r2, [r7, #4]
 8001c2e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c30:	9202      	str	r2, [sp, #8]
 8001c32:	9301      	str	r3, [sp, #4]
 8001c34:	69fb      	ldr	r3, [r7, #28]
 8001c36:	9300      	str	r3, [sp, #0]
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	6a3a      	ldr	r2, [r7, #32]
 8001c3c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c3e:	68f8      	ldr	r0, [r7, #12]
 8001c40:	f001 f92e 	bl	8002ea0 <xTaskCreateStatic>
 8001c44:	4603      	mov	r3, r0
 8001c46:	613b      	str	r3, [r7, #16]
 8001c48:	e013      	b.n	8001c72 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001c4a:	69bb      	ldr	r3, [r7, #24]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d110      	bne.n	8001c72 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001c50:	6a3b      	ldr	r3, [r7, #32]
 8001c52:	b29a      	uxth	r2, r3
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	9301      	str	r3, [sp, #4]
 8001c5a:	69fb      	ldr	r3, [r7, #28]
 8001c5c:	9300      	str	r3, [sp, #0]
 8001c5e:	68bb      	ldr	r3, [r7, #8]
 8001c60:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c62:	68f8      	ldr	r0, [r7, #12]
 8001c64:	f001 f979 	bl	8002f5a <xTaskCreate>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d001      	beq.n	8001c72 <osThreadNew+0x11a>
            hTask = NULL;
 8001c6e:	2300      	movs	r3, #0
 8001c70:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001c72:	693b      	ldr	r3, [r7, #16]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	3728      	adds	r7, #40	; 0x28
 8001c78:	46bd      	mov	sp, r7
 8001c7a:	bd80      	pop	{r7, pc}

08001c7c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b084      	sub	sp, #16
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001c84:	f3ef 8305 	mrs	r3, IPSR
 8001c88:	60bb      	str	r3, [r7, #8]
  return(result);
 8001c8a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d003      	beq.n	8001c98 <osDelay+0x1c>
    stat = osErrorISR;
 8001c90:	f06f 0305 	mvn.w	r3, #5
 8001c94:	60fb      	str	r3, [r7, #12]
 8001c96:	e007      	b.n	8001ca8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d002      	beq.n	8001ca8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f001 fab4 	bl	8003210 <vTaskDelay>
    }
  }

  return (stat);
 8001ca8:	68fb      	ldr	r3, [r7, #12]
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3710      	adds	r7, #16
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}

08001cb2 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8001cb2:	b580      	push	{r7, lr}
 8001cb4:	b088      	sub	sp, #32
 8001cb6:	af00      	add	r7, sp, #0
 8001cb8:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cbe:	f3ef 8305 	mrs	r3, IPSR
 8001cc2:	60bb      	str	r3, [r7, #8]
  return(result);
 8001cc4:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d174      	bne.n	8001db4 <osMutexNew+0x102>
    if (attr != NULL) {
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <osMutexNew+0x26>
      type = attr->attr_bits;
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685b      	ldr	r3, [r3, #4]
 8001cd4:	61bb      	str	r3, [r7, #24]
 8001cd6:	e001      	b.n	8001cdc <osMutexNew+0x2a>
    } else {
      type = 0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	f003 0301 	and.w	r3, r3, #1
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d002      	beq.n	8001cec <osMutexNew+0x3a>
      rmtx = 1U;
 8001ce6:	2301      	movs	r3, #1
 8001ce8:	617b      	str	r3, [r7, #20]
 8001cea:	e001      	b.n	8001cf0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	f003 0308 	and.w	r3, r3, #8
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d15c      	bne.n	8001db4 <osMutexNew+0x102>
      mem = -1;
 8001cfa:	f04f 33ff 	mov.w	r3, #4294967295
 8001cfe:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2b00      	cmp	r3, #0
 8001d04:	d015      	beq.n	8001d32 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d006      	beq.n	8001d1c <osMutexNew+0x6a>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	68db      	ldr	r3, [r3, #12]
 8001d12:	2b4f      	cmp	r3, #79	; 0x4f
 8001d14:	d902      	bls.n	8001d1c <osMutexNew+0x6a>
          mem = 1;
 8001d16:	2301      	movs	r3, #1
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	e00c      	b.n	8001d36 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d108      	bne.n	8001d36 <osMutexNew+0x84>
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	68db      	ldr	r3, [r3, #12]
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	d104      	bne.n	8001d36 <osMutexNew+0x84>
            mem = 0;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	613b      	str	r3, [r7, #16]
 8001d30:	e001      	b.n	8001d36 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8001d32:	2300      	movs	r3, #0
 8001d34:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b01      	cmp	r3, #1
 8001d3a:	d112      	bne.n	8001d62 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8001d3c:	697b      	ldr	r3, [r7, #20]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d007      	beq.n	8001d52 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	689b      	ldr	r3, [r3, #8]
 8001d46:	4619      	mov	r1, r3
 8001d48:	2004      	movs	r0, #4
 8001d4a:	f000 fb18 	bl	800237e <xQueueCreateMutexStatic>
 8001d4e:	61f8      	str	r0, [r7, #28]
 8001d50:	e016      	b.n	8001d80 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	689b      	ldr	r3, [r3, #8]
 8001d56:	4619      	mov	r1, r3
 8001d58:	2001      	movs	r0, #1
 8001d5a:	f000 fb10 	bl	800237e <xQueueCreateMutexStatic>
 8001d5e:	61f8      	str	r0, [r7, #28]
 8001d60:	e00e      	b.n	8001d80 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8001d62:	693b      	ldr	r3, [r7, #16]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d10b      	bne.n	8001d80 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d004      	beq.n	8001d78 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8001d6e:	2004      	movs	r0, #4
 8001d70:	f000 faed 	bl	800234e <xQueueCreateMutex>
 8001d74:	61f8      	str	r0, [r7, #28]
 8001d76:	e003      	b.n	8001d80 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8001d78:	2001      	movs	r0, #1
 8001d7a:	f000 fae8 	bl	800234e <xQueueCreateMutex>
 8001d7e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00c      	beq.n	8001da0 <osMutexNew+0xee>
        if (attr != NULL) {
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d003      	beq.n	8001d94 <osMutexNew+0xe2>
          name = attr->name;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	60fb      	str	r3, [r7, #12]
 8001d92:	e001      	b.n	8001d98 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8001d94:	2300      	movs	r3, #0
 8001d96:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8001d98:	68f9      	ldr	r1, [r7, #12]
 8001d9a:	69f8      	ldr	r0, [r7, #28]
 8001d9c:	f001 f822 	bl	8002de4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d006      	beq.n	8001db4 <osMutexNew+0x102>
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d003      	beq.n	8001db4 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f043 0301 	orr.w	r3, r3, #1
 8001db2:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8001db4:	69fb      	ldr	r3, [r7, #28]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3720      	adds	r7, #32
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	bd80      	pop	{r7, pc}

08001dbe <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8001dbe:	b580      	push	{r7, lr}
 8001dc0:	b086      	sub	sp, #24
 8001dc2:	af00      	add	r7, sp, #0
 8001dc4:	6078      	str	r0, [r7, #4]
 8001dc6:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f023 0301 	bic.w	r3, r3, #1
 8001dce:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ddc:	f3ef 8305 	mrs	r3, IPSR
 8001de0:	60bb      	str	r3, [r7, #8]
  return(result);
 8001de2:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8001de4:	2b00      	cmp	r3, #0
 8001de6:	d003      	beq.n	8001df0 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8001de8:	f06f 0305 	mvn.w	r3, #5
 8001dec:	617b      	str	r3, [r7, #20]
 8001dee:	e02c      	b.n	8001e4a <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	2b00      	cmp	r3, #0
 8001df4:	d103      	bne.n	8001dfe <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8001df6:	f06f 0303 	mvn.w	r3, #3
 8001dfa:	617b      	str	r3, [r7, #20]
 8001dfc:	e025      	b.n	8001e4a <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d011      	beq.n	8001e28 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8001e04:	6839      	ldr	r1, [r7, #0]
 8001e06:	6938      	ldr	r0, [r7, #16]
 8001e08:	f000 fb08 	bl	800241c <xQueueTakeMutexRecursive>
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	2b01      	cmp	r3, #1
 8001e10:	d01b      	beq.n	8001e4a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8001e12:	683b      	ldr	r3, [r7, #0]
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d003      	beq.n	8001e20 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8001e18:	f06f 0301 	mvn.w	r3, #1
 8001e1c:	617b      	str	r3, [r7, #20]
 8001e1e:	e014      	b.n	8001e4a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8001e20:	f06f 0302 	mvn.w	r3, #2
 8001e24:	617b      	str	r3, [r7, #20]
 8001e26:	e010      	b.n	8001e4a <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8001e28:	6839      	ldr	r1, [r7, #0]
 8001e2a:	6938      	ldr	r0, [r7, #16]
 8001e2c:	f000 fda6 	bl	800297c <xQueueSemaphoreTake>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2b01      	cmp	r3, #1
 8001e34:	d009      	beq.n	8001e4a <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8001e36:	683b      	ldr	r3, [r7, #0]
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8001e3c:	f06f 0301 	mvn.w	r3, #1
 8001e40:	617b      	str	r3, [r7, #20]
 8001e42:	e002      	b.n	8001e4a <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8001e44:	f06f 0302 	mvn.w	r3, #2
 8001e48:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8001e4a:	697b      	ldr	r3, [r7, #20]
}
 8001e4c:	4618      	mov	r0, r3
 8001e4e:	3718      	adds	r7, #24
 8001e50:	46bd      	mov	sp, r7
 8001e52:	bd80      	pop	{r7, pc}

08001e54 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8001e54:	b580      	push	{r7, lr}
 8001e56:	b086      	sub	sp, #24
 8001e58:	af00      	add	r7, sp, #0
 8001e5a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	f023 0301 	bic.w	r3, r3, #1
 8001e62:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	f003 0301 	and.w	r3, r3, #1
 8001e6a:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001e70:	f3ef 8305 	mrs	r3, IPSR
 8001e74:	60bb      	str	r3, [r7, #8]
  return(result);
 8001e76:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <osMutexRelease+0x30>
    stat = osErrorISR;
 8001e7c:	f06f 0305 	mvn.w	r3, #5
 8001e80:	617b      	str	r3, [r7, #20]
 8001e82:	e01f      	b.n	8001ec4 <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8001e84:	693b      	ldr	r3, [r7, #16]
 8001e86:	2b00      	cmp	r3, #0
 8001e88:	d103      	bne.n	8001e92 <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8001e8a:	f06f 0303 	mvn.w	r3, #3
 8001e8e:	617b      	str	r3, [r7, #20]
 8001e90:	e018      	b.n	8001ec4 <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d009      	beq.n	8001eac <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8001e98:	6938      	ldr	r0, [r7, #16]
 8001e9a:	f000 fa8b 	bl	80023b4 <xQueueGiveMutexRecursive>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2b01      	cmp	r3, #1
 8001ea2:	d00f      	beq.n	8001ec4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8001ea4:	f06f 0302 	mvn.w	r3, #2
 8001ea8:	617b      	str	r3, [r7, #20]
 8001eaa:	e00b      	b.n	8001ec4 <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8001eac:	2300      	movs	r3, #0
 8001eae:	2200      	movs	r2, #0
 8001eb0:	2100      	movs	r1, #0
 8001eb2:	6938      	ldr	r0, [r7, #16]
 8001eb4:	f000 fae8 	bl	8002488 <xQueueGenericSend>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d002      	beq.n	8001ec4 <osMutexRelease+0x70>
        stat = osErrorResource;
 8001ebe:	f06f 0302 	mvn.w	r3, #2
 8001ec2:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8001ec4:	697b      	ldr	r3, [r7, #20]
}
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	3718      	adds	r7, #24
 8001eca:	46bd      	mov	sp, r7
 8001ecc:	bd80      	pop	{r7, pc}
	...

08001ed0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	60f8      	str	r0, [r7, #12]
 8001ed8:	60b9      	str	r1, [r7, #8]
 8001eda:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	4a07      	ldr	r2, [pc, #28]	; (8001efc <vApplicationGetIdleTaskMemory+0x2c>)
 8001ee0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001ee2:	68bb      	ldr	r3, [r7, #8]
 8001ee4:	4a06      	ldr	r2, [pc, #24]	; (8001f00 <vApplicationGetIdleTaskMemory+0x30>)
 8001ee6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	601a      	str	r2, [r3, #0]
}
 8001eee:	bf00      	nop
 8001ef0:	3714      	adds	r7, #20
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef8:	4770      	bx	lr
 8001efa:	bf00      	nop
 8001efc:	200000ec 	.word	0x200000ec
 8001f00:	200001a8 	.word	0x200001a8

08001f04 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001f04:	b480      	push	{r7}
 8001f06:	b085      	sub	sp, #20
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	60f8      	str	r0, [r7, #12]
 8001f0c:	60b9      	str	r1, [r7, #8]
 8001f0e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	4a07      	ldr	r2, [pc, #28]	; (8001f30 <vApplicationGetTimerTaskMemory+0x2c>)
 8001f14:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	4a06      	ldr	r2, [pc, #24]	; (8001f34 <vApplicationGetTimerTaskMemory+0x30>)
 8001f1a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001f22:	601a      	str	r2, [r3, #0]
}
 8001f24:	bf00      	nop
 8001f26:	3714      	adds	r7, #20
 8001f28:	46bd      	mov	sp, r7
 8001f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2e:	4770      	bx	lr
 8001f30:	200003a8 	.word	0x200003a8
 8001f34:	20000464 	.word	0x20000464

08001f38 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001f38:	b480      	push	{r7}
 8001f3a:	b083      	sub	sp, #12
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	f103 0208 	add.w	r2, r3, #8
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	f04f 32ff 	mov.w	r2, #4294967295
 8001f50:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f103 0208 	add.w	r2, r3, #8
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f103 0208 	add.w	r2, r3, #8
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	2200      	movs	r2, #0
 8001f6a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001f6c:	bf00      	nop
 8001f6e:	370c      	adds	r7, #12
 8001f70:	46bd      	mov	sp, r7
 8001f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f76:	4770      	bx	lr

08001f78 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001f78:	b480      	push	{r7}
 8001f7a:	b083      	sub	sp, #12
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	2200      	movs	r2, #0
 8001f84:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001f86:	bf00      	nop
 8001f88:	370c      	adds	r7, #12
 8001f8a:	46bd      	mov	sp, r7
 8001f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f90:	4770      	bx	lr

08001f92 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001f92:	b480      	push	{r7}
 8001f94:	b085      	sub	sp, #20
 8001f96:	af00      	add	r7, sp, #0
 8001f98:	6078      	str	r0, [r7, #4]
 8001f9a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	68fa      	ldr	r2, [r7, #12]
 8001fa6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	689a      	ldr	r2, [r3, #8]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	689b      	ldr	r3, [r3, #8]
 8001fb4:	683a      	ldr	r2, [r7, #0]
 8001fb6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001fbe:	683b      	ldr	r3, [r7, #0]
 8001fc0:	687a      	ldr	r2, [r7, #4]
 8001fc2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	1c5a      	adds	r2, r3, #1
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	601a      	str	r2, [r3, #0]
}
 8001fce:	bf00      	nop
 8001fd0:	3714      	adds	r7, #20
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr

08001fda <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001fda:	b480      	push	{r7}
 8001fdc:	b085      	sub	sp, #20
 8001fde:	af00      	add	r7, sp, #0
 8001fe0:	6078      	str	r0, [r7, #4]
 8001fe2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001ff0:	d103      	bne.n	8001ffa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
 8001ff6:	60fb      	str	r3, [r7, #12]
 8001ff8:	e00c      	b.n	8002014 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	3308      	adds	r3, #8
 8001ffe:	60fb      	str	r3, [r7, #12]
 8002000:	e002      	b.n	8002008 <vListInsert+0x2e>
 8002002:	68fb      	ldr	r3, [r7, #12]
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	68fb      	ldr	r3, [r7, #12]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	68ba      	ldr	r2, [r7, #8]
 8002010:	429a      	cmp	r2, r3
 8002012:	d2f6      	bcs.n	8002002 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	685a      	ldr	r2, [r3, #4]
 8002018:	683b      	ldr	r3, [r7, #0]
 800201a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	683a      	ldr	r2, [r7, #0]
 8002022:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	68fa      	ldr	r2, [r7, #12]
 8002028:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	683a      	ldr	r2, [r7, #0]
 800202e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	687a      	ldr	r2, [r7, #4]
 8002034:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	1c5a      	adds	r2, r3, #1
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	601a      	str	r2, [r3, #0]
}
 8002040:	bf00      	nop
 8002042:	3714      	adds	r7, #20
 8002044:	46bd      	mov	sp, r7
 8002046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800204a:	4770      	bx	lr

0800204c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800204c:	b480      	push	{r7}
 800204e:	b085      	sub	sp, #20
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	691b      	ldr	r3, [r3, #16]
 8002058:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	685b      	ldr	r3, [r3, #4]
 800205e:	687a      	ldr	r2, [r7, #4]
 8002060:	6892      	ldr	r2, [r2, #8]
 8002062:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	689b      	ldr	r3, [r3, #8]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	6852      	ldr	r2, [r2, #4]
 800206c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	687a      	ldr	r2, [r7, #4]
 8002074:	429a      	cmp	r2, r3
 8002076:	d103      	bne.n	8002080 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	689a      	ldr	r2, [r3, #8]
 800207c:	68fb      	ldr	r3, [r7, #12]
 800207e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	1e5a      	subs	r2, r3, #1
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002090:	68fb      	ldr	r3, [r7, #12]
 8002092:	681b      	ldr	r3, [r3, #0]
}
 8002094:	4618      	mov	r0, r3
 8002096:	3714      	adds	r7, #20
 8002098:	46bd      	mov	sp, r7
 800209a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209e:	4770      	bx	lr

080020a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b084      	sub	sp, #16
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
 80020a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d10a      	bne.n	80020ca <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80020b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80020b8:	f383 8811 	msr	BASEPRI, r3
 80020bc:	f3bf 8f6f 	isb	sy
 80020c0:	f3bf 8f4f 	dsb	sy
 80020c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80020c6:	bf00      	nop
 80020c8:	e7fe      	b.n	80020c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80020ca:	f002 fb9b 	bl	8004804 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	681a      	ldr	r2, [r3, #0]
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020d6:	68f9      	ldr	r1, [r7, #12]
 80020d8:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80020da:	fb01 f303 	mul.w	r3, r1, r3
 80020de:	441a      	add	r2, r3
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80020e4:	68fb      	ldr	r3, [r7, #12]
 80020e6:	2200      	movs	r2, #0
 80020e8:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	681a      	ldr	r2, [r3, #0]
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	3b01      	subs	r3, #1
 80020fc:	68f9      	ldr	r1, [r7, #12]
 80020fe:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002100:	fb01 f303 	mul.w	r3, r1, r3
 8002104:	441a      	add	r2, r3
 8002106:	68fb      	ldr	r3, [r7, #12]
 8002108:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	22ff      	movs	r2, #255	; 0xff
 800210e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	22ff      	movs	r2, #255	; 0xff
 8002116:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800211a:	683b      	ldr	r3, [r7, #0]
 800211c:	2b00      	cmp	r3, #0
 800211e:	d114      	bne.n	800214a <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d01a      	beq.n	800215e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	3310      	adds	r3, #16
 800212c:	4618      	mov	r0, r3
 800212e:	f001 fb3d 	bl	80037ac <xTaskRemoveFromEventList>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d012      	beq.n	800215e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002138:	4b0c      	ldr	r3, [pc, #48]	; (800216c <xQueueGenericReset+0xcc>)
 800213a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800213e:	601a      	str	r2, [r3, #0]
 8002140:	f3bf 8f4f 	dsb	sy
 8002144:	f3bf 8f6f 	isb	sy
 8002148:	e009      	b.n	800215e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	3310      	adds	r3, #16
 800214e:	4618      	mov	r0, r3
 8002150:	f7ff fef2 	bl	8001f38 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	3324      	adds	r3, #36	; 0x24
 8002158:	4618      	mov	r0, r3
 800215a:	f7ff feed 	bl	8001f38 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800215e:	f002 fb81 	bl	8004864 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8002162:	2301      	movs	r3, #1
}
 8002164:	4618      	mov	r0, r3
 8002166:	3710      	adds	r7, #16
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}
 800216c:	e000ed04 	.word	0xe000ed04

08002170 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002170:	b580      	push	{r7, lr}
 8002172:	b08e      	sub	sp, #56	; 0x38
 8002174:	af02      	add	r7, sp, #8
 8002176:	60f8      	str	r0, [r7, #12]
 8002178:	60b9      	str	r1, [r7, #8]
 800217a:	607a      	str	r2, [r7, #4]
 800217c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10a      	bne.n	800219a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002188:	f383 8811 	msr	BASEPRI, r3
 800218c:	f3bf 8f6f 	isb	sy
 8002190:	f3bf 8f4f 	dsb	sy
 8002194:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002196:	bf00      	nop
 8002198:	e7fe      	b.n	8002198 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800219a:	683b      	ldr	r3, [r7, #0]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10a      	bne.n	80021b6 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80021a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021a4:	f383 8811 	msr	BASEPRI, r3
 80021a8:	f3bf 8f6f 	isb	sy
 80021ac:	f3bf 8f4f 	dsb	sy
 80021b0:	627b      	str	r3, [r7, #36]	; 0x24
}
 80021b2:	bf00      	nop
 80021b4:	e7fe      	b.n	80021b4 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d002      	beq.n	80021c2 <xQueueGenericCreateStatic+0x52>
 80021bc:	68bb      	ldr	r3, [r7, #8]
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d001      	beq.n	80021c6 <xQueueGenericCreateStatic+0x56>
 80021c2:	2301      	movs	r3, #1
 80021c4:	e000      	b.n	80021c8 <xQueueGenericCreateStatic+0x58>
 80021c6:	2300      	movs	r3, #0
 80021c8:	2b00      	cmp	r3, #0
 80021ca:	d10a      	bne.n	80021e2 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80021cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021d0:	f383 8811 	msr	BASEPRI, r3
 80021d4:	f3bf 8f6f 	isb	sy
 80021d8:	f3bf 8f4f 	dsb	sy
 80021dc:	623b      	str	r3, [r7, #32]
}
 80021de:	bf00      	nop
 80021e0:	e7fe      	b.n	80021e0 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d102      	bne.n	80021ee <xQueueGenericCreateStatic+0x7e>
 80021e8:	68bb      	ldr	r3, [r7, #8]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d101      	bne.n	80021f2 <xQueueGenericCreateStatic+0x82>
 80021ee:	2301      	movs	r3, #1
 80021f0:	e000      	b.n	80021f4 <xQueueGenericCreateStatic+0x84>
 80021f2:	2300      	movs	r3, #0
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d10a      	bne.n	800220e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80021f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021fc:	f383 8811 	msr	BASEPRI, r3
 8002200:	f3bf 8f6f 	isb	sy
 8002204:	f3bf 8f4f 	dsb	sy
 8002208:	61fb      	str	r3, [r7, #28]
}
 800220a:	bf00      	nop
 800220c:	e7fe      	b.n	800220c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800220e:	2350      	movs	r3, #80	; 0x50
 8002210:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002212:	697b      	ldr	r3, [r7, #20]
 8002214:	2b50      	cmp	r3, #80	; 0x50
 8002216:	d00a      	beq.n	800222e <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002218:	f04f 0350 	mov.w	r3, #80	; 0x50
 800221c:	f383 8811 	msr	BASEPRI, r3
 8002220:	f3bf 8f6f 	isb	sy
 8002224:	f3bf 8f4f 	dsb	sy
 8002228:	61bb      	str	r3, [r7, #24]
}
 800222a:	bf00      	nop
 800222c:	e7fe      	b.n	800222c <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800222e:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8002234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002236:	2b00      	cmp	r3, #0
 8002238:	d00d      	beq.n	8002256 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800223a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8002242:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8002246:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002248:	9300      	str	r3, [sp, #0]
 800224a:	4613      	mov	r3, r2
 800224c:	687a      	ldr	r2, [r7, #4]
 800224e:	68b9      	ldr	r1, [r7, #8]
 8002250:	68f8      	ldr	r0, [r7, #12]
 8002252:	f000 f83f 	bl	80022d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8002256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002258:	4618      	mov	r0, r3
 800225a:	3730      	adds	r7, #48	; 0x30
 800225c:	46bd      	mov	sp, r7
 800225e:	bd80      	pop	{r7, pc}

08002260 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002260:	b580      	push	{r7, lr}
 8002262:	b08a      	sub	sp, #40	; 0x28
 8002264:	af02      	add	r7, sp, #8
 8002266:	60f8      	str	r0, [r7, #12]
 8002268:	60b9      	str	r1, [r7, #8]
 800226a:	4613      	mov	r3, r2
 800226c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	2b00      	cmp	r3, #0
 8002272:	d10a      	bne.n	800228a <xQueueGenericCreate+0x2a>
	__asm volatile
 8002274:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002278:	f383 8811 	msr	BASEPRI, r3
 800227c:	f3bf 8f6f 	isb	sy
 8002280:	f3bf 8f4f 	dsb	sy
 8002284:	613b      	str	r3, [r7, #16]
}
 8002286:	bf00      	nop
 8002288:	e7fe      	b.n	8002288 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	68ba      	ldr	r2, [r7, #8]
 800228e:	fb02 f303 	mul.w	r3, r2, r3
 8002292:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	3350      	adds	r3, #80	; 0x50
 8002298:	4618      	mov	r0, r3
 800229a:	f002 fbd5 	bl	8004a48 <pvPortMalloc>
 800229e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80022a0:	69bb      	ldr	r3, [r7, #24]
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d011      	beq.n	80022ca <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80022a6:	69bb      	ldr	r3, [r7, #24]
 80022a8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80022aa:	697b      	ldr	r3, [r7, #20]
 80022ac:	3350      	adds	r3, #80	; 0x50
 80022ae:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80022b0:	69bb      	ldr	r3, [r7, #24]
 80022b2:	2200      	movs	r2, #0
 80022b4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80022b8:	79fa      	ldrb	r2, [r7, #7]
 80022ba:	69bb      	ldr	r3, [r7, #24]
 80022bc:	9300      	str	r3, [sp, #0]
 80022be:	4613      	mov	r3, r2
 80022c0:	697a      	ldr	r2, [r7, #20]
 80022c2:	68b9      	ldr	r1, [r7, #8]
 80022c4:	68f8      	ldr	r0, [r7, #12]
 80022c6:	f000 f805 	bl	80022d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80022ca:	69bb      	ldr	r3, [r7, #24]
	}
 80022cc:	4618      	mov	r0, r3
 80022ce:	3720      	adds	r7, #32
 80022d0:	46bd      	mov	sp, r7
 80022d2:	bd80      	pop	{r7, pc}

080022d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b084      	sub	sp, #16
 80022d8:	af00      	add	r7, sp, #0
 80022da:	60f8      	str	r0, [r7, #12]
 80022dc:	60b9      	str	r1, [r7, #8]
 80022de:	607a      	str	r2, [r7, #4]
 80022e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d103      	bne.n	80022f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80022e8:	69bb      	ldr	r3, [r7, #24]
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	601a      	str	r2, [r3, #0]
 80022ee:	e002      	b.n	80022f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80022f0:	69bb      	ldr	r3, [r7, #24]
 80022f2:	687a      	ldr	r2, [r7, #4]
 80022f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	68fa      	ldr	r2, [r7, #12]
 80022fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80022fc:	69bb      	ldr	r3, [r7, #24]
 80022fe:	68ba      	ldr	r2, [r7, #8]
 8002300:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002302:	2101      	movs	r1, #1
 8002304:	69b8      	ldr	r0, [r7, #24]
 8002306:	f7ff fecb 	bl	80020a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800230a:	69bb      	ldr	r3, [r7, #24]
 800230c:	78fa      	ldrb	r2, [r7, #3]
 800230e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002312:	bf00      	nop
 8002314:	3710      	adds	r7, #16
 8002316:	46bd      	mov	sp, r7
 8002318:	bd80      	pop	{r7, pc}

0800231a <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800231a:	b580      	push	{r7, lr}
 800231c:	b082      	sub	sp, #8
 800231e:	af00      	add	r7, sp, #0
 8002320:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	2b00      	cmp	r3, #0
 8002326:	d00e      	beq.n	8002346 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2200      	movs	r2, #0
 800232c:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	2200      	movs	r2, #0
 8002338:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800233a:	2300      	movs	r3, #0
 800233c:	2200      	movs	r2, #0
 800233e:	2100      	movs	r1, #0
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f000 f8a1 	bl	8002488 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 8002346:	bf00      	nop
 8002348:	3708      	adds	r7, #8
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800234e:	b580      	push	{r7, lr}
 8002350:	b086      	sub	sp, #24
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8002358:	2301      	movs	r3, #1
 800235a:	617b      	str	r3, [r7, #20]
 800235c:	2300      	movs	r3, #0
 800235e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 8002360:	79fb      	ldrb	r3, [r7, #7]
 8002362:	461a      	mov	r2, r3
 8002364:	6939      	ldr	r1, [r7, #16]
 8002366:	6978      	ldr	r0, [r7, #20]
 8002368:	f7ff ff7a 	bl	8002260 <xQueueGenericCreate>
 800236c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800236e:	68f8      	ldr	r0, [r7, #12]
 8002370:	f7ff ffd3 	bl	800231a <prvInitialiseMutex>

		return xNewQueue;
 8002374:	68fb      	ldr	r3, [r7, #12]
	}
 8002376:	4618      	mov	r0, r3
 8002378:	3718      	adds	r7, #24
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}

0800237e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800237e:	b580      	push	{r7, lr}
 8002380:	b088      	sub	sp, #32
 8002382:	af02      	add	r7, sp, #8
 8002384:	4603      	mov	r3, r0
 8002386:	6039      	str	r1, [r7, #0]
 8002388:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800238a:	2301      	movs	r3, #1
 800238c:	617b      	str	r3, [r7, #20]
 800238e:	2300      	movs	r3, #0
 8002390:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 8002392:	79fb      	ldrb	r3, [r7, #7]
 8002394:	9300      	str	r3, [sp, #0]
 8002396:	683b      	ldr	r3, [r7, #0]
 8002398:	2200      	movs	r2, #0
 800239a:	6939      	ldr	r1, [r7, #16]
 800239c:	6978      	ldr	r0, [r7, #20]
 800239e:	f7ff fee7 	bl	8002170 <xQueueGenericCreateStatic>
 80023a2:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff ffb8 	bl	800231a <prvInitialiseMutex>

		return xNewQueue;
 80023aa:	68fb      	ldr	r3, [r7, #12]
	}
 80023ac:	4618      	mov	r0, r3
 80023ae:	3718      	adds	r7, #24
 80023b0:	46bd      	mov	sp, r7
 80023b2:	bd80      	pop	{r7, pc}

080023b4 <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 80023b4:	b590      	push	{r4, r7, lr}
 80023b6:	b087      	sub	sp, #28
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80023c0:	693b      	ldr	r3, [r7, #16]
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d10a      	bne.n	80023dc <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 80023c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023ca:	f383 8811 	msr	BASEPRI, r3
 80023ce:	f3bf 8f6f 	isb	sy
 80023d2:	f3bf 8f4f 	dsb	sy
 80023d6:	60fb      	str	r3, [r7, #12]
}
 80023d8:	bf00      	nop
 80023da:	e7fe      	b.n	80023da <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	689c      	ldr	r4, [r3, #8]
 80023e0:	f001 fba6 	bl	8003b30 <xTaskGetCurrentTaskHandle>
 80023e4:	4603      	mov	r3, r0
 80023e6:	429c      	cmp	r4, r3
 80023e8:	d111      	bne.n	800240e <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	68db      	ldr	r3, [r3, #12]
 80023ee:	1e5a      	subs	r2, r3, #1
 80023f0:	693b      	ldr	r3, [r7, #16]
 80023f2:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 80023f4:	693b      	ldr	r3, [r7, #16]
 80023f6:	68db      	ldr	r3, [r3, #12]
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d105      	bne.n	8002408 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 80023fc:	2300      	movs	r3, #0
 80023fe:	2200      	movs	r2, #0
 8002400:	2100      	movs	r1, #0
 8002402:	6938      	ldr	r0, [r7, #16]
 8002404:	f000 f840 	bl	8002488 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8002408:	2301      	movs	r3, #1
 800240a:	617b      	str	r3, [r7, #20]
 800240c:	e001      	b.n	8002412 <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 800240e:	2300      	movs	r3, #0
 8002410:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 8002412:	697b      	ldr	r3, [r7, #20]
	}
 8002414:	4618      	mov	r0, r3
 8002416:	371c      	adds	r7, #28
 8002418:	46bd      	mov	sp, r7
 800241a:	bd90      	pop	{r4, r7, pc}

0800241c <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 800241c:	b590      	push	{r4, r7, lr}
 800241e:	b087      	sub	sp, #28
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 800242a:	693b      	ldr	r3, [r7, #16]
 800242c:	2b00      	cmp	r3, #0
 800242e:	d10a      	bne.n	8002446 <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 8002430:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002434:	f383 8811 	msr	BASEPRI, r3
 8002438:	f3bf 8f6f 	isb	sy
 800243c:	f3bf 8f4f 	dsb	sy
 8002440:	60fb      	str	r3, [r7, #12]
}
 8002442:	bf00      	nop
 8002444:	e7fe      	b.n	8002444 <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	689c      	ldr	r4, [r3, #8]
 800244a:	f001 fb71 	bl	8003b30 <xTaskGetCurrentTaskHandle>
 800244e:	4603      	mov	r3, r0
 8002450:	429c      	cmp	r4, r3
 8002452:	d107      	bne.n	8002464 <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002454:	693b      	ldr	r3, [r7, #16]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	693b      	ldr	r3, [r7, #16]
 800245c:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 800245e:	2301      	movs	r3, #1
 8002460:	617b      	str	r3, [r7, #20]
 8002462:	e00c      	b.n	800247e <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 8002464:	6839      	ldr	r1, [r7, #0]
 8002466:	6938      	ldr	r0, [r7, #16]
 8002468:	f000 fa88 	bl	800297c <xQueueSemaphoreTake>
 800246c:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 800246e:	697b      	ldr	r3, [r7, #20]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d004      	beq.n	800247e <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	693b      	ldr	r3, [r7, #16]
 800247c:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 800247e:	697b      	ldr	r3, [r7, #20]
	}
 8002480:	4618      	mov	r0, r3
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	bd90      	pop	{r4, r7, pc}

08002488 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002488:	b580      	push	{r7, lr}
 800248a:	b08e      	sub	sp, #56	; 0x38
 800248c:	af00      	add	r7, sp, #0
 800248e:	60f8      	str	r0, [r7, #12]
 8002490:	60b9      	str	r1, [r7, #8]
 8002492:	607a      	str	r2, [r7, #4]
 8002494:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002496:	2300      	movs	r3, #0
 8002498:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800249e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d10a      	bne.n	80024ba <xQueueGenericSend+0x32>
	__asm volatile
 80024a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024a8:	f383 8811 	msr	BASEPRI, r3
 80024ac:	f3bf 8f6f 	isb	sy
 80024b0:	f3bf 8f4f 	dsb	sy
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80024b6:	bf00      	nop
 80024b8:	e7fe      	b.n	80024b8 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80024ba:	68bb      	ldr	r3, [r7, #8]
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d103      	bne.n	80024c8 <xQueueGenericSend+0x40>
 80024c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d101      	bne.n	80024cc <xQueueGenericSend+0x44>
 80024c8:	2301      	movs	r3, #1
 80024ca:	e000      	b.n	80024ce <xQueueGenericSend+0x46>
 80024cc:	2300      	movs	r3, #0
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d10a      	bne.n	80024e8 <xQueueGenericSend+0x60>
	__asm volatile
 80024d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024d6:	f383 8811 	msr	BASEPRI, r3
 80024da:	f3bf 8f6f 	isb	sy
 80024de:	f3bf 8f4f 	dsb	sy
 80024e2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80024e4:	bf00      	nop
 80024e6:	e7fe      	b.n	80024e6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	2b02      	cmp	r3, #2
 80024ec:	d103      	bne.n	80024f6 <xQueueGenericSend+0x6e>
 80024ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80024f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024f2:	2b01      	cmp	r3, #1
 80024f4:	d101      	bne.n	80024fa <xQueueGenericSend+0x72>
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <xQueueGenericSend+0x74>
 80024fa:	2300      	movs	r3, #0
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d10a      	bne.n	8002516 <xQueueGenericSend+0x8e>
	__asm volatile
 8002500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002504:	f383 8811 	msr	BASEPRI, r3
 8002508:	f3bf 8f6f 	isb	sy
 800250c:	f3bf 8f4f 	dsb	sy
 8002510:	623b      	str	r3, [r7, #32]
}
 8002512:	bf00      	nop
 8002514:	e7fe      	b.n	8002514 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002516:	f001 fb1b 	bl	8003b50 <xTaskGetSchedulerState>
 800251a:	4603      	mov	r3, r0
 800251c:	2b00      	cmp	r3, #0
 800251e:	d102      	bne.n	8002526 <xQueueGenericSend+0x9e>
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d101      	bne.n	800252a <xQueueGenericSend+0xa2>
 8002526:	2301      	movs	r3, #1
 8002528:	e000      	b.n	800252c <xQueueGenericSend+0xa4>
 800252a:	2300      	movs	r3, #0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d10a      	bne.n	8002546 <xQueueGenericSend+0xbe>
	__asm volatile
 8002530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002534:	f383 8811 	msr	BASEPRI, r3
 8002538:	f3bf 8f6f 	isb	sy
 800253c:	f3bf 8f4f 	dsb	sy
 8002540:	61fb      	str	r3, [r7, #28]
}
 8002542:	bf00      	nop
 8002544:	e7fe      	b.n	8002544 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002546:	f002 f95d 	bl	8004804 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800254a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800254c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800254e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	429a      	cmp	r2, r3
 8002554:	d302      	bcc.n	800255c <xQueueGenericSend+0xd4>
 8002556:	683b      	ldr	r3, [r7, #0]
 8002558:	2b02      	cmp	r3, #2
 800255a:	d129      	bne.n	80025b0 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	68b9      	ldr	r1, [r7, #8]
 8002560:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002562:	f000 fb2f 	bl	8002bc4 <prvCopyDataToQueue>
 8002566:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800256a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800256c:	2b00      	cmp	r3, #0
 800256e:	d010      	beq.n	8002592 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002572:	3324      	adds	r3, #36	; 0x24
 8002574:	4618      	mov	r0, r3
 8002576:	f001 f919 	bl	80037ac <xTaskRemoveFromEventList>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d013      	beq.n	80025a8 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002580:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <xQueueGenericSend+0x1f8>)
 8002582:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002586:	601a      	str	r2, [r3, #0]
 8002588:	f3bf 8f4f 	dsb	sy
 800258c:	f3bf 8f6f 	isb	sy
 8002590:	e00a      	b.n	80025a8 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002592:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002594:	2b00      	cmp	r3, #0
 8002596:	d007      	beq.n	80025a8 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002598:	4b39      	ldr	r3, [pc, #228]	; (8002680 <xQueueGenericSend+0x1f8>)
 800259a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800259e:	601a      	str	r2, [r3, #0]
 80025a0:	f3bf 8f4f 	dsb	sy
 80025a4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80025a8:	f002 f95c 	bl	8004864 <vPortExitCritical>
				return pdPASS;
 80025ac:	2301      	movs	r3, #1
 80025ae:	e063      	b.n	8002678 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d103      	bne.n	80025be <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80025b6:	f002 f955 	bl	8004864 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80025ba:	2300      	movs	r3, #0
 80025bc:	e05c      	b.n	8002678 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80025be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d106      	bne.n	80025d2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4618      	mov	r0, r3
 80025ca:	f001 f953 	bl	8003874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80025ce:	2301      	movs	r3, #1
 80025d0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80025d2:	f002 f947 	bl	8004864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80025d6:	f000 febf 	bl	8003358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80025da:	f002 f913 	bl	8004804 <vPortEnterCritical>
 80025de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80025e4:	b25b      	sxtb	r3, r3
 80025e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80025ea:	d103      	bne.n	80025f4 <xQueueGenericSend+0x16c>
 80025ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025ee:	2200      	movs	r2, #0
 80025f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025f6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80025fa:	b25b      	sxtb	r3, r3
 80025fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002600:	d103      	bne.n	800260a <xQueueGenericSend+0x182>
 8002602:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002604:	2200      	movs	r2, #0
 8002606:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800260a:	f002 f92b 	bl	8004864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800260e:	1d3a      	adds	r2, r7, #4
 8002610:	f107 0314 	add.w	r3, r7, #20
 8002614:	4611      	mov	r1, r2
 8002616:	4618      	mov	r0, r3
 8002618:	f001 f942 	bl	80038a0 <xTaskCheckForTimeOut>
 800261c:	4603      	mov	r3, r0
 800261e:	2b00      	cmp	r3, #0
 8002620:	d124      	bne.n	800266c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002622:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002624:	f000 fbc6 	bl	8002db4 <prvIsQueueFull>
 8002628:	4603      	mov	r3, r0
 800262a:	2b00      	cmp	r3, #0
 800262c:	d018      	beq.n	8002660 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800262e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002630:	3310      	adds	r3, #16
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	4611      	mov	r1, r2
 8002636:	4618      	mov	r0, r3
 8002638:	f001 f868 	bl	800370c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800263c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800263e:	f000 fb51 	bl	8002ce4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002642:	f000 fe97 	bl	8003374 <xTaskResumeAll>
 8002646:	4603      	mov	r3, r0
 8002648:	2b00      	cmp	r3, #0
 800264a:	f47f af7c 	bne.w	8002546 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 800264e:	4b0c      	ldr	r3, [pc, #48]	; (8002680 <xQueueGenericSend+0x1f8>)
 8002650:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002654:	601a      	str	r2, [r3, #0]
 8002656:	f3bf 8f4f 	dsb	sy
 800265a:	f3bf 8f6f 	isb	sy
 800265e:	e772      	b.n	8002546 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002660:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002662:	f000 fb3f 	bl	8002ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002666:	f000 fe85 	bl	8003374 <xTaskResumeAll>
 800266a:	e76c      	b.n	8002546 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800266c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800266e:	f000 fb39 	bl	8002ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002672:	f000 fe7f 	bl	8003374 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002676:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002678:	4618      	mov	r0, r3
 800267a:	3738      	adds	r7, #56	; 0x38
 800267c:	46bd      	mov	sp, r7
 800267e:	bd80      	pop	{r7, pc}
 8002680:	e000ed04 	.word	0xe000ed04

08002684 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b090      	sub	sp, #64	; 0x40
 8002688:	af00      	add	r7, sp, #0
 800268a:	60f8      	str	r0, [r7, #12]
 800268c:	60b9      	str	r1, [r7, #8]
 800268e:	607a      	str	r2, [r7, #4]
 8002690:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800269c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80026ae:	bf00      	nop
 80026b0:	e7fe      	b.n	80026b0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80026b2:	68bb      	ldr	r3, [r7, #8]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d103      	bne.n	80026c0 <xQueueGenericSendFromISR+0x3c>
 80026b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d101      	bne.n	80026c4 <xQueueGenericSendFromISR+0x40>
 80026c0:	2301      	movs	r3, #1
 80026c2:	e000      	b.n	80026c6 <xQueueGenericSendFromISR+0x42>
 80026c4:	2300      	movs	r3, #0
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d10a      	bne.n	80026e0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80026ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026ce:	f383 8811 	msr	BASEPRI, r3
 80026d2:	f3bf 8f6f 	isb	sy
 80026d6:	f3bf 8f4f 	dsb	sy
 80026da:	627b      	str	r3, [r7, #36]	; 0x24
}
 80026dc:	bf00      	nop
 80026de:	e7fe      	b.n	80026de <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	2b02      	cmp	r3, #2
 80026e4:	d103      	bne.n	80026ee <xQueueGenericSendFromISR+0x6a>
 80026e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80026e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026ea:	2b01      	cmp	r3, #1
 80026ec:	d101      	bne.n	80026f2 <xQueueGenericSendFromISR+0x6e>
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <xQueueGenericSendFromISR+0x70>
 80026f2:	2300      	movs	r3, #0
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d10a      	bne.n	800270e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80026f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026fc:	f383 8811 	msr	BASEPRI, r3
 8002700:	f3bf 8f6f 	isb	sy
 8002704:	f3bf 8f4f 	dsb	sy
 8002708:	623b      	str	r3, [r7, #32]
}
 800270a:	bf00      	nop
 800270c:	e7fe      	b.n	800270c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800270e:	f002 f95b 	bl	80049c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002712:	f3ef 8211 	mrs	r2, BASEPRI
 8002716:	f04f 0350 	mov.w	r3, #80	; 0x50
 800271a:	f383 8811 	msr	BASEPRI, r3
 800271e:	f3bf 8f6f 	isb	sy
 8002722:	f3bf 8f4f 	dsb	sy
 8002726:	61fa      	str	r2, [r7, #28]
 8002728:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800272a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800272c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800272e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002730:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002734:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002736:	429a      	cmp	r2, r3
 8002738:	d302      	bcc.n	8002740 <xQueueGenericSendFromISR+0xbc>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b02      	cmp	r3, #2
 800273e:	d12f      	bne.n	80027a0 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002740:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002742:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002746:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800274a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800274c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800274e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002750:	683a      	ldr	r2, [r7, #0]
 8002752:	68b9      	ldr	r1, [r7, #8]
 8002754:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002756:	f000 fa35 	bl	8002bc4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800275a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800275e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002762:	d112      	bne.n	800278a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002764:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002768:	2b00      	cmp	r3, #0
 800276a:	d016      	beq.n	800279a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800276c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800276e:	3324      	adds	r3, #36	; 0x24
 8002770:	4618      	mov	r0, r3
 8002772:	f001 f81b 	bl	80037ac <xTaskRemoveFromEventList>
 8002776:	4603      	mov	r3, r0
 8002778:	2b00      	cmp	r3, #0
 800277a:	d00e      	beq.n	800279a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d00b      	beq.n	800279a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	2201      	movs	r2, #1
 8002786:	601a      	str	r2, [r3, #0]
 8002788:	e007      	b.n	800279a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800278a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800278e:	3301      	adds	r3, #1
 8002790:	b2db      	uxtb	r3, r3
 8002792:	b25a      	sxtb	r2, r3
 8002794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002796:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800279a:	2301      	movs	r3, #1
 800279c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800279e:	e001      	b.n	80027a4 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80027a0:	2300      	movs	r3, #0
 80027a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80027a6:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80027ae:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80027b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80027b2:	4618      	mov	r0, r3
 80027b4:	3740      	adds	r7, #64	; 0x40
 80027b6:	46bd      	mov	sp, r7
 80027b8:	bd80      	pop	{r7, pc}
	...

080027bc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b08c      	sub	sp, #48	; 0x30
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	60f8      	str	r0, [r7, #12]
 80027c4:	60b9      	str	r1, [r7, #8]
 80027c6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80027c8:	2300      	movs	r3, #0
 80027ca:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80027cc:	68fb      	ldr	r3, [r7, #12]
 80027ce:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80027d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d10a      	bne.n	80027ec <xQueueReceive+0x30>
	__asm volatile
 80027d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027da:	f383 8811 	msr	BASEPRI, r3
 80027de:	f3bf 8f6f 	isb	sy
 80027e2:	f3bf 8f4f 	dsb	sy
 80027e6:	623b      	str	r3, [r7, #32]
}
 80027e8:	bf00      	nop
 80027ea:	e7fe      	b.n	80027ea <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d103      	bne.n	80027fa <xQueueReceive+0x3e>
 80027f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d101      	bne.n	80027fe <xQueueReceive+0x42>
 80027fa:	2301      	movs	r3, #1
 80027fc:	e000      	b.n	8002800 <xQueueReceive+0x44>
 80027fe:	2300      	movs	r3, #0
 8002800:	2b00      	cmp	r3, #0
 8002802:	d10a      	bne.n	800281a <xQueueReceive+0x5e>
	__asm volatile
 8002804:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002808:	f383 8811 	msr	BASEPRI, r3
 800280c:	f3bf 8f6f 	isb	sy
 8002810:	f3bf 8f4f 	dsb	sy
 8002814:	61fb      	str	r3, [r7, #28]
}
 8002816:	bf00      	nop
 8002818:	e7fe      	b.n	8002818 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800281a:	f001 f999 	bl	8003b50 <xTaskGetSchedulerState>
 800281e:	4603      	mov	r3, r0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d102      	bne.n	800282a <xQueueReceive+0x6e>
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d101      	bne.n	800282e <xQueueReceive+0x72>
 800282a:	2301      	movs	r3, #1
 800282c:	e000      	b.n	8002830 <xQueueReceive+0x74>
 800282e:	2300      	movs	r3, #0
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <xQueueReceive+0x8e>
	__asm volatile
 8002834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	61bb      	str	r3, [r7, #24]
}
 8002846:	bf00      	nop
 8002848:	e7fe      	b.n	8002848 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800284a:	f001 ffdb 	bl	8004804 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800284e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002852:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002856:	2b00      	cmp	r3, #0
 8002858:	d01f      	beq.n	800289a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800285a:	68b9      	ldr	r1, [r7, #8]
 800285c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800285e:	f000 fa1b 	bl	8002c98 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002864:	1e5a      	subs	r2, r3, #1
 8002866:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002868:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800286a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800286c:	691b      	ldr	r3, [r3, #16]
 800286e:	2b00      	cmp	r3, #0
 8002870:	d00f      	beq.n	8002892 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002874:	3310      	adds	r3, #16
 8002876:	4618      	mov	r0, r3
 8002878:	f000 ff98 	bl	80037ac <xTaskRemoveFromEventList>
 800287c:	4603      	mov	r3, r0
 800287e:	2b00      	cmp	r3, #0
 8002880:	d007      	beq.n	8002892 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002882:	4b3d      	ldr	r3, [pc, #244]	; (8002978 <xQueueReceive+0x1bc>)
 8002884:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002888:	601a      	str	r2, [r3, #0]
 800288a:	f3bf 8f4f 	dsb	sy
 800288e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002892:	f001 ffe7 	bl	8004864 <vPortExitCritical>
				return pdPASS;
 8002896:	2301      	movs	r3, #1
 8002898:	e069      	b.n	800296e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d103      	bne.n	80028a8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80028a0:	f001 ffe0 	bl	8004864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80028a4:	2300      	movs	r3, #0
 80028a6:	e062      	b.n	800296e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80028a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d106      	bne.n	80028bc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80028ae:	f107 0310 	add.w	r3, r7, #16
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 ffde 	bl	8003874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80028b8:	2301      	movs	r3, #1
 80028ba:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80028bc:	f001 ffd2 	bl	8004864 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80028c0:	f000 fd4a 	bl	8003358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80028c4:	f001 ff9e 	bl	8004804 <vPortEnterCritical>
 80028c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80028ce:	b25b      	sxtb	r3, r3
 80028d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028d4:	d103      	bne.n	80028de <xQueueReceive+0x122>
 80028d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028e4:	b25b      	sxtb	r3, r3
 80028e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ea:	d103      	bne.n	80028f4 <xQueueReceive+0x138>
 80028ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80028ee:	2200      	movs	r2, #0
 80028f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028f4:	f001 ffb6 	bl	8004864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80028f8:	1d3a      	adds	r2, r7, #4
 80028fa:	f107 0310 	add.w	r3, r7, #16
 80028fe:	4611      	mov	r1, r2
 8002900:	4618      	mov	r0, r3
 8002902:	f000 ffcd 	bl	80038a0 <xTaskCheckForTimeOut>
 8002906:	4603      	mov	r3, r0
 8002908:	2b00      	cmp	r3, #0
 800290a:	d123      	bne.n	8002954 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800290c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800290e:	f000 fa3b 	bl	8002d88 <prvIsQueueEmpty>
 8002912:	4603      	mov	r3, r0
 8002914:	2b00      	cmp	r3, #0
 8002916:	d017      	beq.n	8002948 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291a:	3324      	adds	r3, #36	; 0x24
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	4611      	mov	r1, r2
 8002920:	4618      	mov	r0, r3
 8002922:	f000 fef3 	bl	800370c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002928:	f000 f9dc 	bl	8002ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800292c:	f000 fd22 	bl	8003374 <xTaskResumeAll>
 8002930:	4603      	mov	r3, r0
 8002932:	2b00      	cmp	r3, #0
 8002934:	d189      	bne.n	800284a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002936:	4b10      	ldr	r3, [pc, #64]	; (8002978 <xQueueReceive+0x1bc>)
 8002938:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800293c:	601a      	str	r2, [r3, #0]
 800293e:	f3bf 8f4f 	dsb	sy
 8002942:	f3bf 8f6f 	isb	sy
 8002946:	e780      	b.n	800284a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002948:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800294a:	f000 f9cb 	bl	8002ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800294e:	f000 fd11 	bl	8003374 <xTaskResumeAll>
 8002952:	e77a      	b.n	800284a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002954:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002956:	f000 f9c5 	bl	8002ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800295a:	f000 fd0b 	bl	8003374 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800295e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002960:	f000 fa12 	bl	8002d88 <prvIsQueueEmpty>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	f43f af6f 	beq.w	800284a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800296c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800296e:	4618      	mov	r0, r3
 8002970:	3730      	adds	r7, #48	; 0x30
 8002972:	46bd      	mov	sp, r7
 8002974:	bd80      	pop	{r7, pc}
 8002976:	bf00      	nop
 8002978:	e000ed04 	.word	0xe000ed04

0800297c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800297c:	b580      	push	{r7, lr}
 800297e:	b08e      	sub	sp, #56	; 0x38
 8002980:	af00      	add	r7, sp, #0
 8002982:	6078      	str	r0, [r7, #4]
 8002984:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002986:	2300      	movs	r3, #0
 8002988:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800298e:	2300      	movs	r3, #0
 8002990:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002994:	2b00      	cmp	r3, #0
 8002996:	d10a      	bne.n	80029ae <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	623b      	str	r3, [r7, #32]
}
 80029aa:	bf00      	nop
 80029ac:	e7fe      	b.n	80029ac <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80029ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d00a      	beq.n	80029cc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80029b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ba:	f383 8811 	msr	BASEPRI, r3
 80029be:	f3bf 8f6f 	isb	sy
 80029c2:	f3bf 8f4f 	dsb	sy
 80029c6:	61fb      	str	r3, [r7, #28]
}
 80029c8:	bf00      	nop
 80029ca:	e7fe      	b.n	80029ca <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80029cc:	f001 f8c0 	bl	8003b50 <xTaskGetSchedulerState>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d102      	bne.n	80029dc <xQueueSemaphoreTake+0x60>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d101      	bne.n	80029e0 <xQueueSemaphoreTake+0x64>
 80029dc:	2301      	movs	r3, #1
 80029de:	e000      	b.n	80029e2 <xQueueSemaphoreTake+0x66>
 80029e0:	2300      	movs	r3, #0
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d10a      	bne.n	80029fc <xQueueSemaphoreTake+0x80>
	__asm volatile
 80029e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80029ea:	f383 8811 	msr	BASEPRI, r3
 80029ee:	f3bf 8f6f 	isb	sy
 80029f2:	f3bf 8f4f 	dsb	sy
 80029f6:	61bb      	str	r3, [r7, #24]
}
 80029f8:	bf00      	nop
 80029fa:	e7fe      	b.n	80029fa <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80029fc:	f001 ff02 	bl	8004804 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002a00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a02:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a04:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d024      	beq.n	8002a56 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002a0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a0e:	1e5a      	subs	r2, r3, #1
 8002a10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a12:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002a14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d104      	bne.n	8002a26 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002a1c:	f001 fa0e 	bl	8003e3c <pvTaskIncrementMutexHeldCount>
 8002a20:	4602      	mov	r2, r0
 8002a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a24:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d00f      	beq.n	8002a4e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002a30:	3310      	adds	r3, #16
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 feba 	bl	80037ac <xTaskRemoveFromEventList>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d007      	beq.n	8002a4e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002a3e:	4b54      	ldr	r3, [pc, #336]	; (8002b90 <xQueueSemaphoreTake+0x214>)
 8002a40:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002a44:	601a      	str	r2, [r3, #0]
 8002a46:	f3bf 8f4f 	dsb	sy
 8002a4a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002a4e:	f001 ff09 	bl	8004864 <vPortExitCritical>
				return pdPASS;
 8002a52:	2301      	movs	r3, #1
 8002a54:	e097      	b.n	8002b86 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d111      	bne.n	8002a80 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002a5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d00a      	beq.n	8002a78 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a66:	f383 8811 	msr	BASEPRI, r3
 8002a6a:	f3bf 8f6f 	isb	sy
 8002a6e:	f3bf 8f4f 	dsb	sy
 8002a72:	617b      	str	r3, [r7, #20]
}
 8002a74:	bf00      	nop
 8002a76:	e7fe      	b.n	8002a76 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002a78:	f001 fef4 	bl	8004864 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	e082      	b.n	8002b86 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002a80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d106      	bne.n	8002a94 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002a86:	f107 030c 	add.w	r3, r7, #12
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f000 fef2 	bl	8003874 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002a90:	2301      	movs	r3, #1
 8002a92:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002a94:	f001 fee6 	bl	8004864 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002a98:	f000 fc5e 	bl	8003358 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002a9c:	f001 feb2 	bl	8004804 <vPortEnterCritical>
 8002aa0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002aa6:	b25b      	sxtb	r3, r3
 8002aa8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002aac:	d103      	bne.n	8002ab6 <xQueueSemaphoreTake+0x13a>
 8002aae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab0:	2200      	movs	r2, #0
 8002ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002abc:	b25b      	sxtb	r3, r3
 8002abe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ac2:	d103      	bne.n	8002acc <xQueueSemaphoreTake+0x150>
 8002ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002acc:	f001 feca 	bl	8004864 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002ad0:	463a      	mov	r2, r7
 8002ad2:	f107 030c 	add.w	r3, r7, #12
 8002ad6:	4611      	mov	r1, r2
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f000 fee1 	bl	80038a0 <xTaskCheckForTimeOut>
 8002ade:	4603      	mov	r3, r0
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d132      	bne.n	8002b4a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ae4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ae6:	f000 f94f 	bl	8002d88 <prvIsQueueEmpty>
 8002aea:	4603      	mov	r3, r0
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d026      	beq.n	8002b3e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002af0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d109      	bne.n	8002b0c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002af8:	f001 fe84 	bl	8004804 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002afc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 f843 	bl	8003b8c <xTaskPriorityInherit>
 8002b06:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002b08:	f001 feac 	bl	8004864 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002b0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b0e:	3324      	adds	r3, #36	; 0x24
 8002b10:	683a      	ldr	r2, [r7, #0]
 8002b12:	4611      	mov	r1, r2
 8002b14:	4618      	mov	r0, r3
 8002b16:	f000 fdf9 	bl	800370c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002b1a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b1c:	f000 f8e2 	bl	8002ce4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002b20:	f000 fc28 	bl	8003374 <xTaskResumeAll>
 8002b24:	4603      	mov	r3, r0
 8002b26:	2b00      	cmp	r3, #0
 8002b28:	f47f af68 	bne.w	80029fc <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002b2c:	4b18      	ldr	r3, [pc, #96]	; (8002b90 <xQueueSemaphoreTake+0x214>)
 8002b2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b32:	601a      	str	r2, [r3, #0]
 8002b34:	f3bf 8f4f 	dsb	sy
 8002b38:	f3bf 8f6f 	isb	sy
 8002b3c:	e75e      	b.n	80029fc <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002b3e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b40:	f000 f8d0 	bl	8002ce4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002b44:	f000 fc16 	bl	8003374 <xTaskResumeAll>
 8002b48:	e758      	b.n	80029fc <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002b4a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b4c:	f000 f8ca 	bl	8002ce4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002b50:	f000 fc10 	bl	8003374 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002b54:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b56:	f000 f917 	bl	8002d88 <prvIsQueueEmpty>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	f43f af4d 	beq.w	80029fc <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8002b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d00d      	beq.n	8002b84 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8002b68:	f001 fe4c 	bl	8004804 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8002b6c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002b6e:	f000 f811 	bl	8002b94 <prvGetDisinheritPriorityAfterTimeout>
 8002b72:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8002b74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b76:	689b      	ldr	r3, [r3, #8]
 8002b78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f001 f8dc 	bl	8003d38 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8002b80:	f001 fe70 	bl	8004864 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002b84:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002b86:	4618      	mov	r0, r3
 8002b88:	3738      	adds	r7, #56	; 0x38
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	bd80      	pop	{r7, pc}
 8002b8e:	bf00      	nop
 8002b90:	e000ed04 	.word	0xe000ed04

08002b94 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8002b94:	b480      	push	{r7}
 8002b96:	b085      	sub	sp, #20
 8002b98:	af00      	add	r7, sp, #0
 8002b9a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d006      	beq.n	8002bb2 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8002bae:	60fb      	str	r3, [r7, #12]
 8002bb0:	e001      	b.n	8002bb6 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8002bb6:	68fb      	ldr	r3, [r7, #12]
	}
 8002bb8:	4618      	mov	r0, r3
 8002bba:	3714      	adds	r7, #20
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc2:	4770      	bx	lr

08002bc4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b086      	sub	sp, #24
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	60f8      	str	r0, [r7, #12]
 8002bcc:	60b9      	str	r1, [r7, #8]
 8002bce:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bd8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d10d      	bne.n	8002bfe <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d14d      	bne.n	8002c86 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f001 f834 	bl	8003c5c <xTaskPriorityDisinherit>
 8002bf4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	609a      	str	r2, [r3, #8]
 8002bfc:	e043      	b.n	8002c86 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d119      	bne.n	8002c38 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6858      	ldr	r0, [r3, #4]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c0c:	461a      	mov	r2, r3
 8002c0e:	68b9      	ldr	r1, [r7, #8]
 8002c10:	f002 f92a 	bl	8004e68 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	685a      	ldr	r2, [r3, #4]
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c1c:	441a      	add	r2, r3
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c22:	68fb      	ldr	r3, [r7, #12]
 8002c24:	685a      	ldr	r2, [r3, #4]
 8002c26:	68fb      	ldr	r3, [r7, #12]
 8002c28:	689b      	ldr	r3, [r3, #8]
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d32b      	bcc.n	8002c86 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002c2e:	68fb      	ldr	r3, [r7, #12]
 8002c30:	681a      	ldr	r2, [r3, #0]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	605a      	str	r2, [r3, #4]
 8002c36:	e026      	b.n	8002c86 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	68d8      	ldr	r0, [r3, #12]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c40:	461a      	mov	r2, r3
 8002c42:	68b9      	ldr	r1, [r7, #8]
 8002c44:	f002 f910 	bl	8004e68 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	68da      	ldr	r2, [r3, #12]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	425b      	negs	r3, r3
 8002c52:	441a      	add	r2, r3
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	68da      	ldr	r2, [r3, #12]
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	d207      	bcs.n	8002c74 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	689a      	ldr	r2, [r3, #8]
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6c:	425b      	negs	r3, r3
 8002c6e:	441a      	add	r2, r3
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	2b02      	cmp	r3, #2
 8002c78:	d105      	bne.n	8002c86 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002c7a:	693b      	ldr	r3, [r7, #16]
 8002c7c:	2b00      	cmp	r3, #0
 8002c7e:	d002      	beq.n	8002c86 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002c80:	693b      	ldr	r3, [r7, #16]
 8002c82:	3b01      	subs	r3, #1
 8002c84:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002c86:	693b      	ldr	r3, [r7, #16]
 8002c88:	1c5a      	adds	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002c8e:	697b      	ldr	r3, [r7, #20]
}
 8002c90:	4618      	mov	r0, r3
 8002c92:	3718      	adds	r7, #24
 8002c94:	46bd      	mov	sp, r7
 8002c96:	bd80      	pop	{r7, pc}

08002c98 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b082      	sub	sp, #8
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d018      	beq.n	8002cdc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	68da      	ldr	r2, [r3, #12]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	441a      	add	r2, r3
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	68da      	ldr	r2, [r3, #12]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	429a      	cmp	r2, r3
 8002cc2:	d303      	bcc.n	8002ccc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681a      	ldr	r2, [r3, #0]
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	68d9      	ldr	r1, [r3, #12]
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd4:	461a      	mov	r2, r3
 8002cd6:	6838      	ldr	r0, [r7, #0]
 8002cd8:	f002 f8c6 	bl	8004e68 <memcpy>
	}
}
 8002cdc:	bf00      	nop
 8002cde:	3708      	adds	r7, #8
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}

08002ce4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b084      	sub	sp, #16
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8002cec:	f001 fd8a 	bl	8004804 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002cf6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002cf8:	e011      	b.n	8002d1e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d012      	beq.n	8002d28 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	3324      	adds	r3, #36	; 0x24
 8002d06:	4618      	mov	r0, r3
 8002d08:	f000 fd50 	bl	80037ac <xTaskRemoveFromEventList>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002d12:	f000 fe27 	bl	8003964 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002d16:	7bfb      	ldrb	r3, [r7, #15]
 8002d18:	3b01      	subs	r3, #1
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002d1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	dce9      	bgt.n	8002cfa <prvUnlockQueue+0x16>
 8002d26:	e000      	b.n	8002d2a <prvUnlockQueue+0x46>
					break;
 8002d28:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	22ff      	movs	r2, #255	; 0xff
 8002d2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002d32:	f001 fd97 	bl	8004864 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002d36:	f001 fd65 	bl	8004804 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d40:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d42:	e011      	b.n	8002d68 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d012      	beq.n	8002d72 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	3310      	adds	r3, #16
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fd2b 	bl	80037ac <xTaskRemoveFromEventList>
 8002d56:	4603      	mov	r3, r0
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d001      	beq.n	8002d60 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8002d5c:	f000 fe02 	bl	8003964 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8002d60:	7bbb      	ldrb	r3, [r7, #14]
 8002d62:	3b01      	subs	r3, #1
 8002d64:	b2db      	uxtb	r3, r3
 8002d66:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002d68:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	dce9      	bgt.n	8002d44 <prvUnlockQueue+0x60>
 8002d70:	e000      	b.n	8002d74 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8002d72:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	22ff      	movs	r2, #255	; 0xff
 8002d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8002d7c:	f001 fd72 	bl	8004864 <vPortExitCritical>
}
 8002d80:	bf00      	nop
 8002d82:	3710      	adds	r7, #16
 8002d84:	46bd      	mov	sp, r7
 8002d86:	bd80      	pop	{r7, pc}

08002d88 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8002d88:	b580      	push	{r7, lr}
 8002d8a:	b084      	sub	sp, #16
 8002d8c:	af00      	add	r7, sp, #0
 8002d8e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002d90:	f001 fd38 	bl	8004804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d98:	2b00      	cmp	r3, #0
 8002d9a:	d102      	bne.n	8002da2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8002d9c:	2301      	movs	r3, #1
 8002d9e:	60fb      	str	r3, [r7, #12]
 8002da0:	e001      	b.n	8002da6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8002da2:	2300      	movs	r3, #0
 8002da4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002da6:	f001 fd5d 	bl	8004864 <vPortExitCritical>

	return xReturn;
 8002daa:	68fb      	ldr	r3, [r7, #12]
}
 8002dac:	4618      	mov	r0, r3
 8002dae:	3710      	adds	r7, #16
 8002db0:	46bd      	mov	sp, r7
 8002db2:	bd80      	pop	{r7, pc}

08002db4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b084      	sub	sp, #16
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8002dbc:	f001 fd22 	bl	8004804 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002dc8:	429a      	cmp	r2, r3
 8002dca:	d102      	bne.n	8002dd2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8002dcc:	2301      	movs	r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
 8002dd0:	e001      	b.n	8002dd6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002dd6:	f001 fd45 	bl	8004864 <vPortExitCritical>

	return xReturn;
 8002dda:	68fb      	ldr	r3, [r7, #12]
}
 8002ddc:	4618      	mov	r0, r3
 8002dde:	3710      	adds	r7, #16
 8002de0:	46bd      	mov	sp, r7
 8002de2:	bd80      	pop	{r7, pc}

08002de4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	6078      	str	r0, [r7, #4]
 8002dec:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002dee:	2300      	movs	r3, #0
 8002df0:	60fb      	str	r3, [r7, #12]
 8002df2:	e014      	b.n	8002e1e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002df4:	4a0f      	ldr	r2, [pc, #60]	; (8002e34 <vQueueAddToRegistry+0x50>)
 8002df6:	68fb      	ldr	r3, [r7, #12]
 8002df8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d10b      	bne.n	8002e18 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002e00:	490c      	ldr	r1, [pc, #48]	; (8002e34 <vQueueAddToRegistry+0x50>)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	683a      	ldr	r2, [r7, #0]
 8002e06:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8002e0a:	4a0a      	ldr	r2, [pc, #40]	; (8002e34 <vQueueAddToRegistry+0x50>)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	4413      	add	r3, r2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002e16:	e006      	b.n	8002e26 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	3301      	adds	r3, #1
 8002e1c:	60fb      	str	r3, [r7, #12]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2b07      	cmp	r3, #7
 8002e22:	d9e7      	bls.n	8002df4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002e24:	bf00      	nop
 8002e26:	bf00      	nop
 8002e28:	3714      	adds	r7, #20
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000864 	.word	0x20000864

08002e38 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002e38:	b580      	push	{r7, lr}
 8002e3a:	b086      	sub	sp, #24
 8002e3c:	af00      	add	r7, sp, #0
 8002e3e:	60f8      	str	r0, [r7, #12]
 8002e40:	60b9      	str	r1, [r7, #8]
 8002e42:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002e48:	f001 fcdc 	bl	8004804 <vPortEnterCritical>
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e52:	b25b      	sxtb	r3, r3
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d103      	bne.n	8002e62 <vQueueWaitForMessageRestricted+0x2a>
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e62:	697b      	ldr	r3, [r7, #20]
 8002e64:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e68:	b25b      	sxtb	r3, r3
 8002e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e6e:	d103      	bne.n	8002e78 <vQueueWaitForMessageRestricted+0x40>
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	2200      	movs	r2, #0
 8002e74:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e78:	f001 fcf4 	bl	8004864 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d106      	bne.n	8002e92 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8002e84:	697b      	ldr	r3, [r7, #20]
 8002e86:	3324      	adds	r3, #36	; 0x24
 8002e88:	687a      	ldr	r2, [r7, #4]
 8002e8a:	68b9      	ldr	r1, [r7, #8]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f000 fc61 	bl	8003754 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8002e92:	6978      	ldr	r0, [r7, #20]
 8002e94:	f7ff ff26 	bl	8002ce4 <prvUnlockQueue>
	}
 8002e98:	bf00      	nop
 8002e9a:	3718      	adds	r7, #24
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bd80      	pop	{r7, pc}

08002ea0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b08e      	sub	sp, #56	; 0x38
 8002ea4:	af04      	add	r7, sp, #16
 8002ea6:	60f8      	str	r0, [r7, #12]
 8002ea8:	60b9      	str	r1, [r7, #8]
 8002eaa:	607a      	str	r2, [r7, #4]
 8002eac:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8002eae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d10a      	bne.n	8002eca <xTaskCreateStatic+0x2a>
	__asm volatile
 8002eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002eb8:	f383 8811 	msr	BASEPRI, r3
 8002ebc:	f3bf 8f6f 	isb	sy
 8002ec0:	f3bf 8f4f 	dsb	sy
 8002ec4:	623b      	str	r3, [r7, #32]
}
 8002ec6:	bf00      	nop
 8002ec8:	e7fe      	b.n	8002ec8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8002eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d10a      	bne.n	8002ee6 <xTaskCreateStatic+0x46>
	__asm volatile
 8002ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed4:	f383 8811 	msr	BASEPRI, r3
 8002ed8:	f3bf 8f6f 	isb	sy
 8002edc:	f3bf 8f4f 	dsb	sy
 8002ee0:	61fb      	str	r3, [r7, #28]
}
 8002ee2:	bf00      	nop
 8002ee4:	e7fe      	b.n	8002ee4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002ee6:	23bc      	movs	r3, #188	; 0xbc
 8002ee8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8002eea:	693b      	ldr	r3, [r7, #16]
 8002eec:	2bbc      	cmp	r3, #188	; 0xbc
 8002eee:	d00a      	beq.n	8002f06 <xTaskCreateStatic+0x66>
	__asm volatile
 8002ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ef4:	f383 8811 	msr	BASEPRI, r3
 8002ef8:	f3bf 8f6f 	isb	sy
 8002efc:	f3bf 8f4f 	dsb	sy
 8002f00:	61bb      	str	r3, [r7, #24]
}
 8002f02:	bf00      	nop
 8002f04:	e7fe      	b.n	8002f04 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002f06:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002f08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d01e      	beq.n	8002f4c <xTaskCreateStatic+0xac>
 8002f0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d01b      	beq.n	8002f4c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002f14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002f16:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002f18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f1a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8002f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f20:	2202      	movs	r2, #2
 8002f22:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002f26:	2300      	movs	r3, #0
 8002f28:	9303      	str	r3, [sp, #12]
 8002f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f2c:	9302      	str	r3, [sp, #8]
 8002f2e:	f107 0314 	add.w	r3, r7, #20
 8002f32:	9301      	str	r3, [sp, #4]
 8002f34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f36:	9300      	str	r3, [sp, #0]
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	687a      	ldr	r2, [r7, #4]
 8002f3c:	68b9      	ldr	r1, [r7, #8]
 8002f3e:	68f8      	ldr	r0, [r7, #12]
 8002f40:	f000 f850 	bl	8002fe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002f44:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002f46:	f000 f8f3 	bl	8003130 <prvAddNewTaskToReadyList>
 8002f4a:	e001      	b.n	8002f50 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002f50:	697b      	ldr	r3, [r7, #20]
	}
 8002f52:	4618      	mov	r0, r3
 8002f54:	3728      	adds	r7, #40	; 0x28
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b08c      	sub	sp, #48	; 0x30
 8002f5e:	af04      	add	r7, sp, #16
 8002f60:	60f8      	str	r0, [r7, #12]
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	603b      	str	r3, [r7, #0]
 8002f66:	4613      	mov	r3, r2
 8002f68:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8002f6a:	88fb      	ldrh	r3, [r7, #6]
 8002f6c:	009b      	lsls	r3, r3, #2
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f001 fd6a 	bl	8004a48 <pvPortMalloc>
 8002f74:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8002f76:	697b      	ldr	r3, [r7, #20]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d00e      	beq.n	8002f9a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8002f7c:	20bc      	movs	r0, #188	; 0xbc
 8002f7e:	f001 fd63 	bl	8004a48 <pvPortMalloc>
 8002f82:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d003      	beq.n	8002f92 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	697a      	ldr	r2, [r7, #20]
 8002f8e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f90:	e005      	b.n	8002f9e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8002f92:	6978      	ldr	r0, [r7, #20]
 8002f94:	f001 fe24 	bl	8004be0 <vPortFree>
 8002f98:	e001      	b.n	8002f9e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8002f9a:	2300      	movs	r3, #0
 8002f9c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d017      	beq.n	8002fd4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8002fa4:	69fb      	ldr	r3, [r7, #28]
 8002fa6:	2200      	movs	r2, #0
 8002fa8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8002fac:	88fa      	ldrh	r2, [r7, #6]
 8002fae:	2300      	movs	r3, #0
 8002fb0:	9303      	str	r3, [sp, #12]
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	9302      	str	r3, [sp, #8]
 8002fb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb8:	9301      	str	r3, [sp, #4]
 8002fba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fbc:	9300      	str	r3, [sp, #0]
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68b9      	ldr	r1, [r7, #8]
 8002fc2:	68f8      	ldr	r0, [r7, #12]
 8002fc4:	f000 f80e 	bl	8002fe4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002fc8:	69f8      	ldr	r0, [r7, #28]
 8002fca:	f000 f8b1 	bl	8003130 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002fce:	2301      	movs	r3, #1
 8002fd0:	61bb      	str	r3, [r7, #24]
 8002fd2:	e002      	b.n	8002fda <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002fd4:	f04f 33ff 	mov.w	r3, #4294967295
 8002fd8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002fda:	69bb      	ldr	r3, [r7, #24]
	}
 8002fdc:	4618      	mov	r0, r3
 8002fde:	3720      	adds	r7, #32
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	bd80      	pop	{r7, pc}

08002fe4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002fe4:	b580      	push	{r7, lr}
 8002fe6:	b088      	sub	sp, #32
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	60f8      	str	r0, [r7, #12]
 8002fec:	60b9      	str	r1, [r7, #8]
 8002fee:	607a      	str	r2, [r7, #4]
 8002ff0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ff4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	21a5      	movs	r1, #165	; 0xa5
 8002ffe:	f001 ff41 	bl	8004e84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003004:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800300c:	3b01      	subs	r3, #1
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	4413      	add	r3, r2
 8003012:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003014:	69bb      	ldr	r3, [r7, #24]
 8003016:	f023 0307 	bic.w	r3, r3, #7
 800301a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800301c:	69bb      	ldr	r3, [r7, #24]
 800301e:	f003 0307 	and.w	r3, r3, #7
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00a      	beq.n	800303c <prvInitialiseNewTask+0x58>
	__asm volatile
 8003026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800302a:	f383 8811 	msr	BASEPRI, r3
 800302e:	f3bf 8f6f 	isb	sy
 8003032:	f3bf 8f4f 	dsb	sy
 8003036:	617b      	str	r3, [r7, #20]
}
 8003038:	bf00      	nop
 800303a:	e7fe      	b.n	800303a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800303c:	68bb      	ldr	r3, [r7, #8]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d01f      	beq.n	8003082 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003042:	2300      	movs	r3, #0
 8003044:	61fb      	str	r3, [r7, #28]
 8003046:	e012      	b.n	800306e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003048:	68ba      	ldr	r2, [r7, #8]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	4413      	add	r3, r2
 800304e:	7819      	ldrb	r1, [r3, #0]
 8003050:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	4413      	add	r3, r2
 8003056:	3334      	adds	r3, #52	; 0x34
 8003058:	460a      	mov	r2, r1
 800305a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800305c:	68ba      	ldr	r2, [r7, #8]
 800305e:	69fb      	ldr	r3, [r7, #28]
 8003060:	4413      	add	r3, r2
 8003062:	781b      	ldrb	r3, [r3, #0]
 8003064:	2b00      	cmp	r3, #0
 8003066:	d006      	beq.n	8003076 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	3301      	adds	r3, #1
 800306c:	61fb      	str	r3, [r7, #28]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	2b0f      	cmp	r3, #15
 8003072:	d9e9      	bls.n	8003048 <prvInitialiseNewTask+0x64>
 8003074:	e000      	b.n	8003078 <prvInitialiseNewTask+0x94>
			{
				break;
 8003076:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8003078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800307a:	2200      	movs	r2, #0
 800307c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003080:	e003      	b.n	800308a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8003082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003084:	2200      	movs	r2, #0
 8003086:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800308a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800308c:	2b37      	cmp	r3, #55	; 0x37
 800308e:	d901      	bls.n	8003094 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8003090:	2337      	movs	r3, #55	; 0x37
 8003092:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8003094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003096:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003098:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800309a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800309c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800309e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80030a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a2:	2200      	movs	r2, #0
 80030a4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80030a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030a8:	3304      	adds	r3, #4
 80030aa:	4618      	mov	r0, r3
 80030ac:	f7fe ff64 	bl	8001f78 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80030b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b2:	3318      	adds	r3, #24
 80030b4:	4618      	mov	r0, r3
 80030b6:	f7fe ff5f 	bl	8001f78 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80030ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030be:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80030c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030c2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80030c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80030ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80030ce:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80030d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030d2:	2200      	movs	r2, #0
 80030d4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	2200      	movs	r2, #0
 80030dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80030e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e2:	3354      	adds	r3, #84	; 0x54
 80030e4:	2260      	movs	r2, #96	; 0x60
 80030e6:	2100      	movs	r1, #0
 80030e8:	4618      	mov	r0, r3
 80030ea:	f001 fecb 	bl	8004e84 <memset>
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	4a0c      	ldr	r2, [pc, #48]	; (8003124 <prvInitialiseNewTask+0x140>)
 80030f2:	659a      	str	r2, [r3, #88]	; 0x58
 80030f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f6:	4a0c      	ldr	r2, [pc, #48]	; (8003128 <prvInitialiseNewTask+0x144>)
 80030f8:	65da      	str	r2, [r3, #92]	; 0x5c
 80030fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030fc:	4a0b      	ldr	r2, [pc, #44]	; (800312c <prvInitialiseNewTask+0x148>)
 80030fe:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	68f9      	ldr	r1, [r7, #12]
 8003104:	69b8      	ldr	r0, [r7, #24]
 8003106:	f001 fa4f 	bl	80045a8 <pxPortInitialiseStack>
 800310a:	4602      	mov	r2, r0
 800310c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800310e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003110:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003112:	2b00      	cmp	r3, #0
 8003114:	d002      	beq.n	800311c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8003116:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003118:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800311a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800311c:	bf00      	nop
 800311e:	3720      	adds	r7, #32
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}
 8003124:	080050f0 	.word	0x080050f0
 8003128:	08005110 	.word	0x08005110
 800312c:	080050d0 	.word	0x080050d0

08003130 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b082      	sub	sp, #8
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003138:	f001 fb64 	bl	8004804 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800313c:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <prvAddNewTaskToReadyList+0xc4>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	4a2c      	ldr	r2, [pc, #176]	; (80031f4 <prvAddNewTaskToReadyList+0xc4>)
 8003144:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8003146:	4b2c      	ldr	r3, [pc, #176]	; (80031f8 <prvAddNewTaskToReadyList+0xc8>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d109      	bne.n	8003162 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800314e:	4a2a      	ldr	r2, [pc, #168]	; (80031f8 <prvAddNewTaskToReadyList+0xc8>)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003154:	4b27      	ldr	r3, [pc, #156]	; (80031f4 <prvAddNewTaskToReadyList+0xc4>)
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d110      	bne.n	800317e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800315c:	f000 fc26 	bl	80039ac <prvInitialiseTaskLists>
 8003160:	e00d      	b.n	800317e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8003162:	4b26      	ldr	r3, [pc, #152]	; (80031fc <prvAddNewTaskToReadyList+0xcc>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d109      	bne.n	800317e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800316a:	4b23      	ldr	r3, [pc, #140]	; (80031f8 <prvAddNewTaskToReadyList+0xc8>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003174:	429a      	cmp	r2, r3
 8003176:	d802      	bhi.n	800317e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8003178:	4a1f      	ldr	r2, [pc, #124]	; (80031f8 <prvAddNewTaskToReadyList+0xc8>)
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800317e:	4b20      	ldr	r3, [pc, #128]	; (8003200 <prvAddNewTaskToReadyList+0xd0>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	3301      	adds	r3, #1
 8003184:	4a1e      	ldr	r2, [pc, #120]	; (8003200 <prvAddNewTaskToReadyList+0xd0>)
 8003186:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8003188:	4b1d      	ldr	r3, [pc, #116]	; (8003200 <prvAddNewTaskToReadyList+0xd0>)
 800318a:	681a      	ldr	r2, [r3, #0]
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003194:	4b1b      	ldr	r3, [pc, #108]	; (8003204 <prvAddNewTaskToReadyList+0xd4>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	429a      	cmp	r2, r3
 800319a:	d903      	bls.n	80031a4 <prvAddNewTaskToReadyList+0x74>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031a0:	4a18      	ldr	r2, [pc, #96]	; (8003204 <prvAddNewTaskToReadyList+0xd4>)
 80031a2:	6013      	str	r3, [r2, #0]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031a8:	4613      	mov	r3, r2
 80031aa:	009b      	lsls	r3, r3, #2
 80031ac:	4413      	add	r3, r2
 80031ae:	009b      	lsls	r3, r3, #2
 80031b0:	4a15      	ldr	r2, [pc, #84]	; (8003208 <prvAddNewTaskToReadyList+0xd8>)
 80031b2:	441a      	add	r2, r3
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	3304      	adds	r3, #4
 80031b8:	4619      	mov	r1, r3
 80031ba:	4610      	mov	r0, r2
 80031bc:	f7fe fee9 	bl	8001f92 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80031c0:	f001 fb50 	bl	8004864 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80031c4:	4b0d      	ldr	r3, [pc, #52]	; (80031fc <prvAddNewTaskToReadyList+0xcc>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d00e      	beq.n	80031ea <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80031cc:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <prvAddNewTaskToReadyList+0xc8>)
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031d6:	429a      	cmp	r2, r3
 80031d8:	d207      	bcs.n	80031ea <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80031da:	4b0c      	ldr	r3, [pc, #48]	; (800320c <prvAddNewTaskToReadyList+0xdc>)
 80031dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80031e0:	601a      	str	r2, [r3, #0]
 80031e2:	f3bf 8f4f 	dsb	sy
 80031e6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80031ea:	bf00      	nop
 80031ec:	3708      	adds	r7, #8
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}
 80031f2:	bf00      	nop
 80031f4:	20000d78 	.word	0x20000d78
 80031f8:	200008a4 	.word	0x200008a4
 80031fc:	20000d84 	.word	0x20000d84
 8003200:	20000d94 	.word	0x20000d94
 8003204:	20000d80 	.word	0x20000d80
 8003208:	200008a8 	.word	0x200008a8
 800320c:	e000ed04 	.word	0xe000ed04

08003210 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003210:	b580      	push	{r7, lr}
 8003212:	b084      	sub	sp, #16
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003218:	2300      	movs	r3, #0
 800321a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2b00      	cmp	r3, #0
 8003220:	d017      	beq.n	8003252 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <vTaskDelay+0x60>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	2b00      	cmp	r3, #0
 8003228:	d00a      	beq.n	8003240 <vTaskDelay+0x30>
	__asm volatile
 800322a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322e:	f383 8811 	msr	BASEPRI, r3
 8003232:	f3bf 8f6f 	isb	sy
 8003236:	f3bf 8f4f 	dsb	sy
 800323a:	60bb      	str	r3, [r7, #8]
}
 800323c:	bf00      	nop
 800323e:	e7fe      	b.n	800323e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003240:	f000 f88a 	bl	8003358 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003244:	2100      	movs	r1, #0
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f000 fe0c 	bl	8003e64 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800324c:	f000 f892 	bl	8003374 <xTaskResumeAll>
 8003250:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	2b00      	cmp	r3, #0
 8003256:	d107      	bne.n	8003268 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8003258:	4b06      	ldr	r3, [pc, #24]	; (8003274 <vTaskDelay+0x64>)
 800325a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800325e:	601a      	str	r2, [r3, #0]
 8003260:	f3bf 8f4f 	dsb	sy
 8003264:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003268:	bf00      	nop
 800326a:	3710      	adds	r7, #16
 800326c:	46bd      	mov	sp, r7
 800326e:	bd80      	pop	{r7, pc}
 8003270:	20000da0 	.word	0x20000da0
 8003274:	e000ed04 	.word	0xe000ed04

08003278 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8003278:	b580      	push	{r7, lr}
 800327a:	b08a      	sub	sp, #40	; 0x28
 800327c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800327e:	2300      	movs	r3, #0
 8003280:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8003282:	2300      	movs	r3, #0
 8003284:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8003286:	463a      	mov	r2, r7
 8003288:	1d39      	adds	r1, r7, #4
 800328a:	f107 0308 	add.w	r3, r7, #8
 800328e:	4618      	mov	r0, r3
 8003290:	f7fe fe1e 	bl	8001ed0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8003294:	6839      	ldr	r1, [r7, #0]
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	68ba      	ldr	r2, [r7, #8]
 800329a:	9202      	str	r2, [sp, #8]
 800329c:	9301      	str	r3, [sp, #4]
 800329e:	2300      	movs	r3, #0
 80032a0:	9300      	str	r3, [sp, #0]
 80032a2:	2300      	movs	r3, #0
 80032a4:	460a      	mov	r2, r1
 80032a6:	4924      	ldr	r1, [pc, #144]	; (8003338 <vTaskStartScheduler+0xc0>)
 80032a8:	4824      	ldr	r0, [pc, #144]	; (800333c <vTaskStartScheduler+0xc4>)
 80032aa:	f7ff fdf9 	bl	8002ea0 <xTaskCreateStatic>
 80032ae:	4603      	mov	r3, r0
 80032b0:	4a23      	ldr	r2, [pc, #140]	; (8003340 <vTaskStartScheduler+0xc8>)
 80032b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80032b4:	4b22      	ldr	r3, [pc, #136]	; (8003340 <vTaskStartScheduler+0xc8>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d002      	beq.n	80032c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80032bc:	2301      	movs	r3, #1
 80032be:	617b      	str	r3, [r7, #20]
 80032c0:	e001      	b.n	80032c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80032c2:	2300      	movs	r3, #0
 80032c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	2b01      	cmp	r3, #1
 80032ca:	d102      	bne.n	80032d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80032cc:	f000 fe1e 	bl	8003f0c <xTimerCreateTimerTask>
 80032d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80032d2:	697b      	ldr	r3, [r7, #20]
 80032d4:	2b01      	cmp	r3, #1
 80032d6:	d11b      	bne.n	8003310 <vTaskStartScheduler+0x98>
	__asm volatile
 80032d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032dc:	f383 8811 	msr	BASEPRI, r3
 80032e0:	f3bf 8f6f 	isb	sy
 80032e4:	f3bf 8f4f 	dsb	sy
 80032e8:	613b      	str	r3, [r7, #16]
}
 80032ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80032ec:	4b15      	ldr	r3, [pc, #84]	; (8003344 <vTaskStartScheduler+0xcc>)
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3354      	adds	r3, #84	; 0x54
 80032f2:	4a15      	ldr	r2, [pc, #84]	; (8003348 <vTaskStartScheduler+0xd0>)
 80032f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80032f6:	4b15      	ldr	r3, [pc, #84]	; (800334c <vTaskStartScheduler+0xd4>)
 80032f8:	f04f 32ff 	mov.w	r2, #4294967295
 80032fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80032fe:	4b14      	ldr	r3, [pc, #80]	; (8003350 <vTaskStartScheduler+0xd8>)
 8003300:	2201      	movs	r2, #1
 8003302:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003304:	4b13      	ldr	r3, [pc, #76]	; (8003354 <vTaskStartScheduler+0xdc>)
 8003306:	2200      	movs	r2, #0
 8003308:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800330a:	f001 f9d9 	bl	80046c0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800330e:	e00e      	b.n	800332e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003310:	697b      	ldr	r3, [r7, #20]
 8003312:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003316:	d10a      	bne.n	800332e <vTaskStartScheduler+0xb6>
	__asm volatile
 8003318:	f04f 0350 	mov.w	r3, #80	; 0x50
 800331c:	f383 8811 	msr	BASEPRI, r3
 8003320:	f3bf 8f6f 	isb	sy
 8003324:	f3bf 8f4f 	dsb	sy
 8003328:	60fb      	str	r3, [r7, #12]
}
 800332a:	bf00      	nop
 800332c:	e7fe      	b.n	800332c <vTaskStartScheduler+0xb4>
}
 800332e:	bf00      	nop
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}
 8003336:	bf00      	nop
 8003338:	08005048 	.word	0x08005048
 800333c:	0800397d 	.word	0x0800397d
 8003340:	20000d9c 	.word	0x20000d9c
 8003344:	200008a4 	.word	0x200008a4
 8003348:	20000010 	.word	0x20000010
 800334c:	20000d98 	.word	0x20000d98
 8003350:	20000d84 	.word	0x20000d84
 8003354:	20000d7c 	.word	0x20000d7c

08003358 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8003358:	b480      	push	{r7}
 800335a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800335c:	4b04      	ldr	r3, [pc, #16]	; (8003370 <vTaskSuspendAll+0x18>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3301      	adds	r3, #1
 8003362:	4a03      	ldr	r2, [pc, #12]	; (8003370 <vTaskSuspendAll+0x18>)
 8003364:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8003366:	bf00      	nop
 8003368:	46bd      	mov	sp, r7
 800336a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336e:	4770      	bx	lr
 8003370:	20000da0 	.word	0x20000da0

08003374 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8003374:	b580      	push	{r7, lr}
 8003376:	b084      	sub	sp, #16
 8003378:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800337a:	2300      	movs	r3, #0
 800337c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800337e:	2300      	movs	r3, #0
 8003380:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8003382:	4b42      	ldr	r3, [pc, #264]	; (800348c <xTaskResumeAll+0x118>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d10a      	bne.n	80033a0 <xTaskResumeAll+0x2c>
	__asm volatile
 800338a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800338e:	f383 8811 	msr	BASEPRI, r3
 8003392:	f3bf 8f6f 	isb	sy
 8003396:	f3bf 8f4f 	dsb	sy
 800339a:	603b      	str	r3, [r7, #0]
}
 800339c:	bf00      	nop
 800339e:	e7fe      	b.n	800339e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80033a0:	f001 fa30 	bl	8004804 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80033a4:	4b39      	ldr	r3, [pc, #228]	; (800348c <xTaskResumeAll+0x118>)
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	3b01      	subs	r3, #1
 80033aa:	4a38      	ldr	r2, [pc, #224]	; (800348c <xTaskResumeAll+0x118>)
 80033ac:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80033ae:	4b37      	ldr	r3, [pc, #220]	; (800348c <xTaskResumeAll+0x118>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d162      	bne.n	800347c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80033b6:	4b36      	ldr	r3, [pc, #216]	; (8003490 <xTaskResumeAll+0x11c>)
 80033b8:	681b      	ldr	r3, [r3, #0]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d05e      	beq.n	800347c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80033be:	e02f      	b.n	8003420 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80033c0:	4b34      	ldr	r3, [pc, #208]	; (8003494 <xTaskResumeAll+0x120>)
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	68db      	ldr	r3, [r3, #12]
 80033c6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80033c8:	68fb      	ldr	r3, [r7, #12]
 80033ca:	3318      	adds	r3, #24
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fe fe3d 	bl	800204c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	3304      	adds	r3, #4
 80033d6:	4618      	mov	r0, r3
 80033d8:	f7fe fe38 	bl	800204c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033e0:	4b2d      	ldr	r3, [pc, #180]	; (8003498 <xTaskResumeAll+0x124>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d903      	bls.n	80033f0 <xTaskResumeAll+0x7c>
 80033e8:	68fb      	ldr	r3, [r7, #12]
 80033ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033ec:	4a2a      	ldr	r2, [pc, #168]	; (8003498 <xTaskResumeAll+0x124>)
 80033ee:	6013      	str	r3, [r2, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033f4:	4613      	mov	r3, r2
 80033f6:	009b      	lsls	r3, r3, #2
 80033f8:	4413      	add	r3, r2
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	4a27      	ldr	r2, [pc, #156]	; (800349c <xTaskResumeAll+0x128>)
 80033fe:	441a      	add	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f7fe fdc3 	bl	8001f92 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003410:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <xTaskResumeAll+0x12c>)
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800341a:	4b22      	ldr	r3, [pc, #136]	; (80034a4 <xTaskResumeAll+0x130>)
 800341c:	2201      	movs	r2, #1
 800341e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003420:	4b1c      	ldr	r3, [pc, #112]	; (8003494 <xTaskResumeAll+0x120>)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1cb      	bne.n	80033c0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d001      	beq.n	8003432 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800342e:	f000 fb5f 	bl	8003af0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003432:	4b1d      	ldr	r3, [pc, #116]	; (80034a8 <xTaskResumeAll+0x134>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d010      	beq.n	8003460 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800343e:	f000 f847 	bl	80034d0 <xTaskIncrementTick>
 8003442:	4603      	mov	r3, r0
 8003444:	2b00      	cmp	r3, #0
 8003446:	d002      	beq.n	800344e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003448:	4b16      	ldr	r3, [pc, #88]	; (80034a4 <xTaskResumeAll+0x130>)
 800344a:	2201      	movs	r2, #1
 800344c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	3b01      	subs	r3, #1
 8003452:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f1      	bne.n	800343e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800345a:	4b13      	ldr	r3, [pc, #76]	; (80034a8 <xTaskResumeAll+0x134>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003460:	4b10      	ldr	r3, [pc, #64]	; (80034a4 <xTaskResumeAll+0x130>)
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	2b00      	cmp	r3, #0
 8003466:	d009      	beq.n	800347c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003468:	2301      	movs	r3, #1
 800346a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800346c:	4b0f      	ldr	r3, [pc, #60]	; (80034ac <xTaskResumeAll+0x138>)
 800346e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003472:	601a      	str	r2, [r3, #0]
 8003474:	f3bf 8f4f 	dsb	sy
 8003478:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800347c:	f001 f9f2 	bl	8004864 <vPortExitCritical>

	return xAlreadyYielded;
 8003480:	68bb      	ldr	r3, [r7, #8]
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}
 800348a:	bf00      	nop
 800348c:	20000da0 	.word	0x20000da0
 8003490:	20000d78 	.word	0x20000d78
 8003494:	20000d38 	.word	0x20000d38
 8003498:	20000d80 	.word	0x20000d80
 800349c:	200008a8 	.word	0x200008a8
 80034a0:	200008a4 	.word	0x200008a4
 80034a4:	20000d8c 	.word	0x20000d8c
 80034a8:	20000d88 	.word	0x20000d88
 80034ac:	e000ed04 	.word	0xe000ed04

080034b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80034b0:	b480      	push	{r7}
 80034b2:	b083      	sub	sp, #12
 80034b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80034b6:	4b05      	ldr	r3, [pc, #20]	; (80034cc <xTaskGetTickCount+0x1c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80034bc:	687b      	ldr	r3, [r7, #4]
}
 80034be:	4618      	mov	r0, r3
 80034c0:	370c      	adds	r7, #12
 80034c2:	46bd      	mov	sp, r7
 80034c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c8:	4770      	bx	lr
 80034ca:	bf00      	nop
 80034cc:	20000d7c 	.word	0x20000d7c

080034d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80034d0:	b580      	push	{r7, lr}
 80034d2:	b086      	sub	sp, #24
 80034d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80034d6:	2300      	movs	r3, #0
 80034d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80034da:	4b4f      	ldr	r3, [pc, #316]	; (8003618 <xTaskIncrementTick+0x148>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	2b00      	cmp	r3, #0
 80034e0:	f040 808f 	bne.w	8003602 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80034e4:	4b4d      	ldr	r3, [pc, #308]	; (800361c <xTaskIncrementTick+0x14c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3301      	adds	r3, #1
 80034ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80034ec:	4a4b      	ldr	r2, [pc, #300]	; (800361c <xTaskIncrementTick+0x14c>)
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80034f2:	693b      	ldr	r3, [r7, #16]
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d120      	bne.n	800353a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80034f8:	4b49      	ldr	r3, [pc, #292]	; (8003620 <xTaskIncrementTick+0x150>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d00a      	beq.n	8003518 <xTaskIncrementTick+0x48>
	__asm volatile
 8003502:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003506:	f383 8811 	msr	BASEPRI, r3
 800350a:	f3bf 8f6f 	isb	sy
 800350e:	f3bf 8f4f 	dsb	sy
 8003512:	603b      	str	r3, [r7, #0]
}
 8003514:	bf00      	nop
 8003516:	e7fe      	b.n	8003516 <xTaskIncrementTick+0x46>
 8003518:	4b41      	ldr	r3, [pc, #260]	; (8003620 <xTaskIncrementTick+0x150>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	60fb      	str	r3, [r7, #12]
 800351e:	4b41      	ldr	r3, [pc, #260]	; (8003624 <xTaskIncrementTick+0x154>)
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	4a3f      	ldr	r2, [pc, #252]	; (8003620 <xTaskIncrementTick+0x150>)
 8003524:	6013      	str	r3, [r2, #0]
 8003526:	4a3f      	ldr	r2, [pc, #252]	; (8003624 <xTaskIncrementTick+0x154>)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6013      	str	r3, [r2, #0]
 800352c:	4b3e      	ldr	r3, [pc, #248]	; (8003628 <xTaskIncrementTick+0x158>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	3301      	adds	r3, #1
 8003532:	4a3d      	ldr	r2, [pc, #244]	; (8003628 <xTaskIncrementTick+0x158>)
 8003534:	6013      	str	r3, [r2, #0]
 8003536:	f000 fadb 	bl	8003af0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800353a:	4b3c      	ldr	r3, [pc, #240]	; (800362c <xTaskIncrementTick+0x15c>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	693a      	ldr	r2, [r7, #16]
 8003540:	429a      	cmp	r2, r3
 8003542:	d349      	bcc.n	80035d8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003544:	4b36      	ldr	r3, [pc, #216]	; (8003620 <xTaskIncrementTick+0x150>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b00      	cmp	r3, #0
 800354c:	d104      	bne.n	8003558 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800354e:	4b37      	ldr	r3, [pc, #220]	; (800362c <xTaskIncrementTick+0x15c>)
 8003550:	f04f 32ff 	mov.w	r2, #4294967295
 8003554:	601a      	str	r2, [r3, #0]
					break;
 8003556:	e03f      	b.n	80035d8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003558:	4b31      	ldr	r3, [pc, #196]	; (8003620 <xTaskIncrementTick+0x150>)
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	68db      	ldr	r3, [r3, #12]
 800355e:	68db      	ldr	r3, [r3, #12]
 8003560:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003562:	68bb      	ldr	r3, [r7, #8]
 8003564:	685b      	ldr	r3, [r3, #4]
 8003566:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003568:	693a      	ldr	r2, [r7, #16]
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	429a      	cmp	r2, r3
 800356e:	d203      	bcs.n	8003578 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003570:	4a2e      	ldr	r2, [pc, #184]	; (800362c <xTaskIncrementTick+0x15c>)
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003576:	e02f      	b.n	80035d8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	3304      	adds	r3, #4
 800357c:	4618      	mov	r0, r3
 800357e:	f7fe fd65 	bl	800204c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003582:	68bb      	ldr	r3, [r7, #8]
 8003584:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003586:	2b00      	cmp	r3, #0
 8003588:	d004      	beq.n	8003594 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800358a:	68bb      	ldr	r3, [r7, #8]
 800358c:	3318      	adds	r3, #24
 800358e:	4618      	mov	r0, r3
 8003590:	f7fe fd5c 	bl	800204c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003598:	4b25      	ldr	r3, [pc, #148]	; (8003630 <xTaskIncrementTick+0x160>)
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	429a      	cmp	r2, r3
 800359e:	d903      	bls.n	80035a8 <xTaskIncrementTick+0xd8>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035a4:	4a22      	ldr	r2, [pc, #136]	; (8003630 <xTaskIncrementTick+0x160>)
 80035a6:	6013      	str	r3, [r2, #0]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035ac:	4613      	mov	r3, r2
 80035ae:	009b      	lsls	r3, r3, #2
 80035b0:	4413      	add	r3, r2
 80035b2:	009b      	lsls	r3, r3, #2
 80035b4:	4a1f      	ldr	r2, [pc, #124]	; (8003634 <xTaskIncrementTick+0x164>)
 80035b6:	441a      	add	r2, r3
 80035b8:	68bb      	ldr	r3, [r7, #8]
 80035ba:	3304      	adds	r3, #4
 80035bc:	4619      	mov	r1, r3
 80035be:	4610      	mov	r0, r2
 80035c0:	f7fe fce7 	bl	8001f92 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035c8:	4b1b      	ldr	r3, [pc, #108]	; (8003638 <xTaskIncrementTick+0x168>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035ce:	429a      	cmp	r2, r3
 80035d0:	d3b8      	bcc.n	8003544 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80035d2:	2301      	movs	r3, #1
 80035d4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80035d6:	e7b5      	b.n	8003544 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80035d8:	4b17      	ldr	r3, [pc, #92]	; (8003638 <xTaskIncrementTick+0x168>)
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80035de:	4915      	ldr	r1, [pc, #84]	; (8003634 <xTaskIncrementTick+0x164>)
 80035e0:	4613      	mov	r3, r2
 80035e2:	009b      	lsls	r3, r3, #2
 80035e4:	4413      	add	r3, r2
 80035e6:	009b      	lsls	r3, r3, #2
 80035e8:	440b      	add	r3, r1
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	2b01      	cmp	r3, #1
 80035ee:	d901      	bls.n	80035f4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80035f0:	2301      	movs	r3, #1
 80035f2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80035f4:	4b11      	ldr	r3, [pc, #68]	; (800363c <xTaskIncrementTick+0x16c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d007      	beq.n	800360c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80035fc:	2301      	movs	r3, #1
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e004      	b.n	800360c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003602:	4b0f      	ldr	r3, [pc, #60]	; (8003640 <xTaskIncrementTick+0x170>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	3301      	adds	r3, #1
 8003608:	4a0d      	ldr	r2, [pc, #52]	; (8003640 <xTaskIncrementTick+0x170>)
 800360a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800360c:	697b      	ldr	r3, [r7, #20]
}
 800360e:	4618      	mov	r0, r3
 8003610:	3718      	adds	r7, #24
 8003612:	46bd      	mov	sp, r7
 8003614:	bd80      	pop	{r7, pc}
 8003616:	bf00      	nop
 8003618:	20000da0 	.word	0x20000da0
 800361c:	20000d7c 	.word	0x20000d7c
 8003620:	20000d30 	.word	0x20000d30
 8003624:	20000d34 	.word	0x20000d34
 8003628:	20000d90 	.word	0x20000d90
 800362c:	20000d98 	.word	0x20000d98
 8003630:	20000d80 	.word	0x20000d80
 8003634:	200008a8 	.word	0x200008a8
 8003638:	200008a4 	.word	0x200008a4
 800363c:	20000d8c 	.word	0x20000d8c
 8003640:	20000d88 	.word	0x20000d88

08003644 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003644:	b480      	push	{r7}
 8003646:	b085      	sub	sp, #20
 8003648:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800364a:	4b2a      	ldr	r3, [pc, #168]	; (80036f4 <vTaskSwitchContext+0xb0>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	2b00      	cmp	r3, #0
 8003650:	d003      	beq.n	800365a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003652:	4b29      	ldr	r3, [pc, #164]	; (80036f8 <vTaskSwitchContext+0xb4>)
 8003654:	2201      	movs	r2, #1
 8003656:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003658:	e046      	b.n	80036e8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 800365a:	4b27      	ldr	r3, [pc, #156]	; (80036f8 <vTaskSwitchContext+0xb4>)
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003660:	4b26      	ldr	r3, [pc, #152]	; (80036fc <vTaskSwitchContext+0xb8>)
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	60fb      	str	r3, [r7, #12]
 8003666:	e010      	b.n	800368a <vTaskSwitchContext+0x46>
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d10a      	bne.n	8003684 <vTaskSwitchContext+0x40>
	__asm volatile
 800366e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003672:	f383 8811 	msr	BASEPRI, r3
 8003676:	f3bf 8f6f 	isb	sy
 800367a:	f3bf 8f4f 	dsb	sy
 800367e:	607b      	str	r3, [r7, #4]
}
 8003680:	bf00      	nop
 8003682:	e7fe      	b.n	8003682 <vTaskSwitchContext+0x3e>
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	3b01      	subs	r3, #1
 8003688:	60fb      	str	r3, [r7, #12]
 800368a:	491d      	ldr	r1, [pc, #116]	; (8003700 <vTaskSwitchContext+0xbc>)
 800368c:	68fa      	ldr	r2, [r7, #12]
 800368e:	4613      	mov	r3, r2
 8003690:	009b      	lsls	r3, r3, #2
 8003692:	4413      	add	r3, r2
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	440b      	add	r3, r1
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d0e4      	beq.n	8003668 <vTaskSwitchContext+0x24>
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4613      	mov	r3, r2
 80036a2:	009b      	lsls	r3, r3, #2
 80036a4:	4413      	add	r3, r2
 80036a6:	009b      	lsls	r3, r3, #2
 80036a8:	4a15      	ldr	r2, [pc, #84]	; (8003700 <vTaskSwitchContext+0xbc>)
 80036aa:	4413      	add	r3, r2
 80036ac:	60bb      	str	r3, [r7, #8]
 80036ae:	68bb      	ldr	r3, [r7, #8]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	685a      	ldr	r2, [r3, #4]
 80036b4:	68bb      	ldr	r3, [r7, #8]
 80036b6:	605a      	str	r2, [r3, #4]
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	685a      	ldr	r2, [r3, #4]
 80036bc:	68bb      	ldr	r3, [r7, #8]
 80036be:	3308      	adds	r3, #8
 80036c0:	429a      	cmp	r2, r3
 80036c2:	d104      	bne.n	80036ce <vTaskSwitchContext+0x8a>
 80036c4:	68bb      	ldr	r3, [r7, #8]
 80036c6:	685b      	ldr	r3, [r3, #4]
 80036c8:	685a      	ldr	r2, [r3, #4]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	605a      	str	r2, [r3, #4]
 80036ce:	68bb      	ldr	r3, [r7, #8]
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	68db      	ldr	r3, [r3, #12]
 80036d4:	4a0b      	ldr	r2, [pc, #44]	; (8003704 <vTaskSwitchContext+0xc0>)
 80036d6:	6013      	str	r3, [r2, #0]
 80036d8:	4a08      	ldr	r2, [pc, #32]	; (80036fc <vTaskSwitchContext+0xb8>)
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80036de:	4b09      	ldr	r3, [pc, #36]	; (8003704 <vTaskSwitchContext+0xc0>)
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	3354      	adds	r3, #84	; 0x54
 80036e4:	4a08      	ldr	r2, [pc, #32]	; (8003708 <vTaskSwitchContext+0xc4>)
 80036e6:	6013      	str	r3, [r2, #0]
}
 80036e8:	bf00      	nop
 80036ea:	3714      	adds	r7, #20
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	20000da0 	.word	0x20000da0
 80036f8:	20000d8c 	.word	0x20000d8c
 80036fc:	20000d80 	.word	0x20000d80
 8003700:	200008a8 	.word	0x200008a8
 8003704:	200008a4 	.word	0x200008a4
 8003708:	20000010 	.word	0x20000010

0800370c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b084      	sub	sp, #16
 8003710:	af00      	add	r7, sp, #0
 8003712:	6078      	str	r0, [r7, #4]
 8003714:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d10a      	bne.n	8003732 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800371c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003720:	f383 8811 	msr	BASEPRI, r3
 8003724:	f3bf 8f6f 	isb	sy
 8003728:	f3bf 8f4f 	dsb	sy
 800372c:	60fb      	str	r3, [r7, #12]
}
 800372e:	bf00      	nop
 8003730:	e7fe      	b.n	8003730 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003732:	4b07      	ldr	r3, [pc, #28]	; (8003750 <vTaskPlaceOnEventList+0x44>)
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	3318      	adds	r3, #24
 8003738:	4619      	mov	r1, r3
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7fe fc4d 	bl	8001fda <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003740:	2101      	movs	r1, #1
 8003742:	6838      	ldr	r0, [r7, #0]
 8003744:	f000 fb8e 	bl	8003e64 <prvAddCurrentTaskToDelayedList>
}
 8003748:	bf00      	nop
 800374a:	3710      	adds	r7, #16
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}
 8003750:	200008a4 	.word	0x200008a4

08003754 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003754:	b580      	push	{r7, lr}
 8003756:	b086      	sub	sp, #24
 8003758:	af00      	add	r7, sp, #0
 800375a:	60f8      	str	r0, [r7, #12]
 800375c:	60b9      	str	r1, [r7, #8]
 800375e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10a      	bne.n	800377c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003766:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376a:	f383 8811 	msr	BASEPRI, r3
 800376e:	f3bf 8f6f 	isb	sy
 8003772:	f3bf 8f4f 	dsb	sy
 8003776:	617b      	str	r3, [r7, #20]
}
 8003778:	bf00      	nop
 800377a:	e7fe      	b.n	800377a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800377c:	4b0a      	ldr	r3, [pc, #40]	; (80037a8 <vTaskPlaceOnEventListRestricted+0x54>)
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	3318      	adds	r3, #24
 8003782:	4619      	mov	r1, r3
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f7fe fc04 	bl	8001f92 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2b00      	cmp	r3, #0
 800378e:	d002      	beq.n	8003796 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003790:	f04f 33ff 	mov.w	r3, #4294967295
 8003794:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003796:	6879      	ldr	r1, [r7, #4]
 8003798:	68b8      	ldr	r0, [r7, #8]
 800379a:	f000 fb63 	bl	8003e64 <prvAddCurrentTaskToDelayedList>
	}
 800379e:	bf00      	nop
 80037a0:	3718      	adds	r7, #24
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	200008a4 	.word	0x200008a4

080037ac <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80037ac:	b580      	push	{r7, lr}
 80037ae:	b086      	sub	sp, #24
 80037b0:	af00      	add	r7, sp, #0
 80037b2:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	68db      	ldr	r3, [r3, #12]
 80037b8:	68db      	ldr	r3, [r3, #12]
 80037ba:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80037bc:	693b      	ldr	r3, [r7, #16]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d10a      	bne.n	80037d8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80037c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	60fb      	str	r3, [r7, #12]
}
 80037d4:	bf00      	nop
 80037d6:	e7fe      	b.n	80037d6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	3318      	adds	r3, #24
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fe fc35 	bl	800204c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80037e2:	4b1e      	ldr	r3, [pc, #120]	; (800385c <xTaskRemoveFromEventList+0xb0>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d11d      	bne.n	8003826 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	3304      	adds	r3, #4
 80037ee:	4618      	mov	r0, r3
 80037f0:	f7fe fc2c 	bl	800204c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80037f4:	693b      	ldr	r3, [r7, #16]
 80037f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037f8:	4b19      	ldr	r3, [pc, #100]	; (8003860 <xTaskRemoveFromEventList+0xb4>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	429a      	cmp	r2, r3
 80037fe:	d903      	bls.n	8003808 <xTaskRemoveFromEventList+0x5c>
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003804:	4a16      	ldr	r2, [pc, #88]	; (8003860 <xTaskRemoveFromEventList+0xb4>)
 8003806:	6013      	str	r3, [r2, #0]
 8003808:	693b      	ldr	r3, [r7, #16]
 800380a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800380c:	4613      	mov	r3, r2
 800380e:	009b      	lsls	r3, r3, #2
 8003810:	4413      	add	r3, r2
 8003812:	009b      	lsls	r3, r3, #2
 8003814:	4a13      	ldr	r2, [pc, #76]	; (8003864 <xTaskRemoveFromEventList+0xb8>)
 8003816:	441a      	add	r2, r3
 8003818:	693b      	ldr	r3, [r7, #16]
 800381a:	3304      	adds	r3, #4
 800381c:	4619      	mov	r1, r3
 800381e:	4610      	mov	r0, r2
 8003820:	f7fe fbb7 	bl	8001f92 <vListInsertEnd>
 8003824:	e005      	b.n	8003832 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003826:	693b      	ldr	r3, [r7, #16]
 8003828:	3318      	adds	r3, #24
 800382a:	4619      	mov	r1, r3
 800382c:	480e      	ldr	r0, [pc, #56]	; (8003868 <xTaskRemoveFromEventList+0xbc>)
 800382e:	f7fe fbb0 	bl	8001f92 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003832:	693b      	ldr	r3, [r7, #16]
 8003834:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003836:	4b0d      	ldr	r3, [pc, #52]	; (800386c <xTaskRemoveFromEventList+0xc0>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800383c:	429a      	cmp	r2, r3
 800383e:	d905      	bls.n	800384c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003840:	2301      	movs	r3, #1
 8003842:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003844:	4b0a      	ldr	r3, [pc, #40]	; (8003870 <xTaskRemoveFromEventList+0xc4>)
 8003846:	2201      	movs	r2, #1
 8003848:	601a      	str	r2, [r3, #0]
 800384a:	e001      	b.n	8003850 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800384c:	2300      	movs	r3, #0
 800384e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003850:	697b      	ldr	r3, [r7, #20]
}
 8003852:	4618      	mov	r0, r3
 8003854:	3718      	adds	r7, #24
 8003856:	46bd      	mov	sp, r7
 8003858:	bd80      	pop	{r7, pc}
 800385a:	bf00      	nop
 800385c:	20000da0 	.word	0x20000da0
 8003860:	20000d80 	.word	0x20000d80
 8003864:	200008a8 	.word	0x200008a8
 8003868:	20000d38 	.word	0x20000d38
 800386c:	200008a4 	.word	0x200008a4
 8003870:	20000d8c 	.word	0x20000d8c

08003874 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003874:	b480      	push	{r7}
 8003876:	b083      	sub	sp, #12
 8003878:	af00      	add	r7, sp, #0
 800387a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800387c:	4b06      	ldr	r3, [pc, #24]	; (8003898 <vTaskInternalSetTimeOutState+0x24>)
 800387e:	681a      	ldr	r2, [r3, #0]
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003884:	4b05      	ldr	r3, [pc, #20]	; (800389c <vTaskInternalSetTimeOutState+0x28>)
 8003886:	681a      	ldr	r2, [r3, #0]
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	605a      	str	r2, [r3, #4]
}
 800388c:	bf00      	nop
 800388e:	370c      	adds	r7, #12
 8003890:	46bd      	mov	sp, r7
 8003892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003896:	4770      	bx	lr
 8003898:	20000d90 	.word	0x20000d90
 800389c:	20000d7c 	.word	0x20000d7c

080038a0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80038a0:	b580      	push	{r7, lr}
 80038a2:	b088      	sub	sp, #32
 80038a4:	af00      	add	r7, sp, #0
 80038a6:	6078      	str	r0, [r7, #4]
 80038a8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d10a      	bne.n	80038c6 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80038b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b4:	f383 8811 	msr	BASEPRI, r3
 80038b8:	f3bf 8f6f 	isb	sy
 80038bc:	f3bf 8f4f 	dsb	sy
 80038c0:	613b      	str	r3, [r7, #16]
}
 80038c2:	bf00      	nop
 80038c4:	e7fe      	b.n	80038c4 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d10a      	bne.n	80038e2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80038cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d0:	f383 8811 	msr	BASEPRI, r3
 80038d4:	f3bf 8f6f 	isb	sy
 80038d8:	f3bf 8f4f 	dsb	sy
 80038dc:	60fb      	str	r3, [r7, #12]
}
 80038de:	bf00      	nop
 80038e0:	e7fe      	b.n	80038e0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80038e2:	f000 ff8f 	bl	8004804 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80038e6:	4b1d      	ldr	r3, [pc, #116]	; (800395c <xTaskCheckForTimeOut+0xbc>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	69ba      	ldr	r2, [r7, #24]
 80038f2:	1ad3      	subs	r3, r2, r3
 80038f4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80038fe:	d102      	bne.n	8003906 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003900:	2300      	movs	r3, #0
 8003902:	61fb      	str	r3, [r7, #28]
 8003904:	e023      	b.n	800394e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681a      	ldr	r2, [r3, #0]
 800390a:	4b15      	ldr	r3, [pc, #84]	; (8003960 <xTaskCheckForTimeOut+0xc0>)
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d007      	beq.n	8003922 <xTaskCheckForTimeOut+0x82>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	69ba      	ldr	r2, [r7, #24]
 8003918:	429a      	cmp	r2, r3
 800391a:	d302      	bcc.n	8003922 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800391c:	2301      	movs	r3, #1
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	e015      	b.n	800394e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	429a      	cmp	r2, r3
 800392a:	d20b      	bcs.n	8003944 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	681a      	ldr	r2, [r3, #0]
 8003930:	697b      	ldr	r3, [r7, #20]
 8003932:	1ad2      	subs	r2, r2, r3
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003938:	6878      	ldr	r0, [r7, #4]
 800393a:	f7ff ff9b 	bl	8003874 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800393e:	2300      	movs	r3, #0
 8003940:	61fb      	str	r3, [r7, #28]
 8003942:	e004      	b.n	800394e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	2200      	movs	r2, #0
 8003948:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800394a:	2301      	movs	r3, #1
 800394c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800394e:	f000 ff89 	bl	8004864 <vPortExitCritical>

	return xReturn;
 8003952:	69fb      	ldr	r3, [r7, #28]
}
 8003954:	4618      	mov	r0, r3
 8003956:	3720      	adds	r7, #32
 8003958:	46bd      	mov	sp, r7
 800395a:	bd80      	pop	{r7, pc}
 800395c:	20000d7c 	.word	0x20000d7c
 8003960:	20000d90 	.word	0x20000d90

08003964 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003964:	b480      	push	{r7}
 8003966:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003968:	4b03      	ldr	r3, [pc, #12]	; (8003978 <vTaskMissedYield+0x14>)
 800396a:	2201      	movs	r2, #1
 800396c:	601a      	str	r2, [r3, #0]
}
 800396e:	bf00      	nop
 8003970:	46bd      	mov	sp, r7
 8003972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003976:	4770      	bx	lr
 8003978:	20000d8c 	.word	0x20000d8c

0800397c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800397c:	b580      	push	{r7, lr}
 800397e:	b082      	sub	sp, #8
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003984:	f000 f852 	bl	8003a2c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003988:	4b06      	ldr	r3, [pc, #24]	; (80039a4 <prvIdleTask+0x28>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b01      	cmp	r3, #1
 800398e:	d9f9      	bls.n	8003984 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003990:	4b05      	ldr	r3, [pc, #20]	; (80039a8 <prvIdleTask+0x2c>)
 8003992:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003996:	601a      	str	r2, [r3, #0]
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80039a0:	e7f0      	b.n	8003984 <prvIdleTask+0x8>
 80039a2:	bf00      	nop
 80039a4:	200008a8 	.word	0x200008a8
 80039a8:	e000ed04 	.word	0xe000ed04

080039ac <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b082      	sub	sp, #8
 80039b0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039b2:	2300      	movs	r3, #0
 80039b4:	607b      	str	r3, [r7, #4]
 80039b6:	e00c      	b.n	80039d2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80039b8:	687a      	ldr	r2, [r7, #4]
 80039ba:	4613      	mov	r3, r2
 80039bc:	009b      	lsls	r3, r3, #2
 80039be:	4413      	add	r3, r2
 80039c0:	009b      	lsls	r3, r3, #2
 80039c2:	4a12      	ldr	r2, [pc, #72]	; (8003a0c <prvInitialiseTaskLists+0x60>)
 80039c4:	4413      	add	r3, r2
 80039c6:	4618      	mov	r0, r3
 80039c8:	f7fe fab6 	bl	8001f38 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	3301      	adds	r3, #1
 80039d0:	607b      	str	r3, [r7, #4]
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	2b37      	cmp	r3, #55	; 0x37
 80039d6:	d9ef      	bls.n	80039b8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80039d8:	480d      	ldr	r0, [pc, #52]	; (8003a10 <prvInitialiseTaskLists+0x64>)
 80039da:	f7fe faad 	bl	8001f38 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80039de:	480d      	ldr	r0, [pc, #52]	; (8003a14 <prvInitialiseTaskLists+0x68>)
 80039e0:	f7fe faaa 	bl	8001f38 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80039e4:	480c      	ldr	r0, [pc, #48]	; (8003a18 <prvInitialiseTaskLists+0x6c>)
 80039e6:	f7fe faa7 	bl	8001f38 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80039ea:	480c      	ldr	r0, [pc, #48]	; (8003a1c <prvInitialiseTaskLists+0x70>)
 80039ec:	f7fe faa4 	bl	8001f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80039f0:	480b      	ldr	r0, [pc, #44]	; (8003a20 <prvInitialiseTaskLists+0x74>)
 80039f2:	f7fe faa1 	bl	8001f38 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80039f6:	4b0b      	ldr	r3, [pc, #44]	; (8003a24 <prvInitialiseTaskLists+0x78>)
 80039f8:	4a05      	ldr	r2, [pc, #20]	; (8003a10 <prvInitialiseTaskLists+0x64>)
 80039fa:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80039fc:	4b0a      	ldr	r3, [pc, #40]	; (8003a28 <prvInitialiseTaskLists+0x7c>)
 80039fe:	4a05      	ldr	r2, [pc, #20]	; (8003a14 <prvInitialiseTaskLists+0x68>)
 8003a00:	601a      	str	r2, [r3, #0]
}
 8003a02:	bf00      	nop
 8003a04:	3708      	adds	r7, #8
 8003a06:	46bd      	mov	sp, r7
 8003a08:	bd80      	pop	{r7, pc}
 8003a0a:	bf00      	nop
 8003a0c:	200008a8 	.word	0x200008a8
 8003a10:	20000d08 	.word	0x20000d08
 8003a14:	20000d1c 	.word	0x20000d1c
 8003a18:	20000d38 	.word	0x20000d38
 8003a1c:	20000d4c 	.word	0x20000d4c
 8003a20:	20000d64 	.word	0x20000d64
 8003a24:	20000d30 	.word	0x20000d30
 8003a28:	20000d34 	.word	0x20000d34

08003a2c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003a2c:	b580      	push	{r7, lr}
 8003a2e:	b082      	sub	sp, #8
 8003a30:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a32:	e019      	b.n	8003a68 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003a34:	f000 fee6 	bl	8004804 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a38:	4b10      	ldr	r3, [pc, #64]	; (8003a7c <prvCheckTasksWaitingTermination+0x50>)
 8003a3a:	68db      	ldr	r3, [r3, #12]
 8003a3c:	68db      	ldr	r3, [r3, #12]
 8003a3e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4618      	mov	r0, r3
 8003a46:	f7fe fb01 	bl	800204c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003a4a:	4b0d      	ldr	r3, [pc, #52]	; (8003a80 <prvCheckTasksWaitingTermination+0x54>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	3b01      	subs	r3, #1
 8003a50:	4a0b      	ldr	r2, [pc, #44]	; (8003a80 <prvCheckTasksWaitingTermination+0x54>)
 8003a52:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003a54:	4b0b      	ldr	r3, [pc, #44]	; (8003a84 <prvCheckTasksWaitingTermination+0x58>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	3b01      	subs	r3, #1
 8003a5a:	4a0a      	ldr	r2, [pc, #40]	; (8003a84 <prvCheckTasksWaitingTermination+0x58>)
 8003a5c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003a5e:	f000 ff01 	bl	8004864 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003a62:	6878      	ldr	r0, [r7, #4]
 8003a64:	f000 f810 	bl	8003a88 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003a68:	4b06      	ldr	r3, [pc, #24]	; (8003a84 <prvCheckTasksWaitingTermination+0x58>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d1e1      	bne.n	8003a34 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003a70:	bf00      	nop
 8003a72:	bf00      	nop
 8003a74:	3708      	adds	r7, #8
 8003a76:	46bd      	mov	sp, r7
 8003a78:	bd80      	pop	{r7, pc}
 8003a7a:	bf00      	nop
 8003a7c:	20000d4c 	.word	0x20000d4c
 8003a80:	20000d78 	.word	0x20000d78
 8003a84:	20000d60 	.word	0x20000d60

08003a88 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b084      	sub	sp, #16
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	3354      	adds	r3, #84	; 0x54
 8003a94:	4618      	mov	r0, r3
 8003a96:	f001 fa0b 	bl	8004eb0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d108      	bne.n	8003ab6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	f001 f899 	bl	8004be0 <vPortFree>
				vPortFree( pxTCB );
 8003aae:	6878      	ldr	r0, [r7, #4]
 8003ab0:	f001 f896 	bl	8004be0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003ab4:	e018      	b.n	8003ae8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d103      	bne.n	8003ac8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003ac0:	6878      	ldr	r0, [r7, #4]
 8003ac2:	f001 f88d 	bl	8004be0 <vPortFree>
	}
 8003ac6:	e00f      	b.n	8003ae8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003ace:	2b02      	cmp	r3, #2
 8003ad0:	d00a      	beq.n	8003ae8 <prvDeleteTCB+0x60>
	__asm volatile
 8003ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad6:	f383 8811 	msr	BASEPRI, r3
 8003ada:	f3bf 8f6f 	isb	sy
 8003ade:	f3bf 8f4f 	dsb	sy
 8003ae2:	60fb      	str	r3, [r7, #12]
}
 8003ae4:	bf00      	nop
 8003ae6:	e7fe      	b.n	8003ae6 <prvDeleteTCB+0x5e>
	}
 8003ae8:	bf00      	nop
 8003aea:	3710      	adds	r7, #16
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bd80      	pop	{r7, pc}

08003af0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003af0:	b480      	push	{r7}
 8003af2:	b083      	sub	sp, #12
 8003af4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003af6:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <prvResetNextTaskUnblockTime+0x38>)
 8003af8:	681b      	ldr	r3, [r3, #0]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d104      	bne.n	8003b0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003b00:	4b0a      	ldr	r3, [pc, #40]	; (8003b2c <prvResetNextTaskUnblockTime+0x3c>)
 8003b02:	f04f 32ff 	mov.w	r2, #4294967295
 8003b06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003b08:	e008      	b.n	8003b1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b0a:	4b07      	ldr	r3, [pc, #28]	; (8003b28 <prvResetNextTaskUnblockTime+0x38>)
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	4a04      	ldr	r2, [pc, #16]	; (8003b2c <prvResetNextTaskUnblockTime+0x3c>)
 8003b1a:	6013      	str	r3, [r2, #0]
}
 8003b1c:	bf00      	nop
 8003b1e:	370c      	adds	r7, #12
 8003b20:	46bd      	mov	sp, r7
 8003b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b26:	4770      	bx	lr
 8003b28:	20000d30 	.word	0x20000d30
 8003b2c:	20000d98 	.word	0x20000d98

08003b30 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8003b30:	b480      	push	{r7}
 8003b32:	b083      	sub	sp, #12
 8003b34:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8003b36:	4b05      	ldr	r3, [pc, #20]	; (8003b4c <xTaskGetCurrentTaskHandle+0x1c>)
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8003b3c:	687b      	ldr	r3, [r7, #4]
	}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	370c      	adds	r7, #12
 8003b42:	46bd      	mov	sp, r7
 8003b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b48:	4770      	bx	lr
 8003b4a:	bf00      	nop
 8003b4c:	200008a4 	.word	0x200008a4

08003b50 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003b50:	b480      	push	{r7}
 8003b52:	b083      	sub	sp, #12
 8003b54:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003b56:	4b0b      	ldr	r3, [pc, #44]	; (8003b84 <xTaskGetSchedulerState+0x34>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d102      	bne.n	8003b64 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	607b      	str	r3, [r7, #4]
 8003b62:	e008      	b.n	8003b76 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b64:	4b08      	ldr	r3, [pc, #32]	; (8003b88 <xTaskGetSchedulerState+0x38>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d102      	bne.n	8003b72 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003b6c:	2302      	movs	r3, #2
 8003b6e:	607b      	str	r3, [r7, #4]
 8003b70:	e001      	b.n	8003b76 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003b72:	2300      	movs	r3, #0
 8003b74:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003b76:	687b      	ldr	r3, [r7, #4]
	}
 8003b78:	4618      	mov	r0, r3
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr
 8003b84:	20000d84 	.word	0x20000d84
 8003b88:	20000da0 	.word	0x20000da0

08003b8c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8003b8c:	b580      	push	{r7, lr}
 8003b8e:	b084      	sub	sp, #16
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8003b98:	2300      	movs	r3, #0
 8003b9a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d051      	beq.n	8003c46 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8003ba2:	68bb      	ldr	r3, [r7, #8]
 8003ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ba6:	4b2a      	ldr	r3, [pc, #168]	; (8003c50 <xTaskPriorityInherit+0xc4>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d241      	bcs.n	8003c34 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003bb0:	68bb      	ldr	r3, [r7, #8]
 8003bb2:	699b      	ldr	r3, [r3, #24]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	db06      	blt.n	8003bc6 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003bb8:	4b25      	ldr	r3, [pc, #148]	; (8003c50 <xTaskPriorityInherit+0xc4>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bbe:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6959      	ldr	r1, [r3, #20]
 8003bca:	68bb      	ldr	r3, [r7, #8]
 8003bcc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bce:	4613      	mov	r3, r2
 8003bd0:	009b      	lsls	r3, r3, #2
 8003bd2:	4413      	add	r3, r2
 8003bd4:	009b      	lsls	r3, r3, #2
 8003bd6:	4a1f      	ldr	r2, [pc, #124]	; (8003c54 <xTaskPriorityInherit+0xc8>)
 8003bd8:	4413      	add	r3, r2
 8003bda:	4299      	cmp	r1, r3
 8003bdc:	d122      	bne.n	8003c24 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	3304      	adds	r3, #4
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fe fa32 	bl	800204c <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003be8:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <xTaskPriorityInherit+0xc4>)
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8003bf2:	68bb      	ldr	r3, [r7, #8]
 8003bf4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf6:	4b18      	ldr	r3, [pc, #96]	; (8003c58 <xTaskPriorityInherit+0xcc>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	429a      	cmp	r2, r3
 8003bfc:	d903      	bls.n	8003c06 <xTaskPriorityInherit+0x7a>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c02:	4a15      	ldr	r2, [pc, #84]	; (8003c58 <xTaskPriorityInherit+0xcc>)
 8003c04:	6013      	str	r3, [r2, #0]
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0a:	4613      	mov	r3, r2
 8003c0c:	009b      	lsls	r3, r3, #2
 8003c0e:	4413      	add	r3, r2
 8003c10:	009b      	lsls	r3, r3, #2
 8003c12:	4a10      	ldr	r2, [pc, #64]	; (8003c54 <xTaskPriorityInherit+0xc8>)
 8003c14:	441a      	add	r2, r3
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	3304      	adds	r3, #4
 8003c1a:	4619      	mov	r1, r3
 8003c1c:	4610      	mov	r0, r2
 8003c1e:	f7fe f9b8 	bl	8001f92 <vListInsertEnd>
 8003c22:	e004      	b.n	8003c2e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8003c24:	4b0a      	ldr	r3, [pc, #40]	; (8003c50 <xTaskPriorityInherit+0xc4>)
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8003c2e:	2301      	movs	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e008      	b.n	8003c46 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8003c34:	68bb      	ldr	r3, [r7, #8]
 8003c36:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c38:	4b05      	ldr	r3, [pc, #20]	; (8003c50 <xTaskPriorityInherit+0xc4>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c3e:	429a      	cmp	r2, r3
 8003c40:	d201      	bcs.n	8003c46 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8003c42:	2301      	movs	r3, #1
 8003c44:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003c46:	68fb      	ldr	r3, [r7, #12]
	}
 8003c48:	4618      	mov	r0, r3
 8003c4a:	3710      	adds	r7, #16
 8003c4c:	46bd      	mov	sp, r7
 8003c4e:	bd80      	pop	{r7, pc}
 8003c50:	200008a4 	.word	0x200008a4
 8003c54:	200008a8 	.word	0x200008a8
 8003c58:	20000d80 	.word	0x20000d80

08003c5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8003c5c:	b580      	push	{r7, lr}
 8003c5e:	b086      	sub	sp, #24
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d056      	beq.n	8003d20 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8003c72:	4b2e      	ldr	r3, [pc, #184]	; (8003d2c <xTaskPriorityDisinherit+0xd0>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d00a      	beq.n	8003c92 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8003c7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c80:	f383 8811 	msr	BASEPRI, r3
 8003c84:	f3bf 8f6f 	isb	sy
 8003c88:	f3bf 8f4f 	dsb	sy
 8003c8c:	60fb      	str	r3, [r7, #12]
}
 8003c8e:	bf00      	nop
 8003c90:	e7fe      	b.n	8003c90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d10a      	bne.n	8003cb0 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8003c9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c9e:	f383 8811 	msr	BASEPRI, r3
 8003ca2:	f3bf 8f6f 	isb	sy
 8003ca6:	f3bf 8f4f 	dsb	sy
 8003caa:	60bb      	str	r3, [r7, #8]
}
 8003cac:	bf00      	nop
 8003cae:	e7fe      	b.n	8003cae <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb4:	1e5a      	subs	r2, r3, #1
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003cba:	693b      	ldr	r3, [r7, #16]
 8003cbc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cbe:	693b      	ldr	r3, [r7, #16]
 8003cc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003cc2:	429a      	cmp	r2, r3
 8003cc4:	d02c      	beq.n	8003d20 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8003cc6:	693b      	ldr	r3, [r7, #16]
 8003cc8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d128      	bne.n	8003d20 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003cce:	693b      	ldr	r3, [r7, #16]
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	f7fe f9ba 	bl	800204c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003cdc:	693b      	ldr	r3, [r7, #16]
 8003cde:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003ce8:	693b      	ldr	r3, [r7, #16]
 8003cea:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003cec:	693b      	ldr	r3, [r7, #16]
 8003cee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <xTaskPriorityDisinherit+0xd4>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	429a      	cmp	r2, r3
 8003cf6:	d903      	bls.n	8003d00 <xTaskPriorityDisinherit+0xa4>
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cfc:	4a0c      	ldr	r2, [pc, #48]	; (8003d30 <xTaskPriorityDisinherit+0xd4>)
 8003cfe:	6013      	str	r3, [r2, #0]
 8003d00:	693b      	ldr	r3, [r7, #16]
 8003d02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d04:	4613      	mov	r3, r2
 8003d06:	009b      	lsls	r3, r3, #2
 8003d08:	4413      	add	r3, r2
 8003d0a:	009b      	lsls	r3, r3, #2
 8003d0c:	4a09      	ldr	r2, [pc, #36]	; (8003d34 <xTaskPriorityDisinherit+0xd8>)
 8003d0e:	441a      	add	r2, r3
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f7fe f93b 	bl	8001f92 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003d20:	697b      	ldr	r3, [r7, #20]
	}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bd80      	pop	{r7, pc}
 8003d2a:	bf00      	nop
 8003d2c:	200008a4 	.word	0x200008a4
 8003d30:	20000d80 	.word	0x20000d80
 8003d34:	200008a8 	.word	0x200008a8

08003d38 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b088      	sub	sp, #32
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8003d46:	2301      	movs	r3, #1
 8003d48:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	d06a      	beq.n	8003e26 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8003d50:	69bb      	ldr	r3, [r7, #24]
 8003d52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8003d58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d5c:	f383 8811 	msr	BASEPRI, r3
 8003d60:	f3bf 8f6f 	isb	sy
 8003d64:	f3bf 8f4f 	dsb	sy
 8003d68:	60fb      	str	r3, [r7, #12]
}
 8003d6a:	bf00      	nop
 8003d6c:	e7fe      	b.n	8003d6c <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8003d6e:	69bb      	ldr	r3, [r7, #24]
 8003d70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d72:	683a      	ldr	r2, [r7, #0]
 8003d74:	429a      	cmp	r2, r3
 8003d76:	d902      	bls.n	8003d7e <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8003d78:	683b      	ldr	r3, [r7, #0]
 8003d7a:	61fb      	str	r3, [r7, #28]
 8003d7c:	e002      	b.n	8003d84 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8003d7e:	69bb      	ldr	r3, [r7, #24]
 8003d80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003d82:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8003d84:	69bb      	ldr	r3, [r7, #24]
 8003d86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d88:	69fa      	ldr	r2, [r7, #28]
 8003d8a:	429a      	cmp	r2, r3
 8003d8c:	d04b      	beq.n	8003e26 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003d92:	697a      	ldr	r2, [r7, #20]
 8003d94:	429a      	cmp	r2, r3
 8003d96:	d146      	bne.n	8003e26 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8003d98:	4b25      	ldr	r3, [pc, #148]	; (8003e30 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	69ba      	ldr	r2, [r7, #24]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d10a      	bne.n	8003db8 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8003da2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003da6:	f383 8811 	msr	BASEPRI, r3
 8003daa:	f3bf 8f6f 	isb	sy
 8003dae:	f3bf 8f4f 	dsb	sy
 8003db2:	60bb      	str	r3, [r7, #8]
}
 8003db4:	bf00      	nop
 8003db6:	e7fe      	b.n	8003db6 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dbc:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	69fa      	ldr	r2, [r7, #28]
 8003dc2:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	699b      	ldr	r3, [r3, #24]
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	db04      	blt.n	8003dd6 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dcc:	69fb      	ldr	r3, [r7, #28]
 8003dce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003dd2:	69bb      	ldr	r3, [r7, #24]
 8003dd4:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8003dd6:	69bb      	ldr	r3, [r7, #24]
 8003dd8:	6959      	ldr	r1, [r3, #20]
 8003dda:	693a      	ldr	r2, [r7, #16]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	009b      	lsls	r3, r3, #2
 8003de0:	4413      	add	r3, r2
 8003de2:	009b      	lsls	r3, r3, #2
 8003de4:	4a13      	ldr	r2, [pc, #76]	; (8003e34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003de6:	4413      	add	r3, r2
 8003de8:	4299      	cmp	r1, r3
 8003dea:	d11c      	bne.n	8003e26 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003dec:	69bb      	ldr	r3, [r7, #24]
 8003dee:	3304      	adds	r3, #4
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe f92b 	bl	800204c <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8003df6:	69bb      	ldr	r3, [r7, #24]
 8003df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003dfa:	4b0f      	ldr	r3, [pc, #60]	; (8003e38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	429a      	cmp	r2, r3
 8003e00:	d903      	bls.n	8003e0a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8003e02:	69bb      	ldr	r3, [r7, #24]
 8003e04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e06:	4a0c      	ldr	r2, [pc, #48]	; (8003e38 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e0e:	4613      	mov	r3, r2
 8003e10:	009b      	lsls	r3, r3, #2
 8003e12:	4413      	add	r3, r2
 8003e14:	009b      	lsls	r3, r3, #2
 8003e16:	4a07      	ldr	r2, [pc, #28]	; (8003e34 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8003e18:	441a      	add	r2, r3
 8003e1a:	69bb      	ldr	r3, [r7, #24]
 8003e1c:	3304      	adds	r3, #4
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4610      	mov	r0, r2
 8003e22:	f7fe f8b6 	bl	8001f92 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8003e26:	bf00      	nop
 8003e28:	3720      	adds	r7, #32
 8003e2a:	46bd      	mov	sp, r7
 8003e2c:	bd80      	pop	{r7, pc}
 8003e2e:	bf00      	nop
 8003e30:	200008a4 	.word	0x200008a4
 8003e34:	200008a8 	.word	0x200008a8
 8003e38:	20000d80 	.word	0x20000d80

08003e3c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8003e3c:	b480      	push	{r7}
 8003e3e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8003e40:	4b07      	ldr	r3, [pc, #28]	; (8003e60 <pvTaskIncrementMutexHeldCount+0x24>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d004      	beq.n	8003e52 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8003e48:	4b05      	ldr	r3, [pc, #20]	; (8003e60 <pvTaskIncrementMutexHeldCount+0x24>)
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8003e4e:	3201      	adds	r2, #1
 8003e50:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8003e52:	4b03      	ldr	r3, [pc, #12]	; (8003e60 <pvTaskIncrementMutexHeldCount+0x24>)
 8003e54:	681b      	ldr	r3, [r3, #0]
	}
 8003e56:	4618      	mov	r0, r3
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr
 8003e60:	200008a4 	.word	0x200008a4

08003e64 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003e64:	b580      	push	{r7, lr}
 8003e66:	b084      	sub	sp, #16
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
 8003e6c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8003e6e:	4b21      	ldr	r3, [pc, #132]	; (8003ef4 <prvAddCurrentTaskToDelayedList+0x90>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003e74:	4b20      	ldr	r3, [pc, #128]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	3304      	adds	r3, #4
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f7fe f8e6 	bl	800204c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e86:	d10a      	bne.n	8003e9e <prvAddCurrentTaskToDelayedList+0x3a>
 8003e88:	683b      	ldr	r3, [r7, #0]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d007      	beq.n	8003e9e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003e8e:	4b1a      	ldr	r3, [pc, #104]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	3304      	adds	r3, #4
 8003e94:	4619      	mov	r1, r3
 8003e96:	4819      	ldr	r0, [pc, #100]	; (8003efc <prvAddCurrentTaskToDelayedList+0x98>)
 8003e98:	f7fe f87b 	bl	8001f92 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8003e9c:	e026      	b.n	8003eec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8003e9e:	68fa      	ldr	r2, [r7, #12]
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4413      	add	r3, r2
 8003ea4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8003ea6:	4b14      	ldr	r3, [pc, #80]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	68ba      	ldr	r2, [r7, #8]
 8003eac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	429a      	cmp	r2, r3
 8003eb4:	d209      	bcs.n	8003eca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eb6:	4b12      	ldr	r3, [pc, #72]	; (8003f00 <prvAddCurrentTaskToDelayedList+0x9c>)
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	4b0f      	ldr	r3, [pc, #60]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	3304      	adds	r3, #4
 8003ec0:	4619      	mov	r1, r3
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	f7fe f889 	bl	8001fda <vListInsert>
}
 8003ec8:	e010      	b.n	8003eec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8003eca:	4b0e      	ldr	r3, [pc, #56]	; (8003f04 <prvAddCurrentTaskToDelayedList+0xa0>)
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	4b0a      	ldr	r3, [pc, #40]	; (8003ef8 <prvAddCurrentTaskToDelayedList+0x94>)
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f7fe f87f 	bl	8001fda <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003edc:	4b0a      	ldr	r3, [pc, #40]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d202      	bcs.n	8003eec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003ee6:	4a08      	ldr	r2, [pc, #32]	; (8003f08 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	6013      	str	r3, [r2, #0]
}
 8003eec:	bf00      	nop
 8003eee:	3710      	adds	r7, #16
 8003ef0:	46bd      	mov	sp, r7
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	20000d7c 	.word	0x20000d7c
 8003ef8:	200008a4 	.word	0x200008a4
 8003efc:	20000d64 	.word	0x20000d64
 8003f00:	20000d34 	.word	0x20000d34
 8003f04:	20000d30 	.word	0x20000d30
 8003f08:	20000d98 	.word	0x20000d98

08003f0c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b08a      	sub	sp, #40	; 0x28
 8003f10:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003f16:	f000 fb07 	bl	8004528 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003f1a:	4b1c      	ldr	r3, [pc, #112]	; (8003f8c <xTimerCreateTimerTask+0x80>)
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d021      	beq.n	8003f66 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8003f22:	2300      	movs	r3, #0
 8003f24:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003f26:	2300      	movs	r3, #0
 8003f28:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003f2a:	1d3a      	adds	r2, r7, #4
 8003f2c:	f107 0108 	add.w	r1, r7, #8
 8003f30:	f107 030c 	add.w	r3, r7, #12
 8003f34:	4618      	mov	r0, r3
 8003f36:	f7fd ffe5 	bl	8001f04 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003f3a:	6879      	ldr	r1, [r7, #4]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	68fa      	ldr	r2, [r7, #12]
 8003f40:	9202      	str	r2, [sp, #8]
 8003f42:	9301      	str	r3, [sp, #4]
 8003f44:	2302      	movs	r3, #2
 8003f46:	9300      	str	r3, [sp, #0]
 8003f48:	2300      	movs	r3, #0
 8003f4a:	460a      	mov	r2, r1
 8003f4c:	4910      	ldr	r1, [pc, #64]	; (8003f90 <xTimerCreateTimerTask+0x84>)
 8003f4e:	4811      	ldr	r0, [pc, #68]	; (8003f94 <xTimerCreateTimerTask+0x88>)
 8003f50:	f7fe ffa6 	bl	8002ea0 <xTaskCreateStatic>
 8003f54:	4603      	mov	r3, r0
 8003f56:	4a10      	ldr	r2, [pc, #64]	; (8003f98 <xTimerCreateTimerTask+0x8c>)
 8003f58:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003f5a:	4b0f      	ldr	r3, [pc, #60]	; (8003f98 <xTimerCreateTimerTask+0x8c>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d001      	beq.n	8003f66 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8003f62:	2301      	movs	r3, #1
 8003f64:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2b00      	cmp	r3, #0
 8003f6a:	d10a      	bne.n	8003f82 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f70:	f383 8811 	msr	BASEPRI, r3
 8003f74:	f3bf 8f6f 	isb	sy
 8003f78:	f3bf 8f4f 	dsb	sy
 8003f7c:	613b      	str	r3, [r7, #16]
}
 8003f7e:	bf00      	nop
 8003f80:	e7fe      	b.n	8003f80 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8003f82:	697b      	ldr	r3, [r7, #20]
}
 8003f84:	4618      	mov	r0, r3
 8003f86:	3718      	adds	r7, #24
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	bd80      	pop	{r7, pc}
 8003f8c:	20000dd4 	.word	0x20000dd4
 8003f90:	08005050 	.word	0x08005050
 8003f94:	080040d1 	.word	0x080040d1
 8003f98:	20000dd8 	.word	0x20000dd8

08003f9c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b08a      	sub	sp, #40	; 0x28
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	60f8      	str	r0, [r7, #12]
 8003fa4:	60b9      	str	r1, [r7, #8]
 8003fa6:	607a      	str	r2, [r7, #4]
 8003fa8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8003faa:	2300      	movs	r3, #0
 8003fac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d10a      	bne.n	8003fca <xTimerGenericCommand+0x2e>
	__asm volatile
 8003fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fb8:	f383 8811 	msr	BASEPRI, r3
 8003fbc:	f3bf 8f6f 	isb	sy
 8003fc0:	f3bf 8f4f 	dsb	sy
 8003fc4:	623b      	str	r3, [r7, #32]
}
 8003fc6:	bf00      	nop
 8003fc8:	e7fe      	b.n	8003fc8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8003fca:	4b1a      	ldr	r3, [pc, #104]	; (8004034 <xTimerGenericCommand+0x98>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d02a      	beq.n	8004028 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b05      	cmp	r3, #5
 8003fe2:	dc18      	bgt.n	8004016 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003fe4:	f7ff fdb4 	bl	8003b50 <xTaskGetSchedulerState>
 8003fe8:	4603      	mov	r3, r0
 8003fea:	2b02      	cmp	r3, #2
 8003fec:	d109      	bne.n	8004002 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8003fee:	4b11      	ldr	r3, [pc, #68]	; (8004034 <xTimerGenericCommand+0x98>)
 8003ff0:	6818      	ldr	r0, [r3, #0]
 8003ff2:	f107 0110 	add.w	r1, r7, #16
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003ffa:	f7fe fa45 	bl	8002488 <xQueueGenericSend>
 8003ffe:	6278      	str	r0, [r7, #36]	; 0x24
 8004000:	e012      	b.n	8004028 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004002:	4b0c      	ldr	r3, [pc, #48]	; (8004034 <xTimerGenericCommand+0x98>)
 8004004:	6818      	ldr	r0, [r3, #0]
 8004006:	f107 0110 	add.w	r1, r7, #16
 800400a:	2300      	movs	r3, #0
 800400c:	2200      	movs	r2, #0
 800400e:	f7fe fa3b 	bl	8002488 <xQueueGenericSend>
 8004012:	6278      	str	r0, [r7, #36]	; 0x24
 8004014:	e008      	b.n	8004028 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004016:	4b07      	ldr	r3, [pc, #28]	; (8004034 <xTimerGenericCommand+0x98>)
 8004018:	6818      	ldr	r0, [r3, #0]
 800401a:	f107 0110 	add.w	r1, r7, #16
 800401e:	2300      	movs	r3, #0
 8004020:	683a      	ldr	r2, [r7, #0]
 8004022:	f7fe fb2f 	bl	8002684 <xQueueGenericSendFromISR>
 8004026:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004028:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800402a:	4618      	mov	r0, r3
 800402c:	3728      	adds	r7, #40	; 0x28
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
 8004032:	bf00      	nop
 8004034:	20000dd4 	.word	0x20000dd4

08004038 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b088      	sub	sp, #32
 800403c:	af02      	add	r7, sp, #8
 800403e:	6078      	str	r0, [r7, #4]
 8004040:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004042:	4b22      	ldr	r3, [pc, #136]	; (80040cc <prvProcessExpiredTimer+0x94>)
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	68db      	ldr	r3, [r3, #12]
 8004048:	68db      	ldr	r3, [r3, #12]
 800404a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800404c:	697b      	ldr	r3, [r7, #20]
 800404e:	3304      	adds	r3, #4
 8004050:	4618      	mov	r0, r3
 8004052:	f7fd fffb 	bl	800204c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d022      	beq.n	80040aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004064:	697b      	ldr	r3, [r7, #20]
 8004066:	699a      	ldr	r2, [r3, #24]
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	18d1      	adds	r1, r2, r3
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	683a      	ldr	r2, [r7, #0]
 8004070:	6978      	ldr	r0, [r7, #20]
 8004072:	f000 f8d1 	bl	8004218 <prvInsertTimerInActiveList>
 8004076:	4603      	mov	r3, r0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d01f      	beq.n	80040bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800407c:	2300      	movs	r3, #0
 800407e:	9300      	str	r3, [sp, #0]
 8004080:	2300      	movs	r3, #0
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	2100      	movs	r1, #0
 8004086:	6978      	ldr	r0, [r7, #20]
 8004088:	f7ff ff88 	bl	8003f9c <xTimerGenericCommand>
 800408c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800408e:	693b      	ldr	r3, [r7, #16]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d113      	bne.n	80040bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004098:	f383 8811 	msr	BASEPRI, r3
 800409c:	f3bf 8f6f 	isb	sy
 80040a0:	f3bf 8f4f 	dsb	sy
 80040a4:	60fb      	str	r3, [r7, #12]
}
 80040a6:	bf00      	nop
 80040a8:	e7fe      	b.n	80040a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80040aa:	697b      	ldr	r3, [r7, #20]
 80040ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80040b0:	f023 0301 	bic.w	r3, r3, #1
 80040b4:	b2da      	uxtb	r2, r3
 80040b6:	697b      	ldr	r3, [r7, #20]
 80040b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	6a1b      	ldr	r3, [r3, #32]
 80040c0:	6978      	ldr	r0, [r7, #20]
 80040c2:	4798      	blx	r3
}
 80040c4:	bf00      	nop
 80040c6:	3718      	adds	r7, #24
 80040c8:	46bd      	mov	sp, r7
 80040ca:	bd80      	pop	{r7, pc}
 80040cc:	20000dcc 	.word	0x20000dcc

080040d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80040d0:	b580      	push	{r7, lr}
 80040d2:	b084      	sub	sp, #16
 80040d4:	af00      	add	r7, sp, #0
 80040d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040d8:	f107 0308 	add.w	r3, r7, #8
 80040dc:	4618      	mov	r0, r3
 80040de:	f000 f857 	bl	8004190 <prvGetNextExpireTime>
 80040e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	4619      	mov	r1, r3
 80040e8:	68f8      	ldr	r0, [r7, #12]
 80040ea:	f000 f803 	bl	80040f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80040ee:	f000 f8d5 	bl	800429c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80040f2:	e7f1      	b.n	80040d8 <prvTimerTask+0x8>

080040f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b084      	sub	sp, #16
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	6078      	str	r0, [r7, #4]
 80040fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80040fe:	f7ff f92b 	bl	8003358 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004102:	f107 0308 	add.w	r3, r7, #8
 8004106:	4618      	mov	r0, r3
 8004108:	f000 f866 	bl	80041d8 <prvSampleTimeNow>
 800410c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800410e:	68bb      	ldr	r3, [r7, #8]
 8004110:	2b00      	cmp	r3, #0
 8004112:	d130      	bne.n	8004176 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	2b00      	cmp	r3, #0
 8004118:	d10a      	bne.n	8004130 <prvProcessTimerOrBlockTask+0x3c>
 800411a:	687a      	ldr	r2, [r7, #4]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	429a      	cmp	r2, r3
 8004120:	d806      	bhi.n	8004130 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004122:	f7ff f927 	bl	8003374 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004126:	68f9      	ldr	r1, [r7, #12]
 8004128:	6878      	ldr	r0, [r7, #4]
 800412a:	f7ff ff85 	bl	8004038 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800412e:	e024      	b.n	800417a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d008      	beq.n	8004148 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004136:	4b13      	ldr	r3, [pc, #76]	; (8004184 <prvProcessTimerOrBlockTask+0x90>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681b      	ldr	r3, [r3, #0]
 800413c:	2b00      	cmp	r3, #0
 800413e:	d101      	bne.n	8004144 <prvProcessTimerOrBlockTask+0x50>
 8004140:	2301      	movs	r3, #1
 8004142:	e000      	b.n	8004146 <prvProcessTimerOrBlockTask+0x52>
 8004144:	2300      	movs	r3, #0
 8004146:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004148:	4b0f      	ldr	r3, [pc, #60]	; (8004188 <prvProcessTimerOrBlockTask+0x94>)
 800414a:	6818      	ldr	r0, [r3, #0]
 800414c:	687a      	ldr	r2, [r7, #4]
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	1ad3      	subs	r3, r2, r3
 8004152:	683a      	ldr	r2, [r7, #0]
 8004154:	4619      	mov	r1, r3
 8004156:	f7fe fe6f 	bl	8002e38 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800415a:	f7ff f90b 	bl	8003374 <xTaskResumeAll>
 800415e:	4603      	mov	r3, r0
 8004160:	2b00      	cmp	r3, #0
 8004162:	d10a      	bne.n	800417a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004164:	4b09      	ldr	r3, [pc, #36]	; (800418c <prvProcessTimerOrBlockTask+0x98>)
 8004166:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800416a:	601a      	str	r2, [r3, #0]
 800416c:	f3bf 8f4f 	dsb	sy
 8004170:	f3bf 8f6f 	isb	sy
}
 8004174:	e001      	b.n	800417a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004176:	f7ff f8fd 	bl	8003374 <xTaskResumeAll>
}
 800417a:	bf00      	nop
 800417c:	3710      	adds	r7, #16
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000dd0 	.word	0x20000dd0
 8004188:	20000dd4 	.word	0x20000dd4
 800418c:	e000ed04 	.word	0xe000ed04

08004190 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004190:	b480      	push	{r7}
 8004192:	b085      	sub	sp, #20
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004198:	4b0e      	ldr	r3, [pc, #56]	; (80041d4 <prvGetNextExpireTime+0x44>)
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d101      	bne.n	80041a6 <prvGetNextExpireTime+0x16>
 80041a2:	2201      	movs	r2, #1
 80041a4:	e000      	b.n	80041a8 <prvGetNextExpireTime+0x18>
 80041a6:	2200      	movs	r2, #0
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d105      	bne.n	80041c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80041b4:	4b07      	ldr	r3, [pc, #28]	; (80041d4 <prvGetNextExpireTime+0x44>)
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68db      	ldr	r3, [r3, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	60fb      	str	r3, [r7, #12]
 80041be:	e001      	b.n	80041c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80041c0:	2300      	movs	r3, #0
 80041c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80041c4:	68fb      	ldr	r3, [r7, #12]
}
 80041c6:	4618      	mov	r0, r3
 80041c8:	3714      	adds	r7, #20
 80041ca:	46bd      	mov	sp, r7
 80041cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d0:	4770      	bx	lr
 80041d2:	bf00      	nop
 80041d4:	20000dcc 	.word	0x20000dcc

080041d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80041d8:	b580      	push	{r7, lr}
 80041da:	b084      	sub	sp, #16
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80041e0:	f7ff f966 	bl	80034b0 <xTaskGetTickCount>
 80041e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80041e6:	4b0b      	ldr	r3, [pc, #44]	; (8004214 <prvSampleTimeNow+0x3c>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	429a      	cmp	r2, r3
 80041ee:	d205      	bcs.n	80041fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80041f0:	f000 f936 	bl	8004460 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2201      	movs	r2, #1
 80041f8:	601a      	str	r2, [r3, #0]
 80041fa:	e002      	b.n	8004202 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2200      	movs	r2, #0
 8004200:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004202:	4a04      	ldr	r2, [pc, #16]	; (8004214 <prvSampleTimeNow+0x3c>)
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004208:	68fb      	ldr	r3, [r7, #12]
}
 800420a:	4618      	mov	r0, r3
 800420c:	3710      	adds	r7, #16
 800420e:	46bd      	mov	sp, r7
 8004210:	bd80      	pop	{r7, pc}
 8004212:	bf00      	nop
 8004214:	20000ddc 	.word	0x20000ddc

08004218 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004226:	2300      	movs	r3, #0
 8004228:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	68ba      	ldr	r2, [r7, #8]
 800422e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	68fa      	ldr	r2, [r7, #12]
 8004234:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004236:	68ba      	ldr	r2, [r7, #8]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	429a      	cmp	r2, r3
 800423c:	d812      	bhi.n	8004264 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800423e:	687a      	ldr	r2, [r7, #4]
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	1ad2      	subs	r2, r2, r3
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	429a      	cmp	r2, r3
 800424a:	d302      	bcc.n	8004252 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800424c:	2301      	movs	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e01b      	b.n	800428a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004252:	4b10      	ldr	r3, [pc, #64]	; (8004294 <prvInsertTimerInActiveList+0x7c>)
 8004254:	681a      	ldr	r2, [r3, #0]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	3304      	adds	r3, #4
 800425a:	4619      	mov	r1, r3
 800425c:	4610      	mov	r0, r2
 800425e:	f7fd febc 	bl	8001fda <vListInsert>
 8004262:	e012      	b.n	800428a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	429a      	cmp	r2, r3
 800426a:	d206      	bcs.n	800427a <prvInsertTimerInActiveList+0x62>
 800426c:	68ba      	ldr	r2, [r7, #8]
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	429a      	cmp	r2, r3
 8004272:	d302      	bcc.n	800427a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004274:	2301      	movs	r3, #1
 8004276:	617b      	str	r3, [r7, #20]
 8004278:	e007      	b.n	800428a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800427a:	4b07      	ldr	r3, [pc, #28]	; (8004298 <prvInsertTimerInActiveList+0x80>)
 800427c:	681a      	ldr	r2, [r3, #0]
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	3304      	adds	r3, #4
 8004282:	4619      	mov	r1, r3
 8004284:	4610      	mov	r0, r2
 8004286:	f7fd fea8 	bl	8001fda <vListInsert>
		}
	}

	return xProcessTimerNow;
 800428a:	697b      	ldr	r3, [r7, #20]
}
 800428c:	4618      	mov	r0, r3
 800428e:	3718      	adds	r7, #24
 8004290:	46bd      	mov	sp, r7
 8004292:	bd80      	pop	{r7, pc}
 8004294:	20000dd0 	.word	0x20000dd0
 8004298:	20000dcc 	.word	0x20000dcc

0800429c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800429c:	b580      	push	{r7, lr}
 800429e:	b08e      	sub	sp, #56	; 0x38
 80042a0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80042a2:	e0ca      	b.n	800443a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b00      	cmp	r3, #0
 80042a8:	da18      	bge.n	80042dc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80042aa:	1d3b      	adds	r3, r7, #4
 80042ac:	3304      	adds	r3, #4
 80042ae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80042b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d10a      	bne.n	80042cc <prvProcessReceivedCommands+0x30>
	__asm volatile
 80042b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ba:	f383 8811 	msr	BASEPRI, r3
 80042be:	f3bf 8f6f 	isb	sy
 80042c2:	f3bf 8f4f 	dsb	sy
 80042c6:	61fb      	str	r3, [r7, #28]
}
 80042c8:	bf00      	nop
 80042ca:	e7fe      	b.n	80042ca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80042cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d2:	6850      	ldr	r0, [r2, #4]
 80042d4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80042d6:	6892      	ldr	r2, [r2, #8]
 80042d8:	4611      	mov	r1, r2
 80042da:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	f2c0 80aa 	blt.w	8004438 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80042e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ea:	695b      	ldr	r3, [r3, #20]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d004      	beq.n	80042fa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f2:	3304      	adds	r3, #4
 80042f4:	4618      	mov	r0, r3
 80042f6:	f7fd fea9 	bl	800204c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80042fa:	463b      	mov	r3, r7
 80042fc:	4618      	mov	r0, r3
 80042fe:	f7ff ff6b 	bl	80041d8 <prvSampleTimeNow>
 8004302:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2b09      	cmp	r3, #9
 8004308:	f200 8097 	bhi.w	800443a <prvProcessReceivedCommands+0x19e>
 800430c:	a201      	add	r2, pc, #4	; (adr r2, 8004314 <prvProcessReceivedCommands+0x78>)
 800430e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004312:	bf00      	nop
 8004314:	0800433d 	.word	0x0800433d
 8004318:	0800433d 	.word	0x0800433d
 800431c:	0800433d 	.word	0x0800433d
 8004320:	080043b1 	.word	0x080043b1
 8004324:	080043c5 	.word	0x080043c5
 8004328:	0800440f 	.word	0x0800440f
 800432c:	0800433d 	.word	0x0800433d
 8004330:	0800433d 	.word	0x0800433d
 8004334:	080043b1 	.word	0x080043b1
 8004338:	080043c5 	.word	0x080043c5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800433c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800433e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004342:	f043 0301 	orr.w	r3, r3, #1
 8004346:	b2da      	uxtb	r2, r3
 8004348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800434a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800434e:	68ba      	ldr	r2, [r7, #8]
 8004350:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004352:	699b      	ldr	r3, [r3, #24]
 8004354:	18d1      	adds	r1, r2, r3
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800435a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800435c:	f7ff ff5c 	bl	8004218 <prvInsertTimerInActiveList>
 8004360:	4603      	mov	r3, r0
 8004362:	2b00      	cmp	r3, #0
 8004364:	d069      	beq.n	800443a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004366:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004368:	6a1b      	ldr	r3, [r3, #32]
 800436a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800436c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800436e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004370:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004374:	f003 0304 	and.w	r3, r3, #4
 8004378:	2b00      	cmp	r3, #0
 800437a:	d05e      	beq.n	800443a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800437c:	68ba      	ldr	r2, [r7, #8]
 800437e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	441a      	add	r2, r3
 8004384:	2300      	movs	r3, #0
 8004386:	9300      	str	r3, [sp, #0]
 8004388:	2300      	movs	r3, #0
 800438a:	2100      	movs	r1, #0
 800438c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800438e:	f7ff fe05 	bl	8003f9c <xTimerGenericCommand>
 8004392:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	2b00      	cmp	r3, #0
 8004398:	d14f      	bne.n	800443a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800439a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800439e:	f383 8811 	msr	BASEPRI, r3
 80043a2:	f3bf 8f6f 	isb	sy
 80043a6:	f3bf 8f4f 	dsb	sy
 80043aa:	61bb      	str	r3, [r7, #24]
}
 80043ac:	bf00      	nop
 80043ae:	e7fe      	b.n	80043ae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80043b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043b6:	f023 0301 	bic.w	r3, r3, #1
 80043ba:	b2da      	uxtb	r2, r3
 80043bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80043c2:	e03a      	b.n	800443a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80043c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80043ca:	f043 0301 	orr.w	r3, r3, #1
 80043ce:	b2da      	uxtb	r2, r3
 80043d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043d2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80043d6:	68ba      	ldr	r2, [r7, #8]
 80043d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043da:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80043dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10a      	bne.n	80043fa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	617b      	str	r3, [r7, #20]
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80043fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043fc:	699a      	ldr	r2, [r3, #24]
 80043fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004400:	18d1      	adds	r1, r2, r3
 8004402:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004404:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004406:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004408:	f7ff ff06 	bl	8004218 <prvInsertTimerInActiveList>
					break;
 800440c:	e015      	b.n	800443a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800440e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004410:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004414:	f003 0302 	and.w	r3, r3, #2
 8004418:	2b00      	cmp	r3, #0
 800441a:	d103      	bne.n	8004424 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800441c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800441e:	f000 fbdf 	bl	8004be0 <vPortFree>
 8004422:	e00a      	b.n	800443a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004424:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004426:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800442a:	f023 0301 	bic.w	r3, r3, #1
 800442e:	b2da      	uxtb	r2, r3
 8004430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004432:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004436:	e000      	b.n	800443a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004438:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800443a:	4b08      	ldr	r3, [pc, #32]	; (800445c <prvProcessReceivedCommands+0x1c0>)
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	1d39      	adds	r1, r7, #4
 8004440:	2200      	movs	r2, #0
 8004442:	4618      	mov	r0, r3
 8004444:	f7fe f9ba 	bl	80027bc <xQueueReceive>
 8004448:	4603      	mov	r3, r0
 800444a:	2b00      	cmp	r3, #0
 800444c:	f47f af2a 	bne.w	80042a4 <prvProcessReceivedCommands+0x8>
	}
}
 8004450:	bf00      	nop
 8004452:	bf00      	nop
 8004454:	3730      	adds	r7, #48	; 0x30
 8004456:	46bd      	mov	sp, r7
 8004458:	bd80      	pop	{r7, pc}
 800445a:	bf00      	nop
 800445c:	20000dd4 	.word	0x20000dd4

08004460 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b088      	sub	sp, #32
 8004464:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004466:	e048      	b.n	80044fa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004468:	4b2d      	ldr	r3, [pc, #180]	; (8004520 <prvSwitchTimerLists+0xc0>)
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004472:	4b2b      	ldr	r3, [pc, #172]	; (8004520 <prvSwitchTimerLists+0xc0>)
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	68db      	ldr	r3, [r3, #12]
 800447a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	3304      	adds	r3, #4
 8004480:	4618      	mov	r0, r3
 8004482:	f7fd fde3 	bl	800204c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	6a1b      	ldr	r3, [r3, #32]
 800448a:	68f8      	ldr	r0, [r7, #12]
 800448c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004494:	f003 0304 	and.w	r3, r3, #4
 8004498:	2b00      	cmp	r3, #0
 800449a:	d02e      	beq.n	80044fa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	699b      	ldr	r3, [r3, #24]
 80044a0:	693a      	ldr	r2, [r7, #16]
 80044a2:	4413      	add	r3, r2
 80044a4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80044a6:	68ba      	ldr	r2, [r7, #8]
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	429a      	cmp	r2, r3
 80044ac:	d90e      	bls.n	80044cc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	68ba      	ldr	r2, [r7, #8]
 80044b2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80044ba:	4b19      	ldr	r3, [pc, #100]	; (8004520 <prvSwitchTimerLists+0xc0>)
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	3304      	adds	r3, #4
 80044c2:	4619      	mov	r1, r3
 80044c4:	4610      	mov	r0, r2
 80044c6:	f7fd fd88 	bl	8001fda <vListInsert>
 80044ca:	e016      	b.n	80044fa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80044cc:	2300      	movs	r3, #0
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	2300      	movs	r3, #0
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	2100      	movs	r1, #0
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff fd60 	bl	8003f9c <xTimerGenericCommand>
 80044dc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <prvSwitchTimerLists+0x9a>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	603b      	str	r3, [r7, #0]
}
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80044fa:	4b09      	ldr	r3, [pc, #36]	; (8004520 <prvSwitchTimerLists+0xc0>)
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	2b00      	cmp	r3, #0
 8004502:	d1b1      	bne.n	8004468 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004504:	4b06      	ldr	r3, [pc, #24]	; (8004520 <prvSwitchTimerLists+0xc0>)
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800450a:	4b06      	ldr	r3, [pc, #24]	; (8004524 <prvSwitchTimerLists+0xc4>)
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	4a04      	ldr	r2, [pc, #16]	; (8004520 <prvSwitchTimerLists+0xc0>)
 8004510:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004512:	4a04      	ldr	r2, [pc, #16]	; (8004524 <prvSwitchTimerLists+0xc4>)
 8004514:	697b      	ldr	r3, [r7, #20]
 8004516:	6013      	str	r3, [r2, #0]
}
 8004518:	bf00      	nop
 800451a:	3718      	adds	r7, #24
 800451c:	46bd      	mov	sp, r7
 800451e:	bd80      	pop	{r7, pc}
 8004520:	20000dcc 	.word	0x20000dcc
 8004524:	20000dd0 	.word	0x20000dd0

08004528 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b082      	sub	sp, #8
 800452c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800452e:	f000 f969 	bl	8004804 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004532:	4b15      	ldr	r3, [pc, #84]	; (8004588 <prvCheckForValidListAndQueue+0x60>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d120      	bne.n	800457c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800453a:	4814      	ldr	r0, [pc, #80]	; (800458c <prvCheckForValidListAndQueue+0x64>)
 800453c:	f7fd fcfc 	bl	8001f38 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004540:	4813      	ldr	r0, [pc, #76]	; (8004590 <prvCheckForValidListAndQueue+0x68>)
 8004542:	f7fd fcf9 	bl	8001f38 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004546:	4b13      	ldr	r3, [pc, #76]	; (8004594 <prvCheckForValidListAndQueue+0x6c>)
 8004548:	4a10      	ldr	r2, [pc, #64]	; (800458c <prvCheckForValidListAndQueue+0x64>)
 800454a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800454c:	4b12      	ldr	r3, [pc, #72]	; (8004598 <prvCheckForValidListAndQueue+0x70>)
 800454e:	4a10      	ldr	r2, [pc, #64]	; (8004590 <prvCheckForValidListAndQueue+0x68>)
 8004550:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004552:	2300      	movs	r3, #0
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	4b11      	ldr	r3, [pc, #68]	; (800459c <prvCheckForValidListAndQueue+0x74>)
 8004558:	4a11      	ldr	r2, [pc, #68]	; (80045a0 <prvCheckForValidListAndQueue+0x78>)
 800455a:	2110      	movs	r1, #16
 800455c:	200a      	movs	r0, #10
 800455e:	f7fd fe07 	bl	8002170 <xQueueGenericCreateStatic>
 8004562:	4603      	mov	r3, r0
 8004564:	4a08      	ldr	r2, [pc, #32]	; (8004588 <prvCheckForValidListAndQueue+0x60>)
 8004566:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004568:	4b07      	ldr	r3, [pc, #28]	; (8004588 <prvCheckForValidListAndQueue+0x60>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004570:	4b05      	ldr	r3, [pc, #20]	; (8004588 <prvCheckForValidListAndQueue+0x60>)
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	490b      	ldr	r1, [pc, #44]	; (80045a4 <prvCheckForValidListAndQueue+0x7c>)
 8004576:	4618      	mov	r0, r3
 8004578:	f7fe fc34 	bl	8002de4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800457c:	f000 f972 	bl	8004864 <vPortExitCritical>
}
 8004580:	bf00      	nop
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	20000dd4 	.word	0x20000dd4
 800458c:	20000da4 	.word	0x20000da4
 8004590:	20000db8 	.word	0x20000db8
 8004594:	20000dcc 	.word	0x20000dcc
 8004598:	20000dd0 	.word	0x20000dd0
 800459c:	20000e80 	.word	0x20000e80
 80045a0:	20000de0 	.word	0x20000de0
 80045a4:	08005058 	.word	0x08005058

080045a8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3b04      	subs	r3, #4
 80045b8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80045c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	3b04      	subs	r3, #4
 80045c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80045c8:	68bb      	ldr	r3, [r7, #8]
 80045ca:	f023 0201 	bic.w	r2, r3, #1
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	3b04      	subs	r3, #4
 80045d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80045d8:	4a0c      	ldr	r2, [pc, #48]	; (800460c <pxPortInitialiseStack+0x64>)
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3b14      	subs	r3, #20
 80045e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80045e4:	687a      	ldr	r2, [r7, #4]
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80045ea:	68fb      	ldr	r3, [r7, #12]
 80045ec:	3b04      	subs	r3, #4
 80045ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	f06f 0202 	mvn.w	r2, #2
 80045f6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	3b20      	subs	r3, #32
 80045fc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80045fe:	68fb      	ldr	r3, [r7, #12]
}
 8004600:	4618      	mov	r0, r3
 8004602:	3714      	adds	r7, #20
 8004604:	46bd      	mov	sp, r7
 8004606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460a:	4770      	bx	lr
 800460c:	08004611 	.word	0x08004611

08004610 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004610:	b480      	push	{r7}
 8004612:	b085      	sub	sp, #20
 8004614:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004616:	2300      	movs	r3, #0
 8004618:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800461a:	4b12      	ldr	r3, [pc, #72]	; (8004664 <prvTaskExitError+0x54>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004622:	d00a      	beq.n	800463a <prvTaskExitError+0x2a>
	__asm volatile
 8004624:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004628:	f383 8811 	msr	BASEPRI, r3
 800462c:	f3bf 8f6f 	isb	sy
 8004630:	f3bf 8f4f 	dsb	sy
 8004634:	60fb      	str	r3, [r7, #12]
}
 8004636:	bf00      	nop
 8004638:	e7fe      	b.n	8004638 <prvTaskExitError+0x28>
	__asm volatile
 800463a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800463e:	f383 8811 	msr	BASEPRI, r3
 8004642:	f3bf 8f6f 	isb	sy
 8004646:	f3bf 8f4f 	dsb	sy
 800464a:	60bb      	str	r3, [r7, #8]
}
 800464c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800464e:	bf00      	nop
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2b00      	cmp	r3, #0
 8004654:	d0fc      	beq.n	8004650 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004656:	bf00      	nop
 8004658:	bf00      	nop
 800465a:	3714      	adds	r7, #20
 800465c:	46bd      	mov	sp, r7
 800465e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004662:	4770      	bx	lr
 8004664:	2000000c 	.word	0x2000000c
	...

08004670 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004670:	4b07      	ldr	r3, [pc, #28]	; (8004690 <pxCurrentTCBConst2>)
 8004672:	6819      	ldr	r1, [r3, #0]
 8004674:	6808      	ldr	r0, [r1, #0]
 8004676:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800467a:	f380 8809 	msr	PSP, r0
 800467e:	f3bf 8f6f 	isb	sy
 8004682:	f04f 0000 	mov.w	r0, #0
 8004686:	f380 8811 	msr	BASEPRI, r0
 800468a:	4770      	bx	lr
 800468c:	f3af 8000 	nop.w

08004690 <pxCurrentTCBConst2>:
 8004690:	200008a4 	.word	0x200008a4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop

08004698 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004698:	4808      	ldr	r0, [pc, #32]	; (80046bc <prvPortStartFirstTask+0x24>)
 800469a:	6800      	ldr	r0, [r0, #0]
 800469c:	6800      	ldr	r0, [r0, #0]
 800469e:	f380 8808 	msr	MSP, r0
 80046a2:	f04f 0000 	mov.w	r0, #0
 80046a6:	f380 8814 	msr	CONTROL, r0
 80046aa:	b662      	cpsie	i
 80046ac:	b661      	cpsie	f
 80046ae:	f3bf 8f4f 	dsb	sy
 80046b2:	f3bf 8f6f 	isb	sy
 80046b6:	df00      	svc	0
 80046b8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80046ba:	bf00      	nop
 80046bc:	e000ed08 	.word	0xe000ed08

080046c0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80046c0:	b580      	push	{r7, lr}
 80046c2:	b086      	sub	sp, #24
 80046c4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80046c6:	4b46      	ldr	r3, [pc, #280]	; (80047e0 <xPortStartScheduler+0x120>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4a46      	ldr	r2, [pc, #280]	; (80047e4 <xPortStartScheduler+0x124>)
 80046cc:	4293      	cmp	r3, r2
 80046ce:	d10a      	bne.n	80046e6 <xPortStartScheduler+0x26>
	__asm volatile
 80046d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046d4:	f383 8811 	msr	BASEPRI, r3
 80046d8:	f3bf 8f6f 	isb	sy
 80046dc:	f3bf 8f4f 	dsb	sy
 80046e0:	613b      	str	r3, [r7, #16]
}
 80046e2:	bf00      	nop
 80046e4:	e7fe      	b.n	80046e4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80046e6:	4b3e      	ldr	r3, [pc, #248]	; (80047e0 <xPortStartScheduler+0x120>)
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	4a3f      	ldr	r2, [pc, #252]	; (80047e8 <xPortStartScheduler+0x128>)
 80046ec:	4293      	cmp	r3, r2
 80046ee:	d10a      	bne.n	8004706 <xPortStartScheduler+0x46>
	__asm volatile
 80046f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046f4:	f383 8811 	msr	BASEPRI, r3
 80046f8:	f3bf 8f6f 	isb	sy
 80046fc:	f3bf 8f4f 	dsb	sy
 8004700:	60fb      	str	r3, [r7, #12]
}
 8004702:	bf00      	nop
 8004704:	e7fe      	b.n	8004704 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004706:	4b39      	ldr	r3, [pc, #228]	; (80047ec <xPortStartScheduler+0x12c>)
 8004708:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	781b      	ldrb	r3, [r3, #0]
 800470e:	b2db      	uxtb	r3, r3
 8004710:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	22ff      	movs	r2, #255	; 0xff
 8004716:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004718:	697b      	ldr	r3, [r7, #20]
 800471a:	781b      	ldrb	r3, [r3, #0]
 800471c:	b2db      	uxtb	r3, r3
 800471e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004720:	78fb      	ldrb	r3, [r7, #3]
 8004722:	b2db      	uxtb	r3, r3
 8004724:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004728:	b2da      	uxtb	r2, r3
 800472a:	4b31      	ldr	r3, [pc, #196]	; (80047f0 <xPortStartScheduler+0x130>)
 800472c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800472e:	4b31      	ldr	r3, [pc, #196]	; (80047f4 <xPortStartScheduler+0x134>)
 8004730:	2207      	movs	r2, #7
 8004732:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004734:	e009      	b.n	800474a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004736:	4b2f      	ldr	r3, [pc, #188]	; (80047f4 <xPortStartScheduler+0x134>)
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	3b01      	subs	r3, #1
 800473c:	4a2d      	ldr	r2, [pc, #180]	; (80047f4 <xPortStartScheduler+0x134>)
 800473e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004740:	78fb      	ldrb	r3, [r7, #3]
 8004742:	b2db      	uxtb	r3, r3
 8004744:	005b      	lsls	r3, r3, #1
 8004746:	b2db      	uxtb	r3, r3
 8004748:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800474a:	78fb      	ldrb	r3, [r7, #3]
 800474c:	b2db      	uxtb	r3, r3
 800474e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004752:	2b80      	cmp	r3, #128	; 0x80
 8004754:	d0ef      	beq.n	8004736 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004756:	4b27      	ldr	r3, [pc, #156]	; (80047f4 <xPortStartScheduler+0x134>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	f1c3 0307 	rsb	r3, r3, #7
 800475e:	2b04      	cmp	r3, #4
 8004760:	d00a      	beq.n	8004778 <xPortStartScheduler+0xb8>
	__asm volatile
 8004762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004766:	f383 8811 	msr	BASEPRI, r3
 800476a:	f3bf 8f6f 	isb	sy
 800476e:	f3bf 8f4f 	dsb	sy
 8004772:	60bb      	str	r3, [r7, #8]
}
 8004774:	bf00      	nop
 8004776:	e7fe      	b.n	8004776 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004778:	4b1e      	ldr	r3, [pc, #120]	; (80047f4 <xPortStartScheduler+0x134>)
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	021b      	lsls	r3, r3, #8
 800477e:	4a1d      	ldr	r2, [pc, #116]	; (80047f4 <xPortStartScheduler+0x134>)
 8004780:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004782:	4b1c      	ldr	r3, [pc, #112]	; (80047f4 <xPortStartScheduler+0x134>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800478a:	4a1a      	ldr	r2, [pc, #104]	; (80047f4 <xPortStartScheduler+0x134>)
 800478c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	b2da      	uxtb	r2, r3
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004796:	4b18      	ldr	r3, [pc, #96]	; (80047f8 <xPortStartScheduler+0x138>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a17      	ldr	r2, [pc, #92]	; (80047f8 <xPortStartScheduler+0x138>)
 800479c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80047a0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80047a2:	4b15      	ldr	r3, [pc, #84]	; (80047f8 <xPortStartScheduler+0x138>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	4a14      	ldr	r2, [pc, #80]	; (80047f8 <xPortStartScheduler+0x138>)
 80047a8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80047ac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80047ae:	f000 f8dd 	bl	800496c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80047b2:	4b12      	ldr	r3, [pc, #72]	; (80047fc <xPortStartScheduler+0x13c>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80047b8:	f000 f8fc 	bl	80049b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80047bc:	4b10      	ldr	r3, [pc, #64]	; (8004800 <xPortStartScheduler+0x140>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	4a0f      	ldr	r2, [pc, #60]	; (8004800 <xPortStartScheduler+0x140>)
 80047c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80047c6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80047c8:	f7ff ff66 	bl	8004698 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80047cc:	f7fe ff3a 	bl	8003644 <vTaskSwitchContext>
	prvTaskExitError();
 80047d0:	f7ff ff1e 	bl	8004610 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80047d4:	2300      	movs	r3, #0
}
 80047d6:	4618      	mov	r0, r3
 80047d8:	3718      	adds	r7, #24
 80047da:	46bd      	mov	sp, r7
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	bf00      	nop
 80047e0:	e000ed00 	.word	0xe000ed00
 80047e4:	410fc271 	.word	0x410fc271
 80047e8:	410fc270 	.word	0x410fc270
 80047ec:	e000e400 	.word	0xe000e400
 80047f0:	20000ed0 	.word	0x20000ed0
 80047f4:	20000ed4 	.word	0x20000ed4
 80047f8:	e000ed20 	.word	0xe000ed20
 80047fc:	2000000c 	.word	0x2000000c
 8004800:	e000ef34 	.word	0xe000ef34

08004804 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
	__asm volatile
 800480a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800480e:	f383 8811 	msr	BASEPRI, r3
 8004812:	f3bf 8f6f 	isb	sy
 8004816:	f3bf 8f4f 	dsb	sy
 800481a:	607b      	str	r3, [r7, #4]
}
 800481c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800481e:	4b0f      	ldr	r3, [pc, #60]	; (800485c <vPortEnterCritical+0x58>)
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	3301      	adds	r3, #1
 8004824:	4a0d      	ldr	r2, [pc, #52]	; (800485c <vPortEnterCritical+0x58>)
 8004826:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004828:	4b0c      	ldr	r3, [pc, #48]	; (800485c <vPortEnterCritical+0x58>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d10f      	bne.n	8004850 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004830:	4b0b      	ldr	r3, [pc, #44]	; (8004860 <vPortEnterCritical+0x5c>)
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d00a      	beq.n	8004850 <vPortEnterCritical+0x4c>
	__asm volatile
 800483a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483e:	f383 8811 	msr	BASEPRI, r3
 8004842:	f3bf 8f6f 	isb	sy
 8004846:	f3bf 8f4f 	dsb	sy
 800484a:	603b      	str	r3, [r7, #0]
}
 800484c:	bf00      	nop
 800484e:	e7fe      	b.n	800484e <vPortEnterCritical+0x4a>
	}
}
 8004850:	bf00      	nop
 8004852:	370c      	adds	r7, #12
 8004854:	46bd      	mov	sp, r7
 8004856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485a:	4770      	bx	lr
 800485c:	2000000c 	.word	0x2000000c
 8004860:	e000ed04 	.word	0xe000ed04

08004864 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004864:	b480      	push	{r7}
 8004866:	b083      	sub	sp, #12
 8004868:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800486a:	4b12      	ldr	r3, [pc, #72]	; (80048b4 <vPortExitCritical+0x50>)
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d10a      	bne.n	8004888 <vPortExitCritical+0x24>
	__asm volatile
 8004872:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004876:	f383 8811 	msr	BASEPRI, r3
 800487a:	f3bf 8f6f 	isb	sy
 800487e:	f3bf 8f4f 	dsb	sy
 8004882:	607b      	str	r3, [r7, #4]
}
 8004884:	bf00      	nop
 8004886:	e7fe      	b.n	8004886 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004888:	4b0a      	ldr	r3, [pc, #40]	; (80048b4 <vPortExitCritical+0x50>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	3b01      	subs	r3, #1
 800488e:	4a09      	ldr	r2, [pc, #36]	; (80048b4 <vPortExitCritical+0x50>)
 8004890:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004892:	4b08      	ldr	r3, [pc, #32]	; (80048b4 <vPortExitCritical+0x50>)
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	2b00      	cmp	r3, #0
 8004898:	d105      	bne.n	80048a6 <vPortExitCritical+0x42>
 800489a:	2300      	movs	r3, #0
 800489c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	f383 8811 	msr	BASEPRI, r3
}
 80048a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80048a6:	bf00      	nop
 80048a8:	370c      	adds	r7, #12
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	2000000c 	.word	0x2000000c
	...

080048c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80048c0:	f3ef 8009 	mrs	r0, PSP
 80048c4:	f3bf 8f6f 	isb	sy
 80048c8:	4b15      	ldr	r3, [pc, #84]	; (8004920 <pxCurrentTCBConst>)
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	f01e 0f10 	tst.w	lr, #16
 80048d0:	bf08      	it	eq
 80048d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80048d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80048da:	6010      	str	r0, [r2, #0]
 80048dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80048e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80048e4:	f380 8811 	msr	BASEPRI, r0
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	f3bf 8f6f 	isb	sy
 80048f0:	f7fe fea8 	bl	8003644 <vTaskSwitchContext>
 80048f4:	f04f 0000 	mov.w	r0, #0
 80048f8:	f380 8811 	msr	BASEPRI, r0
 80048fc:	bc09      	pop	{r0, r3}
 80048fe:	6819      	ldr	r1, [r3, #0]
 8004900:	6808      	ldr	r0, [r1, #0]
 8004902:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004906:	f01e 0f10 	tst.w	lr, #16
 800490a:	bf08      	it	eq
 800490c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004910:	f380 8809 	msr	PSP, r0
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	4770      	bx	lr
 800491a:	bf00      	nop
 800491c:	f3af 8000 	nop.w

08004920 <pxCurrentTCBConst>:
 8004920:	200008a4 	.word	0x200008a4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop

08004928 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004928:	b580      	push	{r7, lr}
 800492a:	b082      	sub	sp, #8
 800492c:	af00      	add	r7, sp, #0
	__asm volatile
 800492e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004932:	f383 8811 	msr	BASEPRI, r3
 8004936:	f3bf 8f6f 	isb	sy
 800493a:	f3bf 8f4f 	dsb	sy
 800493e:	607b      	str	r3, [r7, #4]
}
 8004940:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004942:	f7fe fdc5 	bl	80034d0 <xTaskIncrementTick>
 8004946:	4603      	mov	r3, r0
 8004948:	2b00      	cmp	r3, #0
 800494a:	d003      	beq.n	8004954 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800494c:	4b06      	ldr	r3, [pc, #24]	; (8004968 <xPortSysTickHandler+0x40>)
 800494e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004952:	601a      	str	r2, [r3, #0]
 8004954:	2300      	movs	r3, #0
 8004956:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004958:	683b      	ldr	r3, [r7, #0]
 800495a:	f383 8811 	msr	BASEPRI, r3
}
 800495e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004960:	bf00      	nop
 8004962:	3708      	adds	r7, #8
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	e000ed04 	.word	0xe000ed04

0800496c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004970:	4b0b      	ldr	r3, [pc, #44]	; (80049a0 <vPortSetupTimerInterrupt+0x34>)
 8004972:	2200      	movs	r2, #0
 8004974:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004976:	4b0b      	ldr	r3, [pc, #44]	; (80049a4 <vPortSetupTimerInterrupt+0x38>)
 8004978:	2200      	movs	r2, #0
 800497a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800497c:	4b0a      	ldr	r3, [pc, #40]	; (80049a8 <vPortSetupTimerInterrupt+0x3c>)
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <vPortSetupTimerInterrupt+0x40>)
 8004982:	fba2 2303 	umull	r2, r3, r2, r3
 8004986:	099b      	lsrs	r3, r3, #6
 8004988:	4a09      	ldr	r2, [pc, #36]	; (80049b0 <vPortSetupTimerInterrupt+0x44>)
 800498a:	3b01      	subs	r3, #1
 800498c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800498e:	4b04      	ldr	r3, [pc, #16]	; (80049a0 <vPortSetupTimerInterrupt+0x34>)
 8004990:	2207      	movs	r2, #7
 8004992:	601a      	str	r2, [r3, #0]
}
 8004994:	bf00      	nop
 8004996:	46bd      	mov	sp, r7
 8004998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800499c:	4770      	bx	lr
 800499e:	bf00      	nop
 80049a0:	e000e010 	.word	0xe000e010
 80049a4:	e000e018 	.word	0xe000e018
 80049a8:	20000000 	.word	0x20000000
 80049ac:	10624dd3 	.word	0x10624dd3
 80049b0:	e000e014 	.word	0xe000e014

080049b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80049b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80049c4 <vPortEnableVFP+0x10>
 80049b8:	6801      	ldr	r1, [r0, #0]
 80049ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80049be:	6001      	str	r1, [r0, #0]
 80049c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80049c2:	bf00      	nop
 80049c4:	e000ed88 	.word	0xe000ed88

080049c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80049c8:	b480      	push	{r7}
 80049ca:	b085      	sub	sp, #20
 80049cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80049ce:	f3ef 8305 	mrs	r3, IPSR
 80049d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	2b0f      	cmp	r3, #15
 80049d8:	d914      	bls.n	8004a04 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80049da:	4a17      	ldr	r2, [pc, #92]	; (8004a38 <vPortValidateInterruptPriority+0x70>)
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80049e4:	4b15      	ldr	r3, [pc, #84]	; (8004a3c <vPortValidateInterruptPriority+0x74>)
 80049e6:	781b      	ldrb	r3, [r3, #0]
 80049e8:	7afa      	ldrb	r2, [r7, #11]
 80049ea:	429a      	cmp	r2, r3
 80049ec:	d20a      	bcs.n	8004a04 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80049ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049f2:	f383 8811 	msr	BASEPRI, r3
 80049f6:	f3bf 8f6f 	isb	sy
 80049fa:	f3bf 8f4f 	dsb	sy
 80049fe:	607b      	str	r3, [r7, #4]
}
 8004a00:	bf00      	nop
 8004a02:	e7fe      	b.n	8004a02 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004a04:	4b0e      	ldr	r3, [pc, #56]	; (8004a40 <vPortValidateInterruptPriority+0x78>)
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004a0c:	4b0d      	ldr	r3, [pc, #52]	; (8004a44 <vPortValidateInterruptPriority+0x7c>)
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	429a      	cmp	r2, r3
 8004a12:	d90a      	bls.n	8004a2a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004a14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a18:	f383 8811 	msr	BASEPRI, r3
 8004a1c:	f3bf 8f6f 	isb	sy
 8004a20:	f3bf 8f4f 	dsb	sy
 8004a24:	603b      	str	r3, [r7, #0]
}
 8004a26:	bf00      	nop
 8004a28:	e7fe      	b.n	8004a28 <vPortValidateInterruptPriority+0x60>
	}
 8004a2a:	bf00      	nop
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	e000e3f0 	.word	0xe000e3f0
 8004a3c:	20000ed0 	.word	0x20000ed0
 8004a40:	e000ed0c 	.word	0xe000ed0c
 8004a44:	20000ed4 	.word	0x20000ed4

08004a48 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b08a      	sub	sp, #40	; 0x28
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004a50:	2300      	movs	r3, #0
 8004a52:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004a54:	f7fe fc80 	bl	8003358 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004a58:	4b5b      	ldr	r3, [pc, #364]	; (8004bc8 <pvPortMalloc+0x180>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d101      	bne.n	8004a64 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004a60:	f000 f920 	bl	8004ca4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004a64:	4b59      	ldr	r3, [pc, #356]	; (8004bcc <pvPortMalloc+0x184>)
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	4013      	ands	r3, r2
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	f040 8093 	bne.w	8004b98 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01d      	beq.n	8004ab4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004a78:	2208      	movs	r2, #8
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	4413      	add	r3, r2
 8004a7e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d014      	beq.n	8004ab4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	f023 0307 	bic.w	r3, r3, #7
 8004a90:	3308      	adds	r3, #8
 8004a92:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	f003 0307 	and.w	r3, r3, #7
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d00a      	beq.n	8004ab4 <pvPortMalloc+0x6c>
	__asm volatile
 8004a9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aa2:	f383 8811 	msr	BASEPRI, r3
 8004aa6:	f3bf 8f6f 	isb	sy
 8004aaa:	f3bf 8f4f 	dsb	sy
 8004aae:	617b      	str	r3, [r7, #20]
}
 8004ab0:	bf00      	nop
 8004ab2:	e7fe      	b.n	8004ab2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d06e      	beq.n	8004b98 <pvPortMalloc+0x150>
 8004aba:	4b45      	ldr	r3, [pc, #276]	; (8004bd0 <pvPortMalloc+0x188>)
 8004abc:	681b      	ldr	r3, [r3, #0]
 8004abe:	687a      	ldr	r2, [r7, #4]
 8004ac0:	429a      	cmp	r2, r3
 8004ac2:	d869      	bhi.n	8004b98 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004ac4:	4b43      	ldr	r3, [pc, #268]	; (8004bd4 <pvPortMalloc+0x18c>)
 8004ac6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004ac8:	4b42      	ldr	r3, [pc, #264]	; (8004bd4 <pvPortMalloc+0x18c>)
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ace:	e004      	b.n	8004ada <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	687a      	ldr	r2, [r7, #4]
 8004ae0:	429a      	cmp	r2, r3
 8004ae2:	d903      	bls.n	8004aec <pvPortMalloc+0xa4>
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f1      	bne.n	8004ad0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004aec:	4b36      	ldr	r3, [pc, #216]	; (8004bc8 <pvPortMalloc+0x180>)
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004af2:	429a      	cmp	r2, r3
 8004af4:	d050      	beq.n	8004b98 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004af6:	6a3b      	ldr	r3, [r7, #32]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	2208      	movs	r2, #8
 8004afc:	4413      	add	r3, r2
 8004afe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004b00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	6a3b      	ldr	r3, [r7, #32]
 8004b06:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004b08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b0a:	685a      	ldr	r2, [r3, #4]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	1ad2      	subs	r2, r2, r3
 8004b10:	2308      	movs	r3, #8
 8004b12:	005b      	lsls	r3, r3, #1
 8004b14:	429a      	cmp	r2, r3
 8004b16:	d91f      	bls.n	8004b58 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	4413      	add	r3, r2
 8004b1e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d00a      	beq.n	8004b40 <pvPortMalloc+0xf8>
	__asm volatile
 8004b2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b2e:	f383 8811 	msr	BASEPRI, r3
 8004b32:	f3bf 8f6f 	isb	sy
 8004b36:	f3bf 8f4f 	dsb	sy
 8004b3a:	613b      	str	r3, [r7, #16]
}
 8004b3c:	bf00      	nop
 8004b3e:	e7fe      	b.n	8004b3e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004b40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b42:	685a      	ldr	r2, [r3, #4]
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	1ad2      	subs	r2, r2, r3
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004b4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004b52:	69b8      	ldr	r0, [r7, #24]
 8004b54:	f000 f908 	bl	8004d68 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004b58:	4b1d      	ldr	r3, [pc, #116]	; (8004bd0 <pvPortMalloc+0x188>)
 8004b5a:	681a      	ldr	r2, [r3, #0]
 8004b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b5e:	685b      	ldr	r3, [r3, #4]
 8004b60:	1ad3      	subs	r3, r2, r3
 8004b62:	4a1b      	ldr	r2, [pc, #108]	; (8004bd0 <pvPortMalloc+0x188>)
 8004b64:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004b66:	4b1a      	ldr	r3, [pc, #104]	; (8004bd0 <pvPortMalloc+0x188>)
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	4b1b      	ldr	r3, [pc, #108]	; (8004bd8 <pvPortMalloc+0x190>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	429a      	cmp	r2, r3
 8004b70:	d203      	bcs.n	8004b7a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004b72:	4b17      	ldr	r3, [pc, #92]	; (8004bd0 <pvPortMalloc+0x188>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	4a18      	ldr	r2, [pc, #96]	; (8004bd8 <pvPortMalloc+0x190>)
 8004b78:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	685a      	ldr	r2, [r3, #4]
 8004b7e:	4b13      	ldr	r3, [pc, #76]	; (8004bcc <pvPortMalloc+0x184>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	431a      	orrs	r2, r3
 8004b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b86:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8a:	2200      	movs	r2, #0
 8004b8c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004b8e:	4b13      	ldr	r3, [pc, #76]	; (8004bdc <pvPortMalloc+0x194>)
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3301      	adds	r3, #1
 8004b94:	4a11      	ldr	r2, [pc, #68]	; (8004bdc <pvPortMalloc+0x194>)
 8004b96:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004b98:	f7fe fbec 	bl	8003374 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004b9c:	69fb      	ldr	r3, [r7, #28]
 8004b9e:	f003 0307 	and.w	r3, r3, #7
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d00a      	beq.n	8004bbc <pvPortMalloc+0x174>
	__asm volatile
 8004ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004baa:	f383 8811 	msr	BASEPRI, r3
 8004bae:	f3bf 8f6f 	isb	sy
 8004bb2:	f3bf 8f4f 	dsb	sy
 8004bb6:	60fb      	str	r3, [r7, #12]
}
 8004bb8:	bf00      	nop
 8004bba:	e7fe      	b.n	8004bba <pvPortMalloc+0x172>
	return pvReturn;
 8004bbc:	69fb      	ldr	r3, [r7, #28]
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3728      	adds	r7, #40	; 0x28
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	bd80      	pop	{r7, pc}
 8004bc6:	bf00      	nop
 8004bc8:	20004ae0 	.word	0x20004ae0
 8004bcc:	20004af4 	.word	0x20004af4
 8004bd0:	20004ae4 	.word	0x20004ae4
 8004bd4:	20004ad8 	.word	0x20004ad8
 8004bd8:	20004ae8 	.word	0x20004ae8
 8004bdc:	20004aec 	.word	0x20004aec

08004be0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004be0:	b580      	push	{r7, lr}
 8004be2:	b086      	sub	sp, #24
 8004be4:	af00      	add	r7, sp, #0
 8004be6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d04d      	beq.n	8004c8e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004bf2:	2308      	movs	r3, #8
 8004bf4:	425b      	negs	r3, r3
 8004bf6:	697a      	ldr	r2, [r7, #20]
 8004bf8:	4413      	add	r3, r2
 8004bfa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	4b24      	ldr	r3, [pc, #144]	; (8004c98 <vPortFree+0xb8>)
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	4013      	ands	r3, r2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d10a      	bne.n	8004c24 <vPortFree+0x44>
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	60fb      	str	r3, [r7, #12]
}
 8004c20:	bf00      	nop
 8004c22:	e7fe      	b.n	8004c22 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004c24:	693b      	ldr	r3, [r7, #16]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d00a      	beq.n	8004c42 <vPortFree+0x62>
	__asm volatile
 8004c2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c30:	f383 8811 	msr	BASEPRI, r3
 8004c34:	f3bf 8f6f 	isb	sy
 8004c38:	f3bf 8f4f 	dsb	sy
 8004c3c:	60bb      	str	r3, [r7, #8]
}
 8004c3e:	bf00      	nop
 8004c40:	e7fe      	b.n	8004c40 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004c42:	693b      	ldr	r3, [r7, #16]
 8004c44:	685a      	ldr	r2, [r3, #4]
 8004c46:	4b14      	ldr	r3, [pc, #80]	; (8004c98 <vPortFree+0xb8>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4013      	ands	r3, r2
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d01e      	beq.n	8004c8e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004c50:	693b      	ldr	r3, [r7, #16]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d11a      	bne.n	8004c8e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004c58:	693b      	ldr	r3, [r7, #16]
 8004c5a:	685a      	ldr	r2, [r3, #4]
 8004c5c:	4b0e      	ldr	r3, [pc, #56]	; (8004c98 <vPortFree+0xb8>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	43db      	mvns	r3, r3
 8004c62:	401a      	ands	r2, r3
 8004c64:	693b      	ldr	r3, [r7, #16]
 8004c66:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004c68:	f7fe fb76 	bl	8003358 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	685a      	ldr	r2, [r3, #4]
 8004c70:	4b0a      	ldr	r3, [pc, #40]	; (8004c9c <vPortFree+0xbc>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4413      	add	r3, r2
 8004c76:	4a09      	ldr	r2, [pc, #36]	; (8004c9c <vPortFree+0xbc>)
 8004c78:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004c7a:	6938      	ldr	r0, [r7, #16]
 8004c7c:	f000 f874 	bl	8004d68 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004c80:	4b07      	ldr	r3, [pc, #28]	; (8004ca0 <vPortFree+0xc0>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	3301      	adds	r3, #1
 8004c86:	4a06      	ldr	r2, [pc, #24]	; (8004ca0 <vPortFree+0xc0>)
 8004c88:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004c8a:	f7fe fb73 	bl	8003374 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004c8e:	bf00      	nop
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop
 8004c98:	20004af4 	.word	0x20004af4
 8004c9c:	20004ae4 	.word	0x20004ae4
 8004ca0:	20004af0 	.word	0x20004af0

08004ca4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004ca4:	b480      	push	{r7}
 8004ca6:	b085      	sub	sp, #20
 8004ca8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004caa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 8004cae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004cb0:	4b27      	ldr	r3, [pc, #156]	; (8004d50 <prvHeapInit+0xac>)
 8004cb2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	f003 0307 	and.w	r3, r3, #7
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d00c      	beq.n	8004cd8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	3307      	adds	r3, #7
 8004cc2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	f023 0307 	bic.w	r3, r3, #7
 8004cca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	4a1f      	ldr	r2, [pc, #124]	; (8004d50 <prvHeapInit+0xac>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004cdc:	4a1d      	ldr	r2, [pc, #116]	; (8004d54 <prvHeapInit+0xb0>)
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004ce2:	4b1c      	ldr	r3, [pc, #112]	; (8004d54 <prvHeapInit+0xb0>)
 8004ce4:	2200      	movs	r2, #0
 8004ce6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	4413      	add	r3, r2
 8004cee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004cf0:	2208      	movs	r2, #8
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	1a9b      	subs	r3, r3, r2
 8004cf6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f023 0307 	bic.w	r3, r3, #7
 8004cfe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4a15      	ldr	r2, [pc, #84]	; (8004d58 <prvHeapInit+0xb4>)
 8004d04:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004d06:	4b14      	ldr	r3, [pc, #80]	; (8004d58 <prvHeapInit+0xb4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	2200      	movs	r2, #0
 8004d0c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004d0e:	4b12      	ldr	r3, [pc, #72]	; (8004d58 <prvHeapInit+0xb4>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	2200      	movs	r2, #0
 8004d14:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004d1a:	683b      	ldr	r3, [r7, #0]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	1ad2      	subs	r2, r2, r3
 8004d20:	683b      	ldr	r3, [r7, #0]
 8004d22:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <prvHeapInit+0xb4>)
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	683b      	ldr	r3, [r7, #0]
 8004d2a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	4a0a      	ldr	r2, [pc, #40]	; (8004d5c <prvHeapInit+0xb8>)
 8004d32:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004d34:	683b      	ldr	r3, [r7, #0]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	4a09      	ldr	r2, [pc, #36]	; (8004d60 <prvHeapInit+0xbc>)
 8004d3a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8004d3c:	4b09      	ldr	r3, [pc, #36]	; (8004d64 <prvHeapInit+0xc0>)
 8004d3e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004d42:	601a      	str	r2, [r3, #0]
}
 8004d44:	bf00      	nop
 8004d46:	3714      	adds	r7, #20
 8004d48:	46bd      	mov	sp, r7
 8004d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d4e:	4770      	bx	lr
 8004d50:	20000ed8 	.word	0x20000ed8
 8004d54:	20004ad8 	.word	0x20004ad8
 8004d58:	20004ae0 	.word	0x20004ae0
 8004d5c:	20004ae8 	.word	0x20004ae8
 8004d60:	20004ae4 	.word	0x20004ae4
 8004d64:	20004af4 	.word	0x20004af4

08004d68 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004d68:	b480      	push	{r7}
 8004d6a:	b085      	sub	sp, #20
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8004d70:	4b28      	ldr	r3, [pc, #160]	; (8004e14 <prvInsertBlockIntoFreeList+0xac>)
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e002      	b.n	8004d7c <prvInsertBlockIntoFreeList+0x14>
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	60fb      	str	r3, [r7, #12]
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	687a      	ldr	r2, [r7, #4]
 8004d82:	429a      	cmp	r2, r3
 8004d84:	d8f7      	bhi.n	8004d76 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	4413      	add	r3, r2
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d108      	bne.n	8004daa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	685a      	ldr	r2, [r3, #4]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	685b      	ldr	r3, [r3, #4]
 8004da0:	441a      	add	r2, r3
 8004da2:	68fb      	ldr	r3, [r7, #12]
 8004da4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	68ba      	ldr	r2, [r7, #8]
 8004db4:	441a      	add	r2, r3
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	429a      	cmp	r2, r3
 8004dbc:	d118      	bne.n	8004df0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <prvInsertBlockIntoFreeList+0xb0>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	429a      	cmp	r2, r3
 8004dc8:	d00d      	beq.n	8004de6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	685a      	ldr	r2, [r3, #4]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685b      	ldr	r3, [r3, #4]
 8004dd4:	441a      	add	r2, r3
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	681a      	ldr	r2, [r3, #0]
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	601a      	str	r2, [r3, #0]
 8004de4:	e008      	b.n	8004df8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004de6:	4b0c      	ldr	r3, [pc, #48]	; (8004e18 <prvInsertBlockIntoFreeList+0xb0>)
 8004de8:	681a      	ldr	r2, [r3, #0]
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	601a      	str	r2, [r3, #0]
 8004dee:	e003      	b.n	8004df8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004df8:	68fa      	ldr	r2, [r7, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	429a      	cmp	r2, r3
 8004dfe:	d002      	beq.n	8004e06 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	20004ad8 	.word	0x20004ad8
 8004e18:	20004ae0 	.word	0x20004ae0

08004e1c <__libc_init_array>:
 8004e1c:	b570      	push	{r4, r5, r6, lr}
 8004e1e:	4d0d      	ldr	r5, [pc, #52]	; (8004e54 <__libc_init_array+0x38>)
 8004e20:	4c0d      	ldr	r4, [pc, #52]	; (8004e58 <__libc_init_array+0x3c>)
 8004e22:	1b64      	subs	r4, r4, r5
 8004e24:	10a4      	asrs	r4, r4, #2
 8004e26:	2600      	movs	r6, #0
 8004e28:	42a6      	cmp	r6, r4
 8004e2a:	d109      	bne.n	8004e40 <__libc_init_array+0x24>
 8004e2c:	4d0b      	ldr	r5, [pc, #44]	; (8004e5c <__libc_init_array+0x40>)
 8004e2e:	4c0c      	ldr	r4, [pc, #48]	; (8004e60 <__libc_init_array+0x44>)
 8004e30:	f000 f8f2 	bl	8005018 <_init>
 8004e34:	1b64      	subs	r4, r4, r5
 8004e36:	10a4      	asrs	r4, r4, #2
 8004e38:	2600      	movs	r6, #0
 8004e3a:	42a6      	cmp	r6, r4
 8004e3c:	d105      	bne.n	8004e4a <__libc_init_array+0x2e>
 8004e3e:	bd70      	pop	{r4, r5, r6, pc}
 8004e40:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e44:	4798      	blx	r3
 8004e46:	3601      	adds	r6, #1
 8004e48:	e7ee      	b.n	8004e28 <__libc_init_array+0xc>
 8004e4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8004e4e:	4798      	blx	r3
 8004e50:	3601      	adds	r6, #1
 8004e52:	e7f2      	b.n	8004e3a <__libc_init_array+0x1e>
 8004e54:	08005138 	.word	0x08005138
 8004e58:	08005138 	.word	0x08005138
 8004e5c:	08005138 	.word	0x08005138
 8004e60:	0800513c 	.word	0x0800513c

08004e64 <__retarget_lock_acquire_recursive>:
 8004e64:	4770      	bx	lr

08004e66 <__retarget_lock_release_recursive>:
 8004e66:	4770      	bx	lr

08004e68 <memcpy>:
 8004e68:	440a      	add	r2, r1
 8004e6a:	4291      	cmp	r1, r2
 8004e6c:	f100 33ff 	add.w	r3, r0, #4294967295
 8004e70:	d100      	bne.n	8004e74 <memcpy+0xc>
 8004e72:	4770      	bx	lr
 8004e74:	b510      	push	{r4, lr}
 8004e76:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004e7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004e7e:	4291      	cmp	r1, r2
 8004e80:	d1f9      	bne.n	8004e76 <memcpy+0xe>
 8004e82:	bd10      	pop	{r4, pc}

08004e84 <memset>:
 8004e84:	4402      	add	r2, r0
 8004e86:	4603      	mov	r3, r0
 8004e88:	4293      	cmp	r3, r2
 8004e8a:	d100      	bne.n	8004e8e <memset+0xa>
 8004e8c:	4770      	bx	lr
 8004e8e:	f803 1b01 	strb.w	r1, [r3], #1
 8004e92:	e7f9      	b.n	8004e88 <memset+0x4>

08004e94 <cleanup_glue>:
 8004e94:	b538      	push	{r3, r4, r5, lr}
 8004e96:	460c      	mov	r4, r1
 8004e98:	6809      	ldr	r1, [r1, #0]
 8004e9a:	4605      	mov	r5, r0
 8004e9c:	b109      	cbz	r1, 8004ea2 <cleanup_glue+0xe>
 8004e9e:	f7ff fff9 	bl	8004e94 <cleanup_glue>
 8004ea2:	4621      	mov	r1, r4
 8004ea4:	4628      	mov	r0, r5
 8004ea6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004eaa:	f000 b869 	b.w	8004f80 <_free_r>
	...

08004eb0 <_reclaim_reent>:
 8004eb0:	4b2c      	ldr	r3, [pc, #176]	; (8004f64 <_reclaim_reent+0xb4>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	4283      	cmp	r3, r0
 8004eb6:	b570      	push	{r4, r5, r6, lr}
 8004eb8:	4604      	mov	r4, r0
 8004eba:	d051      	beq.n	8004f60 <_reclaim_reent+0xb0>
 8004ebc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8004ebe:	b143      	cbz	r3, 8004ed2 <_reclaim_reent+0x22>
 8004ec0:	68db      	ldr	r3, [r3, #12]
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d14a      	bne.n	8004f5c <_reclaim_reent+0xac>
 8004ec6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004ec8:	6819      	ldr	r1, [r3, #0]
 8004eca:	b111      	cbz	r1, 8004ed2 <_reclaim_reent+0x22>
 8004ecc:	4620      	mov	r0, r4
 8004ece:	f000 f857 	bl	8004f80 <_free_r>
 8004ed2:	6961      	ldr	r1, [r4, #20]
 8004ed4:	b111      	cbz	r1, 8004edc <_reclaim_reent+0x2c>
 8004ed6:	4620      	mov	r0, r4
 8004ed8:	f000 f852 	bl	8004f80 <_free_r>
 8004edc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ede:	b111      	cbz	r1, 8004ee6 <_reclaim_reent+0x36>
 8004ee0:	4620      	mov	r0, r4
 8004ee2:	f000 f84d 	bl	8004f80 <_free_r>
 8004ee6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004ee8:	b111      	cbz	r1, 8004ef0 <_reclaim_reent+0x40>
 8004eea:	4620      	mov	r0, r4
 8004eec:	f000 f848 	bl	8004f80 <_free_r>
 8004ef0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004ef2:	b111      	cbz	r1, 8004efa <_reclaim_reent+0x4a>
 8004ef4:	4620      	mov	r0, r4
 8004ef6:	f000 f843 	bl	8004f80 <_free_r>
 8004efa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8004efc:	b111      	cbz	r1, 8004f04 <_reclaim_reent+0x54>
 8004efe:	4620      	mov	r0, r4
 8004f00:	f000 f83e 	bl	8004f80 <_free_r>
 8004f04:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004f06:	b111      	cbz	r1, 8004f0e <_reclaim_reent+0x5e>
 8004f08:	4620      	mov	r0, r4
 8004f0a:	f000 f839 	bl	8004f80 <_free_r>
 8004f0e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004f10:	b111      	cbz	r1, 8004f18 <_reclaim_reent+0x68>
 8004f12:	4620      	mov	r0, r4
 8004f14:	f000 f834 	bl	8004f80 <_free_r>
 8004f18:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8004f1a:	b111      	cbz	r1, 8004f22 <_reclaim_reent+0x72>
 8004f1c:	4620      	mov	r0, r4
 8004f1e:	f000 f82f 	bl	8004f80 <_free_r>
 8004f22:	69a3      	ldr	r3, [r4, #24]
 8004f24:	b1e3      	cbz	r3, 8004f60 <_reclaim_reent+0xb0>
 8004f26:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004f28:	4620      	mov	r0, r4
 8004f2a:	4798      	blx	r3
 8004f2c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8004f2e:	b1b9      	cbz	r1, 8004f60 <_reclaim_reent+0xb0>
 8004f30:	4620      	mov	r0, r4
 8004f32:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f36:	f7ff bfad 	b.w	8004e94 <cleanup_glue>
 8004f3a:	5949      	ldr	r1, [r1, r5]
 8004f3c:	b941      	cbnz	r1, 8004f50 <_reclaim_reent+0xa0>
 8004f3e:	3504      	adds	r5, #4
 8004f40:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004f42:	2d80      	cmp	r5, #128	; 0x80
 8004f44:	68d9      	ldr	r1, [r3, #12]
 8004f46:	d1f8      	bne.n	8004f3a <_reclaim_reent+0x8a>
 8004f48:	4620      	mov	r0, r4
 8004f4a:	f000 f819 	bl	8004f80 <_free_r>
 8004f4e:	e7ba      	b.n	8004ec6 <_reclaim_reent+0x16>
 8004f50:	680e      	ldr	r6, [r1, #0]
 8004f52:	4620      	mov	r0, r4
 8004f54:	f000 f814 	bl	8004f80 <_free_r>
 8004f58:	4631      	mov	r1, r6
 8004f5a:	e7ef      	b.n	8004f3c <_reclaim_reent+0x8c>
 8004f5c:	2500      	movs	r5, #0
 8004f5e:	e7ef      	b.n	8004f40 <_reclaim_reent+0x90>
 8004f60:	bd70      	pop	{r4, r5, r6, pc}
 8004f62:	bf00      	nop
 8004f64:	20000010 	.word	0x20000010

08004f68 <__malloc_lock>:
 8004f68:	4801      	ldr	r0, [pc, #4]	; (8004f70 <__malloc_lock+0x8>)
 8004f6a:	f7ff bf7b 	b.w	8004e64 <__retarget_lock_acquire_recursive>
 8004f6e:	bf00      	nop
 8004f70:	20004af8 	.word	0x20004af8

08004f74 <__malloc_unlock>:
 8004f74:	4801      	ldr	r0, [pc, #4]	; (8004f7c <__malloc_unlock+0x8>)
 8004f76:	f7ff bf76 	b.w	8004e66 <__retarget_lock_release_recursive>
 8004f7a:	bf00      	nop
 8004f7c:	20004af8 	.word	0x20004af8

08004f80 <_free_r>:
 8004f80:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004f82:	2900      	cmp	r1, #0
 8004f84:	d044      	beq.n	8005010 <_free_r+0x90>
 8004f86:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f8a:	9001      	str	r0, [sp, #4]
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	f1a1 0404 	sub.w	r4, r1, #4
 8004f92:	bfb8      	it	lt
 8004f94:	18e4      	addlt	r4, r4, r3
 8004f96:	f7ff ffe7 	bl	8004f68 <__malloc_lock>
 8004f9a:	4a1e      	ldr	r2, [pc, #120]	; (8005014 <_free_r+0x94>)
 8004f9c:	9801      	ldr	r0, [sp, #4]
 8004f9e:	6813      	ldr	r3, [r2, #0]
 8004fa0:	b933      	cbnz	r3, 8004fb0 <_free_r+0x30>
 8004fa2:	6063      	str	r3, [r4, #4]
 8004fa4:	6014      	str	r4, [r2, #0]
 8004fa6:	b003      	add	sp, #12
 8004fa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004fac:	f7ff bfe2 	b.w	8004f74 <__malloc_unlock>
 8004fb0:	42a3      	cmp	r3, r4
 8004fb2:	d908      	bls.n	8004fc6 <_free_r+0x46>
 8004fb4:	6825      	ldr	r5, [r4, #0]
 8004fb6:	1961      	adds	r1, r4, r5
 8004fb8:	428b      	cmp	r3, r1
 8004fba:	bf01      	itttt	eq
 8004fbc:	6819      	ldreq	r1, [r3, #0]
 8004fbe:	685b      	ldreq	r3, [r3, #4]
 8004fc0:	1949      	addeq	r1, r1, r5
 8004fc2:	6021      	streq	r1, [r4, #0]
 8004fc4:	e7ed      	b.n	8004fa2 <_free_r+0x22>
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	b10b      	cbz	r3, 8004fd0 <_free_r+0x50>
 8004fcc:	42a3      	cmp	r3, r4
 8004fce:	d9fa      	bls.n	8004fc6 <_free_r+0x46>
 8004fd0:	6811      	ldr	r1, [r2, #0]
 8004fd2:	1855      	adds	r5, r2, r1
 8004fd4:	42a5      	cmp	r5, r4
 8004fd6:	d10b      	bne.n	8004ff0 <_free_r+0x70>
 8004fd8:	6824      	ldr	r4, [r4, #0]
 8004fda:	4421      	add	r1, r4
 8004fdc:	1854      	adds	r4, r2, r1
 8004fde:	42a3      	cmp	r3, r4
 8004fe0:	6011      	str	r1, [r2, #0]
 8004fe2:	d1e0      	bne.n	8004fa6 <_free_r+0x26>
 8004fe4:	681c      	ldr	r4, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	6053      	str	r3, [r2, #4]
 8004fea:	4421      	add	r1, r4
 8004fec:	6011      	str	r1, [r2, #0]
 8004fee:	e7da      	b.n	8004fa6 <_free_r+0x26>
 8004ff0:	d902      	bls.n	8004ff8 <_free_r+0x78>
 8004ff2:	230c      	movs	r3, #12
 8004ff4:	6003      	str	r3, [r0, #0]
 8004ff6:	e7d6      	b.n	8004fa6 <_free_r+0x26>
 8004ff8:	6825      	ldr	r5, [r4, #0]
 8004ffa:	1961      	adds	r1, r4, r5
 8004ffc:	428b      	cmp	r3, r1
 8004ffe:	bf04      	itt	eq
 8005000:	6819      	ldreq	r1, [r3, #0]
 8005002:	685b      	ldreq	r3, [r3, #4]
 8005004:	6063      	str	r3, [r4, #4]
 8005006:	bf04      	itt	eq
 8005008:	1949      	addeq	r1, r1, r5
 800500a:	6021      	streq	r1, [r4, #0]
 800500c:	6054      	str	r4, [r2, #4]
 800500e:	e7ca      	b.n	8004fa6 <_free_r+0x26>
 8005010:	b003      	add	sp, #12
 8005012:	bd30      	pop	{r4, r5, pc}
 8005014:	20004afc 	.word	0x20004afc

08005018 <_init>:
 8005018:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800501a:	bf00      	nop
 800501c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800501e:	bc08      	pop	{r3}
 8005020:	469e      	mov	lr, r3
 8005022:	4770      	bx	lr

08005024 <_fini>:
 8005024:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005026:	bf00      	nop
 8005028:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800502a:	bc08      	pop	{r3}
 800502c:	469e      	mov	lr, r3
 800502e:	4770      	bx	lr
