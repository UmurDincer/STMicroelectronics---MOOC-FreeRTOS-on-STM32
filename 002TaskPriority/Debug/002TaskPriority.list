
002TaskPriority.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000047d0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000e8  08004960  08004960  00014960  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a48  08004a48  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004a48  08004a48  00014a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a50  08004a50  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a50  08004a50  00014a50  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a54  08004a54  00014a54  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004a58  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a88  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004afc  20004afc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00014663  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ace  00000000  00000000  00034707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001130  00000000  00000000  000371d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001018  00000000  00000000  00038308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002b45  00000000  00000000  00039320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011888  00000000  00000000  0003be65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d20b9  00000000  00000000  0004d6ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0011f7a6  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004b4c  00000000  00000000  0011f7f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08004948 	.word	0x08004948

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08004948 	.word	0x08004948

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	e000      	b.n	8000500 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 f9f2 	bl	8000910 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f824 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f88a 	bl	8000648 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f001 fadc 	bl	8001af0 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000538:	4a09      	ldr	r2, [pc, #36]	; (8000560 <main+0x3c>)
 800053a:	2100      	movs	r1, #0
 800053c:	4809      	ldr	r0, [pc, #36]	; (8000564 <main+0x40>)
 800053e:	f001 fb21 	bl	8001b84 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a08      	ldr	r2, [pc, #32]	; (8000568 <main+0x44>)
 8000546:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000548:	4a08      	ldr	r2, [pc, #32]	; (800056c <main+0x48>)
 800054a:	2100      	movs	r1, #0
 800054c:	4808      	ldr	r0, [pc, #32]	; (8000570 <main+0x4c>)
 800054e:	f001 fb19 	bl	8001b84 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a07      	ldr	r2, [pc, #28]	; (8000574 <main+0x50>)
 8000556:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000558:	f001 faee 	bl	8001b38 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800055c:	e7fe      	b.n	800055c <main+0x38>
 800055e:	bf00      	nop
 8000560:	08004988 	.word	0x08004988
 8000564:	080006b9 	.word	0x080006b9
 8000568:	20000090 	.word	0x20000090
 800056c:	080049ac 	.word	0x080049ac
 8000570:	080006f1 	.word	0x080006f1
 8000574:	20000094 	.word	0x20000094

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f004 f914 	bl	80047b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b27      	ldr	r3, [pc, #156]	; (8000640 <SystemClock_Config+0xc8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a26      	ldr	r2, [pc, #152]	; (8000640 <SystemClock_Config+0xc8>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b24      	ldr	r3, [pc, #144]	; (8000640 <SystemClock_Config+0xc8>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b21      	ldr	r3, [pc, #132]	; (8000644 <SystemClock_Config+0xcc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	4a20      	ldr	r2, [pc, #128]	; (8000644 <SystemClock_Config+0xcc>)
 80005c2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005c6:	6013      	str	r3, [r2, #0]
 80005c8:	4b1e      	ldr	r3, [pc, #120]	; (8000644 <SystemClock_Config+0xcc>)
 80005ca:	681b      	ldr	r3, [r3, #0]
 80005cc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005d0:	607b      	str	r3, [r7, #4]
 80005d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d4:	2302      	movs	r3, #2
 80005d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005d8:	2301      	movs	r3, #1
 80005da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005dc:	2310      	movs	r3, #16
 80005de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e0:	2302      	movs	r3, #2
 80005e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e4:	2300      	movs	r3, #0
 80005e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005e8:	2308      	movs	r3, #8
 80005ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 80005ec:	2340      	movs	r3, #64	; 0x40
 80005ee:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005f0:	2302      	movs	r3, #2
 80005f2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005f4:	2307      	movs	r3, #7
 80005f6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005f8:	f107 0320 	add.w	r3, r7, #32
 80005fc:	4618      	mov	r0, r3
 80005fe:	f000 facf 	bl	8000ba0 <HAL_RCC_OscConfig>
 8000602:	4603      	mov	r3, r0
 8000604:	2b00      	cmp	r3, #0
 8000606:	d001      	beq.n	800060c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000608:	f000 f89c 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060c:	230f      	movs	r3, #15
 800060e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000610:	2302      	movs	r3, #2
 8000612:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000614:	23b0      	movs	r3, #176	; 0xb0
 8000616:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	2100      	movs	r1, #0
 8000626:	4618      	mov	r0, r3
 8000628:	f000 fd32 	bl	8001090 <HAL_RCC_ClockConfig>
 800062c:	4603      	mov	r3, r0
 800062e:	2b00      	cmp	r3, #0
 8000630:	d001      	beq.n	8000636 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000632:	f000 f887 	bl	8000744 <Error_Handler>
  }
}
 8000636:	bf00      	nop
 8000638:	3750      	adds	r7, #80	; 0x50
 800063a:	46bd      	mov	sp, r7
 800063c:	bd80      	pop	{r7, pc}
 800063e:	bf00      	nop
 8000640:	40023800 	.word	0x40023800
 8000644:	40007000 	.word	0x40007000

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800064e:	2300      	movs	r3, #0
 8000650:	607b      	str	r3, [r7, #4]
 8000652:	4b10      	ldr	r3, [pc, #64]	; (8000694 <MX_GPIO_Init+0x4c>)
 8000654:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000656:	4a0f      	ldr	r2, [pc, #60]	; (8000694 <MX_GPIO_Init+0x4c>)
 8000658:	f043 0301 	orr.w	r3, r3, #1
 800065c:	6313      	str	r3, [r2, #48]	; 0x30
 800065e:	4b0d      	ldr	r3, [pc, #52]	; (8000694 <MX_GPIO_Init+0x4c>)
 8000660:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000662:	f003 0301 	and.w	r3, r3, #1
 8000666:	607b      	str	r3, [r7, #4]
 8000668:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800066a:	2300      	movs	r3, #0
 800066c:	603b      	str	r3, [r7, #0]
 800066e:	4b09      	ldr	r3, [pc, #36]	; (8000694 <MX_GPIO_Init+0x4c>)
 8000670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000672:	4a08      	ldr	r2, [pc, #32]	; (8000694 <MX_GPIO_Init+0x4c>)
 8000674:	f043 0302 	orr.w	r3, r3, #2
 8000678:	6313      	str	r3, [r2, #48]	; 0x30
 800067a:	4b06      	ldr	r3, [pc, #24]	; (8000694 <MX_GPIO_Init+0x4c>)
 800067c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800067e:	f003 0302 	and.w	r3, r3, #2
 8000682:	603b      	str	r3, [r7, #0]
 8000684:	683b      	ldr	r3, [r7, #0]

}
 8000686:	bf00      	nop
 8000688:	370c      	adds	r7, #12
 800068a:	46bd      	mov	sp, r7
 800068c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000690:	4770      	bx	lr
 8000692:	bf00      	nop
 8000694:	40023800 	.word	0x40023800

08000698 <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 8000698:	b580      	push	{r7, lr}
 800069a:	b082      	sub	sp, #8
 800069c:	af00      	add	r7, sp, #0
 800069e:	4603      	mov	r3, r0
 80006a0:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	4618      	mov	r0, r3
 80006a6:	f7ff ff15 	bl	80004d4 <ITM_SendChar>
	ITM_SendChar('\n');
 80006aa:	200a      	movs	r0, #10
 80006ac:	f7ff ff12 	bl	80004d4 <ITM_SendChar>
}
 80006b0:	bf00      	nop
 80006b2:	3708      	adds	r7, #8
 80006b4:	46bd      	mov	sp, r7
 80006b6:	bd80      	pop	{r7, pc}

080006b8 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b084      	sub	sp, #16
 80006bc:	af00      	add	r7, sp, #0
 80006be:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	osPriority_t priority;
  /* Infinite loop */
  for(;;)
  {
	priority = osThreadGetPriority(Task2Handle);
 80006c0:	4b0a      	ldr	r3, [pc, #40]	; (80006ec <StartTask1+0x34>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4618      	mov	r0, r3
 80006c6:	f001 fb19 	bl	8001cfc <osThreadGetPriority>
 80006ca:	60f8      	str	r0, [r7, #12]
	task_action('1');
 80006cc:	2031      	movs	r0, #49	; 0x31
 80006ce:	f7ff ffe3 	bl	8000698 <task_action>
	osThreadSetPriority(Task2Handle, priority+1);
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <StartTask1+0x34>)
 80006d4:	681a      	ldr	r2, [r3, #0]
 80006d6:	68fb      	ldr	r3, [r7, #12]
 80006d8:	3301      	adds	r3, #1
 80006da:	4619      	mov	r1, r3
 80006dc:	4610      	mov	r0, r2
 80006de:	f001 fae3 	bl	8001ca8 <osThreadSetPriority>
	HAL_Delay(1000);
 80006e2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80006e6:	f000 f955 	bl	8000994 <HAL_Delay>
	priority = osThreadGetPriority(Task2Handle);
 80006ea:	e7e9      	b.n	80006c0 <StartTask1+0x8>
 80006ec:	20000094 	.word	0x20000094

080006f0 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
	osPriority_t priority;
  /* Infinite loop */
  for(;;)
  {
	  priority = osThreadGetPriority(Task2Handle);
 80006f8:	4b08      	ldr	r3, [pc, #32]	; (800071c <StartTask2+0x2c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4618      	mov	r0, r3
 80006fe:	f001 fafd 	bl	8001cfc <osThreadGetPriority>
 8000702:	60f8      	str	r0, [r7, #12]
	  task_action('2');
 8000704:	2032      	movs	r0, #50	; 0x32
 8000706:	f7ff ffc7 	bl	8000698 <task_action>
	  osThreadSetPriority(Task2Handle, priority-2);
 800070a:	4b04      	ldr	r3, [pc, #16]	; (800071c <StartTask2+0x2c>)
 800070c:	681a      	ldr	r2, [r3, #0]
 800070e:	68fb      	ldr	r3, [r7, #12]
 8000710:	3b02      	subs	r3, #2
 8000712:	4619      	mov	r1, r3
 8000714:	4610      	mov	r0, r2
 8000716:	f001 fac7 	bl	8001ca8 <osThreadSetPriority>
	  priority = osThreadGetPriority(Task2Handle);
 800071a:	e7ed      	b.n	80006f8 <StartTask2+0x8>
 800071c:	20000094 	.word	0x20000094

08000720 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d101      	bne.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000732:	f000 f90f 	bl	8000954 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40001000 	.word	0x40001000

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000750:	b580      	push	{r7, lr}
 8000752:	b082      	sub	sp, #8
 8000754:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000756:	2300      	movs	r3, #0
 8000758:	607b      	str	r3, [r7, #4]
 800075a:	4b12      	ldr	r3, [pc, #72]	; (80007a4 <HAL_MspInit+0x54>)
 800075c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800075e:	4a11      	ldr	r2, [pc, #68]	; (80007a4 <HAL_MspInit+0x54>)
 8000760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000764:	6453      	str	r3, [r2, #68]	; 0x44
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <HAL_MspInit+0x54>)
 8000768:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800076a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800076e:	607b      	str	r3, [r7, #4]
 8000770:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000772:	2300      	movs	r3, #0
 8000774:	603b      	str	r3, [r7, #0]
 8000776:	4b0b      	ldr	r3, [pc, #44]	; (80007a4 <HAL_MspInit+0x54>)
 8000778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800077a:	4a0a      	ldr	r2, [pc, #40]	; (80007a4 <HAL_MspInit+0x54>)
 800077c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000780:	6413      	str	r3, [r2, #64]	; 0x40
 8000782:	4b08      	ldr	r3, [pc, #32]	; (80007a4 <HAL_MspInit+0x54>)
 8000784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800078a:	603b      	str	r3, [r7, #0]
 800078c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800078e:	2200      	movs	r2, #0
 8000790:	210f      	movs	r1, #15
 8000792:	f06f 0001 	mvn.w	r0, #1
 8000796:	f000 f9d9 	bl	8000b4c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800079a:	bf00      	nop
 800079c:	3708      	adds	r7, #8
 800079e:	46bd      	mov	sp, r7
 80007a0:	bd80      	pop	{r7, pc}
 80007a2:	bf00      	nop
 80007a4:	40023800 	.word	0x40023800

080007a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b08c      	sub	sp, #48	; 0x30
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80007b0:	2300      	movs	r3, #0
 80007b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80007b4:	2300      	movs	r3, #0
 80007b6:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80007b8:	2200      	movs	r2, #0
 80007ba:	6879      	ldr	r1, [r7, #4]
 80007bc:	2036      	movs	r0, #54	; 0x36
 80007be:	f000 f9c5 	bl	8000b4c <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80007c2:	2036      	movs	r0, #54	; 0x36
 80007c4:	f000 f9de 	bl	8000b84 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80007c8:	2300      	movs	r3, #0
 80007ca:	60fb      	str	r3, [r7, #12]
 80007cc:	4b1e      	ldr	r3, [pc, #120]	; (8000848 <HAL_InitTick+0xa0>)
 80007ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007d0:	4a1d      	ldr	r2, [pc, #116]	; (8000848 <HAL_InitTick+0xa0>)
 80007d2:	f043 0310 	orr.w	r3, r3, #16
 80007d6:	6413      	str	r3, [r2, #64]	; 0x40
 80007d8:	4b1b      	ldr	r3, [pc, #108]	; (8000848 <HAL_InitTick+0xa0>)
 80007da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007dc:	f003 0310 	and.w	r3, r3, #16
 80007e0:	60fb      	str	r3, [r7, #12]
 80007e2:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80007e4:	f107 0210 	add.w	r2, r7, #16
 80007e8:	f107 0314 	add.w	r3, r7, #20
 80007ec:	4611      	mov	r1, r2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f000 fe5a 	bl	80014a8 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007f4:	f000 fe44 	bl	8001480 <HAL_RCC_GetPCLK1Freq>
 80007f8:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007fc:	4a13      	ldr	r2, [pc, #76]	; (800084c <HAL_InitTick+0xa4>)
 80007fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000802:	0c9b      	lsrs	r3, r3, #18
 8000804:	3b01      	subs	r3, #1
 8000806:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000808:	4b11      	ldr	r3, [pc, #68]	; (8000850 <HAL_InitTick+0xa8>)
 800080a:	4a12      	ldr	r2, [pc, #72]	; (8000854 <HAL_InitTick+0xac>)
 800080c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800080e:	4b10      	ldr	r3, [pc, #64]	; (8000850 <HAL_InitTick+0xa8>)
 8000810:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000814:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000816:	4a0e      	ldr	r2, [pc, #56]	; (8000850 <HAL_InitTick+0xa8>)
 8000818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800081a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800081c:	4b0c      	ldr	r3, [pc, #48]	; (8000850 <HAL_InitTick+0xa8>)
 800081e:	2200      	movs	r2, #0
 8000820:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_InitTick+0xa8>)
 8000824:	2200      	movs	r2, #0
 8000826:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000828:	4809      	ldr	r0, [pc, #36]	; (8000850 <HAL_InitTick+0xa8>)
 800082a:	f000 fe6f 	bl	800150c <HAL_TIM_Base_Init>
 800082e:	4603      	mov	r3, r0
 8000830:	2b00      	cmp	r3, #0
 8000832:	d104      	bne.n	800083e <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000834:	4806      	ldr	r0, [pc, #24]	; (8000850 <HAL_InitTick+0xa8>)
 8000836:	f000 fec3 	bl	80015c0 <HAL_TIM_Base_Start_IT>
 800083a:	4603      	mov	r3, r0
 800083c:	e000      	b.n	8000840 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 800083e:	2301      	movs	r3, #1
}
 8000840:	4618      	mov	r0, r3
 8000842:	3730      	adds	r7, #48	; 0x30
 8000844:	46bd      	mov	sp, r7
 8000846:	bd80      	pop	{r7, pc}
 8000848:	40023800 	.word	0x40023800
 800084c:	431bde83 	.word	0x431bde83
 8000850:	20000098 	.word	0x20000098
 8000854:	40001000 	.word	0x40001000

08000858 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000858:	b480      	push	{r7}
 800085a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800085c:	e7fe      	b.n	800085c <NMI_Handler+0x4>

0800085e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800085e:	b480      	push	{r7}
 8000860:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000862:	e7fe      	b.n	8000862 <HardFault_Handler+0x4>

08000864 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000864:	b480      	push	{r7}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000868:	e7fe      	b.n	8000868 <MemManage_Handler+0x4>

0800086a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800086a:	b480      	push	{r7}
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800086e:	e7fe      	b.n	800086e <BusFault_Handler+0x4>

08000870 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000870:	b480      	push	{r7}
 8000872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000874:	e7fe      	b.n	8000874 <UsageFault_Handler+0x4>

08000876 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000876:	b480      	push	{r7}
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800087a:	bf00      	nop
 800087c:	46bd      	mov	sp, r7
 800087e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000882:	4770      	bx	lr

08000884 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000888:	4802      	ldr	r0, [pc, #8]	; (8000894 <TIM6_DAC_IRQHandler+0x10>)
 800088a:	f000 ff09 	bl	80016a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800088e:	bf00      	nop
 8000890:	bd80      	pop	{r7, pc}
 8000892:	bf00      	nop
 8000894:	20000098 	.word	0x20000098

08000898 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800089c:	4b06      	ldr	r3, [pc, #24]	; (80008b8 <SystemInit+0x20>)
 800089e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008a2:	4a05      	ldr	r2, [pc, #20]	; (80008b8 <SystemInit+0x20>)
 80008a4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008a8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008ac:	bf00      	nop
 80008ae:	46bd      	mov	sp, r7
 80008b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008b4:	4770      	bx	lr
 80008b6:	bf00      	nop
 80008b8:	e000ed00 	.word	0xe000ed00

080008bc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80008bc:	f8df d034 	ldr.w	sp, [pc, #52]	; 80008f4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80008c2:	490e      	ldr	r1, [pc, #56]	; (80008fc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80008c4:	4a0e      	ldr	r2, [pc, #56]	; (8000900 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80008c6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008c8:	e002      	b.n	80008d0 <LoopCopyDataInit>

080008ca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008ca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008cc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008ce:	3304      	adds	r3, #4

080008d0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008d0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008d2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008d4:	d3f9      	bcc.n	80008ca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008d6:	4a0b      	ldr	r2, [pc, #44]	; (8000904 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80008d8:	4c0b      	ldr	r4, [pc, #44]	; (8000908 <LoopFillZerobss+0x26>)
  movs r3, #0
 80008da:	2300      	movs	r3, #0
  b LoopFillZerobss
 80008dc:	e001      	b.n	80008e2 <LoopFillZerobss>

080008de <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80008de:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80008e0:	3204      	adds	r2, #4

080008e2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80008e2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008e4:	d3fb      	bcc.n	80008de <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80008e6:	f7ff ffd7 	bl	8000898 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80008ea:	f003 ff2f 	bl	800474c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80008ee:	f7ff fe19 	bl	8000524 <main>
  bx  lr    
 80008f2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80008f4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008f8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008fc:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000900:	08004a58 	.word	0x08004a58
  ldr r2, =_sbss
 8000904:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000908:	20004afc 	.word	0x20004afc

0800090c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800090c:	e7fe      	b.n	800090c <ADC_IRQHandler>
	...

08000910 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000910:	b580      	push	{r7, lr}
 8000912:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000914:	4b0e      	ldr	r3, [pc, #56]	; (8000950 <HAL_Init+0x40>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a0d      	ldr	r2, [pc, #52]	; (8000950 <HAL_Init+0x40>)
 800091a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800091e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000920:	4b0b      	ldr	r3, [pc, #44]	; (8000950 <HAL_Init+0x40>)
 8000922:	681b      	ldr	r3, [r3, #0]
 8000924:	4a0a      	ldr	r2, [pc, #40]	; (8000950 <HAL_Init+0x40>)
 8000926:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800092a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800092c:	4b08      	ldr	r3, [pc, #32]	; (8000950 <HAL_Init+0x40>)
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	4a07      	ldr	r2, [pc, #28]	; (8000950 <HAL_Init+0x40>)
 8000932:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000936:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000938:	2003      	movs	r0, #3
 800093a:	f000 f8fc 	bl	8000b36 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800093e:	200f      	movs	r0, #15
 8000940:	f7ff ff32 	bl	80007a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000944:	f7ff ff04 	bl	8000750 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000948:	2300      	movs	r3, #0
}
 800094a:	4618      	mov	r0, r3
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	40023c00 	.word	0x40023c00

08000954 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <HAL_IncTick+0x20>)
 800095a:	781b      	ldrb	r3, [r3, #0]
 800095c:	461a      	mov	r2, r3
 800095e:	4b06      	ldr	r3, [pc, #24]	; (8000978 <HAL_IncTick+0x24>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4413      	add	r3, r2
 8000964:	4a04      	ldr	r2, [pc, #16]	; (8000978 <HAL_IncTick+0x24>)
 8000966:	6013      	str	r3, [r2, #0]
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	20000008 	.word	0x20000008
 8000978:	200000e0 	.word	0x200000e0

0800097c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  return uwTick;
 8000980:	4b03      	ldr	r3, [pc, #12]	; (8000990 <HAL_GetTick+0x14>)
 8000982:	681b      	ldr	r3, [r3, #0]
}
 8000984:	4618      	mov	r0, r3
 8000986:	46bd      	mov	sp, r7
 8000988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800098c:	4770      	bx	lr
 800098e:	bf00      	nop
 8000990:	200000e0 	.word	0x200000e0

08000994 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800099c:	f7ff ffee 	bl	800097c <HAL_GetTick>
 80009a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80009a6:	68fb      	ldr	r3, [r7, #12]
 80009a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80009ac:	d005      	beq.n	80009ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80009ae:	4b0a      	ldr	r3, [pc, #40]	; (80009d8 <HAL_Delay+0x44>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	461a      	mov	r2, r3
 80009b4:	68fb      	ldr	r3, [r7, #12]
 80009b6:	4413      	add	r3, r2
 80009b8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80009ba:	bf00      	nop
 80009bc:	f7ff ffde 	bl	800097c <HAL_GetTick>
 80009c0:	4602      	mov	r2, r0
 80009c2:	68bb      	ldr	r3, [r7, #8]
 80009c4:	1ad3      	subs	r3, r2, r3
 80009c6:	68fa      	ldr	r2, [r7, #12]
 80009c8:	429a      	cmp	r2, r3
 80009ca:	d8f7      	bhi.n	80009bc <HAL_Delay+0x28>
  {
  }
}
 80009cc:	bf00      	nop
 80009ce:	bf00      	nop
 80009d0:	3710      	adds	r7, #16
 80009d2:	46bd      	mov	sp, r7
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	20000008 	.word	0x20000008

080009dc <__NVIC_SetPriorityGrouping>:
{
 80009dc:	b480      	push	{r7}
 80009de:	b085      	sub	sp, #20
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f003 0307 	and.w	r3, r3, #7
 80009ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80009ec:	4b0c      	ldr	r3, [pc, #48]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 80009ee:	68db      	ldr	r3, [r3, #12]
 80009f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80009f2:	68ba      	ldr	r2, [r7, #8]
 80009f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80009f8:	4013      	ands	r3, r2
 80009fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80009fc:	68fb      	ldr	r3, [r7, #12]
 80009fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a0e:	4a04      	ldr	r2, [pc, #16]	; (8000a20 <__NVIC_SetPriorityGrouping+0x44>)
 8000a10:	68bb      	ldr	r3, [r7, #8]
 8000a12:	60d3      	str	r3, [r2, #12]
}
 8000a14:	bf00      	nop
 8000a16:	3714      	adds	r7, #20
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000ed00 	.word	0xe000ed00

08000a24 <__NVIC_GetPriorityGrouping>:
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a28:	4b04      	ldr	r3, [pc, #16]	; (8000a3c <__NVIC_GetPriorityGrouping+0x18>)
 8000a2a:	68db      	ldr	r3, [r3, #12]
 8000a2c:	0a1b      	lsrs	r3, r3, #8
 8000a2e:	f003 0307 	and.w	r3, r3, #7
}
 8000a32:	4618      	mov	r0, r3
 8000a34:	46bd      	mov	sp, r7
 8000a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a3a:	4770      	bx	lr
 8000a3c:	e000ed00 	.word	0xe000ed00

08000a40 <__NVIC_EnableIRQ>:
{
 8000a40:	b480      	push	{r7}
 8000a42:	b083      	sub	sp, #12
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	4603      	mov	r3, r0
 8000a48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	db0b      	blt.n	8000a6a <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	f003 021f 	and.w	r2, r3, #31
 8000a58:	4907      	ldr	r1, [pc, #28]	; (8000a78 <__NVIC_EnableIRQ+0x38>)
 8000a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a5e:	095b      	lsrs	r3, r3, #5
 8000a60:	2001      	movs	r0, #1
 8000a62:	fa00 f202 	lsl.w	r2, r0, r2
 8000a66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000a6a:	bf00      	nop
 8000a6c:	370c      	adds	r7, #12
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000e100 	.word	0xe000e100

08000a7c <__NVIC_SetPriority>:
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	b083      	sub	sp, #12
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	4603      	mov	r3, r0
 8000a84:	6039      	str	r1, [r7, #0]
 8000a86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a8c:	2b00      	cmp	r3, #0
 8000a8e:	db0a      	blt.n	8000aa6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a90:	683b      	ldr	r3, [r7, #0]
 8000a92:	b2da      	uxtb	r2, r3
 8000a94:	490c      	ldr	r1, [pc, #48]	; (8000ac8 <__NVIC_SetPriority+0x4c>)
 8000a96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a9a:	0112      	lsls	r2, r2, #4
 8000a9c:	b2d2      	uxtb	r2, r2
 8000a9e:	440b      	add	r3, r1
 8000aa0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000aa4:	e00a      	b.n	8000abc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	4908      	ldr	r1, [pc, #32]	; (8000acc <__NVIC_SetPriority+0x50>)
 8000aac:	79fb      	ldrb	r3, [r7, #7]
 8000aae:	f003 030f 	and.w	r3, r3, #15
 8000ab2:	3b04      	subs	r3, #4
 8000ab4:	0112      	lsls	r2, r2, #4
 8000ab6:	b2d2      	uxtb	r2, r2
 8000ab8:	440b      	add	r3, r1
 8000aba:	761a      	strb	r2, [r3, #24]
}
 8000abc:	bf00      	nop
 8000abe:	370c      	adds	r7, #12
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr
 8000ac8:	e000e100 	.word	0xe000e100
 8000acc:	e000ed00 	.word	0xe000ed00

08000ad0 <NVIC_EncodePriority>:
{
 8000ad0:	b480      	push	{r7}
 8000ad2:	b089      	sub	sp, #36	; 0x24
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	60f8      	str	r0, [r7, #12]
 8000ad8:	60b9      	str	r1, [r7, #8]
 8000ada:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000adc:	68fb      	ldr	r3, [r7, #12]
 8000ade:	f003 0307 	and.w	r3, r3, #7
 8000ae2:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ae4:	69fb      	ldr	r3, [r7, #28]
 8000ae6:	f1c3 0307 	rsb	r3, r3, #7
 8000aea:	2b04      	cmp	r3, #4
 8000aec:	bf28      	it	cs
 8000aee:	2304      	movcs	r3, #4
 8000af0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000af2:	69fb      	ldr	r3, [r7, #28]
 8000af4:	3304      	adds	r3, #4
 8000af6:	2b06      	cmp	r3, #6
 8000af8:	d902      	bls.n	8000b00 <NVIC_EncodePriority+0x30>
 8000afa:	69fb      	ldr	r3, [r7, #28]
 8000afc:	3b03      	subs	r3, #3
 8000afe:	e000      	b.n	8000b02 <NVIC_EncodePriority+0x32>
 8000b00:	2300      	movs	r3, #0
 8000b02:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b04:	f04f 32ff 	mov.w	r2, #4294967295
 8000b08:	69bb      	ldr	r3, [r7, #24]
 8000b0a:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0e:	43da      	mvns	r2, r3
 8000b10:	68bb      	ldr	r3, [r7, #8]
 8000b12:	401a      	ands	r2, r3
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b18:	f04f 31ff 	mov.w	r1, #4294967295
 8000b1c:	697b      	ldr	r3, [r7, #20]
 8000b1e:	fa01 f303 	lsl.w	r3, r1, r3
 8000b22:	43d9      	mvns	r1, r3
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b28:	4313      	orrs	r3, r2
}
 8000b2a:	4618      	mov	r0, r3
 8000b2c:	3724      	adds	r7, #36	; 0x24
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b34:	4770      	bx	lr

08000b36 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b36:	b580      	push	{r7, lr}
 8000b38:	b082      	sub	sp, #8
 8000b3a:	af00      	add	r7, sp, #0
 8000b3c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f7ff ff4c 	bl	80009dc <__NVIC_SetPriorityGrouping>
}
 8000b44:	bf00      	nop
 8000b46:	3708      	adds	r7, #8
 8000b48:	46bd      	mov	sp, r7
 8000b4a:	bd80      	pop	{r7, pc}

08000b4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b086      	sub	sp, #24
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	60b9      	str	r1, [r7, #8]
 8000b56:	607a      	str	r2, [r7, #4]
 8000b58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b5e:	f7ff ff61 	bl	8000a24 <__NVIC_GetPriorityGrouping>
 8000b62:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b64:	687a      	ldr	r2, [r7, #4]
 8000b66:	68b9      	ldr	r1, [r7, #8]
 8000b68:	6978      	ldr	r0, [r7, #20]
 8000b6a:	f7ff ffb1 	bl	8000ad0 <NVIC_EncodePriority>
 8000b6e:	4602      	mov	r2, r0
 8000b70:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b74:	4611      	mov	r1, r2
 8000b76:	4618      	mov	r0, r3
 8000b78:	f7ff ff80 	bl	8000a7c <__NVIC_SetPriority>
}
 8000b7c:	bf00      	nop
 8000b7e:	3718      	adds	r7, #24
 8000b80:	46bd      	mov	sp, r7
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	b082      	sub	sp, #8
 8000b88:	af00      	add	r7, sp, #0
 8000b8a:	4603      	mov	r3, r0
 8000b8c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b92:	4618      	mov	r0, r3
 8000b94:	f7ff ff54 	bl	8000a40 <__NVIC_EnableIRQ>
}
 8000b98:	bf00      	nop
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}

08000ba0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b086      	sub	sp, #24
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ba8:	687b      	ldr	r3, [r7, #4]
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d101      	bne.n	8000bb2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000bae:	2301      	movs	r3, #1
 8000bb0:	e267      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	681b      	ldr	r3, [r3, #0]
 8000bb6:	f003 0301 	and.w	r3, r3, #1
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d075      	beq.n	8000caa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bbe:	4b88      	ldr	r3, [pc, #544]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000bc0:	689b      	ldr	r3, [r3, #8]
 8000bc2:	f003 030c 	and.w	r3, r3, #12
 8000bc6:	2b04      	cmp	r3, #4
 8000bc8:	d00c      	beq.n	8000be4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bca:	4b85      	ldr	r3, [pc, #532]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000bcc:	689b      	ldr	r3, [r3, #8]
 8000bce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000bd2:	2b08      	cmp	r3, #8
 8000bd4:	d112      	bne.n	8000bfc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000bd6:	4b82      	ldr	r3, [pc, #520]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000bd8:	685b      	ldr	r3, [r3, #4]
 8000bda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000bde:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000be2:	d10b      	bne.n	8000bfc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000be4:	4b7e      	ldr	r3, [pc, #504]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000be6:	681b      	ldr	r3, [r3, #0]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d05b      	beq.n	8000ca8 <HAL_RCC_OscConfig+0x108>
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	685b      	ldr	r3, [r3, #4]
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d157      	bne.n	8000ca8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000bf8:	2301      	movs	r3, #1
 8000bfa:	e242      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	685b      	ldr	r3, [r3, #4]
 8000c00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000c04:	d106      	bne.n	8000c14 <HAL_RCC_OscConfig+0x74>
 8000c06:	4b76      	ldr	r3, [pc, #472]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a75      	ldr	r2, [pc, #468]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c0c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c10:	6013      	str	r3, [r2, #0]
 8000c12:	e01d      	b.n	8000c50 <HAL_RCC_OscConfig+0xb0>
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000c1c:	d10c      	bne.n	8000c38 <HAL_RCC_OscConfig+0x98>
 8000c1e:	4b70      	ldr	r3, [pc, #448]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c20:	681b      	ldr	r3, [r3, #0]
 8000c22:	4a6f      	ldr	r2, [pc, #444]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c24:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000c28:	6013      	str	r3, [r2, #0]
 8000c2a:	4b6d      	ldr	r3, [pc, #436]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c2c:	681b      	ldr	r3, [r3, #0]
 8000c2e:	4a6c      	ldr	r2, [pc, #432]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000c34:	6013      	str	r3, [r2, #0]
 8000c36:	e00b      	b.n	8000c50 <HAL_RCC_OscConfig+0xb0>
 8000c38:	4b69      	ldr	r3, [pc, #420]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c3a:	681b      	ldr	r3, [r3, #0]
 8000c3c:	4a68      	ldr	r2, [pc, #416]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c42:	6013      	str	r3, [r2, #0]
 8000c44:	4b66      	ldr	r3, [pc, #408]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a65      	ldr	r2, [pc, #404]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c4a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c4e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8000c50:	687b      	ldr	r3, [r7, #4]
 8000c52:	685b      	ldr	r3, [r3, #4]
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d013      	beq.n	8000c80 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c58:	f7ff fe90 	bl	800097c <HAL_GetTick>
 8000c5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c5e:	e008      	b.n	8000c72 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c60:	f7ff fe8c 	bl	800097c <HAL_GetTick>
 8000c64:	4602      	mov	r2, r0
 8000c66:	693b      	ldr	r3, [r7, #16]
 8000c68:	1ad3      	subs	r3, r2, r3
 8000c6a:	2b64      	cmp	r3, #100	; 0x64
 8000c6c:	d901      	bls.n	8000c72 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8000c6e:	2303      	movs	r3, #3
 8000c70:	e207      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000c72:	4b5b      	ldr	r3, [pc, #364]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d0f0      	beq.n	8000c60 <HAL_RCC_OscConfig+0xc0>
 8000c7e:	e014      	b.n	8000caa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000c80:	f7ff fe7c 	bl	800097c <HAL_GetTick>
 8000c84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c86:	e008      	b.n	8000c9a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000c88:	f7ff fe78 	bl	800097c <HAL_GetTick>
 8000c8c:	4602      	mov	r2, r0
 8000c8e:	693b      	ldr	r3, [r7, #16]
 8000c90:	1ad3      	subs	r3, r2, r3
 8000c92:	2b64      	cmp	r3, #100	; 0x64
 8000c94:	d901      	bls.n	8000c9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8000c96:	2303      	movs	r3, #3
 8000c98:	e1f3      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000c9a:	4b51      	ldr	r3, [pc, #324]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000c9c:	681b      	ldr	r3, [r3, #0]
 8000c9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d1f0      	bne.n	8000c88 <HAL_RCC_OscConfig+0xe8>
 8000ca6:	e000      	b.n	8000caa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000ca8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	681b      	ldr	r3, [r3, #0]
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d063      	beq.n	8000d7e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cb6:	4b4a      	ldr	r3, [pc, #296]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000cb8:	689b      	ldr	r3, [r3, #8]
 8000cba:	f003 030c 	and.w	r3, r3, #12
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d00b      	beq.n	8000cda <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cc2:	4b47      	ldr	r3, [pc, #284]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000cc4:	689b      	ldr	r3, [r3, #8]
 8000cc6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8000cca:	2b08      	cmp	r3, #8
 8000ccc:	d11c      	bne.n	8000d08 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8000cce:	4b44      	ldr	r3, [pc, #272]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000cd0:	685b      	ldr	r3, [r3, #4]
 8000cd2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d116      	bne.n	8000d08 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000cda:	4b41      	ldr	r3, [pc, #260]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	f003 0302 	and.w	r3, r3, #2
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d005      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x152>
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	68db      	ldr	r3, [r3, #12]
 8000cea:	2b01      	cmp	r3, #1
 8000cec:	d001      	beq.n	8000cf2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	e1c7      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000cf2:	4b3b      	ldr	r3, [pc, #236]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000cf4:	681b      	ldr	r3, [r3, #0]
 8000cf6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	691b      	ldr	r3, [r3, #16]
 8000cfe:	00db      	lsls	r3, r3, #3
 8000d00:	4937      	ldr	r1, [pc, #220]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000d02:	4313      	orrs	r3, r2
 8000d04:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8000d06:	e03a      	b.n	8000d7e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	68db      	ldr	r3, [r3, #12]
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d020      	beq.n	8000d52 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8000d10:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <HAL_RCC_OscConfig+0x244>)
 8000d12:	2201      	movs	r2, #1
 8000d14:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d16:	f7ff fe31 	bl	800097c <HAL_GetTick>
 8000d1a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d1c:	e008      	b.n	8000d30 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d1e:	f7ff fe2d 	bl	800097c <HAL_GetTick>
 8000d22:	4602      	mov	r2, r0
 8000d24:	693b      	ldr	r3, [r7, #16]
 8000d26:	1ad3      	subs	r3, r2, r3
 8000d28:	2b02      	cmp	r3, #2
 8000d2a:	d901      	bls.n	8000d30 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8000d2c:	2303      	movs	r3, #3
 8000d2e:	e1a8      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8000d30:	4b2b      	ldr	r3, [pc, #172]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f003 0302 	and.w	r3, r3, #2
 8000d38:	2b00      	cmp	r3, #0
 8000d3a:	d0f0      	beq.n	8000d1e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8000d3c:	4b28      	ldr	r3, [pc, #160]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	691b      	ldr	r3, [r3, #16]
 8000d48:	00db      	lsls	r3, r3, #3
 8000d4a:	4925      	ldr	r1, [pc, #148]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000d4c:	4313      	orrs	r3, r2
 8000d4e:	600b      	str	r3, [r1, #0]
 8000d50:	e015      	b.n	8000d7e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8000d52:	4b24      	ldr	r3, [pc, #144]	; (8000de4 <HAL_RCC_OscConfig+0x244>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8000d58:	f7ff fe10 	bl	800097c <HAL_GetTick>
 8000d5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d5e:	e008      	b.n	8000d72 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8000d60:	f7ff fe0c 	bl	800097c <HAL_GetTick>
 8000d64:	4602      	mov	r2, r0
 8000d66:	693b      	ldr	r3, [r7, #16]
 8000d68:	1ad3      	subs	r3, r2, r3
 8000d6a:	2b02      	cmp	r3, #2
 8000d6c:	d901      	bls.n	8000d72 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8000d6e:	2303      	movs	r3, #3
 8000d70:	e187      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8000d72:	4b1b      	ldr	r3, [pc, #108]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f003 0302 	and.w	r3, r3, #2
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d1f0      	bne.n	8000d60 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f003 0308 	and.w	r3, r3, #8
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d036      	beq.n	8000df8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	695b      	ldr	r3, [r3, #20]
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d016      	beq.n	8000dc0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8000d92:	4b15      	ldr	r3, [pc, #84]	; (8000de8 <HAL_RCC_OscConfig+0x248>)
 8000d94:	2201      	movs	r2, #1
 8000d96:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000d98:	f7ff fdf0 	bl	800097c <HAL_GetTick>
 8000d9c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000d9e:	e008      	b.n	8000db2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000da0:	f7ff fdec 	bl	800097c <HAL_GetTick>
 8000da4:	4602      	mov	r2, r0
 8000da6:	693b      	ldr	r3, [r7, #16]
 8000da8:	1ad3      	subs	r3, r2, r3
 8000daa:	2b02      	cmp	r3, #2
 8000dac:	d901      	bls.n	8000db2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8000dae:	2303      	movs	r3, #3
 8000db0:	e167      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8000db2:	4b0b      	ldr	r3, [pc, #44]	; (8000de0 <HAL_RCC_OscConfig+0x240>)
 8000db4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d0f0      	beq.n	8000da0 <HAL_RCC_OscConfig+0x200>
 8000dbe:	e01b      	b.n	8000df8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8000dc0:	4b09      	ldr	r3, [pc, #36]	; (8000de8 <HAL_RCC_OscConfig+0x248>)
 8000dc2:	2200      	movs	r2, #0
 8000dc4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000dc6:	f7ff fdd9 	bl	800097c <HAL_GetTick>
 8000dca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dcc:	e00e      	b.n	8000dec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8000dce:	f7ff fdd5 	bl	800097c <HAL_GetTick>
 8000dd2:	4602      	mov	r2, r0
 8000dd4:	693b      	ldr	r3, [r7, #16]
 8000dd6:	1ad3      	subs	r3, r2, r3
 8000dd8:	2b02      	cmp	r3, #2
 8000dda:	d907      	bls.n	8000dec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8000ddc:	2303      	movs	r3, #3
 8000dde:	e150      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
 8000de0:	40023800 	.word	0x40023800
 8000de4:	42470000 	.word	0x42470000
 8000de8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8000dec:	4b88      	ldr	r3, [pc, #544]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000dee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000df0:	f003 0302 	and.w	r3, r3, #2
 8000df4:	2b00      	cmp	r3, #0
 8000df6:	d1ea      	bne.n	8000dce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f003 0304 	and.w	r3, r3, #4
 8000e00:	2b00      	cmp	r3, #0
 8000e02:	f000 8097 	beq.w	8000f34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8000e06:	2300      	movs	r3, #0
 8000e08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000e0a:	4b81      	ldr	r3, [pc, #516]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e12:	2b00      	cmp	r3, #0
 8000e14:	d10f      	bne.n	8000e36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60bb      	str	r3, [r7, #8]
 8000e1a:	4b7d      	ldr	r3, [pc, #500]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e1e:	4a7c      	ldr	r2, [pc, #496]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e24:	6413      	str	r3, [r2, #64]	; 0x40
 8000e26:	4b7a      	ldr	r3, [pc, #488]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8000e32:	2301      	movs	r3, #1
 8000e34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e36:	4b77      	ldr	r3, [pc, #476]	; (8001014 <HAL_RCC_OscConfig+0x474>)
 8000e38:	681b      	ldr	r3, [r3, #0]
 8000e3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d118      	bne.n	8000e74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8000e42:	4b74      	ldr	r3, [pc, #464]	; (8001014 <HAL_RCC_OscConfig+0x474>)
 8000e44:	681b      	ldr	r3, [r3, #0]
 8000e46:	4a73      	ldr	r2, [pc, #460]	; (8001014 <HAL_RCC_OscConfig+0x474>)
 8000e48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8000e4e:	f7ff fd95 	bl	800097c <HAL_GetTick>
 8000e52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e54:	e008      	b.n	8000e68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8000e56:	f7ff fd91 	bl	800097c <HAL_GetTick>
 8000e5a:	4602      	mov	r2, r0
 8000e5c:	693b      	ldr	r3, [r7, #16]
 8000e5e:	1ad3      	subs	r3, r2, r3
 8000e60:	2b02      	cmp	r3, #2
 8000e62:	d901      	bls.n	8000e68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8000e64:	2303      	movs	r3, #3
 8000e66:	e10c      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8000e68:	4b6a      	ldr	r3, [pc, #424]	; (8001014 <HAL_RCC_OscConfig+0x474>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e70:	2b00      	cmp	r3, #0
 8000e72:	d0f0      	beq.n	8000e56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	689b      	ldr	r3, [r3, #8]
 8000e78:	2b01      	cmp	r3, #1
 8000e7a:	d106      	bne.n	8000e8a <HAL_RCC_OscConfig+0x2ea>
 8000e7c:	4b64      	ldr	r3, [pc, #400]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e80:	4a63      	ldr	r2, [pc, #396]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e82:	f043 0301 	orr.w	r3, r3, #1
 8000e86:	6713      	str	r3, [r2, #112]	; 0x70
 8000e88:	e01c      	b.n	8000ec4 <HAL_RCC_OscConfig+0x324>
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	689b      	ldr	r3, [r3, #8]
 8000e8e:	2b05      	cmp	r3, #5
 8000e90:	d10c      	bne.n	8000eac <HAL_RCC_OscConfig+0x30c>
 8000e92:	4b5f      	ldr	r3, [pc, #380]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000e96:	4a5e      	ldr	r2, [pc, #376]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000e98:	f043 0304 	orr.w	r3, r3, #4
 8000e9c:	6713      	str	r3, [r2, #112]	; 0x70
 8000e9e:	4b5c      	ldr	r3, [pc, #368]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000ea0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ea2:	4a5b      	ldr	r2, [pc, #364]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000ea4:	f043 0301 	orr.w	r3, r3, #1
 8000ea8:	6713      	str	r3, [r2, #112]	; 0x70
 8000eaa:	e00b      	b.n	8000ec4 <HAL_RCC_OscConfig+0x324>
 8000eac:	4b58      	ldr	r3, [pc, #352]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000eae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eb0:	4a57      	ldr	r2, [pc, #348]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000eb2:	f023 0301 	bic.w	r3, r3, #1
 8000eb6:	6713      	str	r3, [r2, #112]	; 0x70
 8000eb8:	4b55      	ldr	r3, [pc, #340]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000ebc:	4a54      	ldr	r2, [pc, #336]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000ebe:	f023 0304 	bic.w	r3, r3, #4
 8000ec2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	2b00      	cmp	r3, #0
 8000eca:	d015      	beq.n	8000ef8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8000ecc:	f7ff fd56 	bl	800097c <HAL_GetTick>
 8000ed0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000ed2:	e00a      	b.n	8000eea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000ed4:	f7ff fd52 	bl	800097c <HAL_GetTick>
 8000ed8:	4602      	mov	r2, r0
 8000eda:	693b      	ldr	r3, [r7, #16]
 8000edc:	1ad3      	subs	r3, r2, r3
 8000ede:	f241 3288 	movw	r2, #5000	; 0x1388
 8000ee2:	4293      	cmp	r3, r2
 8000ee4:	d901      	bls.n	8000eea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8000ee6:	2303      	movs	r3, #3
 8000ee8:	e0cb      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8000eea:	4b49      	ldr	r3, [pc, #292]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000eee:	f003 0302 	and.w	r3, r3, #2
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d0ee      	beq.n	8000ed4 <HAL_RCC_OscConfig+0x334>
 8000ef6:	e014      	b.n	8000f22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8000ef8:	f7ff fd40 	bl	800097c <HAL_GetTick>
 8000efc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000efe:	e00a      	b.n	8000f16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8000f00:	f7ff fd3c 	bl	800097c <HAL_GetTick>
 8000f04:	4602      	mov	r2, r0
 8000f06:	693b      	ldr	r3, [r7, #16]
 8000f08:	1ad3      	subs	r3, r2, r3
 8000f0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8000f0e:	4293      	cmp	r3, r2
 8000f10:	d901      	bls.n	8000f16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8000f12:	2303      	movs	r3, #3
 8000f14:	e0b5      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8000f16:	4b3e      	ldr	r3, [pc, #248]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000f18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000f1a:	f003 0302 	and.w	r3, r3, #2
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d1ee      	bne.n	8000f00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8000f22:	7dfb      	ldrb	r3, [r7, #23]
 8000f24:	2b01      	cmp	r3, #1
 8000f26:	d105      	bne.n	8000f34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f28:	4b39      	ldr	r3, [pc, #228]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	4a38      	ldr	r2, [pc, #224]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000f2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	699b      	ldr	r3, [r3, #24]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	f000 80a1 	beq.w	8001080 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8000f3e:	4b34      	ldr	r3, [pc, #208]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	f003 030c 	and.w	r3, r3, #12
 8000f46:	2b08      	cmp	r3, #8
 8000f48:	d05c      	beq.n	8001004 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	699b      	ldr	r3, [r3, #24]
 8000f4e:	2b02      	cmp	r3, #2
 8000f50:	d141      	bne.n	8000fd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000f52:	4b31      	ldr	r3, [pc, #196]	; (8001018 <HAL_RCC_OscConfig+0x478>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f58:	f7ff fd10 	bl	800097c <HAL_GetTick>
 8000f5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f5e:	e008      	b.n	8000f72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000f60:	f7ff fd0c 	bl	800097c <HAL_GetTick>
 8000f64:	4602      	mov	r2, r0
 8000f66:	693b      	ldr	r3, [r7, #16]
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	2b02      	cmp	r3, #2
 8000f6c:	d901      	bls.n	8000f72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8000f6e:	2303      	movs	r3, #3
 8000f70:	e087      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000f72:	4b27      	ldr	r3, [pc, #156]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000f74:	681b      	ldr	r3, [r3, #0]
 8000f76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d1f0      	bne.n	8000f60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	69da      	ldr	r2, [r3, #28]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	6a1b      	ldr	r3, [r3, #32]
 8000f86:	431a      	orrs	r2, r3
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f8c:	019b      	lsls	r3, r3, #6
 8000f8e:	431a      	orrs	r2, r3
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f94:	085b      	lsrs	r3, r3, #1
 8000f96:	3b01      	subs	r3, #1
 8000f98:	041b      	lsls	r3, r3, #16
 8000f9a:	431a      	orrs	r2, r3
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000fa0:	061b      	lsls	r3, r3, #24
 8000fa2:	491b      	ldr	r1, [pc, #108]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000fa4:	4313      	orrs	r3, r2
 8000fa6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8000fa8:	4b1b      	ldr	r3, [pc, #108]	; (8001018 <HAL_RCC_OscConfig+0x478>)
 8000faa:	2201      	movs	r2, #1
 8000fac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fae:	f7ff fce5 	bl	800097c <HAL_GetTick>
 8000fb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fb4:	e008      	b.n	8000fc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fb6:	f7ff fce1 	bl	800097c <HAL_GetTick>
 8000fba:	4602      	mov	r2, r0
 8000fbc:	693b      	ldr	r3, [r7, #16]
 8000fbe:	1ad3      	subs	r3, r2, r3
 8000fc0:	2b02      	cmp	r3, #2
 8000fc2:	d901      	bls.n	8000fc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	e05c      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8000fc8:	4b11      	ldr	r3, [pc, #68]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d0f0      	beq.n	8000fb6 <HAL_RCC_OscConfig+0x416>
 8000fd4:	e054      	b.n	8001080 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8000fd6:	4b10      	ldr	r3, [pc, #64]	; (8001018 <HAL_RCC_OscConfig+0x478>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fdc:	f7ff fcce 	bl	800097c <HAL_GetTick>
 8000fe0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000fe2:	e008      	b.n	8000ff6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8000fe4:	f7ff fcca 	bl	800097c <HAL_GetTick>
 8000fe8:	4602      	mov	r2, r0
 8000fea:	693b      	ldr	r3, [r7, #16]
 8000fec:	1ad3      	subs	r3, r2, r3
 8000fee:	2b02      	cmp	r3, #2
 8000ff0:	d901      	bls.n	8000ff6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8000ff2:	2303      	movs	r3, #3
 8000ff4:	e045      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8000ff6:	4b06      	ldr	r3, [pc, #24]	; (8001010 <HAL_RCC_OscConfig+0x470>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d1f0      	bne.n	8000fe4 <HAL_RCC_OscConfig+0x444>
 8001002:	e03d      	b.n	8001080 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	699b      	ldr	r3, [r3, #24]
 8001008:	2b01      	cmp	r3, #1
 800100a:	d107      	bne.n	800101c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800100c:	2301      	movs	r3, #1
 800100e:	e038      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
 8001010:	40023800 	.word	0x40023800
 8001014:	40007000 	.word	0x40007000
 8001018:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800101c:	4b1b      	ldr	r3, [pc, #108]	; (800108c <HAL_RCC_OscConfig+0x4ec>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	699b      	ldr	r3, [r3, #24]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d028      	beq.n	800107c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800102a:	68fb      	ldr	r3, [r7, #12]
 800102c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001034:	429a      	cmp	r2, r3
 8001036:	d121      	bne.n	800107c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800103e:	687b      	ldr	r3, [r7, #4]
 8001040:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001042:	429a      	cmp	r2, r3
 8001044:	d11a      	bne.n	800107c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001046:	68fa      	ldr	r2, [r7, #12]
 8001048:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800104c:	4013      	ands	r3, r2
 800104e:	687a      	ldr	r2, [r7, #4]
 8001050:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001052:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001054:	4293      	cmp	r3, r2
 8001056:	d111      	bne.n	800107c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001062:	085b      	lsrs	r3, r3, #1
 8001064:	3b01      	subs	r3, #1
 8001066:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001068:	429a      	cmp	r2, r3
 800106a:	d107      	bne.n	800107c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800106c:	68fb      	ldr	r3, [r7, #12]
 800106e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001076:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001078:	429a      	cmp	r2, r3
 800107a:	d001      	beq.n	8001080 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800107c:	2301      	movs	r3, #1
 800107e:	e000      	b.n	8001082 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001080:	2300      	movs	r3, #0
}
 8001082:	4618      	mov	r0, r3
 8001084:	3718      	adds	r7, #24
 8001086:	46bd      	mov	sp, r7
 8001088:	bd80      	pop	{r7, pc}
 800108a:	bf00      	nop
 800108c:	40023800 	.word	0x40023800

08001090 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b084      	sub	sp, #16
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
 8001098:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	2b00      	cmp	r3, #0
 800109e:	d101      	bne.n	80010a4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80010a0:	2301      	movs	r3, #1
 80010a2:	e0cc      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80010a4:	4b68      	ldr	r3, [pc, #416]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0307 	and.w	r3, r3, #7
 80010ac:	683a      	ldr	r2, [r7, #0]
 80010ae:	429a      	cmp	r2, r3
 80010b0:	d90c      	bls.n	80010cc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80010b2:	4b65      	ldr	r3, [pc, #404]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80010b4:	683a      	ldr	r2, [r7, #0]
 80010b6:	b2d2      	uxtb	r2, r2
 80010b8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80010ba:	4b63      	ldr	r3, [pc, #396]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	f003 0307 	and.w	r3, r3, #7
 80010c2:	683a      	ldr	r2, [r7, #0]
 80010c4:	429a      	cmp	r2, r3
 80010c6:	d001      	beq.n	80010cc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80010c8:	2301      	movs	r3, #1
 80010ca:	e0b8      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f003 0302 	and.w	r3, r3, #2
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d020      	beq.n	800111a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f003 0304 	and.w	r3, r3, #4
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d005      	beq.n	80010f0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80010e4:	4b59      	ldr	r3, [pc, #356]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80010e6:	689b      	ldr	r3, [r3, #8]
 80010e8:	4a58      	ldr	r2, [pc, #352]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80010ea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80010ee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	f003 0308 	and.w	r3, r3, #8
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d005      	beq.n	8001108 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80010fc:	4b53      	ldr	r3, [pc, #332]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80010fe:	689b      	ldr	r3, [r3, #8]
 8001100:	4a52      	ldr	r2, [pc, #328]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001102:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001106:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001108:	4b50      	ldr	r3, [pc, #320]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 800110a:	689b      	ldr	r3, [r3, #8]
 800110c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	689b      	ldr	r3, [r3, #8]
 8001114:	494d      	ldr	r1, [pc, #308]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001116:	4313      	orrs	r3, r2
 8001118:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	f003 0301 	and.w	r3, r3, #1
 8001122:	2b00      	cmp	r3, #0
 8001124:	d044      	beq.n	80011b0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	685b      	ldr	r3, [r3, #4]
 800112a:	2b01      	cmp	r3, #1
 800112c:	d107      	bne.n	800113e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800112e:	4b47      	ldr	r3, [pc, #284]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001136:	2b00      	cmp	r3, #0
 8001138:	d119      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800113a:	2301      	movs	r3, #1
 800113c:	e07f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	2b02      	cmp	r3, #2
 8001144:	d003      	beq.n	800114e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800114a:	2b03      	cmp	r3, #3
 800114c:	d107      	bne.n	800115e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800114e:	4b3f      	ldr	r3, [pc, #252]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001156:	2b00      	cmp	r3, #0
 8001158:	d109      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e06f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800115e:	4b3b      	ldr	r3, [pc, #236]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	f003 0302 	and.w	r3, r3, #2
 8001166:	2b00      	cmp	r3, #0
 8001168:	d101      	bne.n	800116e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800116a:	2301      	movs	r3, #1
 800116c:	e067      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800116e:	4b37      	ldr	r3, [pc, #220]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001170:	689b      	ldr	r3, [r3, #8]
 8001172:	f023 0203 	bic.w	r2, r3, #3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	4934      	ldr	r1, [pc, #208]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 800117c:	4313      	orrs	r3, r2
 800117e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001180:	f7ff fbfc 	bl	800097c <HAL_GetTick>
 8001184:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001186:	e00a      	b.n	800119e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001188:	f7ff fbf8 	bl	800097c <HAL_GetTick>
 800118c:	4602      	mov	r2, r0
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	1ad3      	subs	r3, r2, r3
 8001192:	f241 3288 	movw	r2, #5000	; 0x1388
 8001196:	4293      	cmp	r3, r2
 8001198:	d901      	bls.n	800119e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800119a:	2303      	movs	r3, #3
 800119c:	e04f      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800119e:	4b2b      	ldr	r3, [pc, #172]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80011a0:	689b      	ldr	r3, [r3, #8]
 80011a2:	f003 020c 	and.w	r2, r3, #12
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	685b      	ldr	r3, [r3, #4]
 80011aa:	009b      	lsls	r3, r3, #2
 80011ac:	429a      	cmp	r2, r3
 80011ae:	d1eb      	bne.n	8001188 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80011b0:	4b25      	ldr	r3, [pc, #148]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f003 0307 	and.w	r3, r3, #7
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d20c      	bcs.n	80011d8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80011be:	4b22      	ldr	r3, [pc, #136]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80011c0:	683a      	ldr	r2, [r7, #0]
 80011c2:	b2d2      	uxtb	r2, r2
 80011c4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80011c6:	4b20      	ldr	r3, [pc, #128]	; (8001248 <HAL_RCC_ClockConfig+0x1b8>)
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f003 0307 	and.w	r3, r3, #7
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	429a      	cmp	r2, r3
 80011d2:	d001      	beq.n	80011d8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80011d4:	2301      	movs	r3, #1
 80011d6:	e032      	b.n	800123e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0304 	and.w	r3, r3, #4
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d008      	beq.n	80011f6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80011e4:	4b19      	ldr	r3, [pc, #100]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	68db      	ldr	r3, [r3, #12]
 80011f0:	4916      	ldr	r1, [pc, #88]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 80011f2:	4313      	orrs	r3, r2
 80011f4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0308 	and.w	r3, r3, #8
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d009      	beq.n	8001216 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001202:	4b12      	ldr	r3, [pc, #72]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001204:	689b      	ldr	r3, [r3, #8]
 8001206:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	691b      	ldr	r3, [r3, #16]
 800120e:	00db      	lsls	r3, r3, #3
 8001210:	490e      	ldr	r1, [pc, #56]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 8001212:	4313      	orrs	r3, r2
 8001214:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001216:	f000 f821 	bl	800125c <HAL_RCC_GetSysClockFreq>
 800121a:	4602      	mov	r2, r0
 800121c:	4b0b      	ldr	r3, [pc, #44]	; (800124c <HAL_RCC_ClockConfig+0x1bc>)
 800121e:	689b      	ldr	r3, [r3, #8]
 8001220:	091b      	lsrs	r3, r3, #4
 8001222:	f003 030f 	and.w	r3, r3, #15
 8001226:	490a      	ldr	r1, [pc, #40]	; (8001250 <HAL_RCC_ClockConfig+0x1c0>)
 8001228:	5ccb      	ldrb	r3, [r1, r3]
 800122a:	fa22 f303 	lsr.w	r3, r2, r3
 800122e:	4a09      	ldr	r2, [pc, #36]	; (8001254 <HAL_RCC_ClockConfig+0x1c4>)
 8001230:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001232:	4b09      	ldr	r3, [pc, #36]	; (8001258 <HAL_RCC_ClockConfig+0x1c8>)
 8001234:	681b      	ldr	r3, [r3, #0]
 8001236:	4618      	mov	r0, r3
 8001238:	f7ff fab6 	bl	80007a8 <HAL_InitTick>

  return HAL_OK;
 800123c:	2300      	movs	r3, #0
}
 800123e:	4618      	mov	r0, r3
 8001240:	3710      	adds	r7, #16
 8001242:	46bd      	mov	sp, r7
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40023c00 	.word	0x40023c00
 800124c:	40023800 	.word	0x40023800
 8001250:	080049d0 	.word	0x080049d0
 8001254:	20000000 	.word	0x20000000
 8001258:	20000004 	.word	0x20000004

0800125c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800125c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001260:	b094      	sub	sp, #80	; 0x50
 8001262:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001264:	2300      	movs	r3, #0
 8001266:	647b      	str	r3, [r7, #68]	; 0x44
 8001268:	2300      	movs	r3, #0
 800126a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800126c:	2300      	movs	r3, #0
 800126e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001270:	2300      	movs	r3, #0
 8001272:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001274:	4b79      	ldr	r3, [pc, #484]	; (800145c <HAL_RCC_GetSysClockFreq+0x200>)
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	f003 030c 	and.w	r3, r3, #12
 800127c:	2b08      	cmp	r3, #8
 800127e:	d00d      	beq.n	800129c <HAL_RCC_GetSysClockFreq+0x40>
 8001280:	2b08      	cmp	r3, #8
 8001282:	f200 80e1 	bhi.w	8001448 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001286:	2b00      	cmp	r3, #0
 8001288:	d002      	beq.n	8001290 <HAL_RCC_GetSysClockFreq+0x34>
 800128a:	2b04      	cmp	r3, #4
 800128c:	d003      	beq.n	8001296 <HAL_RCC_GetSysClockFreq+0x3a>
 800128e:	e0db      	b.n	8001448 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001290:	4b73      	ldr	r3, [pc, #460]	; (8001460 <HAL_RCC_GetSysClockFreq+0x204>)
 8001292:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001294:	e0db      	b.n	800144e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001296:	4b73      	ldr	r3, [pc, #460]	; (8001464 <HAL_RCC_GetSysClockFreq+0x208>)
 8001298:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800129a:	e0d8      	b.n	800144e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800129c:	4b6f      	ldr	r3, [pc, #444]	; (800145c <HAL_RCC_GetSysClockFreq+0x200>)
 800129e:	685b      	ldr	r3, [r3, #4]
 80012a0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80012a4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80012a6:	4b6d      	ldr	r3, [pc, #436]	; (800145c <HAL_RCC_GetSysClockFreq+0x200>)
 80012a8:	685b      	ldr	r3, [r3, #4]
 80012aa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d063      	beq.n	800137a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80012b2:	4b6a      	ldr	r3, [pc, #424]	; (800145c <HAL_RCC_GetSysClockFreq+0x200>)
 80012b4:	685b      	ldr	r3, [r3, #4]
 80012b6:	099b      	lsrs	r3, r3, #6
 80012b8:	2200      	movs	r2, #0
 80012ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80012bc:	63fa      	str	r2, [r7, #60]	; 0x3c
 80012be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80012c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80012c4:	633b      	str	r3, [r7, #48]	; 0x30
 80012c6:	2300      	movs	r3, #0
 80012c8:	637b      	str	r3, [r7, #52]	; 0x34
 80012ca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80012ce:	4622      	mov	r2, r4
 80012d0:	462b      	mov	r3, r5
 80012d2:	f04f 0000 	mov.w	r0, #0
 80012d6:	f04f 0100 	mov.w	r1, #0
 80012da:	0159      	lsls	r1, r3, #5
 80012dc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80012e0:	0150      	lsls	r0, r2, #5
 80012e2:	4602      	mov	r2, r0
 80012e4:	460b      	mov	r3, r1
 80012e6:	4621      	mov	r1, r4
 80012e8:	1a51      	subs	r1, r2, r1
 80012ea:	6139      	str	r1, [r7, #16]
 80012ec:	4629      	mov	r1, r5
 80012ee:	eb63 0301 	sbc.w	r3, r3, r1
 80012f2:	617b      	str	r3, [r7, #20]
 80012f4:	f04f 0200 	mov.w	r2, #0
 80012f8:	f04f 0300 	mov.w	r3, #0
 80012fc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001300:	4659      	mov	r1, fp
 8001302:	018b      	lsls	r3, r1, #6
 8001304:	4651      	mov	r1, sl
 8001306:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800130a:	4651      	mov	r1, sl
 800130c:	018a      	lsls	r2, r1, #6
 800130e:	4651      	mov	r1, sl
 8001310:	ebb2 0801 	subs.w	r8, r2, r1
 8001314:	4659      	mov	r1, fp
 8001316:	eb63 0901 	sbc.w	r9, r3, r1
 800131a:	f04f 0200 	mov.w	r2, #0
 800131e:	f04f 0300 	mov.w	r3, #0
 8001322:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001326:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800132a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800132e:	4690      	mov	r8, r2
 8001330:	4699      	mov	r9, r3
 8001332:	4623      	mov	r3, r4
 8001334:	eb18 0303 	adds.w	r3, r8, r3
 8001338:	60bb      	str	r3, [r7, #8]
 800133a:	462b      	mov	r3, r5
 800133c:	eb49 0303 	adc.w	r3, r9, r3
 8001340:	60fb      	str	r3, [r7, #12]
 8001342:	f04f 0200 	mov.w	r2, #0
 8001346:	f04f 0300 	mov.w	r3, #0
 800134a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800134e:	4629      	mov	r1, r5
 8001350:	024b      	lsls	r3, r1, #9
 8001352:	4621      	mov	r1, r4
 8001354:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001358:	4621      	mov	r1, r4
 800135a:	024a      	lsls	r2, r1, #9
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001362:	2200      	movs	r2, #0
 8001364:	62bb      	str	r3, [r7, #40]	; 0x28
 8001366:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001368:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800136c:	f7fe ff30 	bl	80001d0 <__aeabi_uldivmod>
 8001370:	4602      	mov	r2, r0
 8001372:	460b      	mov	r3, r1
 8001374:	4613      	mov	r3, r2
 8001376:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001378:	e058      	b.n	800142c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800137a:	4b38      	ldr	r3, [pc, #224]	; (800145c <HAL_RCC_GetSysClockFreq+0x200>)
 800137c:	685b      	ldr	r3, [r3, #4]
 800137e:	099b      	lsrs	r3, r3, #6
 8001380:	2200      	movs	r2, #0
 8001382:	4618      	mov	r0, r3
 8001384:	4611      	mov	r1, r2
 8001386:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800138a:	623b      	str	r3, [r7, #32]
 800138c:	2300      	movs	r3, #0
 800138e:	627b      	str	r3, [r7, #36]	; 0x24
 8001390:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001394:	4642      	mov	r2, r8
 8001396:	464b      	mov	r3, r9
 8001398:	f04f 0000 	mov.w	r0, #0
 800139c:	f04f 0100 	mov.w	r1, #0
 80013a0:	0159      	lsls	r1, r3, #5
 80013a2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80013a6:	0150      	lsls	r0, r2, #5
 80013a8:	4602      	mov	r2, r0
 80013aa:	460b      	mov	r3, r1
 80013ac:	4641      	mov	r1, r8
 80013ae:	ebb2 0a01 	subs.w	sl, r2, r1
 80013b2:	4649      	mov	r1, r9
 80013b4:	eb63 0b01 	sbc.w	fp, r3, r1
 80013b8:	f04f 0200 	mov.w	r2, #0
 80013bc:	f04f 0300 	mov.w	r3, #0
 80013c0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80013c4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80013c8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80013cc:	ebb2 040a 	subs.w	r4, r2, sl
 80013d0:	eb63 050b 	sbc.w	r5, r3, fp
 80013d4:	f04f 0200 	mov.w	r2, #0
 80013d8:	f04f 0300 	mov.w	r3, #0
 80013dc:	00eb      	lsls	r3, r5, #3
 80013de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80013e2:	00e2      	lsls	r2, r4, #3
 80013e4:	4614      	mov	r4, r2
 80013e6:	461d      	mov	r5, r3
 80013e8:	4643      	mov	r3, r8
 80013ea:	18e3      	adds	r3, r4, r3
 80013ec:	603b      	str	r3, [r7, #0]
 80013ee:	464b      	mov	r3, r9
 80013f0:	eb45 0303 	adc.w	r3, r5, r3
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	f04f 0200 	mov.w	r2, #0
 80013fa:	f04f 0300 	mov.w	r3, #0
 80013fe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001402:	4629      	mov	r1, r5
 8001404:	028b      	lsls	r3, r1, #10
 8001406:	4621      	mov	r1, r4
 8001408:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800140c:	4621      	mov	r1, r4
 800140e:	028a      	lsls	r2, r1, #10
 8001410:	4610      	mov	r0, r2
 8001412:	4619      	mov	r1, r3
 8001414:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001416:	2200      	movs	r2, #0
 8001418:	61bb      	str	r3, [r7, #24]
 800141a:	61fa      	str	r2, [r7, #28]
 800141c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001420:	f7fe fed6 	bl	80001d0 <__aeabi_uldivmod>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4613      	mov	r3, r2
 800142a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800142c:	4b0b      	ldr	r3, [pc, #44]	; (800145c <HAL_RCC_GetSysClockFreq+0x200>)
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	0c1b      	lsrs	r3, r3, #16
 8001432:	f003 0303 	and.w	r3, r3, #3
 8001436:	3301      	adds	r3, #1
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800143c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800143e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001440:	fbb2 f3f3 	udiv	r3, r2, r3
 8001444:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001446:	e002      	b.n	800144e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001448:	4b05      	ldr	r3, [pc, #20]	; (8001460 <HAL_RCC_GetSysClockFreq+0x204>)
 800144a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800144c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800144e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001450:	4618      	mov	r0, r3
 8001452:	3750      	adds	r7, #80	; 0x50
 8001454:	46bd      	mov	sp, r7
 8001456:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800145a:	bf00      	nop
 800145c:	40023800 	.word	0x40023800
 8001460:	00f42400 	.word	0x00f42400
 8001464:	007a1200 	.word	0x007a1200

08001468 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001468:	b480      	push	{r7}
 800146a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800146c:	4b03      	ldr	r3, [pc, #12]	; (800147c <HAL_RCC_GetHCLKFreq+0x14>)
 800146e:	681b      	ldr	r3, [r3, #0]
}
 8001470:	4618      	mov	r0, r3
 8001472:	46bd      	mov	sp, r7
 8001474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001478:	4770      	bx	lr
 800147a:	bf00      	nop
 800147c:	20000000 	.word	0x20000000

08001480 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001484:	f7ff fff0 	bl	8001468 <HAL_RCC_GetHCLKFreq>
 8001488:	4602      	mov	r2, r0
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800148c:	689b      	ldr	r3, [r3, #8]
 800148e:	0a9b      	lsrs	r3, r3, #10
 8001490:	f003 0307 	and.w	r3, r3, #7
 8001494:	4903      	ldr	r1, [pc, #12]	; (80014a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001496:	5ccb      	ldrb	r3, [r1, r3]
 8001498:	fa22 f303 	lsr.w	r3, r2, r3
}
 800149c:	4618      	mov	r0, r3
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	40023800 	.word	0x40023800
 80014a4:	080049e0 	.word	0x080049e0

080014a8 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80014a8:	b480      	push	{r7}
 80014aa:	b083      	sub	sp, #12
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
 80014b0:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	220f      	movs	r2, #15
 80014b6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014ba:	689b      	ldr	r3, [r3, #8]
 80014bc:	f003 0203 	and.w	r2, r3, #3
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80014c4:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014c6:	689b      	ldr	r3, [r3, #8]
 80014c8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80014d0:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_RCC_GetClockConfig+0x5c>)
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	08db      	lsrs	r3, r3, #3
 80014e2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80014ea:	4b07      	ldr	r3, [pc, #28]	; (8001508 <HAL_RCC_GetClockConfig+0x60>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f003 0207 	and.w	r2, r3, #7
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	601a      	str	r2, [r3, #0]
}
 80014f6:	bf00      	nop
 80014f8:	370c      	adds	r7, #12
 80014fa:	46bd      	mov	sp, r7
 80014fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001500:	4770      	bx	lr
 8001502:	bf00      	nop
 8001504:	40023800 	.word	0x40023800
 8001508:	40023c00 	.word	0x40023c00

0800150c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	b082      	sub	sp, #8
 8001510:	af00      	add	r7, sp, #0
 8001512:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	2b00      	cmp	r3, #0
 8001518:	d101      	bne.n	800151e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800151a:	2301      	movs	r3, #1
 800151c:	e041      	b.n	80015a2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001524:	b2db      	uxtb	r3, r3
 8001526:	2b00      	cmp	r3, #0
 8001528:	d106      	bne.n	8001538 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2200      	movs	r2, #0
 800152e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001532:	6878      	ldr	r0, [r7, #4]
 8001534:	f000 f839 	bl	80015aa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	2202      	movs	r2, #2
 800153c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	681a      	ldr	r2, [r3, #0]
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	3304      	adds	r3, #4
 8001548:	4619      	mov	r1, r3
 800154a:	4610      	mov	r0, r2
 800154c:	f000 f9d8 	bl	8001900 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	2201      	movs	r2, #1
 8001554:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2201      	movs	r2, #1
 8001564:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	2201      	movs	r2, #1
 800156c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	2201      	movs	r2, #1
 8001574:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	2201      	movs	r2, #1
 800157c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	2201      	movs	r2, #1
 8001584:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2201      	movs	r2, #1
 800158c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	2201      	movs	r2, #1
 8001594:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	2201      	movs	r2, #1
 800159c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80015a0:	2300      	movs	r3, #0
}
 80015a2:	4618      	mov	r0, r3
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}

080015aa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80015aa:	b480      	push	{r7}
 80015ac:	b083      	sub	sp, #12
 80015ae:	af00      	add	r7, sp, #0
 80015b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80015b2:	bf00      	nop
 80015b4:	370c      	adds	r7, #12
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
	...

080015c0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b085      	sub	sp, #20
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	2b01      	cmp	r3, #1
 80015d2:	d001      	beq.n	80015d8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80015d4:	2301      	movs	r3, #1
 80015d6:	e04e      	b.n	8001676 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2202      	movs	r2, #2
 80015dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	68da      	ldr	r2, [r3, #12]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f042 0201 	orr.w	r2, r2, #1
 80015ee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	4a23      	ldr	r2, [pc, #140]	; (8001684 <HAL_TIM_Base_Start_IT+0xc4>)
 80015f6:	4293      	cmp	r3, r2
 80015f8:	d022      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001602:	d01d      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a1f      	ldr	r2, [pc, #124]	; (8001688 <HAL_TIM_Base_Start_IT+0xc8>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d018      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4a1e      	ldr	r2, [pc, #120]	; (800168c <HAL_TIM_Base_Start_IT+0xcc>)
 8001614:	4293      	cmp	r3, r2
 8001616:	d013      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a1c      	ldr	r2, [pc, #112]	; (8001690 <HAL_TIM_Base_Start_IT+0xd0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d00e      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a1b      	ldr	r2, [pc, #108]	; (8001694 <HAL_TIM_Base_Start_IT+0xd4>)
 8001628:	4293      	cmp	r3, r2
 800162a:	d009      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	4a19      	ldr	r2, [pc, #100]	; (8001698 <HAL_TIM_Base_Start_IT+0xd8>)
 8001632:	4293      	cmp	r3, r2
 8001634:	d004      	beq.n	8001640 <HAL_TIM_Base_Start_IT+0x80>
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	4a18      	ldr	r2, [pc, #96]	; (800169c <HAL_TIM_Base_Start_IT+0xdc>)
 800163c:	4293      	cmp	r3, r2
 800163e:	d111      	bne.n	8001664 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	f003 0307 	and.w	r3, r3, #7
 800164a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b06      	cmp	r3, #6
 8001650:	d010      	beq.n	8001674 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f042 0201 	orr.w	r2, r2, #1
 8001660:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001662:	e007      	b.n	8001674 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f042 0201 	orr.w	r2, r2, #1
 8001672:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001674:	2300      	movs	r3, #0
}
 8001676:	4618      	mov	r0, r3
 8001678:	3714      	adds	r7, #20
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	40010000 	.word	0x40010000
 8001688:	40000400 	.word	0x40000400
 800168c:	40000800 	.word	0x40000800
 8001690:	40000c00 	.word	0x40000c00
 8001694:	40010400 	.word	0x40010400
 8001698:	40014000 	.word	0x40014000
 800169c:	40001800 	.word	0x40001800

080016a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	691b      	ldr	r3, [r3, #16]
 80016ae:	f003 0302 	and.w	r3, r3, #2
 80016b2:	2b02      	cmp	r3, #2
 80016b4:	d122      	bne.n	80016fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	68db      	ldr	r3, [r3, #12]
 80016bc:	f003 0302 	and.w	r3, r3, #2
 80016c0:	2b02      	cmp	r3, #2
 80016c2:	d11b      	bne.n	80016fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f06f 0202 	mvn.w	r2, #2
 80016cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	2201      	movs	r2, #1
 80016d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	699b      	ldr	r3, [r3, #24]
 80016da:	f003 0303 	and.w	r3, r3, #3
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d003      	beq.n	80016ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f000 f8ee 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 80016e8:	e005      	b.n	80016f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	f000 f8e0 	bl	80018b0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80016f0:	6878      	ldr	r0, [r7, #4]
 80016f2:	f000 f8f1 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	2200      	movs	r2, #0
 80016fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	691b      	ldr	r3, [r3, #16]
 8001702:	f003 0304 	and.w	r3, r3, #4
 8001706:	2b04      	cmp	r3, #4
 8001708:	d122      	bne.n	8001750 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	f003 0304 	and.w	r3, r3, #4
 8001714:	2b04      	cmp	r3, #4
 8001716:	d11b      	bne.n	8001750 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	f06f 0204 	mvn.w	r2, #4
 8001720:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2202      	movs	r2, #2
 8001726:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	699b      	ldr	r3, [r3, #24]
 800172e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001736:	6878      	ldr	r0, [r7, #4]
 8001738:	f000 f8c4 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 800173c:	e005      	b.n	800174a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800173e:	6878      	ldr	r0, [r7, #4]
 8001740:	f000 f8b6 	bl	80018b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001744:	6878      	ldr	r0, [r7, #4]
 8001746:	f000 f8c7 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2200      	movs	r2, #0
 800174e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	691b      	ldr	r3, [r3, #16]
 8001756:	f003 0308 	and.w	r3, r3, #8
 800175a:	2b08      	cmp	r3, #8
 800175c:	d122      	bne.n	80017a4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	68db      	ldr	r3, [r3, #12]
 8001764:	f003 0308 	and.w	r3, r3, #8
 8001768:	2b08      	cmp	r3, #8
 800176a:	d11b      	bne.n	80017a4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f06f 0208 	mvn.w	r2, #8
 8001774:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	2204      	movs	r2, #4
 800177a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 0303 	and.w	r3, r3, #3
 8001786:	2b00      	cmp	r3, #0
 8001788:	d003      	beq.n	8001792 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800178a:	6878      	ldr	r0, [r7, #4]
 800178c:	f000 f89a 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 8001790:	e005      	b.n	800179e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001792:	6878      	ldr	r0, [r7, #4]
 8001794:	f000 f88c 	bl	80018b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001798:	6878      	ldr	r0, [r7, #4]
 800179a:	f000 f89d 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	2200      	movs	r2, #0
 80017a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	691b      	ldr	r3, [r3, #16]
 80017aa:	f003 0310 	and.w	r3, r3, #16
 80017ae:	2b10      	cmp	r3, #16
 80017b0:	d122      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	f003 0310 	and.w	r3, r3, #16
 80017bc:	2b10      	cmp	r3, #16
 80017be:	d11b      	bne.n	80017f8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f06f 0210 	mvn.w	r2, #16
 80017c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	2208      	movs	r2, #8
 80017ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	69db      	ldr	r3, [r3, #28]
 80017d6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d003      	beq.n	80017e6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80017de:	6878      	ldr	r0, [r7, #4]
 80017e0:	f000 f870 	bl	80018c4 <HAL_TIM_IC_CaptureCallback>
 80017e4:	e005      	b.n	80017f2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80017e6:	6878      	ldr	r0, [r7, #4]
 80017e8:	f000 f862 	bl	80018b0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80017ec:	6878      	ldr	r0, [r7, #4]
 80017ee:	f000 f873 	bl	80018d8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	2200      	movs	r2, #0
 80017f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	691b      	ldr	r3, [r3, #16]
 80017fe:	f003 0301 	and.w	r3, r3, #1
 8001802:	2b01      	cmp	r3, #1
 8001804:	d10e      	bne.n	8001824 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	68db      	ldr	r3, [r3, #12]
 800180c:	f003 0301 	and.w	r3, r3, #1
 8001810:	2b01      	cmp	r3, #1
 8001812:	d107      	bne.n	8001824 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	f06f 0201 	mvn.w	r2, #1
 800181c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800181e:	6878      	ldr	r0, [r7, #4]
 8001820:	f7fe ff7e 	bl	8000720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	691b      	ldr	r3, [r3, #16]
 800182a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800182e:	2b80      	cmp	r3, #128	; 0x80
 8001830:	d10e      	bne.n	8001850 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	68db      	ldr	r3, [r3, #12]
 8001838:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800183c:	2b80      	cmp	r3, #128	; 0x80
 800183e:	d107      	bne.n	8001850 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800184a:	6878      	ldr	r0, [r7, #4]
 800184c:	f000 f902 	bl	8001a54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	691b      	ldr	r3, [r3, #16]
 8001856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800185a:	2b40      	cmp	r3, #64	; 0x40
 800185c:	d10e      	bne.n	800187c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	68db      	ldr	r3, [r3, #12]
 8001864:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001868:	2b40      	cmp	r3, #64	; 0x40
 800186a:	d107      	bne.n	800187c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	f000 f838 	bl	80018ec <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f003 0320 	and.w	r3, r3, #32
 8001886:	2b20      	cmp	r3, #32
 8001888:	d10e      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	68db      	ldr	r3, [r3, #12]
 8001890:	f003 0320 	and.w	r3, r3, #32
 8001894:	2b20      	cmp	r3, #32
 8001896:	d107      	bne.n	80018a8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f06f 0220 	mvn.w	r2, #32
 80018a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80018a2:	6878      	ldr	r0, [r7, #4]
 80018a4:	f000 f8cc 	bl	8001a40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80018a8:	bf00      	nop
 80018aa:	3708      	adds	r7, #8
 80018ac:	46bd      	mov	sp, r7
 80018ae:	bd80      	pop	{r7, pc}

080018b0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018b0:	b480      	push	{r7}
 80018b2:	b083      	sub	sp, #12
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80018b8:	bf00      	nop
 80018ba:	370c      	adds	r7, #12
 80018bc:	46bd      	mov	sp, r7
 80018be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c2:	4770      	bx	lr

080018c4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80018c4:	b480      	push	{r7}
 80018c6:	b083      	sub	sp, #12
 80018c8:	af00      	add	r7, sp, #0
 80018ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80018cc:	bf00      	nop
 80018ce:	370c      	adds	r7, #12
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80018d8:	b480      	push	{r7}
 80018da:	b083      	sub	sp, #12
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80018e0:	bf00      	nop
 80018e2:	370c      	adds	r7, #12
 80018e4:	46bd      	mov	sp, r7
 80018e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ea:	4770      	bx	lr

080018ec <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80018ec:	b480      	push	{r7}
 80018ee:	b083      	sub	sp, #12
 80018f0:	af00      	add	r7, sp, #0
 80018f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80018f4:	bf00      	nop
 80018f6:	370c      	adds	r7, #12
 80018f8:	46bd      	mov	sp, r7
 80018fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018fe:	4770      	bx	lr

08001900 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001900:	b480      	push	{r7}
 8001902:	b085      	sub	sp, #20
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
 8001908:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	4a40      	ldr	r2, [pc, #256]	; (8001a14 <TIM_Base_SetConfig+0x114>)
 8001914:	4293      	cmp	r3, r2
 8001916:	d013      	beq.n	8001940 <TIM_Base_SetConfig+0x40>
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800191e:	d00f      	beq.n	8001940 <TIM_Base_SetConfig+0x40>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	4a3d      	ldr	r2, [pc, #244]	; (8001a18 <TIM_Base_SetConfig+0x118>)
 8001924:	4293      	cmp	r3, r2
 8001926:	d00b      	beq.n	8001940 <TIM_Base_SetConfig+0x40>
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4a3c      	ldr	r2, [pc, #240]	; (8001a1c <TIM_Base_SetConfig+0x11c>)
 800192c:	4293      	cmp	r3, r2
 800192e:	d007      	beq.n	8001940 <TIM_Base_SetConfig+0x40>
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	4a3b      	ldr	r2, [pc, #236]	; (8001a20 <TIM_Base_SetConfig+0x120>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d003      	beq.n	8001940 <TIM_Base_SetConfig+0x40>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	4a3a      	ldr	r2, [pc, #232]	; (8001a24 <TIM_Base_SetConfig+0x124>)
 800193c:	4293      	cmp	r3, r2
 800193e:	d108      	bne.n	8001952 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001946:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	685b      	ldr	r3, [r3, #4]
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	4313      	orrs	r3, r2
 8001950:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	4a2f      	ldr	r2, [pc, #188]	; (8001a14 <TIM_Base_SetConfig+0x114>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d02b      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001960:	d027      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	4a2c      	ldr	r2, [pc, #176]	; (8001a18 <TIM_Base_SetConfig+0x118>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d023      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	4a2b      	ldr	r2, [pc, #172]	; (8001a1c <TIM_Base_SetConfig+0x11c>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01f      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	4a2a      	ldr	r2, [pc, #168]	; (8001a20 <TIM_Base_SetConfig+0x120>)
 8001976:	4293      	cmp	r3, r2
 8001978:	d01b      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	4a29      	ldr	r2, [pc, #164]	; (8001a24 <TIM_Base_SetConfig+0x124>)
 800197e:	4293      	cmp	r3, r2
 8001980:	d017      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	4a28      	ldr	r2, [pc, #160]	; (8001a28 <TIM_Base_SetConfig+0x128>)
 8001986:	4293      	cmp	r3, r2
 8001988:	d013      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	4a27      	ldr	r2, [pc, #156]	; (8001a2c <TIM_Base_SetConfig+0x12c>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d00f      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	4a26      	ldr	r2, [pc, #152]	; (8001a30 <TIM_Base_SetConfig+0x130>)
 8001996:	4293      	cmp	r3, r2
 8001998:	d00b      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	4a25      	ldr	r2, [pc, #148]	; (8001a34 <TIM_Base_SetConfig+0x134>)
 800199e:	4293      	cmp	r3, r2
 80019a0:	d007      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	4a24      	ldr	r2, [pc, #144]	; (8001a38 <TIM_Base_SetConfig+0x138>)
 80019a6:	4293      	cmp	r3, r2
 80019a8:	d003      	beq.n	80019b2 <TIM_Base_SetConfig+0xb2>
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	4a23      	ldr	r2, [pc, #140]	; (8001a3c <TIM_Base_SetConfig+0x13c>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d108      	bne.n	80019c4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80019b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80019ba:	683b      	ldr	r3, [r7, #0]
 80019bc:	68db      	ldr	r3, [r3, #12]
 80019be:	68fa      	ldr	r2, [r7, #12]
 80019c0:	4313      	orrs	r3, r2
 80019c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80019ca:	683b      	ldr	r3, [r7, #0]
 80019cc:	695b      	ldr	r3, [r3, #20]
 80019ce:	4313      	orrs	r3, r2
 80019d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	68fa      	ldr	r2, [r7, #12]
 80019d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	689a      	ldr	r2, [r3, #8]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	681a      	ldr	r2, [r3, #0]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	4a0a      	ldr	r2, [pc, #40]	; (8001a14 <TIM_Base_SetConfig+0x114>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d003      	beq.n	80019f8 <TIM_Base_SetConfig+0xf8>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	4a0c      	ldr	r2, [pc, #48]	; (8001a24 <TIM_Base_SetConfig+0x124>)
 80019f4:	4293      	cmp	r3, r2
 80019f6:	d103      	bne.n	8001a00 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	691a      	ldr	r2, [r3, #16]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2201      	movs	r2, #1
 8001a04:	615a      	str	r2, [r3, #20]
}
 8001a06:	bf00      	nop
 8001a08:	3714      	adds	r7, #20
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	40010000 	.word	0x40010000
 8001a18:	40000400 	.word	0x40000400
 8001a1c:	40000800 	.word	0x40000800
 8001a20:	40000c00 	.word	0x40000c00
 8001a24:	40010400 	.word	0x40010400
 8001a28:	40014000 	.word	0x40014000
 8001a2c:	40014400 	.word	0x40014400
 8001a30:	40014800 	.word	0x40014800
 8001a34:	40001800 	.word	0x40001800
 8001a38:	40001c00 	.word	0x40001c00
 8001a3c:	40002000 	.word	0x40002000

08001a40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001a40:	b480      	push	{r7}
 8001a42:	b083      	sub	sp, #12
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001a5c:	bf00      	nop
 8001a5e:	370c      	adds	r7, #12
 8001a60:	46bd      	mov	sp, r7
 8001a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a66:	4770      	bx	lr

08001a68 <__NVIC_SetPriority>:
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	6039      	str	r1, [r7, #0]
 8001a72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a78:	2b00      	cmp	r3, #0
 8001a7a:	db0a      	blt.n	8001a92 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	b2da      	uxtb	r2, r3
 8001a80:	490c      	ldr	r1, [pc, #48]	; (8001ab4 <__NVIC_SetPriority+0x4c>)
 8001a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a86:	0112      	lsls	r2, r2, #4
 8001a88:	b2d2      	uxtb	r2, r2
 8001a8a:	440b      	add	r3, r1
 8001a8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001a90:	e00a      	b.n	8001aa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	b2da      	uxtb	r2, r3
 8001a96:	4908      	ldr	r1, [pc, #32]	; (8001ab8 <__NVIC_SetPriority+0x50>)
 8001a98:	79fb      	ldrb	r3, [r7, #7]
 8001a9a:	f003 030f 	and.w	r3, r3, #15
 8001a9e:	3b04      	subs	r3, #4
 8001aa0:	0112      	lsls	r2, r2, #4
 8001aa2:	b2d2      	uxtb	r2, r2
 8001aa4:	440b      	add	r3, r1
 8001aa6:	761a      	strb	r2, [r3, #24]
}
 8001aa8:	bf00      	nop
 8001aaa:	370c      	adds	r7, #12
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	e000e100 	.word	0xe000e100
 8001ab8:	e000ed00 	.word	0xe000ed00

08001abc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001abc:	b580      	push	{r7, lr}
 8001abe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001ac0:	4b05      	ldr	r3, [pc, #20]	; (8001ad8 <SysTick_Handler+0x1c>)
 8001ac2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001ac4:	f001 fdd8 	bl	8003678 <xTaskGetSchedulerState>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b01      	cmp	r3, #1
 8001acc:	d001      	beq.n	8001ad2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001ace:	f002 fbc3 	bl	8004258 <xPortSysTickHandler>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	e000e010 	.word	0xe000e010

08001adc <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ae0:	2100      	movs	r1, #0
 8001ae2:	f06f 0004 	mvn.w	r0, #4
 8001ae6:	f7ff ffbf 	bl	8001a68 <__NVIC_SetPriority>
#endif
}
 8001aea:	bf00      	nop
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001af0:	b480      	push	{r7}
 8001af2:	b083      	sub	sp, #12
 8001af4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001af6:	f3ef 8305 	mrs	r3, IPSR
 8001afa:	603b      	str	r3, [r7, #0]
  return(result);
 8001afc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d003      	beq.n	8001b0a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001b02:	f06f 0305 	mvn.w	r3, #5
 8001b06:	607b      	str	r3, [r7, #4]
 8001b08:	e00c      	b.n	8001b24 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001b0a:	4b0a      	ldr	r3, [pc, #40]	; (8001b34 <osKernelInitialize+0x44>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d105      	bne.n	8001b1e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001b12:	4b08      	ldr	r3, [pc, #32]	; (8001b34 <osKernelInitialize+0x44>)
 8001b14:	2201      	movs	r2, #1
 8001b16:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001b18:	2300      	movs	r3, #0
 8001b1a:	607b      	str	r3, [r7, #4]
 8001b1c:	e002      	b.n	8001b24 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001b1e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b22:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b24:	687b      	ldr	r3, [r7, #4]
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	200000e4 	.word	0x200000e4

08001b38 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	b082      	sub	sp, #8
 8001b3c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b3e:	f3ef 8305 	mrs	r3, IPSR
 8001b42:	603b      	str	r3, [r7, #0]
  return(result);
 8001b44:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d003      	beq.n	8001b52 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001b4a:	f06f 0305 	mvn.w	r3, #5
 8001b4e:	607b      	str	r3, [r7, #4]
 8001b50:	e010      	b.n	8001b74 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001b52:	4b0b      	ldr	r3, [pc, #44]	; (8001b80 <osKernelStart+0x48>)
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	2b01      	cmp	r3, #1
 8001b58:	d109      	bne.n	8001b6e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001b5a:	f7ff ffbf 	bl	8001adc <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001b5e:	4b08      	ldr	r3, [pc, #32]	; (8001b80 <osKernelStart+0x48>)
 8001b60:	2202      	movs	r2, #2
 8001b62:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001b64:	f001 f92c 	bl	8002dc0 <vTaskStartScheduler>
      stat = osOK;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	607b      	str	r3, [r7, #4]
 8001b6c:	e002      	b.n	8001b74 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001b6e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b72:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001b74:	687b      	ldr	r3, [r7, #4]
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	200000e4 	.word	0x200000e4

08001b84 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	; 0x38
 8001b88:	af04      	add	r7, sp, #16
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001b90:	2300      	movs	r3, #0
 8001b92:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001b94:	f3ef 8305 	mrs	r3, IPSR
 8001b98:	617b      	str	r3, [r7, #20]
  return(result);
 8001b9a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d17e      	bne.n	8001c9e <osThreadNew+0x11a>
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d07b      	beq.n	8001c9e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001ba6:	2380      	movs	r3, #128	; 0x80
 8001ba8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001baa:	2318      	movs	r3, #24
 8001bac:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001bae:	2300      	movs	r3, #0
 8001bb0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001bb2:	f04f 33ff 	mov.w	r3, #4294967295
 8001bb6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d045      	beq.n	8001c4a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	681b      	ldr	r3, [r3, #0]
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d002      	beq.n	8001bcc <osThreadNew+0x48>
        name = attr->name;
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	699b      	ldr	r3, [r3, #24]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d002      	beq.n	8001bda <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	699b      	ldr	r3, [r3, #24]
 8001bd8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001bda:	69fb      	ldr	r3, [r7, #28]
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d008      	beq.n	8001bf2 <osThreadNew+0x6e>
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	2b38      	cmp	r3, #56	; 0x38
 8001be4:	d805      	bhi.n	8001bf2 <osThreadNew+0x6e>
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 0301 	and.w	r3, r3, #1
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d001      	beq.n	8001bf6 <osThreadNew+0x72>
        return (NULL);
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	e054      	b.n	8001ca0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	695b      	ldr	r3, [r3, #20]
 8001bfa:	2b00      	cmp	r3, #0
 8001bfc:	d003      	beq.n	8001c06 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	695b      	ldr	r3, [r3, #20]
 8001c02:	089b      	lsrs	r3, r3, #2
 8001c04:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d00e      	beq.n	8001c2c <osThreadNew+0xa8>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	68db      	ldr	r3, [r3, #12]
 8001c12:	2bbb      	cmp	r3, #187	; 0xbb
 8001c14:	d90a      	bls.n	8001c2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d006      	beq.n	8001c2c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	695b      	ldr	r3, [r3, #20]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d002      	beq.n	8001c2c <osThreadNew+0xa8>
        mem = 1;
 8001c26:	2301      	movs	r3, #1
 8001c28:	61bb      	str	r3, [r7, #24]
 8001c2a:	e010      	b.n	8001c4e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d10c      	bne.n	8001c4e <osThreadNew+0xca>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	68db      	ldr	r3, [r3, #12]
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d108      	bne.n	8001c4e <osThreadNew+0xca>
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	691b      	ldr	r3, [r3, #16]
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d104      	bne.n	8001c4e <osThreadNew+0xca>
          mem = 0;
 8001c44:	2300      	movs	r3, #0
 8001c46:	61bb      	str	r3, [r7, #24]
 8001c48:	e001      	b.n	8001c4e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	2b01      	cmp	r3, #1
 8001c52:	d110      	bne.n	8001c76 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8001c58:	687a      	ldr	r2, [r7, #4]
 8001c5a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8001c5c:	9202      	str	r2, [sp, #8]
 8001c5e:	9301      	str	r3, [sp, #4]
 8001c60:	69fb      	ldr	r3, [r7, #28]
 8001c62:	9300      	str	r3, [sp, #0]
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	6a3a      	ldr	r2, [r7, #32]
 8001c68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c6a:	68f8      	ldr	r0, [r7, #12]
 8001c6c:	f000 fe38 	bl	80028e0 <xTaskCreateStatic>
 8001c70:	4603      	mov	r3, r0
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	e013      	b.n	8001c9e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8001c76:	69bb      	ldr	r3, [r7, #24]
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d110      	bne.n	8001c9e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8001c7c:	6a3b      	ldr	r3, [r7, #32]
 8001c7e:	b29a      	uxth	r2, r3
 8001c80:	f107 0310 	add.w	r3, r7, #16
 8001c84:	9301      	str	r3, [sp, #4]
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	9300      	str	r3, [sp, #0]
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c8e:	68f8      	ldr	r0, [r7, #12]
 8001c90:	f000 fe83 	bl	800299a <xTaskCreate>
 8001c94:	4603      	mov	r3, r0
 8001c96:	2b01      	cmp	r3, #1
 8001c98:	d001      	beq.n	8001c9e <osThreadNew+0x11a>
            hTask = NULL;
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8001c9e:	693b      	ldr	r3, [r7, #16]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3728      	adds	r7, #40	; 0x28
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}

08001ca8 <osThreadSetPriority>:
  }

  return (sz);
}

osStatus_t osThreadSetPriority (osThreadId_t thread_id, osPriority_t priority) {
 8001ca8:	b580      	push	{r7, lr}
 8001caa:	b086      	sub	sp, #24
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	6078      	str	r0, [r7, #4]
 8001cb0:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001cb6:	f3ef 8305 	mrs	r3, IPSR
 8001cba:	60fb      	str	r3, [r7, #12]
  return(result);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d003      	beq.n	8001cca <osThreadSetPriority+0x22>
    stat = osErrorISR;
 8001cc2:	f06f 0305 	mvn.w	r3, #5
 8001cc6:	617b      	str	r3, [r7, #20]
 8001cc8:	e013      	b.n	8001cf2 <osThreadSetPriority+0x4a>
  }
  else if ((hTask == NULL) || (priority < osPriorityIdle) || (priority > osPriorityISR)) {
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d005      	beq.n	8001cdc <osThreadSetPriority+0x34>
 8001cd0:	683b      	ldr	r3, [r7, #0]
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	dd02      	ble.n	8001cdc <osThreadSetPriority+0x34>
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	2b38      	cmp	r3, #56	; 0x38
 8001cda:	dd03      	ble.n	8001ce4 <osThreadSetPriority+0x3c>
    stat = osErrorParameter;
 8001cdc:	f06f 0303 	mvn.w	r3, #3
 8001ce0:	617b      	str	r3, [r7, #20]
 8001ce2:	e006      	b.n	8001cf2 <osThreadSetPriority+0x4a>
  }
  else {
    stat = osOK;
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	617b      	str	r3, [r7, #20]
    vTaskPrioritySet (hTask, (UBaseType_t)priority);
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	4619      	mov	r1, r3
 8001cec:	6938      	ldr	r0, [r7, #16]
 8001cee:	f000 ffc9 	bl	8002c84 <vTaskPrioritySet>
  }

  return (stat);
 8001cf2:	697b      	ldr	r3, [r7, #20]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <osThreadGetPriority>:

osPriority_t osThreadGetPriority (osThreadId_t thread_id) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001d08:	f3ef 8305 	mrs	r3, IPSR
 8001d0c:	60fb      	str	r3, [r7, #12]
  return(result);
 8001d0e:	68fb      	ldr	r3, [r7, #12]
  osPriority_t prio;

  if (IS_IRQ() || (hTask == NULL)) {
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d102      	bne.n	8001d1a <osThreadGetPriority+0x1e>
 8001d14:	693b      	ldr	r3, [r7, #16]
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d103      	bne.n	8001d22 <osThreadGetPriority+0x26>
    prio = osPriorityError;
 8001d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8001d1e:	617b      	str	r3, [r7, #20]
 8001d20:	e004      	b.n	8001d2c <osThreadGetPriority+0x30>
  } else {
    prio = (osPriority_t)((int32_t)uxTaskPriorityGet (hTask));
 8001d22:	6938      	ldr	r0, [r7, #16]
 8001d24:	f000 ff94 	bl	8002c50 <uxTaskPriorityGet>
 8001d28:	4603      	mov	r3, r0
 8001d2a:	617b      	str	r3, [r7, #20]
  }

  return (prio);
 8001d2c:	697b      	ldr	r3, [r7, #20]
}
 8001d2e:	4618      	mov	r0, r3
 8001d30:	3718      	adds	r7, #24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	bd80      	pop	{r7, pc}
	...

08001d38 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8001d38:	b480      	push	{r7}
 8001d3a:	b085      	sub	sp, #20
 8001d3c:	af00      	add	r7, sp, #0
 8001d3e:	60f8      	str	r0, [r7, #12]
 8001d40:	60b9      	str	r1, [r7, #8]
 8001d42:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a07      	ldr	r2, [pc, #28]	; (8001d64 <vApplicationGetIdleTaskMemory+0x2c>)
 8001d48:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8001d4a:	68bb      	ldr	r3, [r7, #8]
 8001d4c:	4a06      	ldr	r2, [pc, #24]	; (8001d68 <vApplicationGetIdleTaskMemory+0x30>)
 8001d4e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2280      	movs	r2, #128	; 0x80
 8001d54:	601a      	str	r2, [r3, #0]
}
 8001d56:	bf00      	nop
 8001d58:	3714      	adds	r7, #20
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	200000e8 	.word	0x200000e8
 8001d68:	200001a4 	.word	0x200001a4

08001d6c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8001d6c:	b480      	push	{r7}
 8001d6e:	b085      	sub	sp, #20
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	60f8      	str	r0, [r7, #12]
 8001d74:	60b9      	str	r1, [r7, #8]
 8001d76:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	4a07      	ldr	r2, [pc, #28]	; (8001d98 <vApplicationGetTimerTaskMemory+0x2c>)
 8001d7c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8001d7e:	68bb      	ldr	r3, [r7, #8]
 8001d80:	4a06      	ldr	r2, [pc, #24]	; (8001d9c <vApplicationGetTimerTaskMemory+0x30>)
 8001d82:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8a:	601a      	str	r2, [r3, #0]
}
 8001d8c:	bf00      	nop
 8001d8e:	3714      	adds	r7, #20
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr
 8001d98:	200003a4 	.word	0x200003a4
 8001d9c:	20000460 	.word	0x20000460

08001da0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8001da0:	b480      	push	{r7}
 8001da2:	b083      	sub	sp, #12
 8001da4:	af00      	add	r7, sp, #0
 8001da6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	f103 0208 	add.w	r2, r3, #8
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	f04f 32ff 	mov.w	r2, #4294967295
 8001db8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	f103 0208 	add.w	r2, r3, #8
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	f103 0208 	add.w	r2, r3, #8
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2200      	movs	r2, #0
 8001dd2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8001dd4:	bf00      	nop
 8001dd6:	370c      	adds	r7, #12
 8001dd8:	46bd      	mov	sp, r7
 8001dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dde:	4770      	bx	lr

08001de0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8001de0:	b480      	push	{r7}
 8001de2:	b083      	sub	sp, #12
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr

08001dfa <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001dfa:	b480      	push	{r7}
 8001dfc:	b085      	sub	sp, #20
 8001dfe:	af00      	add	r7, sp, #0
 8001e00:	6078      	str	r0, [r7, #4]
 8001e02:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8001e0a:	683b      	ldr	r3, [r7, #0]
 8001e0c:	68fa      	ldr	r2, [r7, #12]
 8001e0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	689b      	ldr	r3, [r3, #8]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	683a      	ldr	r2, [r7, #0]
 8001e24:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	687a      	ldr	r2, [r7, #4]
 8001e2a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	1c5a      	adds	r2, r3, #1
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	601a      	str	r2, [r3, #0]
}
 8001e36:	bf00      	nop
 8001e38:	3714      	adds	r7, #20
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e40:	4770      	bx	lr

08001e42 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8001e42:	b480      	push	{r7}
 8001e44:	b085      	sub	sp, #20
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8001e4c:	683b      	ldr	r3, [r7, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8001e52:	68bb      	ldr	r3, [r7, #8]
 8001e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e58:	d103      	bne.n	8001e62 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	691b      	ldr	r3, [r3, #16]
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	e00c      	b.n	8001e7c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	3308      	adds	r3, #8
 8001e66:	60fb      	str	r3, [r7, #12]
 8001e68:	e002      	b.n	8001e70 <vListInsert+0x2e>
 8001e6a:	68fb      	ldr	r3, [r7, #12]
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	60fb      	str	r3, [r7, #12]
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	68ba      	ldr	r2, [r7, #8]
 8001e78:	429a      	cmp	r2, r3
 8001e7a:	d2f6      	bcs.n	8001e6a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	685a      	ldr	r2, [r3, #4]
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	683a      	ldr	r2, [r7, #0]
 8001e8a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	68fa      	ldr	r2, [r7, #12]
 8001e90:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	683a      	ldr	r2, [r7, #0]
 8001e96:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	687a      	ldr	r2, [r7, #4]
 8001e9c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	1c5a      	adds	r2, r3, #1
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	601a      	str	r2, [r3, #0]
}
 8001ea8:	bf00      	nop
 8001eaa:	3714      	adds	r7, #20
 8001eac:	46bd      	mov	sp, r7
 8001eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb2:	4770      	bx	lr

08001eb4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8001eb4:	b480      	push	{r7}
 8001eb6:	b085      	sub	sp, #20
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	685b      	ldr	r3, [r3, #4]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	6892      	ldr	r2, [r2, #8]
 8001eca:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	687a      	ldr	r2, [r7, #4]
 8001ed2:	6852      	ldr	r2, [r2, #4]
 8001ed4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	687a      	ldr	r2, [r7, #4]
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d103      	bne.n	8001ee8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	689a      	ldr	r2, [r3, #8]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2200      	movs	r2, #0
 8001eec:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8001eee:	68fb      	ldr	r3, [r7, #12]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	1e5a      	subs	r2, r3, #1
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	681b      	ldr	r3, [r3, #0]
}
 8001efc:	4618      	mov	r0, r3
 8001efe:	3714      	adds	r7, #20
 8001f00:	46bd      	mov	sp, r7
 8001f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f06:	4770      	bx	lr

08001f08 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	b084      	sub	sp, #16
 8001f0c:	af00      	add	r7, sp, #0
 8001f0e:	6078      	str	r0, [r7, #4]
 8001f10:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d10a      	bne.n	8001f32 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001f1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001f20:	f383 8811 	msr	BASEPRI, r3
 8001f24:	f3bf 8f6f 	isb	sy
 8001f28:	f3bf 8f4f 	dsb	sy
 8001f2c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001f2e:	bf00      	nop
 8001f30:	e7fe      	b.n	8001f30 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8001f32:	f002 f8ff 	bl	8004134 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f3e:	68f9      	ldr	r1, [r7, #12]
 8001f40:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f42:	fb01 f303 	mul.w	r3, r1, r3
 8001f46:	441a      	add	r2, r3
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681a      	ldr	r2, [r3, #0]
 8001f56:	68fb      	ldr	r3, [r7, #12]
 8001f58:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	681a      	ldr	r2, [r3, #0]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f62:	3b01      	subs	r3, #1
 8001f64:	68f9      	ldr	r1, [r7, #12]
 8001f66:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001f68:	fb01 f303 	mul.w	r3, r1, r3
 8001f6c:	441a      	add	r2, r3
 8001f6e:	68fb      	ldr	r3, [r7, #12]
 8001f70:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	22ff      	movs	r2, #255	; 0xff
 8001f76:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	22ff      	movs	r2, #255	; 0xff
 8001f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d114      	bne.n	8001fb2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	691b      	ldr	r3, [r3, #16]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d01a      	beq.n	8001fc6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	3310      	adds	r3, #16
 8001f94:	4618      	mov	r0, r3
 8001f96:	f001 f9ad 	bl	80032f4 <xTaskRemoveFromEventList>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d012      	beq.n	8001fc6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8001fa0:	4b0c      	ldr	r3, [pc, #48]	; (8001fd4 <xQueueGenericReset+0xcc>)
 8001fa2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001fa6:	601a      	str	r2, [r3, #0]
 8001fa8:	f3bf 8f4f 	dsb	sy
 8001fac:	f3bf 8f6f 	isb	sy
 8001fb0:	e009      	b.n	8001fc6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	3310      	adds	r3, #16
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fef2 	bl	8001da0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8001fbc:	68fb      	ldr	r3, [r7, #12]
 8001fbe:	3324      	adds	r3, #36	; 0x24
 8001fc0:	4618      	mov	r0, r3
 8001fc2:	f7ff feed 	bl	8001da0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8001fc6:	f002 f8e5 	bl	8004194 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8001fca:	2301      	movs	r3, #1
}
 8001fcc:	4618      	mov	r0, r3
 8001fce:	3710      	adds	r7, #16
 8001fd0:	46bd      	mov	sp, r7
 8001fd2:	bd80      	pop	{r7, pc}
 8001fd4:	e000ed04 	.word	0xe000ed04

08001fd8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	b08e      	sub	sp, #56	; 0x38
 8001fdc:	af02      	add	r7, sp, #8
 8001fde:	60f8      	str	r0, [r7, #12]
 8001fe0:	60b9      	str	r1, [r7, #8]
 8001fe2:	607a      	str	r2, [r7, #4]
 8001fe4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8001fe6:	68fb      	ldr	r3, [r7, #12]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d10a      	bne.n	8002002 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8001fec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001ff0:	f383 8811 	msr	BASEPRI, r3
 8001ff4:	f3bf 8f6f 	isb	sy
 8001ff8:	f3bf 8f4f 	dsb	sy
 8001ffc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8001ffe:	bf00      	nop
 8002000:	e7fe      	b.n	8002000 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d10a      	bne.n	800201e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002008:	f04f 0350 	mov.w	r3, #80	; 0x50
 800200c:	f383 8811 	msr	BASEPRI, r3
 8002010:	f3bf 8f6f 	isb	sy
 8002014:	f3bf 8f4f 	dsb	sy
 8002018:	627b      	str	r3, [r7, #36]	; 0x24
}
 800201a:	bf00      	nop
 800201c:	e7fe      	b.n	800201c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	2b00      	cmp	r3, #0
 8002022:	d002      	beq.n	800202a <xQueueGenericCreateStatic+0x52>
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <xQueueGenericCreateStatic+0x56>
 800202a:	2301      	movs	r3, #1
 800202c:	e000      	b.n	8002030 <xQueueGenericCreateStatic+0x58>
 800202e:	2300      	movs	r3, #0
 8002030:	2b00      	cmp	r3, #0
 8002032:	d10a      	bne.n	800204a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8002034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002038:	f383 8811 	msr	BASEPRI, r3
 800203c:	f3bf 8f6f 	isb	sy
 8002040:	f3bf 8f4f 	dsb	sy
 8002044:	623b      	str	r3, [r7, #32]
}
 8002046:	bf00      	nop
 8002048:	e7fe      	b.n	8002048 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d102      	bne.n	8002056 <xQueueGenericCreateStatic+0x7e>
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <xQueueGenericCreateStatic+0x82>
 8002056:	2301      	movs	r3, #1
 8002058:	e000      	b.n	800205c <xQueueGenericCreateStatic+0x84>
 800205a:	2300      	movs	r3, #0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d10a      	bne.n	8002076 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002060:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002064:	f383 8811 	msr	BASEPRI, r3
 8002068:	f3bf 8f6f 	isb	sy
 800206c:	f3bf 8f4f 	dsb	sy
 8002070:	61fb      	str	r3, [r7, #28]
}
 8002072:	bf00      	nop
 8002074:	e7fe      	b.n	8002074 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002076:	2350      	movs	r3, #80	; 0x50
 8002078:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b50      	cmp	r3, #80	; 0x50
 800207e:	d00a      	beq.n	8002096 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002084:	f383 8811 	msr	BASEPRI, r3
 8002088:	f3bf 8f6f 	isb	sy
 800208c:	f3bf 8f4f 	dsb	sy
 8002090:	61bb      	str	r3, [r7, #24]
}
 8002092:	bf00      	nop
 8002094:	e7fe      	b.n	8002094 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002096:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002098:	683b      	ldr	r3, [r7, #0]
 800209a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800209c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00d      	beq.n	80020be <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80020a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020a4:	2201      	movs	r2, #1
 80020a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80020aa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80020ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80020b0:	9300      	str	r3, [sp, #0]
 80020b2:	4613      	mov	r3, r2
 80020b4:	687a      	ldr	r2, [r7, #4]
 80020b6:	68b9      	ldr	r1, [r7, #8]
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 f805 	bl	80020c8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80020be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3730      	adds	r7, #48	; 0x30
 80020c4:	46bd      	mov	sp, r7
 80020c6:	bd80      	pop	{r7, pc}

080020c8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b084      	sub	sp, #16
 80020cc:	af00      	add	r7, sp, #0
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	60b9      	str	r1, [r7, #8]
 80020d2:	607a      	str	r2, [r7, #4]
 80020d4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80020d6:	68bb      	ldr	r3, [r7, #8]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d103      	bne.n	80020e4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80020dc:	69bb      	ldr	r3, [r7, #24]
 80020de:	69ba      	ldr	r2, [r7, #24]
 80020e0:	601a      	str	r2, [r3, #0]
 80020e2:	e002      	b.n	80020ea <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80020f0:	69bb      	ldr	r3, [r7, #24]
 80020f2:	68ba      	ldr	r2, [r7, #8]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80020f6:	2101      	movs	r1, #1
 80020f8:	69b8      	ldr	r0, [r7, #24]
 80020fa:	f7ff ff05 	bl	8001f08 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	78fa      	ldrb	r2, [r7, #3]
 8002102:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002106:	bf00      	nop
 8002108:	3710      	adds	r7, #16
 800210a:	46bd      	mov	sp, r7
 800210c:	bd80      	pop	{r7, pc}
	...

08002110 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08e      	sub	sp, #56	; 0x38
 8002114:	af00      	add	r7, sp, #0
 8002116:	60f8      	str	r0, [r7, #12]
 8002118:	60b9      	str	r1, [r7, #8]
 800211a:	607a      	str	r2, [r7, #4]
 800211c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800211e:	2300      	movs	r3, #0
 8002120:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002126:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002128:	2b00      	cmp	r3, #0
 800212a:	d10a      	bne.n	8002142 <xQueueGenericSend+0x32>
	__asm volatile
 800212c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002130:	f383 8811 	msr	BASEPRI, r3
 8002134:	f3bf 8f6f 	isb	sy
 8002138:	f3bf 8f4f 	dsb	sy
 800213c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800213e:	bf00      	nop
 8002140:	e7fe      	b.n	8002140 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	2b00      	cmp	r3, #0
 8002146:	d103      	bne.n	8002150 <xQueueGenericSend+0x40>
 8002148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800214a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214c:	2b00      	cmp	r3, #0
 800214e:	d101      	bne.n	8002154 <xQueueGenericSend+0x44>
 8002150:	2301      	movs	r3, #1
 8002152:	e000      	b.n	8002156 <xQueueGenericSend+0x46>
 8002154:	2300      	movs	r3, #0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d10a      	bne.n	8002170 <xQueueGenericSend+0x60>
	__asm volatile
 800215a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800215e:	f383 8811 	msr	BASEPRI, r3
 8002162:	f3bf 8f6f 	isb	sy
 8002166:	f3bf 8f4f 	dsb	sy
 800216a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800216c:	bf00      	nop
 800216e:	e7fe      	b.n	800216e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002170:	683b      	ldr	r3, [r7, #0]
 8002172:	2b02      	cmp	r3, #2
 8002174:	d103      	bne.n	800217e <xQueueGenericSend+0x6e>
 8002176:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002178:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800217a:	2b01      	cmp	r3, #1
 800217c:	d101      	bne.n	8002182 <xQueueGenericSend+0x72>
 800217e:	2301      	movs	r3, #1
 8002180:	e000      	b.n	8002184 <xQueueGenericSend+0x74>
 8002182:	2300      	movs	r3, #0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d10a      	bne.n	800219e <xQueueGenericSend+0x8e>
	__asm volatile
 8002188:	f04f 0350 	mov.w	r3, #80	; 0x50
 800218c:	f383 8811 	msr	BASEPRI, r3
 8002190:	f3bf 8f6f 	isb	sy
 8002194:	f3bf 8f4f 	dsb	sy
 8002198:	623b      	str	r3, [r7, #32]
}
 800219a:	bf00      	nop
 800219c:	e7fe      	b.n	800219c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800219e:	f001 fa6b 	bl	8003678 <xTaskGetSchedulerState>
 80021a2:	4603      	mov	r3, r0
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d102      	bne.n	80021ae <xQueueGenericSend+0x9e>
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d101      	bne.n	80021b2 <xQueueGenericSend+0xa2>
 80021ae:	2301      	movs	r3, #1
 80021b0:	e000      	b.n	80021b4 <xQueueGenericSend+0xa4>
 80021b2:	2300      	movs	r3, #0
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d10a      	bne.n	80021ce <xQueueGenericSend+0xbe>
	__asm volatile
 80021b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80021bc:	f383 8811 	msr	BASEPRI, r3
 80021c0:	f3bf 8f6f 	isb	sy
 80021c4:	f3bf 8f4f 	dsb	sy
 80021c8:	61fb      	str	r3, [r7, #28]
}
 80021ca:	bf00      	nop
 80021cc:	e7fe      	b.n	80021cc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80021ce:	f001 ffb1 	bl	8004134 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80021d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80021d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80021da:	429a      	cmp	r2, r3
 80021dc:	d302      	bcc.n	80021e4 <xQueueGenericSend+0xd4>
 80021de:	683b      	ldr	r3, [r7, #0]
 80021e0:	2b02      	cmp	r3, #2
 80021e2:	d129      	bne.n	8002238 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80021e4:	683a      	ldr	r2, [r7, #0]
 80021e6:	68b9      	ldr	r1, [r7, #8]
 80021e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80021ea:	f000 fa0b 	bl	8002604 <prvCopyDataToQueue>
 80021ee:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80021f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d010      	beq.n	800221a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80021f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021fa:	3324      	adds	r3, #36	; 0x24
 80021fc:	4618      	mov	r0, r3
 80021fe:	f001 f879 	bl	80032f4 <xTaskRemoveFromEventList>
 8002202:	4603      	mov	r3, r0
 8002204:	2b00      	cmp	r3, #0
 8002206:	d013      	beq.n	8002230 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002208:	4b3f      	ldr	r3, [pc, #252]	; (8002308 <xQueueGenericSend+0x1f8>)
 800220a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800220e:	601a      	str	r2, [r3, #0]
 8002210:	f3bf 8f4f 	dsb	sy
 8002214:	f3bf 8f6f 	isb	sy
 8002218:	e00a      	b.n	8002230 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800221a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800221c:	2b00      	cmp	r3, #0
 800221e:	d007      	beq.n	8002230 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002220:	4b39      	ldr	r3, [pc, #228]	; (8002308 <xQueueGenericSend+0x1f8>)
 8002222:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002226:	601a      	str	r2, [r3, #0]
 8002228:	f3bf 8f4f 	dsb	sy
 800222c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002230:	f001 ffb0 	bl	8004194 <vPortExitCritical>
				return pdPASS;
 8002234:	2301      	movs	r3, #1
 8002236:	e063      	b.n	8002300 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d103      	bne.n	8002246 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800223e:	f001 ffa9 	bl	8004194 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002242:	2300      	movs	r3, #0
 8002244:	e05c      	b.n	8002300 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002246:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002248:	2b00      	cmp	r3, #0
 800224a:	d106      	bne.n	800225a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800224c:	f107 0314 	add.w	r3, r7, #20
 8002250:	4618      	mov	r0, r3
 8002252:	f001 f8b3 	bl	80033bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002256:	2301      	movs	r3, #1
 8002258:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800225a:	f001 ff9b 	bl	8004194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800225e:	f000 fe1f 	bl	8002ea0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002262:	f001 ff67 	bl	8004134 <vPortEnterCritical>
 8002266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002268:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800226c:	b25b      	sxtb	r3, r3
 800226e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002272:	d103      	bne.n	800227c <xQueueGenericSend+0x16c>
 8002274:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800227c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800227e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002282:	b25b      	sxtb	r3, r3
 8002284:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002288:	d103      	bne.n	8002292 <xQueueGenericSend+0x182>
 800228a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800228c:	2200      	movs	r2, #0
 800228e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002292:	f001 ff7f 	bl	8004194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002296:	1d3a      	adds	r2, r7, #4
 8002298:	f107 0314 	add.w	r3, r7, #20
 800229c:	4611      	mov	r1, r2
 800229e:	4618      	mov	r0, r3
 80022a0:	f001 f8a2 	bl	80033e8 <xTaskCheckForTimeOut>
 80022a4:	4603      	mov	r3, r0
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d124      	bne.n	80022f4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80022aa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022ac:	f000 faa2 	bl	80027f4 <prvIsQueueFull>
 80022b0:	4603      	mov	r3, r0
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d018      	beq.n	80022e8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80022b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80022b8:	3310      	adds	r3, #16
 80022ba:	687a      	ldr	r2, [r7, #4]
 80022bc:	4611      	mov	r1, r2
 80022be:	4618      	mov	r0, r3
 80022c0:	f000 ffc8 	bl	8003254 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80022c4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022c6:	f000 fa2d 	bl	8002724 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80022ca:	f000 fdf7 	bl	8002ebc <xTaskResumeAll>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f47f af7c 	bne.w	80021ce <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80022d6:	4b0c      	ldr	r3, [pc, #48]	; (8002308 <xQueueGenericSend+0x1f8>)
 80022d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022dc:	601a      	str	r2, [r3, #0]
 80022de:	f3bf 8f4f 	dsb	sy
 80022e2:	f3bf 8f6f 	isb	sy
 80022e6:	e772      	b.n	80021ce <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80022e8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022ea:	f000 fa1b 	bl	8002724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80022ee:	f000 fde5 	bl	8002ebc <xTaskResumeAll>
 80022f2:	e76c      	b.n	80021ce <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80022f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80022f6:	f000 fa15 	bl	8002724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80022fa:	f000 fddf 	bl	8002ebc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80022fe:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002300:	4618      	mov	r0, r3
 8002302:	3738      	adds	r7, #56	; 0x38
 8002304:	46bd      	mov	sp, r7
 8002306:	bd80      	pop	{r7, pc}
 8002308:	e000ed04 	.word	0xe000ed04

0800230c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800230c:	b580      	push	{r7, lr}
 800230e:	b090      	sub	sp, #64	; 0x40
 8002310:	af00      	add	r7, sp, #0
 8002312:	60f8      	str	r0, [r7, #12]
 8002314:	60b9      	str	r1, [r7, #8]
 8002316:	607a      	str	r2, [r7, #4]
 8002318:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800231a:	68fb      	ldr	r3, [r7, #12]
 800231c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800231e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002320:	2b00      	cmp	r3, #0
 8002322:	d10a      	bne.n	800233a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002324:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002328:	f383 8811 	msr	BASEPRI, r3
 800232c:	f3bf 8f6f 	isb	sy
 8002330:	f3bf 8f4f 	dsb	sy
 8002334:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002336:	bf00      	nop
 8002338:	e7fe      	b.n	8002338 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800233a:	68bb      	ldr	r3, [r7, #8]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d103      	bne.n	8002348 <xQueueGenericSendFromISR+0x3c>
 8002340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002342:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002344:	2b00      	cmp	r3, #0
 8002346:	d101      	bne.n	800234c <xQueueGenericSendFromISR+0x40>
 8002348:	2301      	movs	r3, #1
 800234a:	e000      	b.n	800234e <xQueueGenericSendFromISR+0x42>
 800234c:	2300      	movs	r3, #0
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10a      	bne.n	8002368 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002352:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002356:	f383 8811 	msr	BASEPRI, r3
 800235a:	f3bf 8f6f 	isb	sy
 800235e:	f3bf 8f4f 	dsb	sy
 8002362:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002364:	bf00      	nop
 8002366:	e7fe      	b.n	8002366 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	2b02      	cmp	r3, #2
 800236c:	d103      	bne.n	8002376 <xQueueGenericSendFromISR+0x6a>
 800236e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002370:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002372:	2b01      	cmp	r3, #1
 8002374:	d101      	bne.n	800237a <xQueueGenericSendFromISR+0x6e>
 8002376:	2301      	movs	r3, #1
 8002378:	e000      	b.n	800237c <xQueueGenericSendFromISR+0x70>
 800237a:	2300      	movs	r3, #0
 800237c:	2b00      	cmp	r3, #0
 800237e:	d10a      	bne.n	8002396 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002380:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002384:	f383 8811 	msr	BASEPRI, r3
 8002388:	f3bf 8f6f 	isb	sy
 800238c:	f3bf 8f4f 	dsb	sy
 8002390:	623b      	str	r3, [r7, #32]
}
 8002392:	bf00      	nop
 8002394:	e7fe      	b.n	8002394 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002396:	f001 ffaf 	bl	80042f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800239a:	f3ef 8211 	mrs	r2, BASEPRI
 800239e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a2:	f383 8811 	msr	BASEPRI, r3
 80023a6:	f3bf 8f6f 	isb	sy
 80023aa:	f3bf 8f4f 	dsb	sy
 80023ae:	61fa      	str	r2, [r7, #28]
 80023b0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80023b2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80023b4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80023b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80023ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	429a      	cmp	r2, r3
 80023c0:	d302      	bcc.n	80023c8 <xQueueGenericSendFromISR+0xbc>
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d12f      	bne.n	8002428 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80023c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80023ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80023d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80023d6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80023d8:	683a      	ldr	r2, [r7, #0]
 80023da:	68b9      	ldr	r1, [r7, #8]
 80023dc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80023de:	f000 f911 	bl	8002604 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80023e2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80023e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ea:	d112      	bne.n	8002412 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80023ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d016      	beq.n	8002422 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80023f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80023f6:	3324      	adds	r3, #36	; 0x24
 80023f8:	4618      	mov	r0, r3
 80023fa:	f000 ff7b 	bl	80032f4 <xTaskRemoveFromEventList>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d00e      	beq.n	8002422 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d00b      	beq.n	8002422 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	2201      	movs	r2, #1
 800240e:	601a      	str	r2, [r3, #0]
 8002410:	e007      	b.n	8002422 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002412:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002416:	3301      	adds	r3, #1
 8002418:	b2db      	uxtb	r3, r3
 800241a:	b25a      	sxtb	r2, r3
 800241c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800241e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002422:	2301      	movs	r3, #1
 8002424:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002426:	e001      	b.n	800242c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002428:	2300      	movs	r3, #0
 800242a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800242c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800242e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002430:	697b      	ldr	r3, [r7, #20]
 8002432:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002436:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002438:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800243a:	4618      	mov	r0, r3
 800243c:	3740      	adds	r7, #64	; 0x40
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}
	...

08002444 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b08c      	sub	sp, #48	; 0x30
 8002448:	af00      	add	r7, sp, #0
 800244a:	60f8      	str	r0, [r7, #12]
 800244c:	60b9      	str	r1, [r7, #8]
 800244e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002450:	2300      	movs	r3, #0
 8002452:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002458:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800245a:	2b00      	cmp	r3, #0
 800245c:	d10a      	bne.n	8002474 <xQueueReceive+0x30>
	__asm volatile
 800245e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002462:	f383 8811 	msr	BASEPRI, r3
 8002466:	f3bf 8f6f 	isb	sy
 800246a:	f3bf 8f4f 	dsb	sy
 800246e:	623b      	str	r3, [r7, #32]
}
 8002470:	bf00      	nop
 8002472:	e7fe      	b.n	8002472 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002474:	68bb      	ldr	r3, [r7, #8]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d103      	bne.n	8002482 <xQueueReceive+0x3e>
 800247a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800247c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800247e:	2b00      	cmp	r3, #0
 8002480:	d101      	bne.n	8002486 <xQueueReceive+0x42>
 8002482:	2301      	movs	r3, #1
 8002484:	e000      	b.n	8002488 <xQueueReceive+0x44>
 8002486:	2300      	movs	r3, #0
 8002488:	2b00      	cmp	r3, #0
 800248a:	d10a      	bne.n	80024a2 <xQueueReceive+0x5e>
	__asm volatile
 800248c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002490:	f383 8811 	msr	BASEPRI, r3
 8002494:	f3bf 8f6f 	isb	sy
 8002498:	f3bf 8f4f 	dsb	sy
 800249c:	61fb      	str	r3, [r7, #28]
}
 800249e:	bf00      	nop
 80024a0:	e7fe      	b.n	80024a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80024a2:	f001 f8e9 	bl	8003678 <xTaskGetSchedulerState>
 80024a6:	4603      	mov	r3, r0
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d102      	bne.n	80024b2 <xQueueReceive+0x6e>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d101      	bne.n	80024b6 <xQueueReceive+0x72>
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <xQueueReceive+0x74>
 80024b6:	2300      	movs	r3, #0
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d10a      	bne.n	80024d2 <xQueueReceive+0x8e>
	__asm volatile
 80024bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024c0:	f383 8811 	msr	BASEPRI, r3
 80024c4:	f3bf 8f6f 	isb	sy
 80024c8:	f3bf 8f4f 	dsb	sy
 80024cc:	61bb      	str	r3, [r7, #24]
}
 80024ce:	bf00      	nop
 80024d0:	e7fe      	b.n	80024d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80024d2:	f001 fe2f 	bl	8004134 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80024d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80024dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d01f      	beq.n	8002522 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80024e2:	68b9      	ldr	r1, [r7, #8]
 80024e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80024e6:	f000 f8f7 	bl	80026d8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80024ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ec:	1e5a      	subs	r2, r3, #1
 80024ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80024f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024f4:	691b      	ldr	r3, [r3, #16]
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d00f      	beq.n	800251a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80024fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024fc:	3310      	adds	r3, #16
 80024fe:	4618      	mov	r0, r3
 8002500:	f000 fef8 	bl	80032f4 <xTaskRemoveFromEventList>
 8002504:	4603      	mov	r3, r0
 8002506:	2b00      	cmp	r3, #0
 8002508:	d007      	beq.n	800251a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800250a:	4b3d      	ldr	r3, [pc, #244]	; (8002600 <xQueueReceive+0x1bc>)
 800250c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002510:	601a      	str	r2, [r3, #0]
 8002512:	f3bf 8f4f 	dsb	sy
 8002516:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800251a:	f001 fe3b 	bl	8004194 <vPortExitCritical>
				return pdPASS;
 800251e:	2301      	movs	r3, #1
 8002520:	e069      	b.n	80025f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	2b00      	cmp	r3, #0
 8002526:	d103      	bne.n	8002530 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002528:	f001 fe34 	bl	8004194 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800252c:	2300      	movs	r3, #0
 800252e:	e062      	b.n	80025f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002530:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002532:	2b00      	cmp	r3, #0
 8002534:	d106      	bne.n	8002544 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002536:	f107 0310 	add.w	r3, r7, #16
 800253a:	4618      	mov	r0, r3
 800253c:	f000 ff3e 	bl	80033bc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002540:	2301      	movs	r3, #1
 8002542:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002544:	f001 fe26 	bl	8004194 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002548:	f000 fcaa 	bl	8002ea0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800254c:	f001 fdf2 	bl	8004134 <vPortEnterCritical>
 8002550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002552:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002556:	b25b      	sxtb	r3, r3
 8002558:	f1b3 3fff 	cmp.w	r3, #4294967295
 800255c:	d103      	bne.n	8002566 <xQueueReceive+0x122>
 800255e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002560:	2200      	movs	r2, #0
 8002562:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002566:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002568:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800256c:	b25b      	sxtb	r3, r3
 800256e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002572:	d103      	bne.n	800257c <xQueueReceive+0x138>
 8002574:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002576:	2200      	movs	r2, #0
 8002578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800257c:	f001 fe0a 	bl	8004194 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002580:	1d3a      	adds	r2, r7, #4
 8002582:	f107 0310 	add.w	r3, r7, #16
 8002586:	4611      	mov	r1, r2
 8002588:	4618      	mov	r0, r3
 800258a:	f000 ff2d 	bl	80033e8 <xTaskCheckForTimeOut>
 800258e:	4603      	mov	r3, r0
 8002590:	2b00      	cmp	r3, #0
 8002592:	d123      	bne.n	80025dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002594:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002596:	f000 f917 	bl	80027c8 <prvIsQueueEmpty>
 800259a:	4603      	mov	r3, r0
 800259c:	2b00      	cmp	r3, #0
 800259e:	d017      	beq.n	80025d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80025a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025a2:	3324      	adds	r3, #36	; 0x24
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	4611      	mov	r1, r2
 80025a8:	4618      	mov	r0, r3
 80025aa:	f000 fe53 	bl	8003254 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80025ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025b0:	f000 f8b8 	bl	8002724 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80025b4:	f000 fc82 	bl	8002ebc <xTaskResumeAll>
 80025b8:	4603      	mov	r3, r0
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d189      	bne.n	80024d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80025be:	4b10      	ldr	r3, [pc, #64]	; (8002600 <xQueueReceive+0x1bc>)
 80025c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80025c4:	601a      	str	r2, [r3, #0]
 80025c6:	f3bf 8f4f 	dsb	sy
 80025ca:	f3bf 8f6f 	isb	sy
 80025ce:	e780      	b.n	80024d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80025d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025d2:	f000 f8a7 	bl	8002724 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80025d6:	f000 fc71 	bl	8002ebc <xTaskResumeAll>
 80025da:	e77a      	b.n	80024d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80025dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025de:	f000 f8a1 	bl	8002724 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80025e2:	f000 fc6b 	bl	8002ebc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80025e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80025e8:	f000 f8ee 	bl	80027c8 <prvIsQueueEmpty>
 80025ec:	4603      	mov	r3, r0
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	f43f af6f 	beq.w	80024d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80025f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3730      	adds	r7, #48	; 0x30
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
 80025fe:	bf00      	nop
 8002600:	e000ed04 	.word	0xe000ed04

08002604 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002604:	b580      	push	{r7, lr}
 8002606:	b086      	sub	sp, #24
 8002608:	af00      	add	r7, sp, #0
 800260a:	60f8      	str	r0, [r7, #12]
 800260c:	60b9      	str	r1, [r7, #8]
 800260e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002610:	2300      	movs	r3, #0
 8002612:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002618:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10d      	bne.n	800263e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d14d      	bne.n	80026c6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	689b      	ldr	r3, [r3, #8]
 800262e:	4618      	mov	r0, r3
 8002630:	f001 f840 	bl	80036b4 <xTaskPriorityDisinherit>
 8002634:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	2200      	movs	r2, #0
 800263a:	609a      	str	r2, [r3, #8]
 800263c:	e043      	b.n	80026c6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d119      	bne.n	8002678 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6858      	ldr	r0, [r3, #4]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	461a      	mov	r2, r3
 800264e:	68b9      	ldr	r1, [r7, #8]
 8002650:	f002 f8a2 	bl	8004798 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	685a      	ldr	r2, [r3, #4]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800265c:	441a      	add	r2, r3
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	685a      	ldr	r2, [r3, #4]
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	689b      	ldr	r3, [r3, #8]
 800266a:	429a      	cmp	r2, r3
 800266c:	d32b      	bcc.n	80026c6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800266e:	68fb      	ldr	r3, [r7, #12]
 8002670:	681a      	ldr	r2, [r3, #0]
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	605a      	str	r2, [r3, #4]
 8002676:	e026      	b.n	80026c6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	68d8      	ldr	r0, [r3, #12]
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002680:	461a      	mov	r2, r3
 8002682:	68b9      	ldr	r1, [r7, #8]
 8002684:	f002 f888 	bl	8004798 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002688:	68fb      	ldr	r3, [r7, #12]
 800268a:	68da      	ldr	r2, [r3, #12]
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002690:	425b      	negs	r3, r3
 8002692:	441a      	add	r2, r3
 8002694:	68fb      	ldr	r3, [r7, #12]
 8002696:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	68da      	ldr	r2, [r3, #12]
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	429a      	cmp	r2, r3
 80026a2:	d207      	bcs.n	80026b4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ac:	425b      	negs	r3, r3
 80026ae:	441a      	add	r2, r3
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d105      	bne.n	80026c6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80026ba:	693b      	ldr	r3, [r7, #16]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d002      	beq.n	80026c6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80026c0:	693b      	ldr	r3, [r7, #16]
 80026c2:	3b01      	subs	r3, #1
 80026c4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	1c5a      	adds	r2, r3, #1
 80026ca:	68fb      	ldr	r3, [r7, #12]
 80026cc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80026ce:	697b      	ldr	r3, [r7, #20]
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	3718      	adds	r7, #24
 80026d4:	46bd      	mov	sp, r7
 80026d6:	bd80      	pop	{r7, pc}

080026d8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
 80026e0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d018      	beq.n	800271c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	68da      	ldr	r2, [r3, #12]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f2:	441a      	add	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	68da      	ldr	r2, [r3, #12]
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	689b      	ldr	r3, [r3, #8]
 8002700:	429a      	cmp	r2, r3
 8002702:	d303      	bcc.n	800270c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	68d9      	ldr	r1, [r3, #12]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002714:	461a      	mov	r2, r3
 8002716:	6838      	ldr	r0, [r7, #0]
 8002718:	f002 f83e 	bl	8004798 <memcpy>
	}
}
 800271c:	bf00      	nop
 800271e:	3708      	adds	r7, #8
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}

08002724 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af00      	add	r7, sp, #0
 800272a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800272c:	f001 fd02 	bl	8004134 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002736:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8002738:	e011      	b.n	800275e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800273e:	2b00      	cmp	r3, #0
 8002740:	d012      	beq.n	8002768 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3324      	adds	r3, #36	; 0x24
 8002746:	4618      	mov	r0, r3
 8002748:	f000 fdd4 	bl	80032f4 <xTaskRemoveFromEventList>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8002752:	f000 feab 	bl	80034ac <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8002756:	7bfb      	ldrb	r3, [r7, #15]
 8002758:	3b01      	subs	r3, #1
 800275a:	b2db      	uxtb	r3, r3
 800275c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800275e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002762:	2b00      	cmp	r3, #0
 8002764:	dce9      	bgt.n	800273a <prvUnlockQueue+0x16>
 8002766:	e000      	b.n	800276a <prvUnlockQueue+0x46>
					break;
 8002768:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	22ff      	movs	r2, #255	; 0xff
 800276e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8002772:	f001 fd0f 	bl	8004194 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8002776:	f001 fcdd 	bl	8004134 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002780:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8002782:	e011      	b.n	80027a8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	691b      	ldr	r3, [r3, #16]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d012      	beq.n	80027b2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	3310      	adds	r3, #16
 8002790:	4618      	mov	r0, r3
 8002792:	f000 fdaf 	bl	80032f4 <xTaskRemoveFromEventList>
 8002796:	4603      	mov	r3, r0
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800279c:	f000 fe86 	bl	80034ac <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80027a0:	7bbb      	ldrb	r3, [r7, #14]
 80027a2:	3b01      	subs	r3, #1
 80027a4:	b2db      	uxtb	r3, r3
 80027a6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80027a8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	dce9      	bgt.n	8002784 <prvUnlockQueue+0x60>
 80027b0:	e000      	b.n	80027b4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80027b2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	22ff      	movs	r2, #255	; 0xff
 80027b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80027bc:	f001 fcea 	bl	8004194 <vPortExitCritical>
}
 80027c0:	bf00      	nop
 80027c2:	3710      	adds	r7, #16
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}

080027c8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	b084      	sub	sp, #16
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027d0:	f001 fcb0 	bl	8004134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d102      	bne.n	80027e2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80027dc:	2301      	movs	r3, #1
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	e001      	b.n	80027e6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80027e6:	f001 fcd5 	bl	8004194 <vPortExitCritical>

	return xReturn;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3710      	adds	r7, #16
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}

080027f4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80027f4:	b580      	push	{r7, lr}
 80027f6:	b084      	sub	sp, #16
 80027f8:	af00      	add	r7, sp, #0
 80027fa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80027fc:	f001 fc9a 	bl	8004134 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002808:	429a      	cmp	r2, r3
 800280a:	d102      	bne.n	8002812 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800280c:	2301      	movs	r3, #1
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	e001      	b.n	8002816 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8002812:	2300      	movs	r3, #0
 8002814:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8002816:	f001 fcbd 	bl	8004194 <vPortExitCritical>

	return xReturn;
 800281a:	68fb      	ldr	r3, [r7, #12]
}
 800281c:	4618      	mov	r0, r3
 800281e:	3710      	adds	r7, #16
 8002820:	46bd      	mov	sp, r7
 8002822:	bd80      	pop	{r7, pc}

08002824 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8002824:	b480      	push	{r7}
 8002826:	b085      	sub	sp, #20
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
 800282c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800282e:	2300      	movs	r3, #0
 8002830:	60fb      	str	r3, [r7, #12]
 8002832:	e014      	b.n	800285e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8002834:	4a0f      	ldr	r2, [pc, #60]	; (8002874 <vQueueAddToRegistry+0x50>)
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d10b      	bne.n	8002858 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8002840:	490c      	ldr	r1, [pc, #48]	; (8002874 <vQueueAddToRegistry+0x50>)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	683a      	ldr	r2, [r7, #0]
 8002846:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800284a:	4a0a      	ldr	r2, [pc, #40]	; (8002874 <vQueueAddToRegistry+0x50>)
 800284c:	68fb      	ldr	r3, [r7, #12]
 800284e:	00db      	lsls	r3, r3, #3
 8002850:	4413      	add	r3, r2
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8002856:	e006      	b.n	8002866 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	3301      	adds	r3, #1
 800285c:	60fb      	str	r3, [r7, #12]
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	2b07      	cmp	r3, #7
 8002862:	d9e7      	bls.n	8002834 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8002864:	bf00      	nop
 8002866:	bf00      	nop
 8002868:	3714      	adds	r7, #20
 800286a:	46bd      	mov	sp, r7
 800286c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002870:	4770      	bx	lr
 8002872:	bf00      	nop
 8002874:	20000860 	.word	0x20000860

08002878 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8002878:	b580      	push	{r7, lr}
 800287a:	b086      	sub	sp, #24
 800287c:	af00      	add	r7, sp, #0
 800287e:	60f8      	str	r0, [r7, #12]
 8002880:	60b9      	str	r1, [r7, #8]
 8002882:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8002888:	f001 fc54 	bl	8004134 <vPortEnterCritical>
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002892:	b25b      	sxtb	r3, r3
 8002894:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002898:	d103      	bne.n	80028a2 <vQueueWaitForMessageRestricted+0x2a>
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2200      	movs	r2, #0
 800289e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028a2:	697b      	ldr	r3, [r7, #20]
 80028a4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80028a8:	b25b      	sxtb	r3, r3
 80028aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028ae:	d103      	bne.n	80028b8 <vQueueWaitForMessageRestricted+0x40>
 80028b0:	697b      	ldr	r3, [r7, #20]
 80028b2:	2200      	movs	r2, #0
 80028b4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028b8:	f001 fc6c 	bl	8004194 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80028bc:	697b      	ldr	r3, [r7, #20]
 80028be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d106      	bne.n	80028d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80028c4:	697b      	ldr	r3, [r7, #20]
 80028c6:	3324      	adds	r3, #36	; 0x24
 80028c8:	687a      	ldr	r2, [r7, #4]
 80028ca:	68b9      	ldr	r1, [r7, #8]
 80028cc:	4618      	mov	r0, r3
 80028ce:	f000 fce5 	bl	800329c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80028d2:	6978      	ldr	r0, [r7, #20]
 80028d4:	f7ff ff26 	bl	8002724 <prvUnlockQueue>
	}
 80028d8:	bf00      	nop
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b08e      	sub	sp, #56	; 0x38
 80028e4:	af04      	add	r7, sp, #16
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]
 80028ec:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80028ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d10a      	bne.n	800290a <xTaskCreateStatic+0x2a>
	__asm volatile
 80028f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028f8:	f383 8811 	msr	BASEPRI, r3
 80028fc:	f3bf 8f6f 	isb	sy
 8002900:	f3bf 8f4f 	dsb	sy
 8002904:	623b      	str	r3, [r7, #32]
}
 8002906:	bf00      	nop
 8002908:	e7fe      	b.n	8002908 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800290a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800290c:	2b00      	cmp	r3, #0
 800290e:	d10a      	bne.n	8002926 <xTaskCreateStatic+0x46>
	__asm volatile
 8002910:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002914:	f383 8811 	msr	BASEPRI, r3
 8002918:	f3bf 8f6f 	isb	sy
 800291c:	f3bf 8f4f 	dsb	sy
 8002920:	61fb      	str	r3, [r7, #28]
}
 8002922:	bf00      	nop
 8002924:	e7fe      	b.n	8002924 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8002926:	23bc      	movs	r3, #188	; 0xbc
 8002928:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800292a:	693b      	ldr	r3, [r7, #16]
 800292c:	2bbc      	cmp	r3, #188	; 0xbc
 800292e:	d00a      	beq.n	8002946 <xTaskCreateStatic+0x66>
	__asm volatile
 8002930:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002934:	f383 8811 	msr	BASEPRI, r3
 8002938:	f3bf 8f6f 	isb	sy
 800293c:	f3bf 8f4f 	dsb	sy
 8002940:	61bb      	str	r3, [r7, #24]
}
 8002942:	bf00      	nop
 8002944:	e7fe      	b.n	8002944 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8002946:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8002948:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800294a:	2b00      	cmp	r3, #0
 800294c:	d01e      	beq.n	800298c <xTaskCreateStatic+0xac>
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002950:	2b00      	cmp	r3, #0
 8002952:	d01b      	beq.n	800298c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002954:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002956:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8002958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800295a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800295c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800295e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002960:	2202      	movs	r2, #2
 8002962:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8002966:	2300      	movs	r3, #0
 8002968:	9303      	str	r3, [sp, #12]
 800296a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800296c:	9302      	str	r3, [sp, #8]
 800296e:	f107 0314 	add.w	r3, r7, #20
 8002972:	9301      	str	r3, [sp, #4]
 8002974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	687a      	ldr	r2, [r7, #4]
 800297c:	68b9      	ldr	r1, [r7, #8]
 800297e:	68f8      	ldr	r0, [r7, #12]
 8002980:	f000 f850 	bl	8002a24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002984:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8002986:	f000 f8f3 	bl	8002b70 <prvAddNewTaskToReadyList>
 800298a:	e001      	b.n	8002990 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800298c:	2300      	movs	r3, #0
 800298e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8002990:	697b      	ldr	r3, [r7, #20]
	}
 8002992:	4618      	mov	r0, r3
 8002994:	3728      	adds	r7, #40	; 0x28
 8002996:	46bd      	mov	sp, r7
 8002998:	bd80      	pop	{r7, pc}

0800299a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800299a:	b580      	push	{r7, lr}
 800299c:	b08c      	sub	sp, #48	; 0x30
 800299e:	af04      	add	r7, sp, #16
 80029a0:	60f8      	str	r0, [r7, #12]
 80029a2:	60b9      	str	r1, [r7, #8]
 80029a4:	603b      	str	r3, [r7, #0]
 80029a6:	4613      	mov	r3, r2
 80029a8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80029aa:	88fb      	ldrh	r3, [r7, #6]
 80029ac:	009b      	lsls	r3, r3, #2
 80029ae:	4618      	mov	r0, r3
 80029b0:	f001 fce2 	bl	8004378 <pvPortMalloc>
 80029b4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80029b6:	697b      	ldr	r3, [r7, #20]
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	d00e      	beq.n	80029da <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80029bc:	20bc      	movs	r0, #188	; 0xbc
 80029be:	f001 fcdb 	bl	8004378 <pvPortMalloc>
 80029c2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80029c4:	69fb      	ldr	r3, [r7, #28]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	631a      	str	r2, [r3, #48]	; 0x30
 80029d0:	e005      	b.n	80029de <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80029d2:	6978      	ldr	r0, [r7, #20]
 80029d4:	f001 fd9c 	bl	8004510 <vPortFree>
 80029d8:	e001      	b.n	80029de <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80029da:	2300      	movs	r3, #0
 80029dc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80029de:	69fb      	ldr	r3, [r7, #28]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d017      	beq.n	8002a14 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80029ec:	88fa      	ldrh	r2, [r7, #6]
 80029ee:	2300      	movs	r3, #0
 80029f0:	9303      	str	r3, [sp, #12]
 80029f2:	69fb      	ldr	r3, [r7, #28]
 80029f4:	9302      	str	r3, [sp, #8]
 80029f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029f8:	9301      	str	r3, [sp, #4]
 80029fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80029fc:	9300      	str	r3, [sp, #0]
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	68b9      	ldr	r1, [r7, #8]
 8002a02:	68f8      	ldr	r0, [r7, #12]
 8002a04:	f000 f80e 	bl	8002a24 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8002a08:	69f8      	ldr	r0, [r7, #28]
 8002a0a:	f000 f8b1 	bl	8002b70 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	61bb      	str	r3, [r7, #24]
 8002a12:	e002      	b.n	8002a1a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8002a14:	f04f 33ff 	mov.w	r3, #4294967295
 8002a18:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8002a1a:	69bb      	ldr	r3, [r7, #24]
	}
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	3720      	adds	r7, #32
 8002a20:	46bd      	mov	sp, r7
 8002a22:	bd80      	pop	{r7, pc}

08002a24 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b088      	sub	sp, #32
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	607a      	str	r2, [r7, #4]
 8002a30:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8002a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	009b      	lsls	r3, r3, #2
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	21a5      	movs	r1, #165	; 0xa5
 8002a3e:	f001 feb9 	bl	80047b4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8002a42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a44:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8002a4c:	3b01      	subs	r3, #1
 8002a4e:	009b      	lsls	r3, r3, #2
 8002a50:	4413      	add	r3, r2
 8002a52:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	f023 0307 	bic.w	r3, r3, #7
 8002a5a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8002a5c:	69bb      	ldr	r3, [r7, #24]
 8002a5e:	f003 0307 	and.w	r3, r3, #7
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00a      	beq.n	8002a7c <prvInitialiseNewTask+0x58>
	__asm volatile
 8002a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a6a:	f383 8811 	msr	BASEPRI, r3
 8002a6e:	f3bf 8f6f 	isb	sy
 8002a72:	f3bf 8f4f 	dsb	sy
 8002a76:	617b      	str	r3, [r7, #20]
}
 8002a78:	bf00      	nop
 8002a7a:	e7fe      	b.n	8002a7a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8002a7c:	68bb      	ldr	r3, [r7, #8]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d01f      	beq.n	8002ac2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e012      	b.n	8002aae <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8002a88:	68ba      	ldr	r2, [r7, #8]
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	4413      	add	r3, r2
 8002a8e:	7819      	ldrb	r1, [r3, #0]
 8002a90:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002a92:	69fb      	ldr	r3, [r7, #28]
 8002a94:	4413      	add	r3, r2
 8002a96:	3334      	adds	r3, #52	; 0x34
 8002a98:	460a      	mov	r2, r1
 8002a9a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8002a9c:	68ba      	ldr	r2, [r7, #8]
 8002a9e:	69fb      	ldr	r3, [r7, #28]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	781b      	ldrb	r3, [r3, #0]
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d006      	beq.n	8002ab6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8002aa8:	69fb      	ldr	r3, [r7, #28]
 8002aaa:	3301      	adds	r3, #1
 8002aac:	61fb      	str	r3, [r7, #28]
 8002aae:	69fb      	ldr	r3, [r7, #28]
 8002ab0:	2b0f      	cmp	r3, #15
 8002ab2:	d9e9      	bls.n	8002a88 <prvInitialiseNewTask+0x64>
 8002ab4:	e000      	b.n	8002ab8 <prvInitialiseNewTask+0x94>
			{
				break;
 8002ab6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8002ab8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002ac0:	e003      	b.n	8002aca <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8002ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ac4:	2200      	movs	r2, #0
 8002ac6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002aca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002acc:	2b37      	cmp	r3, #55	; 0x37
 8002ace:	d901      	bls.n	8002ad4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002ad0:	2337      	movs	r3, #55	; 0x37
 8002ad2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8002ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ad6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ad8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8002ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002adc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002ade:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8002ae0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8002ae6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ae8:	3304      	adds	r3, #4
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7ff f978 	bl	8001de0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8002af0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af2:	3318      	adds	r3, #24
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7ff f973 	bl	8001de0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8002afa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002afc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002afe:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002b00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002b02:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b08:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b0e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	2200      	movs	r2, #0
 8002b14:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8002b18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b1a:	2200      	movs	r2, #0
 8002b1c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8002b20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b22:	3354      	adds	r3, #84	; 0x54
 8002b24:	2260      	movs	r2, #96	; 0x60
 8002b26:	2100      	movs	r1, #0
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f001 fe43 	bl	80047b4 <memset>
 8002b2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b30:	4a0c      	ldr	r2, [pc, #48]	; (8002b64 <prvInitialiseNewTask+0x140>)
 8002b32:	659a      	str	r2, [r3, #88]	; 0x58
 8002b34:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b36:	4a0c      	ldr	r2, [pc, #48]	; (8002b68 <prvInitialiseNewTask+0x144>)
 8002b38:	65da      	str	r2, [r3, #92]	; 0x5c
 8002b3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b3c:	4a0b      	ldr	r2, [pc, #44]	; (8002b6c <prvInitialiseNewTask+0x148>)
 8002b3e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8002b40:	683a      	ldr	r2, [r7, #0]
 8002b42:	68f9      	ldr	r1, [r7, #12]
 8002b44:	69b8      	ldr	r0, [r7, #24]
 8002b46:	f001 f9c5 	bl	8003ed4 <pxPortInitialiseStack>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b4e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8002b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d002      	beq.n	8002b5c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8002b56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b58:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002b5a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002b5c:	bf00      	nop
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	08004a08 	.word	0x08004a08
 8002b68:	08004a28 	.word	0x08004a28
 8002b6c:	080049e8 	.word	0x080049e8

08002b70 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8002b78:	f001 fadc 	bl	8004134 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8002b7c:	4b2d      	ldr	r3, [pc, #180]	; (8002c34 <prvAddNewTaskToReadyList+0xc4>)
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	3301      	adds	r3, #1
 8002b82:	4a2c      	ldr	r2, [pc, #176]	; (8002c34 <prvAddNewTaskToReadyList+0xc4>)
 8002b84:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8002b86:	4b2c      	ldr	r3, [pc, #176]	; (8002c38 <prvAddNewTaskToReadyList+0xc8>)
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d109      	bne.n	8002ba2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8002b8e:	4a2a      	ldr	r2, [pc, #168]	; (8002c38 <prvAddNewTaskToReadyList+0xc8>)
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8002b94:	4b27      	ldr	r3, [pc, #156]	; (8002c34 <prvAddNewTaskToReadyList+0xc4>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d110      	bne.n	8002bbe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8002b9c:	f000 fcaa 	bl	80034f4 <prvInitialiseTaskLists>
 8002ba0:	e00d      	b.n	8002bbe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8002ba2:	4b26      	ldr	r3, [pc, #152]	; (8002c3c <prvAddNewTaskToReadyList+0xcc>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d109      	bne.n	8002bbe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8002baa:	4b23      	ldr	r3, [pc, #140]	; (8002c38 <prvAddNewTaskToReadyList+0xc8>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d802      	bhi.n	8002bbe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8002bb8:	4a1f      	ldr	r2, [pc, #124]	; (8002c38 <prvAddNewTaskToReadyList+0xc8>)
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8002bbe:	4b20      	ldr	r3, [pc, #128]	; (8002c40 <prvAddNewTaskToReadyList+0xd0>)
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	3301      	adds	r3, #1
 8002bc4:	4a1e      	ldr	r2, [pc, #120]	; (8002c40 <prvAddNewTaskToReadyList+0xd0>)
 8002bc6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8002bc8:	4b1d      	ldr	r3, [pc, #116]	; (8002c40 <prvAddNewTaskToReadyList+0xd0>)
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd4:	4b1b      	ldr	r3, [pc, #108]	; (8002c44 <prvAddNewTaskToReadyList+0xd4>)
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	429a      	cmp	r2, r3
 8002bda:	d903      	bls.n	8002be4 <prvAddNewTaskToReadyList+0x74>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002be0:	4a18      	ldr	r2, [pc, #96]	; (8002c44 <prvAddNewTaskToReadyList+0xd4>)
 8002be2:	6013      	str	r3, [r2, #0]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002be8:	4613      	mov	r3, r2
 8002bea:	009b      	lsls	r3, r3, #2
 8002bec:	4413      	add	r3, r2
 8002bee:	009b      	lsls	r3, r3, #2
 8002bf0:	4a15      	ldr	r2, [pc, #84]	; (8002c48 <prvAddNewTaskToReadyList+0xd8>)
 8002bf2:	441a      	add	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	3304      	adds	r3, #4
 8002bf8:	4619      	mov	r1, r3
 8002bfa:	4610      	mov	r0, r2
 8002bfc:	f7ff f8fd 	bl	8001dfa <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8002c00:	f001 fac8 	bl	8004194 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8002c04:	4b0d      	ldr	r3, [pc, #52]	; (8002c3c <prvAddNewTaskToReadyList+0xcc>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d00e      	beq.n	8002c2a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8002c0c:	4b0a      	ldr	r3, [pc, #40]	; (8002c38 <prvAddNewTaskToReadyList+0xc8>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c16:	429a      	cmp	r2, r3
 8002c18:	d207      	bcs.n	8002c2a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8002c1a:	4b0c      	ldr	r3, [pc, #48]	; (8002c4c <prvAddNewTaskToReadyList+0xdc>)
 8002c1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002c20:	601a      	str	r2, [r3, #0]
 8002c22:	f3bf 8f4f 	dsb	sy
 8002c26:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002c2a:	bf00      	nop
 8002c2c:	3708      	adds	r7, #8
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	20000d74 	.word	0x20000d74
 8002c38:	200008a0 	.word	0x200008a0
 8002c3c:	20000d80 	.word	0x20000d80
 8002c40:	20000d90 	.word	0x20000d90
 8002c44:	20000d7c 	.word	0x20000d7c
 8002c48:	200008a4 	.word	0x200008a4
 8002c4c:	e000ed04 	.word	0xe000ed04

08002c50 <uxTaskPriorityGet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskPriorityGet == 1 )

	UBaseType_t uxTaskPriorityGet( const TaskHandle_t xTask )
	{
 8002c50:	b580      	push	{r7, lr}
 8002c52:	b084      	sub	sp, #16
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	6078      	str	r0, [r7, #4]
	TCB_t const *pxTCB;
	UBaseType_t uxReturn;

		taskENTER_CRITICAL();
 8002c58:	f001 fa6c 	bl	8004134 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the task
			that called uxTaskPriorityGet() that is being queried. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d102      	bne.n	8002c68 <uxTaskPriorityGet+0x18>
 8002c62:	4b07      	ldr	r3, [pc, #28]	; (8002c80 <uxTaskPriorityGet+0x30>)
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	e000      	b.n	8002c6a <uxTaskPriorityGet+0x1a>
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	60fb      	str	r3, [r7, #12]
			uxReturn = pxTCB->uxPriority;
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c70:	60bb      	str	r3, [r7, #8]
		}
		taskEXIT_CRITICAL();
 8002c72:	f001 fa8f 	bl	8004194 <vPortExitCritical>

		return uxReturn;
 8002c76:	68bb      	ldr	r3, [r7, #8]
	}
 8002c78:	4618      	mov	r0, r3
 8002c7a:	3710      	adds	r7, #16
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	200008a0 	.word	0x200008a0

08002c84 <vTaskPrioritySet>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskPrioritySet == 1 )

	void vTaskPrioritySet( TaskHandle_t xTask, UBaseType_t uxNewPriority )
	{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b088      	sub	sp, #32
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
 8002c8c:	6039      	str	r1, [r7, #0]
	TCB_t *pxTCB;
	UBaseType_t uxCurrentBasePriority, uxPriorityUsedOnEntry;
	BaseType_t xYieldRequired = pdFALSE;
 8002c8e:	2300      	movs	r3, #0
 8002c90:	61fb      	str	r3, [r7, #28]

		configASSERT( ( uxNewPriority < configMAX_PRIORITIES ) );
 8002c92:	683b      	ldr	r3, [r7, #0]
 8002c94:	2b37      	cmp	r3, #55	; 0x37
 8002c96:	d90a      	bls.n	8002cae <vTaskPrioritySet+0x2a>
	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	60fb      	str	r3, [r7, #12]
}
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <vTaskPrioritySet+0x28>

		/* Ensure the new priority is valid. */
		if( uxNewPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	2b37      	cmp	r3, #55	; 0x37
 8002cb2:	d901      	bls.n	8002cb8 <vTaskPrioritySet+0x34>
		{
			uxNewPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8002cb4:	2337      	movs	r3, #55	; 0x37
 8002cb6:	603b      	str	r3, [r7, #0]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		taskENTER_CRITICAL();
 8002cb8:	f001 fa3c 	bl	8004134 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the priority of the calling
			task that is being changed. */
			pxTCB = prvGetTCBFromHandle( xTask );
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	d102      	bne.n	8002cc8 <vTaskPrioritySet+0x44>
 8002cc2:	4b3b      	ldr	r3, [pc, #236]	; (8002db0 <vTaskPrioritySet+0x12c>)
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	e000      	b.n	8002cca <vTaskPrioritySet+0x46>
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	61bb      	str	r3, [r7, #24]

			traceTASK_PRIORITY_SET( pxTCB, uxNewPriority );

			#if ( configUSE_MUTEXES == 1 )
			{
				uxCurrentBasePriority = pxTCB->uxBasePriority;
 8002ccc:	69bb      	ldr	r3, [r7, #24]
 8002cce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002cd0:	617b      	str	r3, [r7, #20]
			{
				uxCurrentBasePriority = pxTCB->uxPriority;
			}
			#endif

			if( uxCurrentBasePriority != uxNewPriority )
 8002cd2:	697a      	ldr	r2, [r7, #20]
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d063      	beq.n	8002da2 <vTaskPrioritySet+0x11e>
			{
				/* The priority change may have readied a task of higher
				priority than the calling task. */
				if( uxNewPriority > uxCurrentBasePriority )
 8002cda:	683a      	ldr	r2, [r7, #0]
 8002cdc:	697b      	ldr	r3, [r7, #20]
 8002cde:	429a      	cmp	r2, r3
 8002ce0:	d90d      	bls.n	8002cfe <vTaskPrioritySet+0x7a>
				{
					if( pxTCB != pxCurrentTCB )
 8002ce2:	4b33      	ldr	r3, [pc, #204]	; (8002db0 <vTaskPrioritySet+0x12c>)
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d00f      	beq.n	8002d0c <vTaskPrioritySet+0x88>
					{
						/* The priority of a task other than the currently
						running task is being raised.  Is the priority being
						raised above that of the running task? */
						if( uxNewPriority >= pxCurrentTCB->uxPriority )
 8002cec:	4b30      	ldr	r3, [pc, #192]	; (8002db0 <vTaskPrioritySet+0x12c>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cf2:	683a      	ldr	r2, [r7, #0]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d309      	bcc.n	8002d0c <vTaskPrioritySet+0x88>
						{
							xYieldRequired = pdTRUE;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	61fb      	str	r3, [r7, #28]
 8002cfc:	e006      	b.n	8002d0c <vTaskPrioritySet+0x88>
						/* The priority of the running task is being raised,
						but the running task must already be the highest
						priority task able to run so no yield is required. */
					}
				}
				else if( pxTCB == pxCurrentTCB )
 8002cfe:	4b2c      	ldr	r3, [pc, #176]	; (8002db0 <vTaskPrioritySet+0x12c>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	69ba      	ldr	r2, [r7, #24]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d101      	bne.n	8002d0c <vTaskPrioritySet+0x88>
				{
					/* Setting the priority of the running task down means
					there may now be another task of higher priority that
					is ready to execute. */
					xYieldRequired = pdTRUE;
 8002d08:	2301      	movs	r3, #1
 8002d0a:	61fb      	str	r3, [r7, #28]
				}

				/* Remember the ready list the task might be referenced from
				before its uxPriority member is changed so the
				taskRESET_READY_PRIORITY() macro can function correctly. */
				uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002d0c:	69bb      	ldr	r3, [r7, #24]
 8002d0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d10:	613b      	str	r3, [r7, #16]

				#if ( configUSE_MUTEXES == 1 )
				{
					/* Only change the priority being used if the task is not
					currently using an inherited priority. */
					if( pxTCB->uxBasePriority == pxTCB->uxPriority )
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8002d16:	69bb      	ldr	r3, [r7, #24]
 8002d18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d1a:	429a      	cmp	r2, r3
 8002d1c:	d102      	bne.n	8002d24 <vTaskPrioritySet+0xa0>
					{
						pxTCB->uxPriority = uxNewPriority;
 8002d1e:	69bb      	ldr	r3, [r7, #24]
 8002d20:	683a      	ldr	r2, [r7, #0]
 8002d22:	62da      	str	r2, [r3, #44]	; 0x2c
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* The base priority gets set whatever. */
					pxTCB->uxBasePriority = uxNewPriority;
 8002d24:	69bb      	ldr	r3, [r7, #24]
 8002d26:	683a      	ldr	r2, [r7, #0]
 8002d28:	64da      	str	r2, [r3, #76]	; 0x4c
				}
				#endif

				/* Only reset the event list item value if the value is not
				being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8002d2a:	69bb      	ldr	r3, [r7, #24]
 8002d2c:	699b      	ldr	r3, [r3, #24]
 8002d2e:	2b00      	cmp	r3, #0
 8002d30:	db04      	blt.n	8002d3c <vTaskPrioritySet+0xb8>
				{
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxNewPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002d32:	683b      	ldr	r3, [r7, #0]
 8002d34:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8002d38:	69bb      	ldr	r3, [r7, #24]
 8002d3a:	619a      	str	r2, [r3, #24]

				/* If the task is in the blocked or suspended list we need do
				nothing more than change its priority variable. However, if
				the task is in a ready list it needs to be removed and placed
				in the list appropriate to its new priority. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8002d3c:	69bb      	ldr	r3, [r7, #24]
 8002d3e:	6959      	ldr	r1, [r3, #20]
 8002d40:	693a      	ldr	r2, [r7, #16]
 8002d42:	4613      	mov	r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	4413      	add	r3, r2
 8002d48:	009b      	lsls	r3, r3, #2
 8002d4a:	4a1a      	ldr	r2, [pc, #104]	; (8002db4 <vTaskPrioritySet+0x130>)
 8002d4c:	4413      	add	r3, r2
 8002d4e:	4299      	cmp	r1, r3
 8002d50:	d11c      	bne.n	8002d8c <vTaskPrioritySet+0x108>
				{
					/* The task is currently in its ready list - remove before
					adding it to it's new ready list.  As we are in a critical
					section we can do this even if the scheduler is suspended. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002d52:	69bb      	ldr	r3, [r7, #24]
 8002d54:	3304      	adds	r3, #4
 8002d56:	4618      	mov	r0, r3
 8002d58:	f7ff f8ac 	bl	8001eb4 <uxListRemove>
					}
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}
					prvAddTaskToReadyList( pxTCB );
 8002d5c:	69bb      	ldr	r3, [r7, #24]
 8002d5e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d60:	4b15      	ldr	r3, [pc, #84]	; (8002db8 <vTaskPrioritySet+0x134>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d903      	bls.n	8002d70 <vTaskPrioritySet+0xec>
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d6c:	4a12      	ldr	r2, [pc, #72]	; (8002db8 <vTaskPrioritySet+0x134>)
 8002d6e:	6013      	str	r3, [r2, #0]
 8002d70:	69bb      	ldr	r3, [r7, #24]
 8002d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d74:	4613      	mov	r3, r2
 8002d76:	009b      	lsls	r3, r3, #2
 8002d78:	4413      	add	r3, r2
 8002d7a:	009b      	lsls	r3, r3, #2
 8002d7c:	4a0d      	ldr	r2, [pc, #52]	; (8002db4 <vTaskPrioritySet+0x130>)
 8002d7e:	441a      	add	r2, r3
 8002d80:	69bb      	ldr	r3, [r7, #24]
 8002d82:	3304      	adds	r3, #4
 8002d84:	4619      	mov	r1, r3
 8002d86:	4610      	mov	r0, r2
 8002d88:	f7ff f837 	bl	8001dfa <vListInsertEnd>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				if( xYieldRequired != pdFALSE )
 8002d8c:	69fb      	ldr	r3, [r7, #28]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d007      	beq.n	8002da2 <vTaskPrioritySet+0x11e>
				{
					taskYIELD_IF_USING_PREEMPTION();
 8002d92:	4b0a      	ldr	r3, [pc, #40]	; (8002dbc <vTaskPrioritySet+0x138>)
 8002d94:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d98:	601a      	str	r2, [r3, #0]
 8002d9a:	f3bf 8f4f 	dsb	sy
 8002d9e:	f3bf 8f6f 	isb	sy
				/* Remove compiler warning about unused variables when the port
				optimised task selection is not being used. */
				( void ) uxPriorityUsedOnEntry;
			}
		}
		taskEXIT_CRITICAL();
 8002da2:	f001 f9f7 	bl	8004194 <vPortExitCritical>
	}
 8002da6:	bf00      	nop
 8002da8:	3720      	adds	r7, #32
 8002daa:	46bd      	mov	sp, r7
 8002dac:	bd80      	pop	{r7, pc}
 8002dae:	bf00      	nop
 8002db0:	200008a0 	.word	0x200008a0
 8002db4:	200008a4 	.word	0x200008a4
 8002db8:	20000d7c 	.word	0x20000d7c
 8002dbc:	e000ed04 	.word	0xe000ed04

08002dc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b08a      	sub	sp, #40	; 0x28
 8002dc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8002dce:	463a      	mov	r2, r7
 8002dd0:	1d39      	adds	r1, r7, #4
 8002dd2:	f107 0308 	add.w	r3, r7, #8
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f7fe ffae 	bl	8001d38 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8002ddc:	6839      	ldr	r1, [r7, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	68ba      	ldr	r2, [r7, #8]
 8002de2:	9202      	str	r2, [sp, #8]
 8002de4:	9301      	str	r3, [sp, #4]
 8002de6:	2300      	movs	r3, #0
 8002de8:	9300      	str	r3, [sp, #0]
 8002dea:	2300      	movs	r3, #0
 8002dec:	460a      	mov	r2, r1
 8002dee:	4924      	ldr	r1, [pc, #144]	; (8002e80 <vTaskStartScheduler+0xc0>)
 8002df0:	4824      	ldr	r0, [pc, #144]	; (8002e84 <vTaskStartScheduler+0xc4>)
 8002df2:	f7ff fd75 	bl	80028e0 <xTaskCreateStatic>
 8002df6:	4603      	mov	r3, r0
 8002df8:	4a23      	ldr	r2, [pc, #140]	; (8002e88 <vTaskStartScheduler+0xc8>)
 8002dfa:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8002dfc:	4b22      	ldr	r3, [pc, #136]	; (8002e88 <vTaskStartScheduler+0xc8>)
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d002      	beq.n	8002e0a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8002e04:	2301      	movs	r3, #1
 8002e06:	617b      	str	r3, [r7, #20]
 8002e08:	e001      	b.n	8002e0e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8002e0a:	2300      	movs	r3, #0
 8002e0c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8002e0e:	697b      	ldr	r3, [r7, #20]
 8002e10:	2b01      	cmp	r3, #1
 8002e12:	d102      	bne.n	8002e1a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8002e14:	f000 fd10 	bl	8003838 <xTimerCreateTimerTask>
 8002e18:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8002e1a:	697b      	ldr	r3, [r7, #20]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d11b      	bne.n	8002e58 <vTaskStartScheduler+0x98>
	__asm volatile
 8002e20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e24:	f383 8811 	msr	BASEPRI, r3
 8002e28:	f3bf 8f6f 	isb	sy
 8002e2c:	f3bf 8f4f 	dsb	sy
 8002e30:	613b      	str	r3, [r7, #16]
}
 8002e32:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8002e34:	4b15      	ldr	r3, [pc, #84]	; (8002e8c <vTaskStartScheduler+0xcc>)
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	3354      	adds	r3, #84	; 0x54
 8002e3a:	4a15      	ldr	r2, [pc, #84]	; (8002e90 <vTaskStartScheduler+0xd0>)
 8002e3c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8002e3e:	4b15      	ldr	r3, [pc, #84]	; (8002e94 <vTaskStartScheduler+0xd4>)
 8002e40:	f04f 32ff 	mov.w	r2, #4294967295
 8002e44:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8002e46:	4b14      	ldr	r3, [pc, #80]	; (8002e98 <vTaskStartScheduler+0xd8>)
 8002e48:	2201      	movs	r2, #1
 8002e4a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8002e4c:	4b13      	ldr	r3, [pc, #76]	; (8002e9c <vTaskStartScheduler+0xdc>)
 8002e4e:	2200      	movs	r2, #0
 8002e50:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8002e52:	f001 f8cd 	bl	8003ff0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8002e56:	e00e      	b.n	8002e76 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8002e58:	697b      	ldr	r3, [r7, #20]
 8002e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e5e:	d10a      	bne.n	8002e76 <vTaskStartScheduler+0xb6>
	__asm volatile
 8002e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e64:	f383 8811 	msr	BASEPRI, r3
 8002e68:	f3bf 8f6f 	isb	sy
 8002e6c:	f3bf 8f4f 	dsb	sy
 8002e70:	60fb      	str	r3, [r7, #12]
}
 8002e72:	bf00      	nop
 8002e74:	e7fe      	b.n	8002e74 <vTaskStartScheduler+0xb4>
}
 8002e76:	bf00      	nop
 8002e78:	3718      	adds	r7, #24
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	08004970 	.word	0x08004970
 8002e84:	080034c5 	.word	0x080034c5
 8002e88:	20000d98 	.word	0x20000d98
 8002e8c:	200008a0 	.word	0x200008a0
 8002e90:	20000010 	.word	0x20000010
 8002e94:	20000d94 	.word	0x20000d94
 8002e98:	20000d80 	.word	0x20000d80
 8002e9c:	20000d78 	.word	0x20000d78

08002ea0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8002ea0:	b480      	push	{r7}
 8002ea2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8002ea4:	4b04      	ldr	r3, [pc, #16]	; (8002eb8 <vTaskSuspendAll+0x18>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	4a03      	ldr	r2, [pc, #12]	; (8002eb8 <vTaskSuspendAll+0x18>)
 8002eac:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8002eae:	bf00      	nop
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb6:	4770      	bx	lr
 8002eb8:	20000d9c 	.word	0x20000d9c

08002ebc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b084      	sub	sp, #16
 8002ec0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8002eca:	4b42      	ldr	r3, [pc, #264]	; (8002fd4 <xTaskResumeAll+0x118>)
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	2b00      	cmp	r3, #0
 8002ed0:	d10a      	bne.n	8002ee8 <xTaskResumeAll+0x2c>
	__asm volatile
 8002ed2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ed6:	f383 8811 	msr	BASEPRI, r3
 8002eda:	f3bf 8f6f 	isb	sy
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	603b      	str	r3, [r7, #0]
}
 8002ee4:	bf00      	nop
 8002ee6:	e7fe      	b.n	8002ee6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8002ee8:	f001 f924 	bl	8004134 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8002eec:	4b39      	ldr	r3, [pc, #228]	; (8002fd4 <xTaskResumeAll+0x118>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	3b01      	subs	r3, #1
 8002ef2:	4a38      	ldr	r2, [pc, #224]	; (8002fd4 <xTaskResumeAll+0x118>)
 8002ef4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8002ef6:	4b37      	ldr	r3, [pc, #220]	; (8002fd4 <xTaskResumeAll+0x118>)
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d162      	bne.n	8002fc4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8002efe:	4b36      	ldr	r3, [pc, #216]	; (8002fd8 <xTaskResumeAll+0x11c>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d05e      	beq.n	8002fc4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f06:	e02f      	b.n	8002f68 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8002f08:	4b34      	ldr	r3, [pc, #208]	; (8002fdc <xTaskResumeAll+0x120>)
 8002f0a:	68db      	ldr	r3, [r3, #12]
 8002f0c:	68db      	ldr	r3, [r3, #12]
 8002f0e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	3318      	adds	r3, #24
 8002f14:	4618      	mov	r0, r3
 8002f16:	f7fe ffcd 	bl	8001eb4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	4618      	mov	r0, r3
 8002f20:	f7fe ffc8 	bl	8001eb4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f28:	4b2d      	ldr	r3, [pc, #180]	; (8002fe0 <xTaskResumeAll+0x124>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d903      	bls.n	8002f38 <xTaskResumeAll+0x7c>
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f34:	4a2a      	ldr	r2, [pc, #168]	; (8002fe0 <xTaskResumeAll+0x124>)
 8002f36:	6013      	str	r3, [r2, #0]
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f3c:	4613      	mov	r3, r2
 8002f3e:	009b      	lsls	r3, r3, #2
 8002f40:	4413      	add	r3, r2
 8002f42:	009b      	lsls	r3, r3, #2
 8002f44:	4a27      	ldr	r2, [pc, #156]	; (8002fe4 <xTaskResumeAll+0x128>)
 8002f46:	441a      	add	r2, r3
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	3304      	adds	r3, #4
 8002f4c:	4619      	mov	r1, r3
 8002f4e:	4610      	mov	r0, r2
 8002f50:	f7fe ff53 	bl	8001dfa <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f58:	4b23      	ldr	r3, [pc, #140]	; (8002fe8 <xTaskResumeAll+0x12c>)
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d302      	bcc.n	8002f68 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <xTaskResumeAll+0x130>)
 8002f64:	2201      	movs	r2, #1
 8002f66:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8002f68:	4b1c      	ldr	r3, [pc, #112]	; (8002fdc <xTaskResumeAll+0x120>)
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d1cb      	bne.n	8002f08 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d001      	beq.n	8002f7a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8002f76:	f000 fb5f 	bl	8003638 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8002f7a:	4b1d      	ldr	r3, [pc, #116]	; (8002ff0 <xTaskResumeAll+0x134>)
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d010      	beq.n	8002fa8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8002f86:	f000 f847 	bl	8003018 <xTaskIncrementTick>
 8002f8a:	4603      	mov	r3, r0
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d002      	beq.n	8002f96 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8002f90:	4b16      	ldr	r3, [pc, #88]	; (8002fec <xTaskResumeAll+0x130>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	3b01      	subs	r3, #1
 8002f9a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d1f1      	bne.n	8002f86 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8002fa2:	4b13      	ldr	r3, [pc, #76]	; (8002ff0 <xTaskResumeAll+0x134>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8002fa8:	4b10      	ldr	r3, [pc, #64]	; (8002fec <xTaskResumeAll+0x130>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d009      	beq.n	8002fc4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8002fb0:	2301      	movs	r3, #1
 8002fb2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8002fb4:	4b0f      	ldr	r3, [pc, #60]	; (8002ff4 <xTaskResumeAll+0x138>)
 8002fb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fba:	601a      	str	r2, [r3, #0]
 8002fbc:	f3bf 8f4f 	dsb	sy
 8002fc0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8002fc4:	f001 f8e6 	bl	8004194 <vPortExitCritical>

	return xAlreadyYielded;
 8002fc8:	68bb      	ldr	r3, [r7, #8]
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3710      	adds	r7, #16
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	20000d9c 	.word	0x20000d9c
 8002fd8:	20000d74 	.word	0x20000d74
 8002fdc:	20000d34 	.word	0x20000d34
 8002fe0:	20000d7c 	.word	0x20000d7c
 8002fe4:	200008a4 	.word	0x200008a4
 8002fe8:	200008a0 	.word	0x200008a0
 8002fec:	20000d88 	.word	0x20000d88
 8002ff0:	20000d84 	.word	0x20000d84
 8002ff4:	e000ed04 	.word	0xe000ed04

08002ff8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8002ff8:	b480      	push	{r7}
 8002ffa:	b083      	sub	sp, #12
 8002ffc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8002ffe:	4b05      	ldr	r3, [pc, #20]	; (8003014 <xTaskGetTickCount+0x1c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003004:	687b      	ldr	r3, [r7, #4]
}
 8003006:	4618      	mov	r0, r3
 8003008:	370c      	adds	r7, #12
 800300a:	46bd      	mov	sp, r7
 800300c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003010:	4770      	bx	lr
 8003012:	bf00      	nop
 8003014:	20000d78 	.word	0x20000d78

08003018 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003018:	b580      	push	{r7, lr}
 800301a:	b086      	sub	sp, #24
 800301c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003022:	4b4f      	ldr	r3, [pc, #316]	; (8003160 <xTaskIncrementTick+0x148>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	2b00      	cmp	r3, #0
 8003028:	f040 808f 	bne.w	800314a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800302c:	4b4d      	ldr	r3, [pc, #308]	; (8003164 <xTaskIncrementTick+0x14c>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	3301      	adds	r3, #1
 8003032:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003034:	4a4b      	ldr	r2, [pc, #300]	; (8003164 <xTaskIncrementTick+0x14c>)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800303a:	693b      	ldr	r3, [r7, #16]
 800303c:	2b00      	cmp	r3, #0
 800303e:	d120      	bne.n	8003082 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003040:	4b49      	ldr	r3, [pc, #292]	; (8003168 <xTaskIncrementTick+0x150>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00a      	beq.n	8003060 <xTaskIncrementTick+0x48>
	__asm volatile
 800304a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800304e:	f383 8811 	msr	BASEPRI, r3
 8003052:	f3bf 8f6f 	isb	sy
 8003056:	f3bf 8f4f 	dsb	sy
 800305a:	603b      	str	r3, [r7, #0]
}
 800305c:	bf00      	nop
 800305e:	e7fe      	b.n	800305e <xTaskIncrementTick+0x46>
 8003060:	4b41      	ldr	r3, [pc, #260]	; (8003168 <xTaskIncrementTick+0x150>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	60fb      	str	r3, [r7, #12]
 8003066:	4b41      	ldr	r3, [pc, #260]	; (800316c <xTaskIncrementTick+0x154>)
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	4a3f      	ldr	r2, [pc, #252]	; (8003168 <xTaskIncrementTick+0x150>)
 800306c:	6013      	str	r3, [r2, #0]
 800306e:	4a3f      	ldr	r2, [pc, #252]	; (800316c <xTaskIncrementTick+0x154>)
 8003070:	68fb      	ldr	r3, [r7, #12]
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	4b3e      	ldr	r3, [pc, #248]	; (8003170 <xTaskIncrementTick+0x158>)
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	3301      	adds	r3, #1
 800307a:	4a3d      	ldr	r2, [pc, #244]	; (8003170 <xTaskIncrementTick+0x158>)
 800307c:	6013      	str	r3, [r2, #0]
 800307e:	f000 fadb 	bl	8003638 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003082:	4b3c      	ldr	r3, [pc, #240]	; (8003174 <xTaskIncrementTick+0x15c>)
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	429a      	cmp	r2, r3
 800308a:	d349      	bcc.n	8003120 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800308c:	4b36      	ldr	r3, [pc, #216]	; (8003168 <xTaskIncrementTick+0x150>)
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	2b00      	cmp	r3, #0
 8003094:	d104      	bne.n	80030a0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003096:	4b37      	ldr	r3, [pc, #220]	; (8003174 <xTaskIncrementTick+0x15c>)
 8003098:	f04f 32ff 	mov.w	r2, #4294967295
 800309c:	601a      	str	r2, [r3, #0]
					break;
 800309e:	e03f      	b.n	8003120 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80030a0:	4b31      	ldr	r3, [pc, #196]	; (8003168 <xTaskIncrementTick+0x150>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	68db      	ldr	r3, [r3, #12]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	429a      	cmp	r2, r3
 80030b6:	d203      	bcs.n	80030c0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80030b8:	4a2e      	ldr	r2, [pc, #184]	; (8003174 <xTaskIncrementTick+0x15c>)
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80030be:	e02f      	b.n	8003120 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	3304      	adds	r3, #4
 80030c4:	4618      	mov	r0, r3
 80030c6:	f7fe fef5 	bl	8001eb4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d004      	beq.n	80030dc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80030d2:	68bb      	ldr	r3, [r7, #8]
 80030d4:	3318      	adds	r3, #24
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fe feec 	bl	8001eb4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80030dc:	68bb      	ldr	r3, [r7, #8]
 80030de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030e0:	4b25      	ldr	r3, [pc, #148]	; (8003178 <xTaskIncrementTick+0x160>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	429a      	cmp	r2, r3
 80030e6:	d903      	bls.n	80030f0 <xTaskIncrementTick+0xd8>
 80030e8:	68bb      	ldr	r3, [r7, #8]
 80030ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ec:	4a22      	ldr	r2, [pc, #136]	; (8003178 <xTaskIncrementTick+0x160>)
 80030ee:	6013      	str	r3, [r2, #0]
 80030f0:	68bb      	ldr	r3, [r7, #8]
 80030f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030f4:	4613      	mov	r3, r2
 80030f6:	009b      	lsls	r3, r3, #2
 80030f8:	4413      	add	r3, r2
 80030fa:	009b      	lsls	r3, r3, #2
 80030fc:	4a1f      	ldr	r2, [pc, #124]	; (800317c <xTaskIncrementTick+0x164>)
 80030fe:	441a      	add	r2, r3
 8003100:	68bb      	ldr	r3, [r7, #8]
 8003102:	3304      	adds	r3, #4
 8003104:	4619      	mov	r1, r3
 8003106:	4610      	mov	r0, r2
 8003108:	f7fe fe77 	bl	8001dfa <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800310c:	68bb      	ldr	r3, [r7, #8]
 800310e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003110:	4b1b      	ldr	r3, [pc, #108]	; (8003180 <xTaskIncrementTick+0x168>)
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003116:	429a      	cmp	r2, r3
 8003118:	d3b8      	bcc.n	800308c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800311a:	2301      	movs	r3, #1
 800311c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800311e:	e7b5      	b.n	800308c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003120:	4b17      	ldr	r3, [pc, #92]	; (8003180 <xTaskIncrementTick+0x168>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003126:	4915      	ldr	r1, [pc, #84]	; (800317c <xTaskIncrementTick+0x164>)
 8003128:	4613      	mov	r3, r2
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	4413      	add	r3, r2
 800312e:	009b      	lsls	r3, r3, #2
 8003130:	440b      	add	r3, r1
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	2b01      	cmp	r3, #1
 8003136:	d901      	bls.n	800313c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003138:	2301      	movs	r3, #1
 800313a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800313c:	4b11      	ldr	r3, [pc, #68]	; (8003184 <xTaskIncrementTick+0x16c>)
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2b00      	cmp	r3, #0
 8003142:	d007      	beq.n	8003154 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003144:	2301      	movs	r3, #1
 8003146:	617b      	str	r3, [r7, #20]
 8003148:	e004      	b.n	8003154 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800314a:	4b0f      	ldr	r3, [pc, #60]	; (8003188 <xTaskIncrementTick+0x170>)
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	3301      	adds	r3, #1
 8003150:	4a0d      	ldr	r2, [pc, #52]	; (8003188 <xTaskIncrementTick+0x170>)
 8003152:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003154:	697b      	ldr	r3, [r7, #20]
}
 8003156:	4618      	mov	r0, r3
 8003158:	3718      	adds	r7, #24
 800315a:	46bd      	mov	sp, r7
 800315c:	bd80      	pop	{r7, pc}
 800315e:	bf00      	nop
 8003160:	20000d9c 	.word	0x20000d9c
 8003164:	20000d78 	.word	0x20000d78
 8003168:	20000d2c 	.word	0x20000d2c
 800316c:	20000d30 	.word	0x20000d30
 8003170:	20000d8c 	.word	0x20000d8c
 8003174:	20000d94 	.word	0x20000d94
 8003178:	20000d7c 	.word	0x20000d7c
 800317c:	200008a4 	.word	0x200008a4
 8003180:	200008a0 	.word	0x200008a0
 8003184:	20000d88 	.word	0x20000d88
 8003188:	20000d84 	.word	0x20000d84

0800318c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003192:	4b2a      	ldr	r3, [pc, #168]	; (800323c <vTaskSwitchContext+0xb0>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d003      	beq.n	80031a2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800319a:	4b29      	ldr	r3, [pc, #164]	; (8003240 <vTaskSwitchContext+0xb4>)
 800319c:	2201      	movs	r2, #1
 800319e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80031a0:	e046      	b.n	8003230 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80031a2:	4b27      	ldr	r3, [pc, #156]	; (8003240 <vTaskSwitchContext+0xb4>)
 80031a4:	2200      	movs	r2, #0
 80031a6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80031a8:	4b26      	ldr	r3, [pc, #152]	; (8003244 <vTaskSwitchContext+0xb8>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	60fb      	str	r3, [r7, #12]
 80031ae:	e010      	b.n	80031d2 <vTaskSwitchContext+0x46>
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10a      	bne.n	80031cc <vTaskSwitchContext+0x40>
	__asm volatile
 80031b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80031ba:	f383 8811 	msr	BASEPRI, r3
 80031be:	f3bf 8f6f 	isb	sy
 80031c2:	f3bf 8f4f 	dsb	sy
 80031c6:	607b      	str	r3, [r7, #4]
}
 80031c8:	bf00      	nop
 80031ca:	e7fe      	b.n	80031ca <vTaskSwitchContext+0x3e>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	3b01      	subs	r3, #1
 80031d0:	60fb      	str	r3, [r7, #12]
 80031d2:	491d      	ldr	r1, [pc, #116]	; (8003248 <vTaskSwitchContext+0xbc>)
 80031d4:	68fa      	ldr	r2, [r7, #12]
 80031d6:	4613      	mov	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	4413      	add	r3, r2
 80031dc:	009b      	lsls	r3, r3, #2
 80031de:	440b      	add	r3, r1
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d0e4      	beq.n	80031b0 <vTaskSwitchContext+0x24>
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	4613      	mov	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	4a15      	ldr	r2, [pc, #84]	; (8003248 <vTaskSwitchContext+0xbc>)
 80031f2:	4413      	add	r3, r2
 80031f4:	60bb      	str	r3, [r7, #8]
 80031f6:	68bb      	ldr	r3, [r7, #8]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	685a      	ldr	r2, [r3, #4]
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	605a      	str	r2, [r3, #4]
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	685a      	ldr	r2, [r3, #4]
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	3308      	adds	r3, #8
 8003208:	429a      	cmp	r2, r3
 800320a:	d104      	bne.n	8003216 <vTaskSwitchContext+0x8a>
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	685a      	ldr	r2, [r3, #4]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	605a      	str	r2, [r3, #4]
 8003216:	68bb      	ldr	r3, [r7, #8]
 8003218:	685b      	ldr	r3, [r3, #4]
 800321a:	68db      	ldr	r3, [r3, #12]
 800321c:	4a0b      	ldr	r2, [pc, #44]	; (800324c <vTaskSwitchContext+0xc0>)
 800321e:	6013      	str	r3, [r2, #0]
 8003220:	4a08      	ldr	r2, [pc, #32]	; (8003244 <vTaskSwitchContext+0xb8>)
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003226:	4b09      	ldr	r3, [pc, #36]	; (800324c <vTaskSwitchContext+0xc0>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	3354      	adds	r3, #84	; 0x54
 800322c:	4a08      	ldr	r2, [pc, #32]	; (8003250 <vTaskSwitchContext+0xc4>)
 800322e:	6013      	str	r3, [r2, #0]
}
 8003230:	bf00      	nop
 8003232:	3714      	adds	r7, #20
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	20000d9c 	.word	0x20000d9c
 8003240:	20000d88 	.word	0x20000d88
 8003244:	20000d7c 	.word	0x20000d7c
 8003248:	200008a4 	.word	0x200008a4
 800324c:	200008a0 	.word	0x200008a0
 8003250:	20000010 	.word	0x20000010

08003254 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003254:	b580      	push	{r7, lr}
 8003256:	b084      	sub	sp, #16
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d10a      	bne.n	800327a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003264:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003268:	f383 8811 	msr	BASEPRI, r3
 800326c:	f3bf 8f6f 	isb	sy
 8003270:	f3bf 8f4f 	dsb	sy
 8003274:	60fb      	str	r3, [r7, #12]
}
 8003276:	bf00      	nop
 8003278:	e7fe      	b.n	8003278 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800327a:	4b07      	ldr	r3, [pc, #28]	; (8003298 <vTaskPlaceOnEventList+0x44>)
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	3318      	adds	r3, #24
 8003280:	4619      	mov	r1, r3
 8003282:	6878      	ldr	r0, [r7, #4]
 8003284:	f7fe fddd 	bl	8001e42 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003288:	2101      	movs	r1, #1
 800328a:	6838      	ldr	r0, [r7, #0]
 800328c:	f000 fa80 	bl	8003790 <prvAddCurrentTaskToDelayedList>
}
 8003290:	bf00      	nop
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	200008a0 	.word	0x200008a0

0800329c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	60f8      	str	r0, [r7, #12]
 80032a4:	60b9      	str	r1, [r7, #8]
 80032a6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10a      	bne.n	80032c4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80032ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80032b2:	f383 8811 	msr	BASEPRI, r3
 80032b6:	f3bf 8f6f 	isb	sy
 80032ba:	f3bf 8f4f 	dsb	sy
 80032be:	617b      	str	r3, [r7, #20]
}
 80032c0:	bf00      	nop
 80032c2:	e7fe      	b.n	80032c2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80032c4:	4b0a      	ldr	r3, [pc, #40]	; (80032f0 <vTaskPlaceOnEventListRestricted+0x54>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	3318      	adds	r3, #24
 80032ca:	4619      	mov	r1, r3
 80032cc:	68f8      	ldr	r0, [r7, #12]
 80032ce:	f7fe fd94 	bl	8001dfa <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d002      	beq.n	80032de <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80032d8:	f04f 33ff 	mov.w	r3, #4294967295
 80032dc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80032de:	6879      	ldr	r1, [r7, #4]
 80032e0:	68b8      	ldr	r0, [r7, #8]
 80032e2:	f000 fa55 	bl	8003790 <prvAddCurrentTaskToDelayedList>
	}
 80032e6:	bf00      	nop
 80032e8:	3718      	adds	r7, #24
 80032ea:	46bd      	mov	sp, r7
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	200008a0 	.word	0x200008a0

080032f4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b086      	sub	sp, #24
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	68db      	ldr	r3, [r3, #12]
 8003302:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d10a      	bne.n	8003320 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800330a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800330e:	f383 8811 	msr	BASEPRI, r3
 8003312:	f3bf 8f6f 	isb	sy
 8003316:	f3bf 8f4f 	dsb	sy
 800331a:	60fb      	str	r3, [r7, #12]
}
 800331c:	bf00      	nop
 800331e:	e7fe      	b.n	800331e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	3318      	adds	r3, #24
 8003324:	4618      	mov	r0, r3
 8003326:	f7fe fdc5 	bl	8001eb4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800332a:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <xTaskRemoveFromEventList+0xb0>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	2b00      	cmp	r3, #0
 8003330:	d11d      	bne.n	800336e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	3304      	adds	r3, #4
 8003336:	4618      	mov	r0, r3
 8003338:	f7fe fdbc 	bl	8001eb4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800333c:	693b      	ldr	r3, [r7, #16]
 800333e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003340:	4b19      	ldr	r3, [pc, #100]	; (80033a8 <xTaskRemoveFromEventList+0xb4>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d903      	bls.n	8003350 <xTaskRemoveFromEventList+0x5c>
 8003348:	693b      	ldr	r3, [r7, #16]
 800334a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800334c:	4a16      	ldr	r2, [pc, #88]	; (80033a8 <xTaskRemoveFromEventList+0xb4>)
 800334e:	6013      	str	r3, [r2, #0]
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003354:	4613      	mov	r3, r2
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	4413      	add	r3, r2
 800335a:	009b      	lsls	r3, r3, #2
 800335c:	4a13      	ldr	r2, [pc, #76]	; (80033ac <xTaskRemoveFromEventList+0xb8>)
 800335e:	441a      	add	r2, r3
 8003360:	693b      	ldr	r3, [r7, #16]
 8003362:	3304      	adds	r3, #4
 8003364:	4619      	mov	r1, r3
 8003366:	4610      	mov	r0, r2
 8003368:	f7fe fd47 	bl	8001dfa <vListInsertEnd>
 800336c:	e005      	b.n	800337a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	3318      	adds	r3, #24
 8003372:	4619      	mov	r1, r3
 8003374:	480e      	ldr	r0, [pc, #56]	; (80033b0 <xTaskRemoveFromEventList+0xbc>)
 8003376:	f7fe fd40 	bl	8001dfa <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800337a:	693b      	ldr	r3, [r7, #16]
 800337c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <xTaskRemoveFromEventList+0xc0>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003384:	429a      	cmp	r2, r3
 8003386:	d905      	bls.n	8003394 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003388:	2301      	movs	r3, #1
 800338a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800338c:	4b0a      	ldr	r3, [pc, #40]	; (80033b8 <xTaskRemoveFromEventList+0xc4>)
 800338e:	2201      	movs	r2, #1
 8003390:	601a      	str	r2, [r3, #0]
 8003392:	e001      	b.n	8003398 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003394:	2300      	movs	r3, #0
 8003396:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003398:	697b      	ldr	r3, [r7, #20]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3718      	adds	r7, #24
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}
 80033a2:	bf00      	nop
 80033a4:	20000d9c 	.word	0x20000d9c
 80033a8:	20000d7c 	.word	0x20000d7c
 80033ac:	200008a4 	.word	0x200008a4
 80033b0:	20000d34 	.word	0x20000d34
 80033b4:	200008a0 	.word	0x200008a0
 80033b8:	20000d88 	.word	0x20000d88

080033bc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80033bc:	b480      	push	{r7}
 80033be:	b083      	sub	sp, #12
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80033c4:	4b06      	ldr	r3, [pc, #24]	; (80033e0 <vTaskInternalSetTimeOutState+0x24>)
 80033c6:	681a      	ldr	r2, [r3, #0]
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80033cc:	4b05      	ldr	r3, [pc, #20]	; (80033e4 <vTaskInternalSetTimeOutState+0x28>)
 80033ce:	681a      	ldr	r2, [r3, #0]
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	605a      	str	r2, [r3, #4]
}
 80033d4:	bf00      	nop
 80033d6:	370c      	adds	r7, #12
 80033d8:	46bd      	mov	sp, r7
 80033da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033de:	4770      	bx	lr
 80033e0:	20000d8c 	.word	0x20000d8c
 80033e4:	20000d78 	.word	0x20000d78

080033e8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80033e8:	b580      	push	{r7, lr}
 80033ea:	b088      	sub	sp, #32
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	6078      	str	r0, [r7, #4]
 80033f0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d10a      	bne.n	800340e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80033f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80033fc:	f383 8811 	msr	BASEPRI, r3
 8003400:	f3bf 8f6f 	isb	sy
 8003404:	f3bf 8f4f 	dsb	sy
 8003408:	613b      	str	r3, [r7, #16]
}
 800340a:	bf00      	nop
 800340c:	e7fe      	b.n	800340c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d10a      	bne.n	800342a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003414:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003418:	f383 8811 	msr	BASEPRI, r3
 800341c:	f3bf 8f6f 	isb	sy
 8003420:	f3bf 8f4f 	dsb	sy
 8003424:	60fb      	str	r3, [r7, #12]
}
 8003426:	bf00      	nop
 8003428:	e7fe      	b.n	8003428 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800342a:	f000 fe83 	bl	8004134 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800342e:	4b1d      	ldr	r3, [pc, #116]	; (80034a4 <xTaskCheckForTimeOut+0xbc>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	69ba      	ldr	r2, [r7, #24]
 800343a:	1ad3      	subs	r3, r2, r3
 800343c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800343e:	683b      	ldr	r3, [r7, #0]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d102      	bne.n	800344e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003448:	2300      	movs	r3, #0
 800344a:	61fb      	str	r3, [r7, #28]
 800344c:	e023      	b.n	8003496 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	681a      	ldr	r2, [r3, #0]
 8003452:	4b15      	ldr	r3, [pc, #84]	; (80034a8 <xTaskCheckForTimeOut+0xc0>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	429a      	cmp	r2, r3
 8003458:	d007      	beq.n	800346a <xTaskCheckForTimeOut+0x82>
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	69ba      	ldr	r2, [r7, #24]
 8003460:	429a      	cmp	r2, r3
 8003462:	d302      	bcc.n	800346a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003464:	2301      	movs	r3, #1
 8003466:	61fb      	str	r3, [r7, #28]
 8003468:	e015      	b.n	8003496 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	697a      	ldr	r2, [r7, #20]
 8003470:	429a      	cmp	r2, r3
 8003472:	d20b      	bcs.n	800348c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	697b      	ldr	r3, [r7, #20]
 800347a:	1ad2      	subs	r2, r2, r3
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003480:	6878      	ldr	r0, [r7, #4]
 8003482:	f7ff ff9b 	bl	80033bc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003486:	2300      	movs	r3, #0
 8003488:	61fb      	str	r3, [r7, #28]
 800348a:	e004      	b.n	8003496 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2200      	movs	r2, #0
 8003490:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003492:	2301      	movs	r3, #1
 8003494:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003496:	f000 fe7d 	bl	8004194 <vPortExitCritical>

	return xReturn;
 800349a:	69fb      	ldr	r3, [r7, #28]
}
 800349c:	4618      	mov	r0, r3
 800349e:	3720      	adds	r7, #32
 80034a0:	46bd      	mov	sp, r7
 80034a2:	bd80      	pop	{r7, pc}
 80034a4:	20000d78 	.word	0x20000d78
 80034a8:	20000d8c 	.word	0x20000d8c

080034ac <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80034ac:	b480      	push	{r7}
 80034ae:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80034b0:	4b03      	ldr	r3, [pc, #12]	; (80034c0 <vTaskMissedYield+0x14>)
 80034b2:	2201      	movs	r2, #1
 80034b4:	601a      	str	r2, [r3, #0]
}
 80034b6:	bf00      	nop
 80034b8:	46bd      	mov	sp, r7
 80034ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034be:	4770      	bx	lr
 80034c0:	20000d88 	.word	0x20000d88

080034c4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b082      	sub	sp, #8
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80034cc:	f000 f852 	bl	8003574 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80034d0:	4b06      	ldr	r3, [pc, #24]	; (80034ec <prvIdleTask+0x28>)
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	2b01      	cmp	r3, #1
 80034d6:	d9f9      	bls.n	80034cc <prvIdleTask+0x8>
			{
				taskYIELD();
 80034d8:	4b05      	ldr	r3, [pc, #20]	; (80034f0 <prvIdleTask+0x2c>)
 80034da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034de:	601a      	str	r2, [r3, #0]
 80034e0:	f3bf 8f4f 	dsb	sy
 80034e4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80034e8:	e7f0      	b.n	80034cc <prvIdleTask+0x8>
 80034ea:	bf00      	nop
 80034ec:	200008a4 	.word	0x200008a4
 80034f0:	e000ed04 	.word	0xe000ed04

080034f4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80034f4:	b580      	push	{r7, lr}
 80034f6:	b082      	sub	sp, #8
 80034f8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80034fa:	2300      	movs	r3, #0
 80034fc:	607b      	str	r3, [r7, #4]
 80034fe:	e00c      	b.n	800351a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003500:	687a      	ldr	r2, [r7, #4]
 8003502:	4613      	mov	r3, r2
 8003504:	009b      	lsls	r3, r3, #2
 8003506:	4413      	add	r3, r2
 8003508:	009b      	lsls	r3, r3, #2
 800350a:	4a12      	ldr	r2, [pc, #72]	; (8003554 <prvInitialiseTaskLists+0x60>)
 800350c:	4413      	add	r3, r2
 800350e:	4618      	mov	r0, r3
 8003510:	f7fe fc46 	bl	8001da0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	3301      	adds	r3, #1
 8003518:	607b      	str	r3, [r7, #4]
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	2b37      	cmp	r3, #55	; 0x37
 800351e:	d9ef      	bls.n	8003500 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003520:	480d      	ldr	r0, [pc, #52]	; (8003558 <prvInitialiseTaskLists+0x64>)
 8003522:	f7fe fc3d 	bl	8001da0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003526:	480d      	ldr	r0, [pc, #52]	; (800355c <prvInitialiseTaskLists+0x68>)
 8003528:	f7fe fc3a 	bl	8001da0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800352c:	480c      	ldr	r0, [pc, #48]	; (8003560 <prvInitialiseTaskLists+0x6c>)
 800352e:	f7fe fc37 	bl	8001da0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003532:	480c      	ldr	r0, [pc, #48]	; (8003564 <prvInitialiseTaskLists+0x70>)
 8003534:	f7fe fc34 	bl	8001da0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003538:	480b      	ldr	r0, [pc, #44]	; (8003568 <prvInitialiseTaskLists+0x74>)
 800353a:	f7fe fc31 	bl	8001da0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800353e:	4b0b      	ldr	r3, [pc, #44]	; (800356c <prvInitialiseTaskLists+0x78>)
 8003540:	4a05      	ldr	r2, [pc, #20]	; (8003558 <prvInitialiseTaskLists+0x64>)
 8003542:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003544:	4b0a      	ldr	r3, [pc, #40]	; (8003570 <prvInitialiseTaskLists+0x7c>)
 8003546:	4a05      	ldr	r2, [pc, #20]	; (800355c <prvInitialiseTaskLists+0x68>)
 8003548:	601a      	str	r2, [r3, #0]
}
 800354a:	bf00      	nop
 800354c:	3708      	adds	r7, #8
 800354e:	46bd      	mov	sp, r7
 8003550:	bd80      	pop	{r7, pc}
 8003552:	bf00      	nop
 8003554:	200008a4 	.word	0x200008a4
 8003558:	20000d04 	.word	0x20000d04
 800355c:	20000d18 	.word	0x20000d18
 8003560:	20000d34 	.word	0x20000d34
 8003564:	20000d48 	.word	0x20000d48
 8003568:	20000d60 	.word	0x20000d60
 800356c:	20000d2c 	.word	0x20000d2c
 8003570:	20000d30 	.word	0x20000d30

08003574 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003574:	b580      	push	{r7, lr}
 8003576:	b082      	sub	sp, #8
 8003578:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800357a:	e019      	b.n	80035b0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800357c:	f000 fdda 	bl	8004134 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003580:	4b10      	ldr	r3, [pc, #64]	; (80035c4 <prvCheckTasksWaitingTermination+0x50>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	3304      	adds	r3, #4
 800358c:	4618      	mov	r0, r3
 800358e:	f7fe fc91 	bl	8001eb4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003592:	4b0d      	ldr	r3, [pc, #52]	; (80035c8 <prvCheckTasksWaitingTermination+0x54>)
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	3b01      	subs	r3, #1
 8003598:	4a0b      	ldr	r2, [pc, #44]	; (80035c8 <prvCheckTasksWaitingTermination+0x54>)
 800359a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800359c:	4b0b      	ldr	r3, [pc, #44]	; (80035cc <prvCheckTasksWaitingTermination+0x58>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	3b01      	subs	r3, #1
 80035a2:	4a0a      	ldr	r2, [pc, #40]	; (80035cc <prvCheckTasksWaitingTermination+0x58>)
 80035a4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80035a6:	f000 fdf5 	bl	8004194 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80035aa:	6878      	ldr	r0, [r7, #4]
 80035ac:	f000 f810 	bl	80035d0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <prvCheckTasksWaitingTermination+0x58>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d1e1      	bne.n	800357c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80035b8:	bf00      	nop
 80035ba:	bf00      	nop
 80035bc:	3708      	adds	r7, #8
 80035be:	46bd      	mov	sp, r7
 80035c0:	bd80      	pop	{r7, pc}
 80035c2:	bf00      	nop
 80035c4:	20000d48 	.word	0x20000d48
 80035c8:	20000d74 	.word	0x20000d74
 80035cc:	20000d5c 	.word	0x20000d5c

080035d0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b084      	sub	sp, #16
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	3354      	adds	r3, #84	; 0x54
 80035dc:	4618      	mov	r0, r3
 80035de:	f001 f8ff 	bl	80047e0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d108      	bne.n	80035fe <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035f0:	4618      	mov	r0, r3
 80035f2:	f000 ff8d 	bl	8004510 <vPortFree>
				vPortFree( pxTCB );
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 ff8a 	bl	8004510 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80035fc:	e018      	b.n	8003630 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003604:	2b01      	cmp	r3, #1
 8003606:	d103      	bne.n	8003610 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003608:	6878      	ldr	r0, [r7, #4]
 800360a:	f000 ff81 	bl	8004510 <vPortFree>
	}
 800360e:	e00f      	b.n	8003630 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003616:	2b02      	cmp	r3, #2
 8003618:	d00a      	beq.n	8003630 <prvDeleteTCB+0x60>
	__asm volatile
 800361a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800361e:	f383 8811 	msr	BASEPRI, r3
 8003622:	f3bf 8f6f 	isb	sy
 8003626:	f3bf 8f4f 	dsb	sy
 800362a:	60fb      	str	r3, [r7, #12]
}
 800362c:	bf00      	nop
 800362e:	e7fe      	b.n	800362e <prvDeleteTCB+0x5e>
	}
 8003630:	bf00      	nop
 8003632:	3710      	adds	r7, #16
 8003634:	46bd      	mov	sp, r7
 8003636:	bd80      	pop	{r7, pc}

08003638 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003638:	b480      	push	{r7}
 800363a:	b083      	sub	sp, #12
 800363c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800363e:	4b0c      	ldr	r3, [pc, #48]	; (8003670 <prvResetNextTaskUnblockTime+0x38>)
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d104      	bne.n	8003652 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003648:	4b0a      	ldr	r3, [pc, #40]	; (8003674 <prvResetNextTaskUnblockTime+0x3c>)
 800364a:	f04f 32ff 	mov.w	r2, #4294967295
 800364e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003650:	e008      	b.n	8003664 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003652:	4b07      	ldr	r3, [pc, #28]	; (8003670 <prvResetNextTaskUnblockTime+0x38>)
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	68db      	ldr	r3, [r3, #12]
 8003658:	68db      	ldr	r3, [r3, #12]
 800365a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	685b      	ldr	r3, [r3, #4]
 8003660:	4a04      	ldr	r2, [pc, #16]	; (8003674 <prvResetNextTaskUnblockTime+0x3c>)
 8003662:	6013      	str	r3, [r2, #0]
}
 8003664:	bf00      	nop
 8003666:	370c      	adds	r7, #12
 8003668:	46bd      	mov	sp, r7
 800366a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366e:	4770      	bx	lr
 8003670:	20000d2c 	.word	0x20000d2c
 8003674:	20000d94 	.word	0x20000d94

08003678 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003678:	b480      	push	{r7}
 800367a:	b083      	sub	sp, #12
 800367c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800367e:	4b0b      	ldr	r3, [pc, #44]	; (80036ac <xTaskGetSchedulerState+0x34>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003686:	2301      	movs	r3, #1
 8003688:	607b      	str	r3, [r7, #4]
 800368a:	e008      	b.n	800369e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800368c:	4b08      	ldr	r3, [pc, #32]	; (80036b0 <xTaskGetSchedulerState+0x38>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2b00      	cmp	r3, #0
 8003692:	d102      	bne.n	800369a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003694:	2302      	movs	r3, #2
 8003696:	607b      	str	r3, [r7, #4]
 8003698:	e001      	b.n	800369e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800369a:	2300      	movs	r3, #0
 800369c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800369e:	687b      	ldr	r3, [r7, #4]
	}
 80036a0:	4618      	mov	r0, r3
 80036a2:	370c      	adds	r7, #12
 80036a4:	46bd      	mov	sp, r7
 80036a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036aa:	4770      	bx	lr
 80036ac:	20000d80 	.word	0x20000d80
 80036b0:	20000d9c 	.word	0x20000d9c

080036b4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80036b4:	b580      	push	{r7, lr}
 80036b6:	b086      	sub	sp, #24
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80036c0:	2300      	movs	r3, #0
 80036c2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d056      	beq.n	8003778 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80036ca:	4b2e      	ldr	r3, [pc, #184]	; (8003784 <xTaskPriorityDisinherit+0xd0>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	693a      	ldr	r2, [r7, #16]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	d00a      	beq.n	80036ea <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80036d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036d8:	f383 8811 	msr	BASEPRI, r3
 80036dc:	f3bf 8f6f 	isb	sy
 80036e0:	f3bf 8f4f 	dsb	sy
 80036e4:	60fb      	str	r3, [r7, #12]
}
 80036e6:	bf00      	nop
 80036e8:	e7fe      	b.n	80036e8 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d10a      	bne.n	8003708 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80036f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036f6:	f383 8811 	msr	BASEPRI, r3
 80036fa:	f3bf 8f6f 	isb	sy
 80036fe:	f3bf 8f4f 	dsb	sy
 8003702:	60bb      	str	r3, [r7, #8]
}
 8003704:	bf00      	nop
 8003706:	e7fe      	b.n	8003706 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8003708:	693b      	ldr	r3, [r7, #16]
 800370a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800370c:	1e5a      	subs	r2, r3, #1
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8003712:	693b      	ldr	r3, [r7, #16]
 8003714:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003716:	693b      	ldr	r3, [r7, #16]
 8003718:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800371a:	429a      	cmp	r2, r3
 800371c:	d02c      	beq.n	8003778 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800371e:	693b      	ldr	r3, [r7, #16]
 8003720:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003722:	2b00      	cmp	r3, #0
 8003724:	d128      	bne.n	8003778 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8003726:	693b      	ldr	r3, [r7, #16]
 8003728:	3304      	adds	r3, #4
 800372a:	4618      	mov	r0, r3
 800372c:	f7fe fbc2 	bl	8001eb4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800373c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8003744:	693b      	ldr	r3, [r7, #16]
 8003746:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003748:	4b0f      	ldr	r3, [pc, #60]	; (8003788 <xTaskPriorityDisinherit+0xd4>)
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	429a      	cmp	r2, r3
 800374e:	d903      	bls.n	8003758 <xTaskPriorityDisinherit+0xa4>
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003754:	4a0c      	ldr	r2, [pc, #48]	; (8003788 <xTaskPriorityDisinherit+0xd4>)
 8003756:	6013      	str	r3, [r2, #0]
 8003758:	693b      	ldr	r3, [r7, #16]
 800375a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800375c:	4613      	mov	r3, r2
 800375e:	009b      	lsls	r3, r3, #2
 8003760:	4413      	add	r3, r2
 8003762:	009b      	lsls	r3, r3, #2
 8003764:	4a09      	ldr	r2, [pc, #36]	; (800378c <xTaskPriorityDisinherit+0xd8>)
 8003766:	441a      	add	r2, r3
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	3304      	adds	r3, #4
 800376c:	4619      	mov	r1, r3
 800376e:	4610      	mov	r0, r2
 8003770:	f7fe fb43 	bl	8001dfa <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8003774:	2301      	movs	r3, #1
 8003776:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8003778:	697b      	ldr	r3, [r7, #20]
	}
 800377a:	4618      	mov	r0, r3
 800377c:	3718      	adds	r7, #24
 800377e:	46bd      	mov	sp, r7
 8003780:	bd80      	pop	{r7, pc}
 8003782:	bf00      	nop
 8003784:	200008a0 	.word	0x200008a0
 8003788:	20000d7c 	.word	0x20000d7c
 800378c:	200008a4 	.word	0x200008a4

08003790 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8003790:	b580      	push	{r7, lr}
 8003792:	b084      	sub	sp, #16
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800379a:	4b21      	ldr	r3, [pc, #132]	; (8003820 <prvAddCurrentTaskToDelayedList+0x90>)
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80037a0:	4b20      	ldr	r3, [pc, #128]	; (8003824 <prvAddCurrentTaskToDelayedList+0x94>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	3304      	adds	r3, #4
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fe fb84 	bl	8001eb4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80037b2:	d10a      	bne.n	80037ca <prvAddCurrentTaskToDelayedList+0x3a>
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d007      	beq.n	80037ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037ba:	4b1a      	ldr	r3, [pc, #104]	; (8003824 <prvAddCurrentTaskToDelayedList+0x94>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	3304      	adds	r3, #4
 80037c0:	4619      	mov	r1, r3
 80037c2:	4819      	ldr	r0, [pc, #100]	; (8003828 <prvAddCurrentTaskToDelayedList+0x98>)
 80037c4:	f7fe fb19 	bl	8001dfa <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80037c8:	e026      	b.n	8003818 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	4413      	add	r3, r2
 80037d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80037d2:	4b14      	ldr	r3, [pc, #80]	; (8003824 <prvAddCurrentTaskToDelayedList+0x94>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	68ba      	ldr	r2, [r7, #8]
 80037d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80037da:	68ba      	ldr	r2, [r7, #8]
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	429a      	cmp	r2, r3
 80037e0:	d209      	bcs.n	80037f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037e2:	4b12      	ldr	r3, [pc, #72]	; (800382c <prvAddCurrentTaskToDelayedList+0x9c>)
 80037e4:	681a      	ldr	r2, [r3, #0]
 80037e6:	4b0f      	ldr	r3, [pc, #60]	; (8003824 <prvAddCurrentTaskToDelayedList+0x94>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	3304      	adds	r3, #4
 80037ec:	4619      	mov	r1, r3
 80037ee:	4610      	mov	r0, r2
 80037f0:	f7fe fb27 	bl	8001e42 <vListInsert>
}
 80037f4:	e010      	b.n	8003818 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80037f6:	4b0e      	ldr	r3, [pc, #56]	; (8003830 <prvAddCurrentTaskToDelayedList+0xa0>)
 80037f8:	681a      	ldr	r2, [r3, #0]
 80037fa:	4b0a      	ldr	r3, [pc, #40]	; (8003824 <prvAddCurrentTaskToDelayedList+0x94>)
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	3304      	adds	r3, #4
 8003800:	4619      	mov	r1, r3
 8003802:	4610      	mov	r0, r2
 8003804:	f7fe fb1d 	bl	8001e42 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8003808:	4b0a      	ldr	r3, [pc, #40]	; (8003834 <prvAddCurrentTaskToDelayedList+0xa4>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	429a      	cmp	r2, r3
 8003810:	d202      	bcs.n	8003818 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8003812:	4a08      	ldr	r2, [pc, #32]	; (8003834 <prvAddCurrentTaskToDelayedList+0xa4>)
 8003814:	68bb      	ldr	r3, [r7, #8]
 8003816:	6013      	str	r3, [r2, #0]
}
 8003818:	bf00      	nop
 800381a:	3710      	adds	r7, #16
 800381c:	46bd      	mov	sp, r7
 800381e:	bd80      	pop	{r7, pc}
 8003820:	20000d78 	.word	0x20000d78
 8003824:	200008a0 	.word	0x200008a0
 8003828:	20000d60 	.word	0x20000d60
 800382c:	20000d30 	.word	0x20000d30
 8003830:	20000d2c 	.word	0x20000d2c
 8003834:	20000d94 	.word	0x20000d94

08003838 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b08a      	sub	sp, #40	; 0x28
 800383c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800383e:	2300      	movs	r3, #0
 8003840:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8003842:	f000 fb07 	bl	8003e54 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8003846:	4b1c      	ldr	r3, [pc, #112]	; (80038b8 <xTimerCreateTimerTask+0x80>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d021      	beq.n	8003892 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800384e:	2300      	movs	r3, #0
 8003850:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8003852:	2300      	movs	r3, #0
 8003854:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8003856:	1d3a      	adds	r2, r7, #4
 8003858:	f107 0108 	add.w	r1, r7, #8
 800385c:	f107 030c 	add.w	r3, r7, #12
 8003860:	4618      	mov	r0, r3
 8003862:	f7fe fa83 	bl	8001d6c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8003866:	6879      	ldr	r1, [r7, #4]
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	9202      	str	r2, [sp, #8]
 800386e:	9301      	str	r3, [sp, #4]
 8003870:	2302      	movs	r3, #2
 8003872:	9300      	str	r3, [sp, #0]
 8003874:	2300      	movs	r3, #0
 8003876:	460a      	mov	r2, r1
 8003878:	4910      	ldr	r1, [pc, #64]	; (80038bc <xTimerCreateTimerTask+0x84>)
 800387a:	4811      	ldr	r0, [pc, #68]	; (80038c0 <xTimerCreateTimerTask+0x88>)
 800387c:	f7ff f830 	bl	80028e0 <xTaskCreateStatic>
 8003880:	4603      	mov	r3, r0
 8003882:	4a10      	ldr	r2, [pc, #64]	; (80038c4 <xTimerCreateTimerTask+0x8c>)
 8003884:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8003886:	4b0f      	ldr	r3, [pc, #60]	; (80038c4 <xTimerCreateTimerTask+0x8c>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	2b00      	cmp	r3, #0
 800388c:	d001      	beq.n	8003892 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800388e:	2301      	movs	r3, #1
 8003890:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8003892:	697b      	ldr	r3, [r7, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d10a      	bne.n	80038ae <xTimerCreateTimerTask+0x76>
	__asm volatile
 8003898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800389c:	f383 8811 	msr	BASEPRI, r3
 80038a0:	f3bf 8f6f 	isb	sy
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	613b      	str	r3, [r7, #16]
}
 80038aa:	bf00      	nop
 80038ac:	e7fe      	b.n	80038ac <xTimerCreateTimerTask+0x74>
	return xReturn;
 80038ae:	697b      	ldr	r3, [r7, #20]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3718      	adds	r7, #24
 80038b4:	46bd      	mov	sp, r7
 80038b6:	bd80      	pop	{r7, pc}
 80038b8:	20000dd0 	.word	0x20000dd0
 80038bc:	08004978 	.word	0x08004978
 80038c0:	080039fd 	.word	0x080039fd
 80038c4:	20000dd4 	.word	0x20000dd4

080038c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80038c8:	b580      	push	{r7, lr}
 80038ca:	b08a      	sub	sp, #40	; 0x28
 80038cc:	af00      	add	r7, sp, #0
 80038ce:	60f8      	str	r0, [r7, #12]
 80038d0:	60b9      	str	r1, [r7, #8]
 80038d2:	607a      	str	r2, [r7, #4]
 80038d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80038d6:	2300      	movs	r3, #0
 80038d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d10a      	bne.n	80038f6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	623b      	str	r3, [r7, #32]
}
 80038f2:	bf00      	nop
 80038f4:	e7fe      	b.n	80038f4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80038f6:	4b1a      	ldr	r3, [pc, #104]	; (8003960 <xTimerGenericCommand+0x98>)
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d02a      	beq.n	8003954 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800390a:	68bb      	ldr	r3, [r7, #8]
 800390c:	2b05      	cmp	r3, #5
 800390e:	dc18      	bgt.n	8003942 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8003910:	f7ff feb2 	bl	8003678 <xTaskGetSchedulerState>
 8003914:	4603      	mov	r3, r0
 8003916:	2b02      	cmp	r3, #2
 8003918:	d109      	bne.n	800392e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800391a:	4b11      	ldr	r3, [pc, #68]	; (8003960 <xTimerGenericCommand+0x98>)
 800391c:	6818      	ldr	r0, [r3, #0]
 800391e:	f107 0110 	add.w	r1, r7, #16
 8003922:	2300      	movs	r3, #0
 8003924:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003926:	f7fe fbf3 	bl	8002110 <xQueueGenericSend>
 800392a:	6278      	str	r0, [r7, #36]	; 0x24
 800392c:	e012      	b.n	8003954 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800392e:	4b0c      	ldr	r3, [pc, #48]	; (8003960 <xTimerGenericCommand+0x98>)
 8003930:	6818      	ldr	r0, [r3, #0]
 8003932:	f107 0110 	add.w	r1, r7, #16
 8003936:	2300      	movs	r3, #0
 8003938:	2200      	movs	r2, #0
 800393a:	f7fe fbe9 	bl	8002110 <xQueueGenericSend>
 800393e:	6278      	str	r0, [r7, #36]	; 0x24
 8003940:	e008      	b.n	8003954 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8003942:	4b07      	ldr	r3, [pc, #28]	; (8003960 <xTimerGenericCommand+0x98>)
 8003944:	6818      	ldr	r0, [r3, #0]
 8003946:	f107 0110 	add.w	r1, r7, #16
 800394a:	2300      	movs	r3, #0
 800394c:	683a      	ldr	r2, [r7, #0]
 800394e:	f7fe fcdd 	bl	800230c <xQueueGenericSendFromISR>
 8003952:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8003954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8003956:	4618      	mov	r0, r3
 8003958:	3728      	adds	r7, #40	; 0x28
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	20000dd0 	.word	0x20000dd0

08003964 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8003964:	b580      	push	{r7, lr}
 8003966:	b088      	sub	sp, #32
 8003968:	af02      	add	r7, sp, #8
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <prvProcessExpiredTimer+0x94>)
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	68db      	ldr	r3, [r3, #12]
 8003976:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003978:	697b      	ldr	r3, [r7, #20]
 800397a:	3304      	adds	r3, #4
 800397c:	4618      	mov	r0, r3
 800397e:	f7fe fa99 	bl	8001eb4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003982:	697b      	ldr	r3, [r7, #20]
 8003984:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d022      	beq.n	80039d6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8003990:	697b      	ldr	r3, [r7, #20]
 8003992:	699a      	ldr	r2, [r3, #24]
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	18d1      	adds	r1, r2, r3
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	683a      	ldr	r2, [r7, #0]
 800399c:	6978      	ldr	r0, [r7, #20]
 800399e:	f000 f8d1 	bl	8003b44 <prvInsertTimerInActiveList>
 80039a2:	4603      	mov	r3, r0
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d01f      	beq.n	80039e8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80039a8:	2300      	movs	r3, #0
 80039aa:	9300      	str	r3, [sp, #0]
 80039ac:	2300      	movs	r3, #0
 80039ae:	687a      	ldr	r2, [r7, #4]
 80039b0:	2100      	movs	r1, #0
 80039b2:	6978      	ldr	r0, [r7, #20]
 80039b4:	f7ff ff88 	bl	80038c8 <xTimerGenericCommand>
 80039b8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80039ba:	693b      	ldr	r3, [r7, #16]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d113      	bne.n	80039e8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80039c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039c4:	f383 8811 	msr	BASEPRI, r3
 80039c8:	f3bf 8f6f 	isb	sy
 80039cc:	f3bf 8f4f 	dsb	sy
 80039d0:	60fb      	str	r3, [r7, #12]
}
 80039d2:	bf00      	nop
 80039d4:	e7fe      	b.n	80039d4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80039dc:	f023 0301 	bic.w	r3, r3, #1
 80039e0:	b2da      	uxtb	r2, r3
 80039e2:	697b      	ldr	r3, [r7, #20]
 80039e4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80039e8:	697b      	ldr	r3, [r7, #20]
 80039ea:	6a1b      	ldr	r3, [r3, #32]
 80039ec:	6978      	ldr	r0, [r7, #20]
 80039ee:	4798      	blx	r3
}
 80039f0:	bf00      	nop
 80039f2:	3718      	adds	r7, #24
 80039f4:	46bd      	mov	sp, r7
 80039f6:	bd80      	pop	{r7, pc}
 80039f8:	20000dc8 	.word	0x20000dc8

080039fc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	b084      	sub	sp, #16
 8003a00:	af00      	add	r7, sp, #0
 8003a02:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a04:	f107 0308 	add.w	r3, r7, #8
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f000 f857 	bl	8003abc <prvGetNextExpireTime>
 8003a0e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	4619      	mov	r1, r3
 8003a14:	68f8      	ldr	r0, [r7, #12]
 8003a16:	f000 f803 	bl	8003a20 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8003a1a:	f000 f8d5 	bl	8003bc8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8003a1e:	e7f1      	b.n	8003a04 <prvTimerTask+0x8>

08003a20 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b084      	sub	sp, #16
 8003a24:	af00      	add	r7, sp, #0
 8003a26:	6078      	str	r0, [r7, #4]
 8003a28:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8003a2a:	f7ff fa39 	bl	8002ea0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003a2e:	f107 0308 	add.w	r3, r7, #8
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 f866 	bl	8003b04 <prvSampleTimeNow>
 8003a38:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8003a3a:	68bb      	ldr	r3, [r7, #8]
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d130      	bne.n	8003aa2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d10a      	bne.n	8003a5c <prvProcessTimerOrBlockTask+0x3c>
 8003a46:	687a      	ldr	r2, [r7, #4]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d806      	bhi.n	8003a5c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8003a4e:	f7ff fa35 	bl	8002ebc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8003a52:	68f9      	ldr	r1, [r7, #12]
 8003a54:	6878      	ldr	r0, [r7, #4]
 8003a56:	f7ff ff85 	bl	8003964 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8003a5a:	e024      	b.n	8003aa6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d008      	beq.n	8003a74 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8003a62:	4b13      	ldr	r3, [pc, #76]	; (8003ab0 <prvProcessTimerOrBlockTask+0x90>)
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d101      	bne.n	8003a70 <prvProcessTimerOrBlockTask+0x50>
 8003a6c:	2301      	movs	r3, #1
 8003a6e:	e000      	b.n	8003a72 <prvProcessTimerOrBlockTask+0x52>
 8003a70:	2300      	movs	r3, #0
 8003a72:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8003a74:	4b0f      	ldr	r3, [pc, #60]	; (8003ab4 <prvProcessTimerOrBlockTask+0x94>)
 8003a76:	6818      	ldr	r0, [r3, #0]
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	1ad3      	subs	r3, r2, r3
 8003a7e:	683a      	ldr	r2, [r7, #0]
 8003a80:	4619      	mov	r1, r3
 8003a82:	f7fe fef9 	bl	8002878 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8003a86:	f7ff fa19 	bl	8002ebc <xTaskResumeAll>
 8003a8a:	4603      	mov	r3, r0
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10a      	bne.n	8003aa6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8003a90:	4b09      	ldr	r3, [pc, #36]	; (8003ab8 <prvProcessTimerOrBlockTask+0x98>)
 8003a92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a96:	601a      	str	r2, [r3, #0]
 8003a98:	f3bf 8f4f 	dsb	sy
 8003a9c:	f3bf 8f6f 	isb	sy
}
 8003aa0:	e001      	b.n	8003aa6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8003aa2:	f7ff fa0b 	bl	8002ebc <xTaskResumeAll>
}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
 8003aae:	bf00      	nop
 8003ab0:	20000dcc 	.word	0x20000dcc
 8003ab4:	20000dd0 	.word	0x20000dd0
 8003ab8:	e000ed04 	.word	0xe000ed04

08003abc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8003abc:	b480      	push	{r7}
 8003abe:	b085      	sub	sp, #20
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8003ac4:	4b0e      	ldr	r3, [pc, #56]	; (8003b00 <prvGetNextExpireTime+0x44>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d101      	bne.n	8003ad2 <prvGetNextExpireTime+0x16>
 8003ace:	2201      	movs	r2, #1
 8003ad0:	e000      	b.n	8003ad4 <prvGetNextExpireTime+0x18>
 8003ad2:	2200      	movs	r2, #0
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d105      	bne.n	8003aec <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003ae0:	4b07      	ldr	r3, [pc, #28]	; (8003b00 <prvGetNextExpireTime+0x44>)
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]
 8003aea:	e001      	b.n	8003af0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8003aec:	2300      	movs	r3, #0
 8003aee:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8003af0:	68fb      	ldr	r3, [r7, #12]
}
 8003af2:	4618      	mov	r0, r3
 8003af4:	3714      	adds	r7, #20
 8003af6:	46bd      	mov	sp, r7
 8003af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003afc:	4770      	bx	lr
 8003afe:	bf00      	nop
 8003b00:	20000dc8 	.word	0x20000dc8

08003b04 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8003b0c:	f7ff fa74 	bl	8002ff8 <xTaskGetTickCount>
 8003b10:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8003b12:	4b0b      	ldr	r3, [pc, #44]	; (8003b40 <prvSampleTimeNow+0x3c>)
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68fa      	ldr	r2, [r7, #12]
 8003b18:	429a      	cmp	r2, r3
 8003b1a:	d205      	bcs.n	8003b28 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8003b1c:	f000 f936 	bl	8003d8c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2201      	movs	r2, #1
 8003b24:	601a      	str	r2, [r3, #0]
 8003b26:	e002      	b.n	8003b2e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2200      	movs	r2, #0
 8003b2c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8003b2e:	4a04      	ldr	r2, [pc, #16]	; (8003b40 <prvSampleTimeNow+0x3c>)
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8003b34:	68fb      	ldr	r3, [r7, #12]
}
 8003b36:	4618      	mov	r0, r3
 8003b38:	3710      	adds	r7, #16
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	bf00      	nop
 8003b40:	20000dd8 	.word	0x20000dd8

08003b44 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8003b44:	b580      	push	{r7, lr}
 8003b46:	b086      	sub	sp, #24
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	60f8      	str	r0, [r7, #12]
 8003b4c:	60b9      	str	r1, [r7, #8]
 8003b4e:	607a      	str	r2, [r7, #4]
 8003b50:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8003b52:	2300      	movs	r3, #0
 8003b54:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	68ba      	ldr	r2, [r7, #8]
 8003b5a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	68fa      	ldr	r2, [r7, #12]
 8003b60:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8003b62:	68ba      	ldr	r2, [r7, #8]
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	429a      	cmp	r2, r3
 8003b68:	d812      	bhi.n	8003b90 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b6a:	687a      	ldr	r2, [r7, #4]
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	1ad2      	subs	r2, r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	429a      	cmp	r2, r3
 8003b76:	d302      	bcc.n	8003b7e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	617b      	str	r3, [r7, #20]
 8003b7c:	e01b      	b.n	8003bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <prvInsertTimerInActiveList+0x7c>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	3304      	adds	r3, #4
 8003b86:	4619      	mov	r1, r3
 8003b88:	4610      	mov	r0, r2
 8003b8a:	f7fe f95a 	bl	8001e42 <vListInsert>
 8003b8e:	e012      	b.n	8003bb6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8003b90:	687a      	ldr	r2, [r7, #4]
 8003b92:	683b      	ldr	r3, [r7, #0]
 8003b94:	429a      	cmp	r2, r3
 8003b96:	d206      	bcs.n	8003ba6 <prvInsertTimerInActiveList+0x62>
 8003b98:	68ba      	ldr	r2, [r7, #8]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	429a      	cmp	r2, r3
 8003b9e:	d302      	bcc.n	8003ba6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	617b      	str	r3, [r7, #20]
 8003ba4:	e007      	b.n	8003bb6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003ba6:	4b07      	ldr	r3, [pc, #28]	; (8003bc4 <prvInsertTimerInActiveList+0x80>)
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	3304      	adds	r3, #4
 8003bae:	4619      	mov	r1, r3
 8003bb0:	4610      	mov	r0, r2
 8003bb2:	f7fe f946 	bl	8001e42 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8003bb6:	697b      	ldr	r3, [r7, #20]
}
 8003bb8:	4618      	mov	r0, r3
 8003bba:	3718      	adds	r7, #24
 8003bbc:	46bd      	mov	sp, r7
 8003bbe:	bd80      	pop	{r7, pc}
 8003bc0:	20000dcc 	.word	0x20000dcc
 8003bc4:	20000dc8 	.word	0x20000dc8

08003bc8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08e      	sub	sp, #56	; 0x38
 8003bcc:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003bce:	e0ca      	b.n	8003d66 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	da18      	bge.n	8003c08 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8003bd6:	1d3b      	adds	r3, r7, #4
 8003bd8:	3304      	adds	r3, #4
 8003bda:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8003bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bde:	2b00      	cmp	r3, #0
 8003be0:	d10a      	bne.n	8003bf8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8003be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be6:	f383 8811 	msr	BASEPRI, r3
 8003bea:	f3bf 8f6f 	isb	sy
 8003bee:	f3bf 8f4f 	dsb	sy
 8003bf2:	61fb      	str	r3, [r7, #28]
}
 8003bf4:	bf00      	nop
 8003bf6:	e7fe      	b.n	8003bf6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8003bf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003bfe:	6850      	ldr	r0, [r2, #4]
 8003c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c02:	6892      	ldr	r2, [r2, #8]
 8003c04:	4611      	mov	r1, r2
 8003c06:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	f2c0 80aa 	blt.w	8003d64 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8003c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c16:	695b      	ldr	r3, [r3, #20]
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d004      	beq.n	8003c26 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c1e:	3304      	adds	r3, #4
 8003c20:	4618      	mov	r0, r3
 8003c22:	f7fe f947 	bl	8001eb4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8003c26:	463b      	mov	r3, r7
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f7ff ff6b 	bl	8003b04 <prvSampleTimeNow>
 8003c2e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2b09      	cmp	r3, #9
 8003c34:	f200 8097 	bhi.w	8003d66 <prvProcessReceivedCommands+0x19e>
 8003c38:	a201      	add	r2, pc, #4	; (adr r2, 8003c40 <prvProcessReceivedCommands+0x78>)
 8003c3a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c3e:	bf00      	nop
 8003c40:	08003c69 	.word	0x08003c69
 8003c44:	08003c69 	.word	0x08003c69
 8003c48:	08003c69 	.word	0x08003c69
 8003c4c:	08003cdd 	.word	0x08003cdd
 8003c50:	08003cf1 	.word	0x08003cf1
 8003c54:	08003d3b 	.word	0x08003d3b
 8003c58:	08003c69 	.word	0x08003c69
 8003c5c:	08003c69 	.word	0x08003c69
 8003c60:	08003cdd 	.word	0x08003cdd
 8003c64:	08003cf1 	.word	0x08003cf1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c6a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	b2da      	uxtb	r2, r3
 8003c74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c76:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7e:	699b      	ldr	r3, [r3, #24]
 8003c80:	18d1      	adds	r1, r2, r3
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003c86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c88:	f7ff ff5c 	bl	8003b44 <prvInsertTimerInActiveList>
 8003c8c:	4603      	mov	r3, r0
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d069      	beq.n	8003d66 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003c92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c94:	6a1b      	ldr	r3, [r3, #32]
 8003c96:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003c98:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d05e      	beq.n	8003d66 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8003ca8:	68ba      	ldr	r2, [r7, #8]
 8003caa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cac:	699b      	ldr	r3, [r3, #24]
 8003cae:	441a      	add	r2, r3
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	9300      	str	r3, [sp, #0]
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	2100      	movs	r1, #0
 8003cb8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003cba:	f7ff fe05 	bl	80038c8 <xTimerGenericCommand>
 8003cbe:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8003cc0:	6a3b      	ldr	r3, [r7, #32]
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d14f      	bne.n	8003d66 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8003cc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cca:	f383 8811 	msr	BASEPRI, r3
 8003cce:	f3bf 8f6f 	isb	sy
 8003cd2:	f3bf 8f4f 	dsb	sy
 8003cd6:	61bb      	str	r3, [r7, #24]
}
 8003cd8:	bf00      	nop
 8003cda:	e7fe      	b.n	8003cda <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003cdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cde:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003ce2:	f023 0301 	bic.w	r3, r3, #1
 8003ce6:	b2da      	uxtb	r2, r3
 8003ce8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cea:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8003cee:	e03a      	b.n	8003d66 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8003cf0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cf2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003cf6:	f043 0301 	orr.w	r3, r3, #1
 8003cfa:	b2da      	uxtb	r2, r3
 8003cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cfe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d06:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8003d08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d0a:	699b      	ldr	r3, [r3, #24]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d10a      	bne.n	8003d26 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8003d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d14:	f383 8811 	msr	BASEPRI, r3
 8003d18:	f3bf 8f6f 	isb	sy
 8003d1c:	f3bf 8f4f 	dsb	sy
 8003d20:	617b      	str	r3, [r7, #20]
}
 8003d22:	bf00      	nop
 8003d24:	e7fe      	b.n	8003d24 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8003d26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d2c:	18d1      	adds	r1, r2, r3
 8003d2e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003d32:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d34:	f7ff ff06 	bl	8003b44 <prvInsertTimerInActiveList>
					break;
 8003d38:	e015      	b.n	8003d66 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8003d3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d3c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d40:	f003 0302 	and.w	r3, r3, #2
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	d103      	bne.n	8003d50 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8003d48:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003d4a:	f000 fbe1 	bl	8004510 <vPortFree>
 8003d4e:	e00a      	b.n	8003d66 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8003d50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d52:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003d56:	f023 0301 	bic.w	r3, r3, #1
 8003d5a:	b2da      	uxtb	r2, r3
 8003d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003d5e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8003d62:	e000      	b.n	8003d66 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8003d64:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8003d66:	4b08      	ldr	r3, [pc, #32]	; (8003d88 <prvProcessReceivedCommands+0x1c0>)
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	1d39      	adds	r1, r7, #4
 8003d6c:	2200      	movs	r2, #0
 8003d6e:	4618      	mov	r0, r3
 8003d70:	f7fe fb68 	bl	8002444 <xQueueReceive>
 8003d74:	4603      	mov	r3, r0
 8003d76:	2b00      	cmp	r3, #0
 8003d78:	f47f af2a 	bne.w	8003bd0 <prvProcessReceivedCommands+0x8>
	}
}
 8003d7c:	bf00      	nop
 8003d7e:	bf00      	nop
 8003d80:	3730      	adds	r7, #48	; 0x30
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bd80      	pop	{r7, pc}
 8003d86:	bf00      	nop
 8003d88:	20000dd0 	.word	0x20000dd0

08003d8c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b088      	sub	sp, #32
 8003d90:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003d92:	e048      	b.n	8003e26 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8003d94:	4b2d      	ldr	r3, [pc, #180]	; (8003e4c <prvSwitchTimerLists+0xc0>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003d9e:	4b2b      	ldr	r3, [pc, #172]	; (8003e4c <prvSwitchTimerLists+0xc0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68db      	ldr	r3, [r3, #12]
 8003da4:	68db      	ldr	r3, [r3, #12]
 8003da6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3304      	adds	r3, #4
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fe f881 	bl	8001eb4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	6a1b      	ldr	r3, [r3, #32]
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8003dc0:	f003 0304 	and.w	r3, r3, #4
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d02e      	beq.n	8003e26 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	699b      	ldr	r3, [r3, #24]
 8003dcc:	693a      	ldr	r2, [r7, #16]
 8003dce:	4413      	add	r3, r2
 8003dd0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8003dd2:	68ba      	ldr	r2, [r7, #8]
 8003dd4:	693b      	ldr	r3, [r7, #16]
 8003dd6:	429a      	cmp	r2, r3
 8003dd8:	d90e      	bls.n	8003df8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	68ba      	ldr	r2, [r7, #8]
 8003dde:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	68fa      	ldr	r2, [r7, #12]
 8003de4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8003de6:	4b19      	ldr	r3, [pc, #100]	; (8003e4c <prvSwitchTimerLists+0xc0>)
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	3304      	adds	r3, #4
 8003dee:	4619      	mov	r1, r3
 8003df0:	4610      	mov	r0, r2
 8003df2:	f7fe f826 	bl	8001e42 <vListInsert>
 8003df6:	e016      	b.n	8003e26 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	693a      	ldr	r2, [r7, #16]
 8003e00:	2100      	movs	r1, #0
 8003e02:	68f8      	ldr	r0, [r7, #12]
 8003e04:	f7ff fd60 	bl	80038c8 <xTimerGenericCommand>
 8003e08:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d10a      	bne.n	8003e26 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8003e10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e14:	f383 8811 	msr	BASEPRI, r3
 8003e18:	f3bf 8f6f 	isb	sy
 8003e1c:	f3bf 8f4f 	dsb	sy
 8003e20:	603b      	str	r3, [r7, #0]
}
 8003e22:	bf00      	nop
 8003e24:	e7fe      	b.n	8003e24 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8003e26:	4b09      	ldr	r3, [pc, #36]	; (8003e4c <prvSwitchTimerLists+0xc0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d1b1      	bne.n	8003d94 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8003e30:	4b06      	ldr	r3, [pc, #24]	; (8003e4c <prvSwitchTimerLists+0xc0>)
 8003e32:	681b      	ldr	r3, [r3, #0]
 8003e34:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <prvSwitchTimerLists+0xc4>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	4a04      	ldr	r2, [pc, #16]	; (8003e4c <prvSwitchTimerLists+0xc0>)
 8003e3c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8003e3e:	4a04      	ldr	r2, [pc, #16]	; (8003e50 <prvSwitchTimerLists+0xc4>)
 8003e40:	697b      	ldr	r3, [r7, #20]
 8003e42:	6013      	str	r3, [r2, #0]
}
 8003e44:	bf00      	nop
 8003e46:	3718      	adds	r7, #24
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}
 8003e4c:	20000dc8 	.word	0x20000dc8
 8003e50:	20000dcc 	.word	0x20000dcc

08003e54 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b082      	sub	sp, #8
 8003e58:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8003e5a:	f000 f96b 	bl	8004134 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8003e5e:	4b15      	ldr	r3, [pc, #84]	; (8003eb4 <prvCheckForValidListAndQueue+0x60>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	2b00      	cmp	r3, #0
 8003e64:	d120      	bne.n	8003ea8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8003e66:	4814      	ldr	r0, [pc, #80]	; (8003eb8 <prvCheckForValidListAndQueue+0x64>)
 8003e68:	f7fd ff9a 	bl	8001da0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8003e6c:	4813      	ldr	r0, [pc, #76]	; (8003ebc <prvCheckForValidListAndQueue+0x68>)
 8003e6e:	f7fd ff97 	bl	8001da0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8003e72:	4b13      	ldr	r3, [pc, #76]	; (8003ec0 <prvCheckForValidListAndQueue+0x6c>)
 8003e74:	4a10      	ldr	r2, [pc, #64]	; (8003eb8 <prvCheckForValidListAndQueue+0x64>)
 8003e76:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8003e78:	4b12      	ldr	r3, [pc, #72]	; (8003ec4 <prvCheckForValidListAndQueue+0x70>)
 8003e7a:	4a10      	ldr	r2, [pc, #64]	; (8003ebc <prvCheckForValidListAndQueue+0x68>)
 8003e7c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8003e7e:	2300      	movs	r3, #0
 8003e80:	9300      	str	r3, [sp, #0]
 8003e82:	4b11      	ldr	r3, [pc, #68]	; (8003ec8 <prvCheckForValidListAndQueue+0x74>)
 8003e84:	4a11      	ldr	r2, [pc, #68]	; (8003ecc <prvCheckForValidListAndQueue+0x78>)
 8003e86:	2110      	movs	r1, #16
 8003e88:	200a      	movs	r0, #10
 8003e8a:	f7fe f8a5 	bl	8001fd8 <xQueueGenericCreateStatic>
 8003e8e:	4603      	mov	r3, r0
 8003e90:	4a08      	ldr	r2, [pc, #32]	; (8003eb4 <prvCheckForValidListAndQueue+0x60>)
 8003e92:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8003e94:	4b07      	ldr	r3, [pc, #28]	; (8003eb4 <prvCheckForValidListAndQueue+0x60>)
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	d005      	beq.n	8003ea8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8003e9c:	4b05      	ldr	r3, [pc, #20]	; (8003eb4 <prvCheckForValidListAndQueue+0x60>)
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	490b      	ldr	r1, [pc, #44]	; (8003ed0 <prvCheckForValidListAndQueue+0x7c>)
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	f7fe fcbe 	bl	8002824 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ea8:	f000 f974 	bl	8004194 <vPortExitCritical>
}
 8003eac:	bf00      	nop
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}
 8003eb2:	bf00      	nop
 8003eb4:	20000dd0 	.word	0x20000dd0
 8003eb8:	20000da0 	.word	0x20000da0
 8003ebc:	20000db4 	.word	0x20000db4
 8003ec0:	20000dc8 	.word	0x20000dc8
 8003ec4:	20000dcc 	.word	0x20000dcc
 8003ec8:	20000e7c 	.word	0x20000e7c
 8003ecc:	20000ddc 	.word	0x20000ddc
 8003ed0:	08004980 	.word	0x08004980

08003ed4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8003ed4:	b480      	push	{r7}
 8003ed6:	b085      	sub	sp, #20
 8003ed8:	af00      	add	r7, sp, #0
 8003eda:	60f8      	str	r0, [r7, #12]
 8003edc:	60b9      	str	r1, [r7, #8]
 8003ede:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	3b04      	subs	r3, #4
 8003ee4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8003eec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	3b04      	subs	r3, #4
 8003ef2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	f023 0201 	bic.w	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	3b04      	subs	r3, #4
 8003f02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8003f04:	4a0c      	ldr	r2, [pc, #48]	; (8003f38 <pxPortInitialiseStack+0x64>)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	3b14      	subs	r3, #20
 8003f0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8003f10:	687a      	ldr	r2, [r7, #4]
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	3b04      	subs	r3, #4
 8003f1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f06f 0202 	mvn.w	r2, #2
 8003f22:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	3b20      	subs	r3, #32
 8003f28:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
}
 8003f2c:	4618      	mov	r0, r3
 8003f2e:	3714      	adds	r7, #20
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr
 8003f38:	08003f3d 	.word	0x08003f3d

08003f3c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8003f3c:	b480      	push	{r7}
 8003f3e:	b085      	sub	sp, #20
 8003f40:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8003f42:	2300      	movs	r3, #0
 8003f44:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8003f46:	4b12      	ldr	r3, [pc, #72]	; (8003f90 <prvTaskExitError+0x54>)
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f4e:	d00a      	beq.n	8003f66 <prvTaskExitError+0x2a>
	__asm volatile
 8003f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f54:	f383 8811 	msr	BASEPRI, r3
 8003f58:	f3bf 8f6f 	isb	sy
 8003f5c:	f3bf 8f4f 	dsb	sy
 8003f60:	60fb      	str	r3, [r7, #12]
}
 8003f62:	bf00      	nop
 8003f64:	e7fe      	b.n	8003f64 <prvTaskExitError+0x28>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	60bb      	str	r3, [r7, #8]
}
 8003f78:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8003f7a:	bf00      	nop
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d0fc      	beq.n	8003f7c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8003f82:	bf00      	nop
 8003f84:	bf00      	nop
 8003f86:	3714      	adds	r7, #20
 8003f88:	46bd      	mov	sp, r7
 8003f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8e:	4770      	bx	lr
 8003f90:	2000000c 	.word	0x2000000c
	...

08003fa0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8003fa0:	4b07      	ldr	r3, [pc, #28]	; (8003fc0 <pxCurrentTCBConst2>)
 8003fa2:	6819      	ldr	r1, [r3, #0]
 8003fa4:	6808      	ldr	r0, [r1, #0]
 8003fa6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003faa:	f380 8809 	msr	PSP, r0
 8003fae:	f3bf 8f6f 	isb	sy
 8003fb2:	f04f 0000 	mov.w	r0, #0
 8003fb6:	f380 8811 	msr	BASEPRI, r0
 8003fba:	4770      	bx	lr
 8003fbc:	f3af 8000 	nop.w

08003fc0 <pxCurrentTCBConst2>:
 8003fc0:	200008a0 	.word	0x200008a0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8003fc4:	bf00      	nop
 8003fc6:	bf00      	nop

08003fc8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8003fc8:	4808      	ldr	r0, [pc, #32]	; (8003fec <prvPortStartFirstTask+0x24>)
 8003fca:	6800      	ldr	r0, [r0, #0]
 8003fcc:	6800      	ldr	r0, [r0, #0]
 8003fce:	f380 8808 	msr	MSP, r0
 8003fd2:	f04f 0000 	mov.w	r0, #0
 8003fd6:	f380 8814 	msr	CONTROL, r0
 8003fda:	b662      	cpsie	i
 8003fdc:	b661      	cpsie	f
 8003fde:	f3bf 8f4f 	dsb	sy
 8003fe2:	f3bf 8f6f 	isb	sy
 8003fe6:	df00      	svc	0
 8003fe8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8003fea:	bf00      	nop
 8003fec:	e000ed08 	.word	0xe000ed08

08003ff0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b086      	sub	sp, #24
 8003ff4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8003ff6:	4b46      	ldr	r3, [pc, #280]	; (8004110 <xPortStartScheduler+0x120>)
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	4a46      	ldr	r2, [pc, #280]	; (8004114 <xPortStartScheduler+0x124>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d10a      	bne.n	8004016 <xPortStartScheduler+0x26>
	__asm volatile
 8004000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004004:	f383 8811 	msr	BASEPRI, r3
 8004008:	f3bf 8f6f 	isb	sy
 800400c:	f3bf 8f4f 	dsb	sy
 8004010:	613b      	str	r3, [r7, #16]
}
 8004012:	bf00      	nop
 8004014:	e7fe      	b.n	8004014 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004016:	4b3e      	ldr	r3, [pc, #248]	; (8004110 <xPortStartScheduler+0x120>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	4a3f      	ldr	r2, [pc, #252]	; (8004118 <xPortStartScheduler+0x128>)
 800401c:	4293      	cmp	r3, r2
 800401e:	d10a      	bne.n	8004036 <xPortStartScheduler+0x46>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	60fb      	str	r3, [r7, #12]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004036:	4b39      	ldr	r3, [pc, #228]	; (800411c <xPortStartScheduler+0x12c>)
 8004038:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800403a:	697b      	ldr	r3, [r7, #20]
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	b2db      	uxtb	r3, r3
 8004040:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004042:	697b      	ldr	r3, [r7, #20]
 8004044:	22ff      	movs	r2, #255	; 0xff
 8004046:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004048:	697b      	ldr	r3, [r7, #20]
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	b2db      	uxtb	r3, r3
 800404e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004050:	78fb      	ldrb	r3, [r7, #3]
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004058:	b2da      	uxtb	r2, r3
 800405a:	4b31      	ldr	r3, [pc, #196]	; (8004120 <xPortStartScheduler+0x130>)
 800405c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800405e:	4b31      	ldr	r3, [pc, #196]	; (8004124 <xPortStartScheduler+0x134>)
 8004060:	2207      	movs	r2, #7
 8004062:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004064:	e009      	b.n	800407a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004066:	4b2f      	ldr	r3, [pc, #188]	; (8004124 <xPortStartScheduler+0x134>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	3b01      	subs	r3, #1
 800406c:	4a2d      	ldr	r2, [pc, #180]	; (8004124 <xPortStartScheduler+0x134>)
 800406e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004070:	78fb      	ldrb	r3, [r7, #3]
 8004072:	b2db      	uxtb	r3, r3
 8004074:	005b      	lsls	r3, r3, #1
 8004076:	b2db      	uxtb	r3, r3
 8004078:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800407a:	78fb      	ldrb	r3, [r7, #3]
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004082:	2b80      	cmp	r3, #128	; 0x80
 8004084:	d0ef      	beq.n	8004066 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004086:	4b27      	ldr	r3, [pc, #156]	; (8004124 <xPortStartScheduler+0x134>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f1c3 0307 	rsb	r3, r3, #7
 800408e:	2b04      	cmp	r3, #4
 8004090:	d00a      	beq.n	80040a8 <xPortStartScheduler+0xb8>
	__asm volatile
 8004092:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004096:	f383 8811 	msr	BASEPRI, r3
 800409a:	f3bf 8f6f 	isb	sy
 800409e:	f3bf 8f4f 	dsb	sy
 80040a2:	60bb      	str	r3, [r7, #8]
}
 80040a4:	bf00      	nop
 80040a6:	e7fe      	b.n	80040a6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80040a8:	4b1e      	ldr	r3, [pc, #120]	; (8004124 <xPortStartScheduler+0x134>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	021b      	lsls	r3, r3, #8
 80040ae:	4a1d      	ldr	r2, [pc, #116]	; (8004124 <xPortStartScheduler+0x134>)
 80040b0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80040b2:	4b1c      	ldr	r3, [pc, #112]	; (8004124 <xPortStartScheduler+0x134>)
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80040ba:	4a1a      	ldr	r2, [pc, #104]	; (8004124 <xPortStartScheduler+0x134>)
 80040bc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	b2da      	uxtb	r2, r3
 80040c2:	697b      	ldr	r3, [r7, #20]
 80040c4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80040c6:	4b18      	ldr	r3, [pc, #96]	; (8004128 <xPortStartScheduler+0x138>)
 80040c8:	681b      	ldr	r3, [r3, #0]
 80040ca:	4a17      	ldr	r2, [pc, #92]	; (8004128 <xPortStartScheduler+0x138>)
 80040cc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040d0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80040d2:	4b15      	ldr	r3, [pc, #84]	; (8004128 <xPortStartScheduler+0x138>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a14      	ldr	r2, [pc, #80]	; (8004128 <xPortStartScheduler+0x138>)
 80040d8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80040dc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80040de:	f000 f8dd 	bl	800429c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80040e2:	4b12      	ldr	r3, [pc, #72]	; (800412c <xPortStartScheduler+0x13c>)
 80040e4:	2200      	movs	r2, #0
 80040e6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80040e8:	f000 f8fc 	bl	80042e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80040ec:	4b10      	ldr	r3, [pc, #64]	; (8004130 <xPortStartScheduler+0x140>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	4a0f      	ldr	r2, [pc, #60]	; (8004130 <xPortStartScheduler+0x140>)
 80040f2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80040f6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80040f8:	f7ff ff66 	bl	8003fc8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80040fc:	f7ff f846 	bl	800318c <vTaskSwitchContext>
	prvTaskExitError();
 8004100:	f7ff ff1c 	bl	8003f3c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004104:	2300      	movs	r3, #0
}
 8004106:	4618      	mov	r0, r3
 8004108:	3718      	adds	r7, #24
 800410a:	46bd      	mov	sp, r7
 800410c:	bd80      	pop	{r7, pc}
 800410e:	bf00      	nop
 8004110:	e000ed00 	.word	0xe000ed00
 8004114:	410fc271 	.word	0x410fc271
 8004118:	410fc270 	.word	0x410fc270
 800411c:	e000e400 	.word	0xe000e400
 8004120:	20000ecc 	.word	0x20000ecc
 8004124:	20000ed0 	.word	0x20000ed0
 8004128:	e000ed20 	.word	0xe000ed20
 800412c:	2000000c 	.word	0x2000000c
 8004130:	e000ef34 	.word	0xe000ef34

08004134 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
	__asm volatile
 800413a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413e:	f383 8811 	msr	BASEPRI, r3
 8004142:	f3bf 8f6f 	isb	sy
 8004146:	f3bf 8f4f 	dsb	sy
 800414a:	607b      	str	r3, [r7, #4]
}
 800414c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800414e:	4b0f      	ldr	r3, [pc, #60]	; (800418c <vPortEnterCritical+0x58>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	3301      	adds	r3, #1
 8004154:	4a0d      	ldr	r2, [pc, #52]	; (800418c <vPortEnterCritical+0x58>)
 8004156:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004158:	4b0c      	ldr	r3, [pc, #48]	; (800418c <vPortEnterCritical+0x58>)
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d10f      	bne.n	8004180 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004160:	4b0b      	ldr	r3, [pc, #44]	; (8004190 <vPortEnterCritical+0x5c>)
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	b2db      	uxtb	r3, r3
 8004166:	2b00      	cmp	r3, #0
 8004168:	d00a      	beq.n	8004180 <vPortEnterCritical+0x4c>
	__asm volatile
 800416a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416e:	f383 8811 	msr	BASEPRI, r3
 8004172:	f3bf 8f6f 	isb	sy
 8004176:	f3bf 8f4f 	dsb	sy
 800417a:	603b      	str	r3, [r7, #0]
}
 800417c:	bf00      	nop
 800417e:	e7fe      	b.n	800417e <vPortEnterCritical+0x4a>
	}
}
 8004180:	bf00      	nop
 8004182:	370c      	adds	r7, #12
 8004184:	46bd      	mov	sp, r7
 8004186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418a:	4770      	bx	lr
 800418c:	2000000c 	.word	0x2000000c
 8004190:	e000ed04 	.word	0xe000ed04

08004194 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004194:	b480      	push	{r7}
 8004196:	b083      	sub	sp, #12
 8004198:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800419a:	4b12      	ldr	r3, [pc, #72]	; (80041e4 <vPortExitCritical+0x50>)
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d10a      	bne.n	80041b8 <vPortExitCritical+0x24>
	__asm volatile
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	607b      	str	r3, [r7, #4]
}
 80041b4:	bf00      	nop
 80041b6:	e7fe      	b.n	80041b6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80041b8:	4b0a      	ldr	r3, [pc, #40]	; (80041e4 <vPortExitCritical+0x50>)
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	3b01      	subs	r3, #1
 80041be:	4a09      	ldr	r2, [pc, #36]	; (80041e4 <vPortExitCritical+0x50>)
 80041c0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80041c2:	4b08      	ldr	r3, [pc, #32]	; (80041e4 <vPortExitCritical+0x50>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d105      	bne.n	80041d6 <vPortExitCritical+0x42>
 80041ca:	2300      	movs	r3, #0
 80041cc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	f383 8811 	msr	BASEPRI, r3
}
 80041d4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80041d6:	bf00      	nop
 80041d8:	370c      	adds	r7, #12
 80041da:	46bd      	mov	sp, r7
 80041dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	2000000c 	.word	0x2000000c
	...

080041f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80041f0:	f3ef 8009 	mrs	r0, PSP
 80041f4:	f3bf 8f6f 	isb	sy
 80041f8:	4b15      	ldr	r3, [pc, #84]	; (8004250 <pxCurrentTCBConst>)
 80041fa:	681a      	ldr	r2, [r3, #0]
 80041fc:	f01e 0f10 	tst.w	lr, #16
 8004200:	bf08      	it	eq
 8004202:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004206:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800420a:	6010      	str	r0, [r2, #0]
 800420c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004210:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004214:	f380 8811 	msr	BASEPRI, r0
 8004218:	f3bf 8f4f 	dsb	sy
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f7fe ffb4 	bl	800318c <vTaskSwitchContext>
 8004224:	f04f 0000 	mov.w	r0, #0
 8004228:	f380 8811 	msr	BASEPRI, r0
 800422c:	bc09      	pop	{r0, r3}
 800422e:	6819      	ldr	r1, [r3, #0]
 8004230:	6808      	ldr	r0, [r1, #0]
 8004232:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004236:	f01e 0f10 	tst.w	lr, #16
 800423a:	bf08      	it	eq
 800423c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004240:	f380 8809 	msr	PSP, r0
 8004244:	f3bf 8f6f 	isb	sy
 8004248:	4770      	bx	lr
 800424a:	bf00      	nop
 800424c:	f3af 8000 	nop.w

08004250 <pxCurrentTCBConst>:
 8004250:	200008a0 	.word	0x200008a0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004254:	bf00      	nop
 8004256:	bf00      	nop

08004258 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004258:	b580      	push	{r7, lr}
 800425a:	b082      	sub	sp, #8
 800425c:	af00      	add	r7, sp, #0
	__asm volatile
 800425e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004262:	f383 8811 	msr	BASEPRI, r3
 8004266:	f3bf 8f6f 	isb	sy
 800426a:	f3bf 8f4f 	dsb	sy
 800426e:	607b      	str	r3, [r7, #4]
}
 8004270:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004272:	f7fe fed1 	bl	8003018 <xTaskIncrementTick>
 8004276:	4603      	mov	r3, r0
 8004278:	2b00      	cmp	r3, #0
 800427a:	d003      	beq.n	8004284 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800427c:	4b06      	ldr	r3, [pc, #24]	; (8004298 <xPortSysTickHandler+0x40>)
 800427e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004282:	601a      	str	r2, [r3, #0]
 8004284:	2300      	movs	r3, #0
 8004286:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	f383 8811 	msr	BASEPRI, r3
}
 800428e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004290:	bf00      	nop
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}
 8004298:	e000ed04 	.word	0xe000ed04

0800429c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800429c:	b480      	push	{r7}
 800429e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80042a0:	4b0b      	ldr	r3, [pc, #44]	; (80042d0 <vPortSetupTimerInterrupt+0x34>)
 80042a2:	2200      	movs	r2, #0
 80042a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80042a6:	4b0b      	ldr	r3, [pc, #44]	; (80042d4 <vPortSetupTimerInterrupt+0x38>)
 80042a8:	2200      	movs	r2, #0
 80042aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80042ac:	4b0a      	ldr	r3, [pc, #40]	; (80042d8 <vPortSetupTimerInterrupt+0x3c>)
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	4a0a      	ldr	r2, [pc, #40]	; (80042dc <vPortSetupTimerInterrupt+0x40>)
 80042b2:	fba2 2303 	umull	r2, r3, r2, r3
 80042b6:	099b      	lsrs	r3, r3, #6
 80042b8:	4a09      	ldr	r2, [pc, #36]	; (80042e0 <vPortSetupTimerInterrupt+0x44>)
 80042ba:	3b01      	subs	r3, #1
 80042bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80042be:	4b04      	ldr	r3, [pc, #16]	; (80042d0 <vPortSetupTimerInterrupt+0x34>)
 80042c0:	2207      	movs	r2, #7
 80042c2:	601a      	str	r2, [r3, #0]
}
 80042c4:	bf00      	nop
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	e000e010 	.word	0xe000e010
 80042d4:	e000e018 	.word	0xe000e018
 80042d8:	20000000 	.word	0x20000000
 80042dc:	10624dd3 	.word	0x10624dd3
 80042e0:	e000e014 	.word	0xe000e014

080042e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80042e4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80042f4 <vPortEnableVFP+0x10>
 80042e8:	6801      	ldr	r1, [r0, #0]
 80042ea:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80042ee:	6001      	str	r1, [r0, #0]
 80042f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80042f2:	bf00      	nop
 80042f4:	e000ed88 	.word	0xe000ed88

080042f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80042f8:	b480      	push	{r7}
 80042fa:	b085      	sub	sp, #20
 80042fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80042fe:	f3ef 8305 	mrs	r3, IPSR
 8004302:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2b0f      	cmp	r3, #15
 8004308:	d914      	bls.n	8004334 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800430a:	4a17      	ldr	r2, [pc, #92]	; (8004368 <vPortValidateInterruptPriority+0x70>)
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	4413      	add	r3, r2
 8004310:	781b      	ldrb	r3, [r3, #0]
 8004312:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004314:	4b15      	ldr	r3, [pc, #84]	; (800436c <vPortValidateInterruptPriority+0x74>)
 8004316:	781b      	ldrb	r3, [r3, #0]
 8004318:	7afa      	ldrb	r2, [r7, #11]
 800431a:	429a      	cmp	r2, r3
 800431c:	d20a      	bcs.n	8004334 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800431e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004322:	f383 8811 	msr	BASEPRI, r3
 8004326:	f3bf 8f6f 	isb	sy
 800432a:	f3bf 8f4f 	dsb	sy
 800432e:	607b      	str	r3, [r7, #4]
}
 8004330:	bf00      	nop
 8004332:	e7fe      	b.n	8004332 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004334:	4b0e      	ldr	r3, [pc, #56]	; (8004370 <vPortValidateInterruptPriority+0x78>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800433c:	4b0d      	ldr	r3, [pc, #52]	; (8004374 <vPortValidateInterruptPriority+0x7c>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	429a      	cmp	r2, r3
 8004342:	d90a      	bls.n	800435a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004348:	f383 8811 	msr	BASEPRI, r3
 800434c:	f3bf 8f6f 	isb	sy
 8004350:	f3bf 8f4f 	dsb	sy
 8004354:	603b      	str	r3, [r7, #0]
}
 8004356:	bf00      	nop
 8004358:	e7fe      	b.n	8004358 <vPortValidateInterruptPriority+0x60>
	}
 800435a:	bf00      	nop
 800435c:	3714      	adds	r7, #20
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	e000e3f0 	.word	0xe000e3f0
 800436c:	20000ecc 	.word	0x20000ecc
 8004370:	e000ed0c 	.word	0xe000ed0c
 8004374:	20000ed0 	.word	0x20000ed0

08004378 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b08a      	sub	sp, #40	; 0x28
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004380:	2300      	movs	r3, #0
 8004382:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004384:	f7fe fd8c 	bl	8002ea0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004388:	4b5b      	ldr	r3, [pc, #364]	; (80044f8 <pvPortMalloc+0x180>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	2b00      	cmp	r3, #0
 800438e:	d101      	bne.n	8004394 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004390:	f000 f920 	bl	80045d4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004394:	4b59      	ldr	r3, [pc, #356]	; (80044fc <pvPortMalloc+0x184>)
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	f040 8093 	bne.w	80044c8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d01d      	beq.n	80043e4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80043a8:	2208      	movs	r2, #8
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	4413      	add	r3, r2
 80043ae:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f003 0307 	and.w	r3, r3, #7
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d014      	beq.n	80043e4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	f023 0307 	bic.w	r3, r3, #7
 80043c0:	3308      	adds	r3, #8
 80043c2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	f003 0307 	and.w	r3, r3, #7
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d00a      	beq.n	80043e4 <pvPortMalloc+0x6c>
	__asm volatile
 80043ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043d2:	f383 8811 	msr	BASEPRI, r3
 80043d6:	f3bf 8f6f 	isb	sy
 80043da:	f3bf 8f4f 	dsb	sy
 80043de:	617b      	str	r3, [r7, #20]
}
 80043e0:	bf00      	nop
 80043e2:	e7fe      	b.n	80043e2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d06e      	beq.n	80044c8 <pvPortMalloc+0x150>
 80043ea:	4b45      	ldr	r3, [pc, #276]	; (8004500 <pvPortMalloc+0x188>)
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	687a      	ldr	r2, [r7, #4]
 80043f0:	429a      	cmp	r2, r3
 80043f2:	d869      	bhi.n	80044c8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80043f4:	4b43      	ldr	r3, [pc, #268]	; (8004504 <pvPortMalloc+0x18c>)
 80043f6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80043f8:	4b42      	ldr	r3, [pc, #264]	; (8004504 <pvPortMalloc+0x18c>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80043fe:	e004      	b.n	800440a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004400:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004402:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004404:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800440a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440c:	685b      	ldr	r3, [r3, #4]
 800440e:	687a      	ldr	r2, [r7, #4]
 8004410:	429a      	cmp	r2, r3
 8004412:	d903      	bls.n	800441c <pvPortMalloc+0xa4>
 8004414:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d1f1      	bne.n	8004400 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800441c:	4b36      	ldr	r3, [pc, #216]	; (80044f8 <pvPortMalloc+0x180>)
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004422:	429a      	cmp	r2, r3
 8004424:	d050      	beq.n	80044c8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004426:	6a3b      	ldr	r3, [r7, #32]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2208      	movs	r2, #8
 800442c:	4413      	add	r3, r2
 800442e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004430:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004432:	681a      	ldr	r2, [r3, #0]
 8004434:	6a3b      	ldr	r3, [r7, #32]
 8004436:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004438:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	1ad2      	subs	r2, r2, r3
 8004440:	2308      	movs	r3, #8
 8004442:	005b      	lsls	r3, r3, #1
 8004444:	429a      	cmp	r2, r3
 8004446:	d91f      	bls.n	8004488 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	4413      	add	r3, r2
 800444e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004450:	69bb      	ldr	r3, [r7, #24]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	2b00      	cmp	r3, #0
 8004458:	d00a      	beq.n	8004470 <pvPortMalloc+0xf8>
	__asm volatile
 800445a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800445e:	f383 8811 	msr	BASEPRI, r3
 8004462:	f3bf 8f6f 	isb	sy
 8004466:	f3bf 8f4f 	dsb	sy
 800446a:	613b      	str	r3, [r7, #16]
}
 800446c:	bf00      	nop
 800446e:	e7fe      	b.n	800446e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	1ad2      	subs	r2, r2, r3
 8004478:	69bb      	ldr	r3, [r7, #24]
 800447a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800447c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800447e:	687a      	ldr	r2, [r7, #4]
 8004480:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004482:	69b8      	ldr	r0, [r7, #24]
 8004484:	f000 f908 	bl	8004698 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004488:	4b1d      	ldr	r3, [pc, #116]	; (8004500 <pvPortMalloc+0x188>)
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800448e:	685b      	ldr	r3, [r3, #4]
 8004490:	1ad3      	subs	r3, r2, r3
 8004492:	4a1b      	ldr	r2, [pc, #108]	; (8004500 <pvPortMalloc+0x188>)
 8004494:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004496:	4b1a      	ldr	r3, [pc, #104]	; (8004500 <pvPortMalloc+0x188>)
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4b1b      	ldr	r3, [pc, #108]	; (8004508 <pvPortMalloc+0x190>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	429a      	cmp	r2, r3
 80044a0:	d203      	bcs.n	80044aa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80044a2:	4b17      	ldr	r3, [pc, #92]	; (8004500 <pvPortMalloc+0x188>)
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	4a18      	ldr	r2, [pc, #96]	; (8004508 <pvPortMalloc+0x190>)
 80044a8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80044aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ac:	685a      	ldr	r2, [r3, #4]
 80044ae:	4b13      	ldr	r3, [pc, #76]	; (80044fc <pvPortMalloc+0x184>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	431a      	orrs	r2, r3
 80044b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044b6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80044b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044ba:	2200      	movs	r2, #0
 80044bc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80044be:	4b13      	ldr	r3, [pc, #76]	; (800450c <pvPortMalloc+0x194>)
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	3301      	adds	r3, #1
 80044c4:	4a11      	ldr	r2, [pc, #68]	; (800450c <pvPortMalloc+0x194>)
 80044c6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80044c8:	f7fe fcf8 	bl	8002ebc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80044cc:	69fb      	ldr	r3, [r7, #28]
 80044ce:	f003 0307 	and.w	r3, r3, #7
 80044d2:	2b00      	cmp	r3, #0
 80044d4:	d00a      	beq.n	80044ec <pvPortMalloc+0x174>
	__asm volatile
 80044d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044da:	f383 8811 	msr	BASEPRI, r3
 80044de:	f3bf 8f6f 	isb	sy
 80044e2:	f3bf 8f4f 	dsb	sy
 80044e6:	60fb      	str	r3, [r7, #12]
}
 80044e8:	bf00      	nop
 80044ea:	e7fe      	b.n	80044ea <pvPortMalloc+0x172>
	return pvReturn;
 80044ec:	69fb      	ldr	r3, [r7, #28]
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	3728      	adds	r7, #40	; 0x28
 80044f2:	46bd      	mov	sp, r7
 80044f4:	bd80      	pop	{r7, pc}
 80044f6:	bf00      	nop
 80044f8:	20004adc 	.word	0x20004adc
 80044fc:	20004af0 	.word	0x20004af0
 8004500:	20004ae0 	.word	0x20004ae0
 8004504:	20004ad4 	.word	0x20004ad4
 8004508:	20004ae4 	.word	0x20004ae4
 800450c:	20004ae8 	.word	0x20004ae8

08004510 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d04d      	beq.n	80045be <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004522:	2308      	movs	r3, #8
 8004524:	425b      	negs	r3, r3
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4413      	add	r3, r2
 800452a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800452c:	697b      	ldr	r3, [r7, #20]
 800452e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004530:	693b      	ldr	r3, [r7, #16]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	4b24      	ldr	r3, [pc, #144]	; (80045c8 <vPortFree+0xb8>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	4013      	ands	r3, r2
 800453a:	2b00      	cmp	r3, #0
 800453c:	d10a      	bne.n	8004554 <vPortFree+0x44>
	__asm volatile
 800453e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004542:	f383 8811 	msr	BASEPRI, r3
 8004546:	f3bf 8f6f 	isb	sy
 800454a:	f3bf 8f4f 	dsb	sy
 800454e:	60fb      	str	r3, [r7, #12]
}
 8004550:	bf00      	nop
 8004552:	e7fe      	b.n	8004552 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004554:	693b      	ldr	r3, [r7, #16]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d00a      	beq.n	8004572 <vPortFree+0x62>
	__asm volatile
 800455c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004560:	f383 8811 	msr	BASEPRI, r3
 8004564:	f3bf 8f6f 	isb	sy
 8004568:	f3bf 8f4f 	dsb	sy
 800456c:	60bb      	str	r3, [r7, #8]
}
 800456e:	bf00      	nop
 8004570:	e7fe      	b.n	8004570 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	685a      	ldr	r2, [r3, #4]
 8004576:	4b14      	ldr	r3, [pc, #80]	; (80045c8 <vPortFree+0xb8>)
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	4013      	ands	r3, r2
 800457c:	2b00      	cmp	r3, #0
 800457e:	d01e      	beq.n	80045be <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004580:	693b      	ldr	r3, [r7, #16]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d11a      	bne.n	80045be <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	4b0e      	ldr	r3, [pc, #56]	; (80045c8 <vPortFree+0xb8>)
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	43db      	mvns	r3, r3
 8004592:	401a      	ands	r2, r3
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004598:	f7fe fc82 	bl	8002ea0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	685a      	ldr	r2, [r3, #4]
 80045a0:	4b0a      	ldr	r3, [pc, #40]	; (80045cc <vPortFree+0xbc>)
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	4413      	add	r3, r2
 80045a6:	4a09      	ldr	r2, [pc, #36]	; (80045cc <vPortFree+0xbc>)
 80045a8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80045aa:	6938      	ldr	r0, [r7, #16]
 80045ac:	f000 f874 	bl	8004698 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80045b0:	4b07      	ldr	r3, [pc, #28]	; (80045d0 <vPortFree+0xc0>)
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	3301      	adds	r3, #1
 80045b6:	4a06      	ldr	r2, [pc, #24]	; (80045d0 <vPortFree+0xc0>)
 80045b8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80045ba:	f7fe fc7f 	bl	8002ebc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80045be:	bf00      	nop
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	20004af0 	.word	0x20004af0
 80045cc:	20004ae0 	.word	0x20004ae0
 80045d0:	20004aec 	.word	0x20004aec

080045d4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80045da:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80045de:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80045e0:	4b27      	ldr	r3, [pc, #156]	; (8004680 <prvHeapInit+0xac>)
 80045e2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	f003 0307 	and.w	r3, r3, #7
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d00c      	beq.n	8004608 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	3307      	adds	r3, #7
 80045f2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	f023 0307 	bic.w	r3, r3, #7
 80045fa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80045fc:	68ba      	ldr	r2, [r7, #8]
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	1ad3      	subs	r3, r2, r3
 8004602:	4a1f      	ldr	r2, [pc, #124]	; (8004680 <prvHeapInit+0xac>)
 8004604:	4413      	add	r3, r2
 8004606:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800460c:	4a1d      	ldr	r2, [pc, #116]	; (8004684 <prvHeapInit+0xb0>)
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004612:	4b1c      	ldr	r3, [pc, #112]	; (8004684 <prvHeapInit+0xb0>)
 8004614:	2200      	movs	r2, #0
 8004616:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68ba      	ldr	r2, [r7, #8]
 800461c:	4413      	add	r3, r2
 800461e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004620:	2208      	movs	r2, #8
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	1a9b      	subs	r3, r3, r2
 8004626:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f023 0307 	bic.w	r3, r3, #7
 800462e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	4a15      	ldr	r2, [pc, #84]	; (8004688 <prvHeapInit+0xb4>)
 8004634:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004636:	4b14      	ldr	r3, [pc, #80]	; (8004688 <prvHeapInit+0xb4>)
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	2200      	movs	r2, #0
 800463c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800463e:	4b12      	ldr	r3, [pc, #72]	; (8004688 <prvHeapInit+0xb4>)
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	2200      	movs	r2, #0
 8004644:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800464a:	683b      	ldr	r3, [r7, #0]
 800464c:	68fa      	ldr	r2, [r7, #12]
 800464e:	1ad2      	subs	r2, r2, r3
 8004650:	683b      	ldr	r3, [r7, #0]
 8004652:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8004654:	4b0c      	ldr	r3, [pc, #48]	; (8004688 <prvHeapInit+0xb4>)
 8004656:	681a      	ldr	r2, [r3, #0]
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	4a0a      	ldr	r2, [pc, #40]	; (800468c <prvHeapInit+0xb8>)
 8004662:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8004664:	683b      	ldr	r3, [r7, #0]
 8004666:	685b      	ldr	r3, [r3, #4]
 8004668:	4a09      	ldr	r2, [pc, #36]	; (8004690 <prvHeapInit+0xbc>)
 800466a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800466c:	4b09      	ldr	r3, [pc, #36]	; (8004694 <prvHeapInit+0xc0>)
 800466e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004672:	601a      	str	r2, [r3, #0]
}
 8004674:	bf00      	nop
 8004676:	3714      	adds	r7, #20
 8004678:	46bd      	mov	sp, r7
 800467a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800467e:	4770      	bx	lr
 8004680:	20000ed4 	.word	0x20000ed4
 8004684:	20004ad4 	.word	0x20004ad4
 8004688:	20004adc 	.word	0x20004adc
 800468c:	20004ae4 	.word	0x20004ae4
 8004690:	20004ae0 	.word	0x20004ae0
 8004694:	20004af0 	.word	0x20004af0

08004698 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8004698:	b480      	push	{r7}
 800469a:	b085      	sub	sp, #20
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80046a0:	4b28      	ldr	r3, [pc, #160]	; (8004744 <prvInsertBlockIntoFreeList+0xac>)
 80046a2:	60fb      	str	r3, [r7, #12]
 80046a4:	e002      	b.n	80046ac <prvInsertBlockIntoFreeList+0x14>
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	60fb      	str	r3, [r7, #12]
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	687a      	ldr	r2, [r7, #4]
 80046b2:	429a      	cmp	r2, r3
 80046b4:	d8f7      	bhi.n	80046a6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80046b6:	68fb      	ldr	r3, [r7, #12]
 80046b8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	68ba      	ldr	r2, [r7, #8]
 80046c0:	4413      	add	r3, r2
 80046c2:	687a      	ldr	r2, [r7, #4]
 80046c4:	429a      	cmp	r2, r3
 80046c6:	d108      	bne.n	80046da <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	685a      	ldr	r2, [r3, #4]
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	685b      	ldr	r3, [r3, #4]
 80046d0:	441a      	add	r2, r3
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	685b      	ldr	r3, [r3, #4]
 80046e2:	68ba      	ldr	r2, [r7, #8]
 80046e4:	441a      	add	r2, r3
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d118      	bne.n	8004720 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80046ee:	68fb      	ldr	r3, [r7, #12]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	4b15      	ldr	r3, [pc, #84]	; (8004748 <prvInsertBlockIntoFreeList+0xb0>)
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	429a      	cmp	r2, r3
 80046f8:	d00d      	beq.n	8004716 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	685a      	ldr	r2, [r3, #4]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	685b      	ldr	r3, [r3, #4]
 8004704:	441a      	add	r2, r3
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	681a      	ldr	r2, [r3, #0]
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	601a      	str	r2, [r3, #0]
 8004714:	e008      	b.n	8004728 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8004716:	4b0c      	ldr	r3, [pc, #48]	; (8004748 <prvInsertBlockIntoFreeList+0xb0>)
 8004718:	681a      	ldr	r2, [r3, #0]
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	601a      	str	r2, [r3, #0]
 800471e:	e003      	b.n	8004728 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681a      	ldr	r2, [r3, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8004728:	68fa      	ldr	r2, [r7, #12]
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	429a      	cmp	r2, r3
 800472e:	d002      	beq.n	8004736 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	687a      	ldr	r2, [r7, #4]
 8004734:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004736:	bf00      	nop
 8004738:	3714      	adds	r7, #20
 800473a:	46bd      	mov	sp, r7
 800473c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004740:	4770      	bx	lr
 8004742:	bf00      	nop
 8004744:	20004ad4 	.word	0x20004ad4
 8004748:	20004adc 	.word	0x20004adc

0800474c <__libc_init_array>:
 800474c:	b570      	push	{r4, r5, r6, lr}
 800474e:	4d0d      	ldr	r5, [pc, #52]	; (8004784 <__libc_init_array+0x38>)
 8004750:	4c0d      	ldr	r4, [pc, #52]	; (8004788 <__libc_init_array+0x3c>)
 8004752:	1b64      	subs	r4, r4, r5
 8004754:	10a4      	asrs	r4, r4, #2
 8004756:	2600      	movs	r6, #0
 8004758:	42a6      	cmp	r6, r4
 800475a:	d109      	bne.n	8004770 <__libc_init_array+0x24>
 800475c:	4d0b      	ldr	r5, [pc, #44]	; (800478c <__libc_init_array+0x40>)
 800475e:	4c0c      	ldr	r4, [pc, #48]	; (8004790 <__libc_init_array+0x44>)
 8004760:	f000 f8f2 	bl	8004948 <_init>
 8004764:	1b64      	subs	r4, r4, r5
 8004766:	10a4      	asrs	r4, r4, #2
 8004768:	2600      	movs	r6, #0
 800476a:	42a6      	cmp	r6, r4
 800476c:	d105      	bne.n	800477a <__libc_init_array+0x2e>
 800476e:	bd70      	pop	{r4, r5, r6, pc}
 8004770:	f855 3b04 	ldr.w	r3, [r5], #4
 8004774:	4798      	blx	r3
 8004776:	3601      	adds	r6, #1
 8004778:	e7ee      	b.n	8004758 <__libc_init_array+0xc>
 800477a:	f855 3b04 	ldr.w	r3, [r5], #4
 800477e:	4798      	blx	r3
 8004780:	3601      	adds	r6, #1
 8004782:	e7f2      	b.n	800476a <__libc_init_array+0x1e>
 8004784:	08004a50 	.word	0x08004a50
 8004788:	08004a50 	.word	0x08004a50
 800478c:	08004a50 	.word	0x08004a50
 8004790:	08004a54 	.word	0x08004a54

08004794 <__retarget_lock_acquire_recursive>:
 8004794:	4770      	bx	lr

08004796 <__retarget_lock_release_recursive>:
 8004796:	4770      	bx	lr

08004798 <memcpy>:
 8004798:	440a      	add	r2, r1
 800479a:	4291      	cmp	r1, r2
 800479c:	f100 33ff 	add.w	r3, r0, #4294967295
 80047a0:	d100      	bne.n	80047a4 <memcpy+0xc>
 80047a2:	4770      	bx	lr
 80047a4:	b510      	push	{r4, lr}
 80047a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047ae:	4291      	cmp	r1, r2
 80047b0:	d1f9      	bne.n	80047a6 <memcpy+0xe>
 80047b2:	bd10      	pop	{r4, pc}

080047b4 <memset>:
 80047b4:	4402      	add	r2, r0
 80047b6:	4603      	mov	r3, r0
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d100      	bne.n	80047be <memset+0xa>
 80047bc:	4770      	bx	lr
 80047be:	f803 1b01 	strb.w	r1, [r3], #1
 80047c2:	e7f9      	b.n	80047b8 <memset+0x4>

080047c4 <cleanup_glue>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	460c      	mov	r4, r1
 80047c8:	6809      	ldr	r1, [r1, #0]
 80047ca:	4605      	mov	r5, r0
 80047cc:	b109      	cbz	r1, 80047d2 <cleanup_glue+0xe>
 80047ce:	f7ff fff9 	bl	80047c4 <cleanup_glue>
 80047d2:	4621      	mov	r1, r4
 80047d4:	4628      	mov	r0, r5
 80047d6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80047da:	f000 b869 	b.w	80048b0 <_free_r>
	...

080047e0 <_reclaim_reent>:
 80047e0:	4b2c      	ldr	r3, [pc, #176]	; (8004894 <_reclaim_reent+0xb4>)
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4283      	cmp	r3, r0
 80047e6:	b570      	push	{r4, r5, r6, lr}
 80047e8:	4604      	mov	r4, r0
 80047ea:	d051      	beq.n	8004890 <_reclaim_reent+0xb0>
 80047ec:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80047ee:	b143      	cbz	r3, 8004802 <_reclaim_reent+0x22>
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d14a      	bne.n	800488c <_reclaim_reent+0xac>
 80047f6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80047f8:	6819      	ldr	r1, [r3, #0]
 80047fa:	b111      	cbz	r1, 8004802 <_reclaim_reent+0x22>
 80047fc:	4620      	mov	r0, r4
 80047fe:	f000 f857 	bl	80048b0 <_free_r>
 8004802:	6961      	ldr	r1, [r4, #20]
 8004804:	b111      	cbz	r1, 800480c <_reclaim_reent+0x2c>
 8004806:	4620      	mov	r0, r4
 8004808:	f000 f852 	bl	80048b0 <_free_r>
 800480c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800480e:	b111      	cbz	r1, 8004816 <_reclaim_reent+0x36>
 8004810:	4620      	mov	r0, r4
 8004812:	f000 f84d 	bl	80048b0 <_free_r>
 8004816:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8004818:	b111      	cbz	r1, 8004820 <_reclaim_reent+0x40>
 800481a:	4620      	mov	r0, r4
 800481c:	f000 f848 	bl	80048b0 <_free_r>
 8004820:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8004822:	b111      	cbz	r1, 800482a <_reclaim_reent+0x4a>
 8004824:	4620      	mov	r0, r4
 8004826:	f000 f843 	bl	80048b0 <_free_r>
 800482a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800482c:	b111      	cbz	r1, 8004834 <_reclaim_reent+0x54>
 800482e:	4620      	mov	r0, r4
 8004830:	f000 f83e 	bl	80048b0 <_free_r>
 8004834:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8004836:	b111      	cbz	r1, 800483e <_reclaim_reent+0x5e>
 8004838:	4620      	mov	r0, r4
 800483a:	f000 f839 	bl	80048b0 <_free_r>
 800483e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8004840:	b111      	cbz	r1, 8004848 <_reclaim_reent+0x68>
 8004842:	4620      	mov	r0, r4
 8004844:	f000 f834 	bl	80048b0 <_free_r>
 8004848:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800484a:	b111      	cbz	r1, 8004852 <_reclaim_reent+0x72>
 800484c:	4620      	mov	r0, r4
 800484e:	f000 f82f 	bl	80048b0 <_free_r>
 8004852:	69a3      	ldr	r3, [r4, #24]
 8004854:	b1e3      	cbz	r3, 8004890 <_reclaim_reent+0xb0>
 8004856:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8004858:	4620      	mov	r0, r4
 800485a:	4798      	blx	r3
 800485c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800485e:	b1b9      	cbz	r1, 8004890 <_reclaim_reent+0xb0>
 8004860:	4620      	mov	r0, r4
 8004862:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004866:	f7ff bfad 	b.w	80047c4 <cleanup_glue>
 800486a:	5949      	ldr	r1, [r1, r5]
 800486c:	b941      	cbnz	r1, 8004880 <_reclaim_reent+0xa0>
 800486e:	3504      	adds	r5, #4
 8004870:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8004872:	2d80      	cmp	r5, #128	; 0x80
 8004874:	68d9      	ldr	r1, [r3, #12]
 8004876:	d1f8      	bne.n	800486a <_reclaim_reent+0x8a>
 8004878:	4620      	mov	r0, r4
 800487a:	f000 f819 	bl	80048b0 <_free_r>
 800487e:	e7ba      	b.n	80047f6 <_reclaim_reent+0x16>
 8004880:	680e      	ldr	r6, [r1, #0]
 8004882:	4620      	mov	r0, r4
 8004884:	f000 f814 	bl	80048b0 <_free_r>
 8004888:	4631      	mov	r1, r6
 800488a:	e7ef      	b.n	800486c <_reclaim_reent+0x8c>
 800488c:	2500      	movs	r5, #0
 800488e:	e7ef      	b.n	8004870 <_reclaim_reent+0x90>
 8004890:	bd70      	pop	{r4, r5, r6, pc}
 8004892:	bf00      	nop
 8004894:	20000010 	.word	0x20000010

08004898 <__malloc_lock>:
 8004898:	4801      	ldr	r0, [pc, #4]	; (80048a0 <__malloc_lock+0x8>)
 800489a:	f7ff bf7b 	b.w	8004794 <__retarget_lock_acquire_recursive>
 800489e:	bf00      	nop
 80048a0:	20004af4 	.word	0x20004af4

080048a4 <__malloc_unlock>:
 80048a4:	4801      	ldr	r0, [pc, #4]	; (80048ac <__malloc_unlock+0x8>)
 80048a6:	f7ff bf76 	b.w	8004796 <__retarget_lock_release_recursive>
 80048aa:	bf00      	nop
 80048ac:	20004af4 	.word	0x20004af4

080048b0 <_free_r>:
 80048b0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80048b2:	2900      	cmp	r1, #0
 80048b4:	d044      	beq.n	8004940 <_free_r+0x90>
 80048b6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048ba:	9001      	str	r0, [sp, #4]
 80048bc:	2b00      	cmp	r3, #0
 80048be:	f1a1 0404 	sub.w	r4, r1, #4
 80048c2:	bfb8      	it	lt
 80048c4:	18e4      	addlt	r4, r4, r3
 80048c6:	f7ff ffe7 	bl	8004898 <__malloc_lock>
 80048ca:	4a1e      	ldr	r2, [pc, #120]	; (8004944 <_free_r+0x94>)
 80048cc:	9801      	ldr	r0, [sp, #4]
 80048ce:	6813      	ldr	r3, [r2, #0]
 80048d0:	b933      	cbnz	r3, 80048e0 <_free_r+0x30>
 80048d2:	6063      	str	r3, [r4, #4]
 80048d4:	6014      	str	r4, [r2, #0]
 80048d6:	b003      	add	sp, #12
 80048d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80048dc:	f7ff bfe2 	b.w	80048a4 <__malloc_unlock>
 80048e0:	42a3      	cmp	r3, r4
 80048e2:	d908      	bls.n	80048f6 <_free_r+0x46>
 80048e4:	6825      	ldr	r5, [r4, #0]
 80048e6:	1961      	adds	r1, r4, r5
 80048e8:	428b      	cmp	r3, r1
 80048ea:	bf01      	itttt	eq
 80048ec:	6819      	ldreq	r1, [r3, #0]
 80048ee:	685b      	ldreq	r3, [r3, #4]
 80048f0:	1949      	addeq	r1, r1, r5
 80048f2:	6021      	streq	r1, [r4, #0]
 80048f4:	e7ed      	b.n	80048d2 <_free_r+0x22>
 80048f6:	461a      	mov	r2, r3
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	b10b      	cbz	r3, 8004900 <_free_r+0x50>
 80048fc:	42a3      	cmp	r3, r4
 80048fe:	d9fa      	bls.n	80048f6 <_free_r+0x46>
 8004900:	6811      	ldr	r1, [r2, #0]
 8004902:	1855      	adds	r5, r2, r1
 8004904:	42a5      	cmp	r5, r4
 8004906:	d10b      	bne.n	8004920 <_free_r+0x70>
 8004908:	6824      	ldr	r4, [r4, #0]
 800490a:	4421      	add	r1, r4
 800490c:	1854      	adds	r4, r2, r1
 800490e:	42a3      	cmp	r3, r4
 8004910:	6011      	str	r1, [r2, #0]
 8004912:	d1e0      	bne.n	80048d6 <_free_r+0x26>
 8004914:	681c      	ldr	r4, [r3, #0]
 8004916:	685b      	ldr	r3, [r3, #4]
 8004918:	6053      	str	r3, [r2, #4]
 800491a:	4421      	add	r1, r4
 800491c:	6011      	str	r1, [r2, #0]
 800491e:	e7da      	b.n	80048d6 <_free_r+0x26>
 8004920:	d902      	bls.n	8004928 <_free_r+0x78>
 8004922:	230c      	movs	r3, #12
 8004924:	6003      	str	r3, [r0, #0]
 8004926:	e7d6      	b.n	80048d6 <_free_r+0x26>
 8004928:	6825      	ldr	r5, [r4, #0]
 800492a:	1961      	adds	r1, r4, r5
 800492c:	428b      	cmp	r3, r1
 800492e:	bf04      	itt	eq
 8004930:	6819      	ldreq	r1, [r3, #0]
 8004932:	685b      	ldreq	r3, [r3, #4]
 8004934:	6063      	str	r3, [r4, #4]
 8004936:	bf04      	itt	eq
 8004938:	1949      	addeq	r1, r1, r5
 800493a:	6021      	streq	r1, [r4, #0]
 800493c:	6054      	str	r4, [r2, #4]
 800493e:	e7ca      	b.n	80048d6 <_free_r+0x26>
 8004940:	b003      	add	sp, #12
 8004942:	bd30      	pop	{r4, r5, pc}
 8004944:	20004af8 	.word	0x20004af8

08004948 <_init>:
 8004948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800494a:	bf00      	nop
 800494c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800494e:	bc08      	pop	{r3}
 8004950:	469e      	mov	lr, r3
 8004952:	4770      	bx	lr

08004954 <_fini>:
 8004954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004956:	bf00      	nop
 8004958:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800495a:	bc08      	pop	{r3}
 800495c:	469e      	mov	lr, r3
 800495e:	4770      	bx	lr
