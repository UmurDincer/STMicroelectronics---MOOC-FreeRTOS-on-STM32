
009CountingSemaphore.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000054c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000134  08005650  08005650  00015650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005784  08005784  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005784  08005784  00015784  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800578c  0800578c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800578c  0800578c  0001578c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005790  08005790  00015790  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005794  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00004a90  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004b04  20004b04  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   000152a7  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002cab  00000000  00000000  0003534b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000011a0  00000000  00000000  00037ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001078  00000000  00000000  00039198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00002d1e  00000000  00000000  0003a210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000123d2  00000000  00000000  0003cf2e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d22cc  00000000  00000000  0004f300  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001215cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004cf4  00000000  00000000  0012161c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005638 	.word	0x08005638

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005638 	.word	0x08005638

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	e000      	b.n	8000500 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fa50 	bl	80009cc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f83e 	bl	80005ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f8a4 	bl	800067c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f001 fcca 	bl	8001ecc <osKernelInitialize>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* creation of myCountingSem01 */
  myCountingSem01Handle = osSemaphoreNew(2, 0, &myCountingSem01_attributes);
 8000538:	4a11      	ldr	r2, [pc, #68]	; (8000580 <main+0x5c>)
 800053a:	2100      	movs	r1, #0
 800053c:	2002      	movs	r0, #2
 800053e:	f001 fdbc 	bl	80020ba <osSemaphoreNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <main+0x60>)
 8000546:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000548:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <main+0x64>)
 800054a:	2100      	movs	r1, #0
 800054c:	480f      	ldr	r0, [pc, #60]	; (800058c <main+0x68>)
 800054e:	f001 fd07 	bl	8001f60 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <main+0x6c>)
 8000556:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000558:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <main+0x70>)
 800055a:	2100      	movs	r1, #0
 800055c:	480e      	ldr	r0, [pc, #56]	; (8000598 <main+0x74>)
 800055e:	f001 fcff 	bl	8001f60 <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <main+0x78>)
 8000566:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000568:	4a0d      	ldr	r2, [pc, #52]	; (80005a0 <main+0x7c>)
 800056a:	2100      	movs	r1, #0
 800056c:	480d      	ldr	r0, [pc, #52]	; (80005a4 <main+0x80>)
 800056e:	f001 fcf7 	bl	8001f60 <osThreadNew>
 8000572:	4603      	mov	r3, r0
 8000574:	4a0c      	ldr	r2, [pc, #48]	; (80005a8 <main+0x84>)
 8000576:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000578:	f001 fccc 	bl	8001f14 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800057c:	e7fe      	b.n	800057c <main+0x58>
 800057e:	bf00      	nop
 8000580:	080056fc 	.word	0x080056fc
 8000584:	2000009c 	.word	0x2000009c
 8000588:	08005690 	.word	0x08005690
 800058c:	0800074d 	.word	0x0800074d
 8000590:	20000090 	.word	0x20000090
 8000594:	080056b4 	.word	0x080056b4
 8000598:	08000775 	.word	0x08000775
 800059c:	20000094 	.word	0x20000094
 80005a0:	080056d8 	.word	0x080056d8
 80005a4:	0800079d 	.word	0x0800079d
 80005a8:	20000098 	.word	0x20000098

080005ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b094      	sub	sp, #80	; 0x50
 80005b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005b2:	f107 0320 	add.w	r3, r7, #32
 80005b6:	2230      	movs	r2, #48	; 0x30
 80005b8:	2100      	movs	r1, #0
 80005ba:	4618      	mov	r0, r3
 80005bc:	f004 ff72 	bl	80054a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005d0:	2300      	movs	r3, #0
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	4b27      	ldr	r3, [pc, #156]	; (8000674 <SystemClock_Config+0xc8>)
 80005d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d8:	4a26      	ldr	r2, [pc, #152]	; (8000674 <SystemClock_Config+0xc8>)
 80005da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005de:	6413      	str	r3, [r2, #64]	; 0x40
 80005e0:	4b24      	ldr	r3, [pc, #144]	; (8000674 <SystemClock_Config+0xc8>)
 80005e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ec:	2300      	movs	r3, #0
 80005ee:	607b      	str	r3, [r7, #4]
 80005f0:	4b21      	ldr	r3, [pc, #132]	; (8000678 <SystemClock_Config+0xcc>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	4a20      	ldr	r2, [pc, #128]	; (8000678 <SystemClock_Config+0xcc>)
 80005f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005fa:	6013      	str	r3, [r2, #0]
 80005fc:	4b1e      	ldr	r3, [pc, #120]	; (8000678 <SystemClock_Config+0xcc>)
 80005fe:	681b      	ldr	r3, [r3, #0]
 8000600:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000608:	2302      	movs	r3, #2
 800060a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000610:	2310      	movs	r3, #16
 8000612:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000614:	2302      	movs	r3, #2
 8000616:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000618:	2300      	movs	r3, #0
 800061a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800061c:	2308      	movs	r3, #8
 800061e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000620:	2340      	movs	r3, #64	; 0x40
 8000622:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000624:	2302      	movs	r3, #2
 8000626:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000628:	2307      	movs	r3, #7
 800062a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800062c:	f107 0320 	add.w	r3, r7, #32
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fca3 	bl	8000f7c <HAL_RCC_OscConfig>
 8000636:	4603      	mov	r3, r0
 8000638:	2b00      	cmp	r3, #0
 800063a:	d001      	beq.n	8000640 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800063c:	f000 f8d8 	bl	80007f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000640:	230f      	movs	r3, #15
 8000642:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000644:	2302      	movs	r3, #2
 8000646:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000648:	23b0      	movs	r3, #176	; 0xb0
 800064a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800064c:	2300      	movs	r3, #0
 800064e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000650:	2300      	movs	r3, #0
 8000652:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000654:	f107 030c 	add.w	r3, r7, #12
 8000658:	2100      	movs	r1, #0
 800065a:	4618      	mov	r0, r3
 800065c:	f000 ff06 	bl	800146c <HAL_RCC_ClockConfig>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <SystemClock_Config+0xbe>
  {
    Error_Handler();
 8000666:	f000 f8c3 	bl	80007f0 <Error_Handler>
  }
}
 800066a:	bf00      	nop
 800066c:	3750      	adds	r7, #80	; 0x50
 800066e:	46bd      	mov	sp, r7
 8000670:	bd80      	pop	{r7, pc}
 8000672:	bf00      	nop
 8000674:	40023800 	.word	0x40023800
 8000678:	40007000 	.word	0x40007000

0800067c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b088      	sub	sp, #32
 8000680:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000682:	f107 030c 	add.w	r3, r7, #12
 8000686:	2200      	movs	r2, #0
 8000688:	601a      	str	r2, [r3, #0]
 800068a:	605a      	str	r2, [r3, #4]
 800068c:	609a      	str	r2, [r3, #8]
 800068e:	60da      	str	r2, [r3, #12]
 8000690:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000692:	2300      	movs	r3, #0
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	4b19      	ldr	r3, [pc, #100]	; (80006fc <MX_GPIO_Init+0x80>)
 8000698:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069a:	4a18      	ldr	r2, [pc, #96]	; (80006fc <MX_GPIO_Init+0x80>)
 800069c:	f043 0301 	orr.w	r3, r3, #1
 80006a0:	6313      	str	r3, [r2, #48]	; 0x30
 80006a2:	4b16      	ldr	r3, [pc, #88]	; (80006fc <MX_GPIO_Init+0x80>)
 80006a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006a6:	f003 0301 	and.w	r3, r3, #1
 80006aa:	60bb      	str	r3, [r7, #8]
 80006ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006ae:	2300      	movs	r3, #0
 80006b0:	607b      	str	r3, [r7, #4]
 80006b2:	4b12      	ldr	r3, [pc, #72]	; (80006fc <MX_GPIO_Init+0x80>)
 80006b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006b6:	4a11      	ldr	r2, [pc, #68]	; (80006fc <MX_GPIO_Init+0x80>)
 80006b8:	f043 0302 	orr.w	r3, r3, #2
 80006bc:	6313      	str	r3, [r2, #48]	; 0x30
 80006be:	4b0f      	ldr	r3, [pc, #60]	; (80006fc <MX_GPIO_Init+0x80>)
 80006c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006c2:	f003 0302 	and.w	r3, r3, #2
 80006c6:	607b      	str	r3, [r7, #4]
 80006c8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80006ca:	2301      	movs	r3, #1
 80006cc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006ce:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006d2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006d4:	2300      	movs	r3, #0
 80006d6:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80006d8:	f107 030c 	add.w	r3, r7, #12
 80006dc:	4619      	mov	r1, r3
 80006de:	4808      	ldr	r0, [pc, #32]	; (8000700 <MX_GPIO_Init+0x84>)
 80006e0:	f000 fa98 	bl	8000c14 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80006e4:	2200      	movs	r2, #0
 80006e6:	2105      	movs	r1, #5
 80006e8:	2006      	movs	r0, #6
 80006ea:	f000 fa69 	bl	8000bc0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006ee:	2006      	movs	r0, #6
 80006f0:	f000 fa82 	bl	8000bf8 <HAL_NVIC_EnableIRQ>

}
 80006f4:	bf00      	nop
 80006f6:	3720      	adds	r7, #32
 80006f8:	46bd      	mov	sp, r7
 80006fa:	bd80      	pop	{r7, pc}
 80006fc:	40023800 	.word	0x40023800
 8000700:	40020000 	.word	0x40020000

08000704 <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 8000704:	b580      	push	{r7, lr}
 8000706:	b082      	sub	sp, #8
 8000708:	af00      	add	r7, sp, #0
 800070a:	4603      	mov	r3, r0
 800070c:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 800070e:	79fb      	ldrb	r3, [r7, #7]
 8000710:	4618      	mov	r0, r3
 8000712:	f7ff fedf 	bl	80004d4 <ITM_SendChar>
	ITM_SendChar('\n');
 8000716:	200a      	movs	r0, #10
 8000718:	f7ff fedc 	bl	80004d4 <ITM_SendChar>
}
 800071c:	bf00      	nop
 800071e:	3708      	adds	r7, #8
 8000720:	46bd      	mov	sp, r7
 8000722:	bd80      	pop	{r7, pc}

08000724 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	4603      	mov	r3, r0
 800072c:	80fb      	strh	r3, [r7, #6]
	task_action('!');
 800072e:	2021      	movs	r0, #33	; 0x21
 8000730:	f7ff ffe8 	bl	8000704 <task_action>
	osSemaphoreRelease(myCountingSem01Handle);
 8000734:	4b04      	ldr	r3, [pc, #16]	; (8000748 <HAL_GPIO_EXTI_Callback+0x24>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	4618      	mov	r0, r3
 800073a:	f001 fd99 	bl	8002270 <osSemaphoreRelease>
}
 800073e:	bf00      	nop
 8000740:	3708      	adds	r7, #8
 8000742:	46bd      	mov	sp, r7
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	2000009c 	.word	0x2000009c

0800074c <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b082      	sub	sp, #8
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osSemaphoreRelease(myCountingSem01Handle);
 8000754:	4b06      	ldr	r3, [pc, #24]	; (8000770 <StartTask1+0x24>)
 8000756:	681b      	ldr	r3, [r3, #0]
 8000758:	4618      	mov	r0, r3
 800075a:	f001 fd89 	bl	8002270 <osSemaphoreRelease>
    task_action('1');
 800075e:	2031      	movs	r0, #49	; 0x31
 8000760:	f7ff ffd0 	bl	8000704 <task_action>
    osDelay(2000);
 8000764:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000768:	f001 fc8c 	bl	8002084 <osDelay>
    osSemaphoreRelease(myCountingSem01Handle);
 800076c:	e7f2      	b.n	8000754 <StartTask1+0x8>
 800076e:	bf00      	nop
 8000770:	2000009c 	.word	0x2000009c

08000774 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	b082      	sub	sp, #8
 8000778:	af00      	add	r7, sp, #0
 800077a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreRelease(myCountingSem01Handle);
 800077c:	4b06      	ldr	r3, [pc, #24]	; (8000798 <StartTask2+0x24>)
 800077e:	681b      	ldr	r3, [r3, #0]
 8000780:	4618      	mov	r0, r3
 8000782:	f001 fd75 	bl	8002270 <osSemaphoreRelease>
	task_action('2');
 8000786:	2032      	movs	r0, #50	; 0x32
 8000788:	f7ff ffbc 	bl	8000704 <task_action>
	osDelay(2000);
 800078c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8000790:	f001 fc78 	bl	8002084 <osDelay>
	osSemaphoreRelease(myCountingSem01Handle);
 8000794:	e7f2      	b.n	800077c <StartTask2+0x8>
 8000796:	bf00      	nop
 8000798:	2000009c 	.word	0x2000009c

0800079c <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 800079c:	b580      	push	{r7, lr}
 800079e:	b082      	sub	sp, #8
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	osSemaphoreAcquire(myCountingSem01Handle, 4000);
 80007a4:	4b08      	ldr	r3, [pc, #32]	; (80007c8 <StartTask3+0x2c>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80007ac:	4618      	mov	r0, r3
 80007ae:	f001 fd0d 	bl	80021cc <osSemaphoreAcquire>
	osSemaphoreAcquire(myCountingSem01Handle, 4000);
 80007b2:	4b05      	ldr	r3, [pc, #20]	; (80007c8 <StartTask3+0x2c>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 80007ba:	4618      	mov	r0, r3
 80007bc:	f001 fd06 	bl	80021cc <osSemaphoreAcquire>
	task_action('3');
 80007c0:	2033      	movs	r0, #51	; 0x33
 80007c2:	f7ff ff9f 	bl	8000704 <task_action>
	osSemaphoreAcquire(myCountingSem01Handle, 4000);
 80007c6:	e7ed      	b.n	80007a4 <StartTask3+0x8>
 80007c8:	2000009c 	.word	0x2000009c

080007cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	4a04      	ldr	r2, [pc, #16]	; (80007ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007da:	4293      	cmp	r3, r2
 80007dc:	d101      	bne.n	80007e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007de:	f000 f917 	bl	8000a10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e2:	bf00      	nop
 80007e4:	3708      	adds	r7, #8
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}
 80007ea:	bf00      	nop
 80007ec:	40001000 	.word	0x40001000

080007f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f0:	b480      	push	{r7}
 80007f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f4:	b672      	cpsid	i
}
 80007f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007f8:	e7fe      	b.n	80007f8 <Error_Handler+0x8>
	...

080007fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b082      	sub	sp, #8
 8000800:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000802:	2300      	movs	r3, #0
 8000804:	607b      	str	r3, [r7, #4]
 8000806:	4b12      	ldr	r3, [pc, #72]	; (8000850 <HAL_MspInit+0x54>)
 8000808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800080a:	4a11      	ldr	r2, [pc, #68]	; (8000850 <HAL_MspInit+0x54>)
 800080c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000810:	6453      	str	r3, [r2, #68]	; 0x44
 8000812:	4b0f      	ldr	r3, [pc, #60]	; (8000850 <HAL_MspInit+0x54>)
 8000814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800081a:	607b      	str	r3, [r7, #4]
 800081c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800081e:	2300      	movs	r3, #0
 8000820:	603b      	str	r3, [r7, #0]
 8000822:	4b0b      	ldr	r3, [pc, #44]	; (8000850 <HAL_MspInit+0x54>)
 8000824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000826:	4a0a      	ldr	r2, [pc, #40]	; (8000850 <HAL_MspInit+0x54>)
 8000828:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800082c:	6413      	str	r3, [r2, #64]	; 0x40
 800082e:	4b08      	ldr	r3, [pc, #32]	; (8000850 <HAL_MspInit+0x54>)
 8000830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000832:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000836:	603b      	str	r3, [r7, #0]
 8000838:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800083a:	2200      	movs	r2, #0
 800083c:	210f      	movs	r1, #15
 800083e:	f06f 0001 	mvn.w	r0, #1
 8000842:	f000 f9bd 	bl	8000bc0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000846:	bf00      	nop
 8000848:	3708      	adds	r7, #8
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	40023800 	.word	0x40023800

08000854 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000854:	b580      	push	{r7, lr}
 8000856:	b08c      	sub	sp, #48	; 0x30
 8000858:	af00      	add	r7, sp, #0
 800085a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800085c:	2300      	movs	r3, #0
 800085e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8000864:	2200      	movs	r2, #0
 8000866:	6879      	ldr	r1, [r7, #4]
 8000868:	2036      	movs	r0, #54	; 0x36
 800086a:	f000 f9a9 	bl	8000bc0 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800086e:	2036      	movs	r0, #54	; 0x36
 8000870:	f000 f9c2 	bl	8000bf8 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
 8000878:	4b1e      	ldr	r3, [pc, #120]	; (80008f4 <HAL_InitTick+0xa0>)
 800087a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800087c:	4a1d      	ldr	r2, [pc, #116]	; (80008f4 <HAL_InitTick+0xa0>)
 800087e:	f043 0310 	orr.w	r3, r3, #16
 8000882:	6413      	str	r3, [r2, #64]	; 0x40
 8000884:	4b1b      	ldr	r3, [pc, #108]	; (80008f4 <HAL_InitTick+0xa0>)
 8000886:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000888:	f003 0310 	and.w	r3, r3, #16
 800088c:	60fb      	str	r3, [r7, #12]
 800088e:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000890:	f107 0210 	add.w	r2, r7, #16
 8000894:	f107 0314 	add.w	r3, r7, #20
 8000898:	4611      	mov	r1, r2
 800089a:	4618      	mov	r0, r3
 800089c:	f000 fff2 	bl	8001884 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80008a0:	f000 ffdc 	bl	800185c <HAL_RCC_GetPCLK1Freq>
 80008a4:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80008a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80008a8:	4a13      	ldr	r2, [pc, #76]	; (80008f8 <HAL_InitTick+0xa4>)
 80008aa:	fba2 2303 	umull	r2, r3, r2, r3
 80008ae:	0c9b      	lsrs	r3, r3, #18
 80008b0:	3b01      	subs	r3, #1
 80008b2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80008b4:	4b11      	ldr	r3, [pc, #68]	; (80008fc <HAL_InitTick+0xa8>)
 80008b6:	4a12      	ldr	r2, [pc, #72]	; (8000900 <HAL_InitTick+0xac>)
 80008b8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008ba:	4b10      	ldr	r3, [pc, #64]	; (80008fc <HAL_InitTick+0xa8>)
 80008bc:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008c0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008c2:	4a0e      	ldr	r2, [pc, #56]	; (80008fc <HAL_InitTick+0xa8>)
 80008c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008c6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008c8:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <HAL_InitTick+0xa8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <HAL_InitTick+0xa8>)
 80008d0:	2200      	movs	r2, #0
 80008d2:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008d4:	4809      	ldr	r0, [pc, #36]	; (80008fc <HAL_InitTick+0xa8>)
 80008d6:	f001 f807 	bl	80018e8 <HAL_TIM_Base_Init>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d104      	bne.n	80008ea <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008e0:	4806      	ldr	r0, [pc, #24]	; (80008fc <HAL_InitTick+0xa8>)
 80008e2:	f001 f85b 	bl	800199c <HAL_TIM_Base_Start_IT>
 80008e6:	4603      	mov	r3, r0
 80008e8:	e000      	b.n	80008ec <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008ea:	2301      	movs	r3, #1
}
 80008ec:	4618      	mov	r0, r3
 80008ee:	3730      	adds	r7, #48	; 0x30
 80008f0:	46bd      	mov	sp, r7
 80008f2:	bd80      	pop	{r7, pc}
 80008f4:	40023800 	.word	0x40023800
 80008f8:	431bde83 	.word	0x431bde83
 80008fc:	200000a0 	.word	0x200000a0
 8000900:	40001000 	.word	0x40001000

08000904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <NMI_Handler+0x4>

0800090a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800090e:	e7fe      	b.n	800090e <HardFault_Handler+0x4>

08000910 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000914:	e7fe      	b.n	8000914 <MemManage_Handler+0x4>

08000916 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000916:	b480      	push	{r7}
 8000918:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800091a:	e7fe      	b.n	800091a <BusFault_Handler+0x4>

0800091c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800091c:	b480      	push	{r7}
 800091e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000920:	e7fe      	b.n	8000920 <UsageFault_Handler+0x4>

08000922 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000922:	b480      	push	{r7}
 8000924:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000926:	bf00      	nop
 8000928:	46bd      	mov	sp, r7
 800092a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092e:	4770      	bx	lr

08000930 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000930:	b580      	push	{r7, lr}
 8000932:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 8000934:	2001      	movs	r0, #1
 8000936:	f000 fb09 	bl	8000f4c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800093a:	bf00      	nop
 800093c:	bd80      	pop	{r7, pc}
	...

08000940 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000944:	4802      	ldr	r0, [pc, #8]	; (8000950 <TIM6_DAC_IRQHandler+0x10>)
 8000946:	f001 f899 	bl	8001a7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800094a:	bf00      	nop
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	200000a0 	.word	0x200000a0

08000954 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000954:	b480      	push	{r7}
 8000956:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000958:	4b06      	ldr	r3, [pc, #24]	; (8000974 <SystemInit+0x20>)
 800095a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800095e:	4a05      	ldr	r2, [pc, #20]	; (8000974 <SystemInit+0x20>)
 8000960:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000964:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000968:	bf00      	nop
 800096a:	46bd      	mov	sp, r7
 800096c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000970:	4770      	bx	lr
 8000972:	bf00      	nop
 8000974:	e000ed00 	.word	0xe000ed00

08000978 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000978:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009b0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800097c:	480d      	ldr	r0, [pc, #52]	; (80009b4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800097e:	490e      	ldr	r1, [pc, #56]	; (80009b8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000980:	4a0e      	ldr	r2, [pc, #56]	; (80009bc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000982:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000984:	e002      	b.n	800098c <LoopCopyDataInit>

08000986 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000986:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000988:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800098a:	3304      	adds	r3, #4

0800098c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800098c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800098e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000990:	d3f9      	bcc.n	8000986 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000992:	4a0b      	ldr	r2, [pc, #44]	; (80009c0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000994:	4c0b      	ldr	r4, [pc, #44]	; (80009c4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000996:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000998:	e001      	b.n	800099e <LoopFillZerobss>

0800099a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800099a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800099c:	3204      	adds	r2, #4

0800099e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800099e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009a0:	d3fb      	bcc.n	800099a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80009a2:	f7ff ffd7 	bl	8000954 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80009a6:	f004 fd49 	bl	800543c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80009aa:	f7ff fdbb 	bl	8000524 <main>
  bx  lr    
 80009ae:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80009b0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80009b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009b8:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009bc:	08005794 	.word	0x08005794
  ldr r2, =_sbss
 80009c0:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009c4:	20004b04 	.word	0x20004b04

080009c8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009c8:	e7fe      	b.n	80009c8 <ADC_IRQHandler>
	...

080009cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009d0:	4b0e      	ldr	r3, [pc, #56]	; (8000a0c <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a0d      	ldr	r2, [pc, #52]	; (8000a0c <HAL_Init+0x40>)
 80009d6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009da:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009dc:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <HAL_Init+0x40>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	4a0a      	ldr	r2, [pc, #40]	; (8000a0c <HAL_Init+0x40>)
 80009e2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009e6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009e8:	4b08      	ldr	r3, [pc, #32]	; (8000a0c <HAL_Init+0x40>)
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	4a07      	ldr	r2, [pc, #28]	; (8000a0c <HAL_Init+0x40>)
 80009ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009f2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009f4:	2003      	movs	r0, #3
 80009f6:	f000 f8d8 	bl	8000baa <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009fa:	200f      	movs	r0, #15
 80009fc:	f7ff ff2a 	bl	8000854 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a00:	f7ff fefc 	bl	80007fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	40023c00 	.word	0x40023c00

08000a10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a10:	b480      	push	{r7}
 8000a12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <HAL_IncTick+0x20>)
 8000a16:	781b      	ldrb	r3, [r3, #0]
 8000a18:	461a      	mov	r2, r3
 8000a1a:	4b06      	ldr	r3, [pc, #24]	; (8000a34 <HAL_IncTick+0x24>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	4413      	add	r3, r2
 8000a20:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <HAL_IncTick+0x24>)
 8000a22:	6013      	str	r3, [r2, #0]
}
 8000a24:	bf00      	nop
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200000e8 	.word	0x200000e8

08000a38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b03      	ldr	r3, [pc, #12]	; (8000a4c <HAL_GetTick+0x14>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop
 8000a4c:	200000e8 	.word	0x200000e8

08000a50 <__NVIC_SetPriorityGrouping>:
{
 8000a50:	b480      	push	{r7}
 8000a52:	b085      	sub	sp, #20
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	f003 0307 	and.w	r3, r3, #7
 8000a5e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a60:	4b0c      	ldr	r3, [pc, #48]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a62:	68db      	ldr	r3, [r3, #12]
 8000a64:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a66:	68ba      	ldr	r2, [r7, #8]
 8000a68:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a74:	68bb      	ldr	r3, [r7, #8]
 8000a76:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a78:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a7c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a80:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a82:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <__NVIC_SetPriorityGrouping+0x44>)
 8000a84:	68bb      	ldr	r3, [r7, #8]
 8000a86:	60d3      	str	r3, [r2, #12]
}
 8000a88:	bf00      	nop
 8000a8a:	3714      	adds	r7, #20
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a92:	4770      	bx	lr
 8000a94:	e000ed00 	.word	0xe000ed00

08000a98 <__NVIC_GetPriorityGrouping>:
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a9c:	4b04      	ldr	r3, [pc, #16]	; (8000ab0 <__NVIC_GetPriorityGrouping+0x18>)
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	0a1b      	lsrs	r3, r3, #8
 8000aa2:	f003 0307 	and.w	r3, r3, #7
}
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	46bd      	mov	sp, r7
 8000aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aae:	4770      	bx	lr
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <__NVIC_EnableIRQ>:
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000abe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ac2:	2b00      	cmp	r3, #0
 8000ac4:	db0b      	blt.n	8000ade <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	f003 021f 	and.w	r2, r3, #31
 8000acc:	4907      	ldr	r1, [pc, #28]	; (8000aec <__NVIC_EnableIRQ+0x38>)
 8000ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ad2:	095b      	lsrs	r3, r3, #5
 8000ad4:	2001      	movs	r0, #1
 8000ad6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ada:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ade:	bf00      	nop
 8000ae0:	370c      	adds	r7, #12
 8000ae2:	46bd      	mov	sp, r7
 8000ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop
 8000aec:	e000e100 	.word	0xe000e100

08000af0 <__NVIC_SetPriority>:
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	4603      	mov	r3, r0
 8000af8:	6039      	str	r1, [r7, #0]
 8000afa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000afc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b00:	2b00      	cmp	r3, #0
 8000b02:	db0a      	blt.n	8000b1a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	b2da      	uxtb	r2, r3
 8000b08:	490c      	ldr	r1, [pc, #48]	; (8000b3c <__NVIC_SetPriority+0x4c>)
 8000b0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b0e:	0112      	lsls	r2, r2, #4
 8000b10:	b2d2      	uxtb	r2, r2
 8000b12:	440b      	add	r3, r1
 8000b14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b18:	e00a      	b.n	8000b30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b1a:	683b      	ldr	r3, [r7, #0]
 8000b1c:	b2da      	uxtb	r2, r3
 8000b1e:	4908      	ldr	r1, [pc, #32]	; (8000b40 <__NVIC_SetPriority+0x50>)
 8000b20:	79fb      	ldrb	r3, [r7, #7]
 8000b22:	f003 030f 	and.w	r3, r3, #15
 8000b26:	3b04      	subs	r3, #4
 8000b28:	0112      	lsls	r2, r2, #4
 8000b2a:	b2d2      	uxtb	r2, r2
 8000b2c:	440b      	add	r3, r1
 8000b2e:	761a      	strb	r2, [r3, #24]
}
 8000b30:	bf00      	nop
 8000b32:	370c      	adds	r7, #12
 8000b34:	46bd      	mov	sp, r7
 8000b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3a:	4770      	bx	lr
 8000b3c:	e000e100 	.word	0xe000e100
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <NVIC_EncodePriority>:
{
 8000b44:	b480      	push	{r7}
 8000b46:	b089      	sub	sp, #36	; 0x24
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	60f8      	str	r0, [r7, #12]
 8000b4c:	60b9      	str	r1, [r7, #8]
 8000b4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b50:	68fb      	ldr	r3, [r7, #12]
 8000b52:	f003 0307 	and.w	r3, r3, #7
 8000b56:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b58:	69fb      	ldr	r3, [r7, #28]
 8000b5a:	f1c3 0307 	rsb	r3, r3, #7
 8000b5e:	2b04      	cmp	r3, #4
 8000b60:	bf28      	it	cs
 8000b62:	2304      	movcs	r3, #4
 8000b64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3304      	adds	r3, #4
 8000b6a:	2b06      	cmp	r3, #6
 8000b6c:	d902      	bls.n	8000b74 <NVIC_EncodePriority+0x30>
 8000b6e:	69fb      	ldr	r3, [r7, #28]
 8000b70:	3b03      	subs	r3, #3
 8000b72:	e000      	b.n	8000b76 <NVIC_EncodePriority+0x32>
 8000b74:	2300      	movs	r3, #0
 8000b76:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b78:	f04f 32ff 	mov.w	r2, #4294967295
 8000b7c:	69bb      	ldr	r3, [r7, #24]
 8000b7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b82:	43da      	mvns	r2, r3
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	401a      	ands	r2, r3
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b8c:	f04f 31ff 	mov.w	r1, #4294967295
 8000b90:	697b      	ldr	r3, [r7, #20]
 8000b92:	fa01 f303 	lsl.w	r3, r1, r3
 8000b96:	43d9      	mvns	r1, r3
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b9c:	4313      	orrs	r3, r2
}
 8000b9e:	4618      	mov	r0, r3
 8000ba0:	3724      	adds	r7, #36	; 0x24
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr

08000baa <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000baa:	b580      	push	{r7, lr}
 8000bac:	b082      	sub	sp, #8
 8000bae:	af00      	add	r7, sp, #0
 8000bb0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000bb2:	6878      	ldr	r0, [r7, #4]
 8000bb4:	f7ff ff4c 	bl	8000a50 <__NVIC_SetPriorityGrouping>
}
 8000bb8:	bf00      	nop
 8000bba:	3708      	adds	r7, #8
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}

08000bc0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000bc0:	b580      	push	{r7, lr}
 8000bc2:	b086      	sub	sp, #24
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	60b9      	str	r1, [r7, #8]
 8000bca:	607a      	str	r2, [r7, #4]
 8000bcc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bce:	2300      	movs	r3, #0
 8000bd0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bd2:	f7ff ff61 	bl	8000a98 <__NVIC_GetPriorityGrouping>
 8000bd6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd8:	687a      	ldr	r2, [r7, #4]
 8000bda:	68b9      	ldr	r1, [r7, #8]
 8000bdc:	6978      	ldr	r0, [r7, #20]
 8000bde:	f7ff ffb1 	bl	8000b44 <NVIC_EncodePriority>
 8000be2:	4602      	mov	r2, r0
 8000be4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be8:	4611      	mov	r1, r2
 8000bea:	4618      	mov	r0, r3
 8000bec:	f7ff ff80 	bl	8000af0 <__NVIC_SetPriority>
}
 8000bf0:	bf00      	nop
 8000bf2:	3718      	adds	r7, #24
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c06:	4618      	mov	r0, r3
 8000c08:	f7ff ff54 	bl	8000ab4 <__NVIC_EnableIRQ>
}
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c14:	b480      	push	{r7}
 8000c16:	b089      	sub	sp, #36	; 0x24
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
 8000c1c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c22:	2300      	movs	r3, #0
 8000c24:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c26:	2300      	movs	r3, #0
 8000c28:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	61fb      	str	r3, [r7, #28]
 8000c2e:	e16b      	b.n	8000f08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c30:	2201      	movs	r2, #1
 8000c32:	69fb      	ldr	r3, [r7, #28]
 8000c34:	fa02 f303 	lsl.w	r3, r2, r3
 8000c38:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	697a      	ldr	r2, [r7, #20]
 8000c40:	4013      	ands	r3, r2
 8000c42:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c44:	693a      	ldr	r2, [r7, #16]
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	429a      	cmp	r2, r3
 8000c4a:	f040 815a 	bne.w	8000f02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f003 0303 	and.w	r3, r3, #3
 8000c56:	2b01      	cmp	r3, #1
 8000c58:	d005      	beq.n	8000c66 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c5a:	683b      	ldr	r3, [r7, #0]
 8000c5c:	685b      	ldr	r3, [r3, #4]
 8000c5e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c62:	2b02      	cmp	r3, #2
 8000c64:	d130      	bne.n	8000cc8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	689b      	ldr	r3, [r3, #8]
 8000c6a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c6c:	69fb      	ldr	r3, [r7, #28]
 8000c6e:	005b      	lsls	r3, r3, #1
 8000c70:	2203      	movs	r2, #3
 8000c72:	fa02 f303 	lsl.w	r3, r2, r3
 8000c76:	43db      	mvns	r3, r3
 8000c78:	69ba      	ldr	r2, [r7, #24]
 8000c7a:	4013      	ands	r3, r2
 8000c7c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c7e:	683b      	ldr	r3, [r7, #0]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	69fb      	ldr	r3, [r7, #28]
 8000c84:	005b      	lsls	r3, r3, #1
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	69ba      	ldr	r2, [r7, #24]
 8000c8c:	4313      	orrs	r3, r2
 8000c8e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	69ba      	ldr	r2, [r7, #24]
 8000c94:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	685b      	ldr	r3, [r3, #4]
 8000c9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c9c:	2201      	movs	r2, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	43db      	mvns	r3, r3
 8000ca6:	69ba      	ldr	r2, [r7, #24]
 8000ca8:	4013      	ands	r3, r2
 8000caa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000cac:	683b      	ldr	r3, [r7, #0]
 8000cae:	685b      	ldr	r3, [r3, #4]
 8000cb0:	091b      	lsrs	r3, r3, #4
 8000cb2:	f003 0201 	and.w	r2, r3, #1
 8000cb6:	69fb      	ldr	r3, [r7, #28]
 8000cb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000cbc:	69ba      	ldr	r2, [r7, #24]
 8000cbe:	4313      	orrs	r3, r2
 8000cc0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	69ba      	ldr	r2, [r7, #24]
 8000cc6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cc8:	683b      	ldr	r3, [r7, #0]
 8000cca:	685b      	ldr	r3, [r3, #4]
 8000ccc:	f003 0303 	and.w	r3, r3, #3
 8000cd0:	2b03      	cmp	r3, #3
 8000cd2:	d017      	beq.n	8000d04 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	68db      	ldr	r3, [r3, #12]
 8000cd8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cda:	69fb      	ldr	r3, [r7, #28]
 8000cdc:	005b      	lsls	r3, r3, #1
 8000cde:	2203      	movs	r2, #3
 8000ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce4:	43db      	mvns	r3, r3
 8000ce6:	69ba      	ldr	r2, [r7, #24]
 8000ce8:	4013      	ands	r3, r2
 8000cea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	689a      	ldr	r2, [r3, #8]
 8000cf0:	69fb      	ldr	r3, [r7, #28]
 8000cf2:	005b      	lsls	r3, r3, #1
 8000cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf8:	69ba      	ldr	r2, [r7, #24]
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	69ba      	ldr	r2, [r7, #24]
 8000d02:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000d04:	683b      	ldr	r3, [r7, #0]
 8000d06:	685b      	ldr	r3, [r3, #4]
 8000d08:	f003 0303 	and.w	r3, r3, #3
 8000d0c:	2b02      	cmp	r3, #2
 8000d0e:	d123      	bne.n	8000d58 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000d10:	69fb      	ldr	r3, [r7, #28]
 8000d12:	08da      	lsrs	r2, r3, #3
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	3208      	adds	r2, #8
 8000d18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d1c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d1e:	69fb      	ldr	r3, [r7, #28]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	220f      	movs	r2, #15
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	43db      	mvns	r3, r3
 8000d2e:	69ba      	ldr	r2, [r7, #24]
 8000d30:	4013      	ands	r3, r2
 8000d32:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d34:	683b      	ldr	r3, [r7, #0]
 8000d36:	691a      	ldr	r2, [r3, #16]
 8000d38:	69fb      	ldr	r3, [r7, #28]
 8000d3a:	f003 0307 	and.w	r3, r3, #7
 8000d3e:	009b      	lsls	r3, r3, #2
 8000d40:	fa02 f303 	lsl.w	r3, r2, r3
 8000d44:	69ba      	ldr	r2, [r7, #24]
 8000d46:	4313      	orrs	r3, r2
 8000d48:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d4a:	69fb      	ldr	r3, [r7, #28]
 8000d4c:	08da      	lsrs	r2, r3, #3
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	3208      	adds	r2, #8
 8000d52:	69b9      	ldr	r1, [r7, #24]
 8000d54:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d5e:	69fb      	ldr	r3, [r7, #28]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	2203      	movs	r2, #3
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	43db      	mvns	r3, r3
 8000d6a:	69ba      	ldr	r2, [r7, #24]
 8000d6c:	4013      	ands	r3, r2
 8000d6e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d70:	683b      	ldr	r3, [r7, #0]
 8000d72:	685b      	ldr	r3, [r3, #4]
 8000d74:	f003 0203 	and.w	r2, r3, #3
 8000d78:	69fb      	ldr	r3, [r7, #28]
 8000d7a:	005b      	lsls	r3, r3, #1
 8000d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d80:	69ba      	ldr	r2, [r7, #24]
 8000d82:	4313      	orrs	r3, r2
 8000d84:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	69ba      	ldr	r2, [r7, #24]
 8000d8a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f000 80b4 	beq.w	8000f02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	60fb      	str	r3, [r7, #12]
 8000d9e:	4b60      	ldr	r3, [pc, #384]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a5f      	ldr	r2, [pc, #380]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b5d      	ldr	r3, [pc, #372]	; (8000f20 <HAL_GPIO_Init+0x30c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	60fb      	str	r3, [r7, #12]
 8000db4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000db6:	4a5b      	ldr	r2, [pc, #364]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000db8:	69fb      	ldr	r3, [r7, #28]
 8000dba:	089b      	lsrs	r3, r3, #2
 8000dbc:	3302      	adds	r3, #2
 8000dbe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000dc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dc4:	69fb      	ldr	r3, [r7, #28]
 8000dc6:	f003 0303 	and.w	r3, r3, #3
 8000dca:	009b      	lsls	r3, r3, #2
 8000dcc:	220f      	movs	r2, #15
 8000dce:	fa02 f303 	lsl.w	r3, r2, r3
 8000dd2:	43db      	mvns	r3, r3
 8000dd4:	69ba      	ldr	r2, [r7, #24]
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a52      	ldr	r2, [pc, #328]	; (8000f28 <HAL_GPIO_Init+0x314>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d02b      	beq.n	8000e3a <HAL_GPIO_Init+0x226>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a51      	ldr	r2, [pc, #324]	; (8000f2c <HAL_GPIO_Init+0x318>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d025      	beq.n	8000e36 <HAL_GPIO_Init+0x222>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a50      	ldr	r2, [pc, #320]	; (8000f30 <HAL_GPIO_Init+0x31c>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d01f      	beq.n	8000e32 <HAL_GPIO_Init+0x21e>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4f      	ldr	r2, [pc, #316]	; (8000f34 <HAL_GPIO_Init+0x320>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d019      	beq.n	8000e2e <HAL_GPIO_Init+0x21a>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4e      	ldr	r2, [pc, #312]	; (8000f38 <HAL_GPIO_Init+0x324>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d013      	beq.n	8000e2a <HAL_GPIO_Init+0x216>
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	4a4d      	ldr	r2, [pc, #308]	; (8000f3c <HAL_GPIO_Init+0x328>)
 8000e06:	4293      	cmp	r3, r2
 8000e08:	d00d      	beq.n	8000e26 <HAL_GPIO_Init+0x212>
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	4a4c      	ldr	r2, [pc, #304]	; (8000f40 <HAL_GPIO_Init+0x32c>)
 8000e0e:	4293      	cmp	r3, r2
 8000e10:	d007      	beq.n	8000e22 <HAL_GPIO_Init+0x20e>
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	4a4b      	ldr	r2, [pc, #300]	; (8000f44 <HAL_GPIO_Init+0x330>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d101      	bne.n	8000e1e <HAL_GPIO_Init+0x20a>
 8000e1a:	2307      	movs	r3, #7
 8000e1c:	e00e      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e1e:	2308      	movs	r3, #8
 8000e20:	e00c      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e22:	2306      	movs	r3, #6
 8000e24:	e00a      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e26:	2305      	movs	r3, #5
 8000e28:	e008      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	e006      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e2e:	2303      	movs	r3, #3
 8000e30:	e004      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e32:	2302      	movs	r3, #2
 8000e34:	e002      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e36:	2301      	movs	r3, #1
 8000e38:	e000      	b.n	8000e3c <HAL_GPIO_Init+0x228>
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	69fa      	ldr	r2, [r7, #28]
 8000e3e:	f002 0203 	and.w	r2, r2, #3
 8000e42:	0092      	lsls	r2, r2, #2
 8000e44:	4093      	lsls	r3, r2
 8000e46:	69ba      	ldr	r2, [r7, #24]
 8000e48:	4313      	orrs	r3, r2
 8000e4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e4c:	4935      	ldr	r1, [pc, #212]	; (8000f24 <HAL_GPIO_Init+0x310>)
 8000e4e:	69fb      	ldr	r3, [r7, #28]
 8000e50:	089b      	lsrs	r3, r3, #2
 8000e52:	3302      	adds	r3, #2
 8000e54:	69ba      	ldr	r2, [r7, #24]
 8000e56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e5a:	4b3b      	ldr	r3, [pc, #236]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e5c:	689b      	ldr	r3, [r3, #8]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	43db      	mvns	r3, r3
 8000e64:	69ba      	ldr	r2, [r7, #24]
 8000e66:	4013      	ands	r3, r2
 8000e68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	685b      	ldr	r3, [r3, #4]
 8000e6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d003      	beq.n	8000e7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	693b      	ldr	r3, [r7, #16]
 8000e7a:	4313      	orrs	r3, r2
 8000e7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e7e:	4a32      	ldr	r2, [pc, #200]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e80:	69bb      	ldr	r3, [r7, #24]
 8000e82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e84:	4b30      	ldr	r3, [pc, #192]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000e86:	68db      	ldr	r3, [r3, #12]
 8000e88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	43db      	mvns	r3, r3
 8000e8e:	69ba      	ldr	r2, [r7, #24]
 8000e90:	4013      	ands	r3, r2
 8000e92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e94:	683b      	ldr	r3, [r7, #0]
 8000e96:	685b      	ldr	r3, [r3, #4]
 8000e98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d003      	beq.n	8000ea8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	693b      	ldr	r3, [r7, #16]
 8000ea4:	4313      	orrs	r3, r2
 8000ea6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000ea8:	4a27      	ldr	r2, [pc, #156]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000eaa:	69bb      	ldr	r3, [r7, #24]
 8000eac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000eae:	4b26      	ldr	r3, [pc, #152]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000eb0:	685b      	ldr	r3, [r3, #4]
 8000eb2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	69ba      	ldr	r2, [r7, #24]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d003      	beq.n	8000ed2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	693b      	ldr	r3, [r7, #16]
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000ed2:	4a1d      	ldr	r2, [pc, #116]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000ed4:	69bb      	ldr	r3, [r7, #24]
 8000ed6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ed8:	4b1b      	ldr	r3, [pc, #108]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d003      	beq.n	8000efc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000ef4:	69ba      	ldr	r2, [r7, #24]
 8000ef6:	693b      	ldr	r3, [r7, #16]
 8000ef8:	4313      	orrs	r3, r2
 8000efa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000efc:	4a12      	ldr	r2, [pc, #72]	; (8000f48 <HAL_GPIO_Init+0x334>)
 8000efe:	69bb      	ldr	r3, [r7, #24]
 8000f00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	69fb      	ldr	r3, [r7, #28]
 8000f04:	3301      	adds	r3, #1
 8000f06:	61fb      	str	r3, [r7, #28]
 8000f08:	69fb      	ldr	r3, [r7, #28]
 8000f0a:	2b0f      	cmp	r3, #15
 8000f0c:	f67f ae90 	bls.w	8000c30 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000f10:	bf00      	nop
 8000f12:	bf00      	nop
 8000f14:	3724      	adds	r7, #36	; 0x24
 8000f16:	46bd      	mov	sp, r7
 8000f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1c:	4770      	bx	lr
 8000f1e:	bf00      	nop
 8000f20:	40023800 	.word	0x40023800
 8000f24:	40013800 	.word	0x40013800
 8000f28:	40020000 	.word	0x40020000
 8000f2c:	40020400 	.word	0x40020400
 8000f30:	40020800 	.word	0x40020800
 8000f34:	40020c00 	.word	0x40020c00
 8000f38:	40021000 	.word	0x40021000
 8000f3c:	40021400 	.word	0x40021400
 8000f40:	40021800 	.word	0x40021800
 8000f44:	40021c00 	.word	0x40021c00
 8000f48:	40013c00 	.word	0x40013c00

08000f4c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	4603      	mov	r3, r0
 8000f54:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f56:	4b08      	ldr	r3, [pc, #32]	; (8000f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f58:	695a      	ldr	r2, [r3, #20]
 8000f5a:	88fb      	ldrh	r3, [r7, #6]
 8000f5c:	4013      	ands	r3, r2
 8000f5e:	2b00      	cmp	r3, #0
 8000f60:	d006      	beq.n	8000f70 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f62:	4a05      	ldr	r2, [pc, #20]	; (8000f78 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f64:	88fb      	ldrh	r3, [r7, #6]
 8000f66:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f68:	88fb      	ldrh	r3, [r7, #6]
 8000f6a:	4618      	mov	r0, r3
 8000f6c:	f7ff fbda 	bl	8000724 <HAL_GPIO_EXTI_Callback>
  }
}
 8000f70:	bf00      	nop
 8000f72:	3708      	adds	r7, #8
 8000f74:	46bd      	mov	sp, r7
 8000f76:	bd80      	pop	{r7, pc}
 8000f78:	40013c00 	.word	0x40013c00

08000f7c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b086      	sub	sp, #24
 8000f80:	af00      	add	r7, sp, #0
 8000f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	2b00      	cmp	r3, #0
 8000f88:	d101      	bne.n	8000f8e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	e267      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	681b      	ldr	r3, [r3, #0]
 8000f92:	f003 0301 	and.w	r3, r3, #1
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d075      	beq.n	8001086 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f9a:	4b88      	ldr	r3, [pc, #544]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000f9c:	689b      	ldr	r3, [r3, #8]
 8000f9e:	f003 030c 	and.w	r3, r3, #12
 8000fa2:	2b04      	cmp	r3, #4
 8000fa4:	d00c      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fa6:	4b85      	ldr	r3, [pc, #532]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000fa8:	689b      	ldr	r3, [r3, #8]
 8000faa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000fae:	2b08      	cmp	r3, #8
 8000fb0:	d112      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000fb2:	4b82      	ldr	r3, [pc, #520]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000fb4:	685b      	ldr	r3, [r3, #4]
 8000fb6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fbe:	d10b      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	4b7e      	ldr	r3, [pc, #504]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d05b      	beq.n	8001084 <HAL_RCC_OscConfig+0x108>
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	685b      	ldr	r3, [r3, #4]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d157      	bne.n	8001084 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e242      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fe0:	d106      	bne.n	8000ff0 <HAL_RCC_OscConfig+0x74>
 8000fe2:	4b76      	ldr	r3, [pc, #472]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a75      	ldr	r2, [pc, #468]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000fe8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	e01d      	b.n	800102c <HAL_RCC_OscConfig+0xb0>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ff8:	d10c      	bne.n	8001014 <HAL_RCC_OscConfig+0x98>
 8000ffa:	4b70      	ldr	r3, [pc, #448]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	4a6f      	ldr	r2, [pc, #444]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001000:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001004:	6013      	str	r3, [r2, #0]
 8001006:	4b6d      	ldr	r3, [pc, #436]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a6c      	ldr	r2, [pc, #432]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 800100c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001010:	6013      	str	r3, [r2, #0]
 8001012:	e00b      	b.n	800102c <HAL_RCC_OscConfig+0xb0>
 8001014:	4b69      	ldr	r3, [pc, #420]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a68      	ldr	r2, [pc, #416]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 800101a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800101e:	6013      	str	r3, [r2, #0]
 8001020:	4b66      	ldr	r3, [pc, #408]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	4a65      	ldr	r2, [pc, #404]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001026:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800102a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d013      	beq.n	800105c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001034:	f7ff fd00 	bl	8000a38 <HAL_GetTick>
 8001038:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800103a:	e008      	b.n	800104e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800103c:	f7ff fcfc 	bl	8000a38 <HAL_GetTick>
 8001040:	4602      	mov	r2, r0
 8001042:	693b      	ldr	r3, [r7, #16]
 8001044:	1ad3      	subs	r3, r2, r3
 8001046:	2b64      	cmp	r3, #100	; 0x64
 8001048:	d901      	bls.n	800104e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800104a:	2303      	movs	r3, #3
 800104c:	e207      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800104e:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001056:	2b00      	cmp	r3, #0
 8001058:	d0f0      	beq.n	800103c <HAL_RCC_OscConfig+0xc0>
 800105a:	e014      	b.n	8001086 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800105c:	f7ff fcec 	bl	8000a38 <HAL_GetTick>
 8001060:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001062:	e008      	b.n	8001076 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001064:	f7ff fce8 	bl	8000a38 <HAL_GetTick>
 8001068:	4602      	mov	r2, r0
 800106a:	693b      	ldr	r3, [r7, #16]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	2b64      	cmp	r3, #100	; 0x64
 8001070:	d901      	bls.n	8001076 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001072:	2303      	movs	r3, #3
 8001074:	e1f3      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001076:	4b51      	ldr	r3, [pc, #324]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800107e:	2b00      	cmp	r3, #0
 8001080:	d1f0      	bne.n	8001064 <HAL_RCC_OscConfig+0xe8>
 8001082:	e000      	b.n	8001086 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001084:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	f003 0302 	and.w	r3, r3, #2
 800108e:	2b00      	cmp	r3, #0
 8001090:	d063      	beq.n	800115a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001092:	4b4a      	ldr	r3, [pc, #296]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001094:	689b      	ldr	r3, [r3, #8]
 8001096:	f003 030c 	and.w	r3, r3, #12
 800109a:	2b00      	cmp	r3, #0
 800109c:	d00b      	beq.n	80010b6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800109e:	4b47      	ldr	r3, [pc, #284]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 80010a0:	689b      	ldr	r3, [r3, #8]
 80010a2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80010a6:	2b08      	cmp	r3, #8
 80010a8:	d11c      	bne.n	80010e4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80010aa:	4b44      	ldr	r3, [pc, #272]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d116      	bne.n	80010e4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010b6:	4b41      	ldr	r3, [pc, #260]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	2b00      	cmp	r3, #0
 80010c0:	d005      	beq.n	80010ce <HAL_RCC_OscConfig+0x152>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	68db      	ldr	r3, [r3, #12]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d001      	beq.n	80010ce <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010ca:	2301      	movs	r3, #1
 80010cc:	e1c7      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ce:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	691b      	ldr	r3, [r3, #16]
 80010da:	00db      	lsls	r3, r3, #3
 80010dc:	4937      	ldr	r1, [pc, #220]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 80010de:	4313      	orrs	r3, r2
 80010e0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010e2:	e03a      	b.n	800115a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010e4:	687b      	ldr	r3, [r7, #4]
 80010e6:	68db      	ldr	r3, [r3, #12]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	d020      	beq.n	800112e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010ec:	4b34      	ldr	r3, [pc, #208]	; (80011c0 <HAL_RCC_OscConfig+0x244>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010f2:	f7ff fca1 	bl	8000a38 <HAL_GetTick>
 80010f6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f8:	e008      	b.n	800110c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010fa:	f7ff fc9d 	bl	8000a38 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	2b02      	cmp	r3, #2
 8001106:	d901      	bls.n	800110c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001108:	2303      	movs	r3, #3
 800110a:	e1a8      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800110c:	4b2b      	ldr	r3, [pc, #172]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	f003 0302 	and.w	r3, r3, #2
 8001114:	2b00      	cmp	r3, #0
 8001116:	d0f0      	beq.n	80010fa <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001118:	4b28      	ldr	r3, [pc, #160]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	691b      	ldr	r3, [r3, #16]
 8001124:	00db      	lsls	r3, r3, #3
 8001126:	4925      	ldr	r1, [pc, #148]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001128:	4313      	orrs	r3, r2
 800112a:	600b      	str	r3, [r1, #0]
 800112c:	e015      	b.n	800115a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800112e:	4b24      	ldr	r3, [pc, #144]	; (80011c0 <HAL_RCC_OscConfig+0x244>)
 8001130:	2200      	movs	r2, #0
 8001132:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001134:	f7ff fc80 	bl	8000a38 <HAL_GetTick>
 8001138:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800113a:	e008      	b.n	800114e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800113c:	f7ff fc7c 	bl	8000a38 <HAL_GetTick>
 8001140:	4602      	mov	r2, r0
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	1ad3      	subs	r3, r2, r3
 8001146:	2b02      	cmp	r3, #2
 8001148:	d901      	bls.n	800114e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800114a:	2303      	movs	r3, #3
 800114c:	e187      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800114e:	4b1b      	ldr	r3, [pc, #108]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	f003 0302 	and.w	r3, r3, #2
 8001156:	2b00      	cmp	r3, #0
 8001158:	d1f0      	bne.n	800113c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	f003 0308 	and.w	r3, r3, #8
 8001162:	2b00      	cmp	r3, #0
 8001164:	d036      	beq.n	80011d4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	695b      	ldr	r3, [r3, #20]
 800116a:	2b00      	cmp	r3, #0
 800116c:	d016      	beq.n	800119c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800116e:	4b15      	ldr	r3, [pc, #84]	; (80011c4 <HAL_RCC_OscConfig+0x248>)
 8001170:	2201      	movs	r2, #1
 8001172:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001174:	f7ff fc60 	bl	8000a38 <HAL_GetTick>
 8001178:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800117a:	e008      	b.n	800118e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800117c:	f7ff fc5c 	bl	8000a38 <HAL_GetTick>
 8001180:	4602      	mov	r2, r0
 8001182:	693b      	ldr	r3, [r7, #16]
 8001184:	1ad3      	subs	r3, r2, r3
 8001186:	2b02      	cmp	r3, #2
 8001188:	d901      	bls.n	800118e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800118a:	2303      	movs	r3, #3
 800118c:	e167      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800118e:	4b0b      	ldr	r3, [pc, #44]	; (80011bc <HAL_RCC_OscConfig+0x240>)
 8001190:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001192:	f003 0302 	and.w	r3, r3, #2
 8001196:	2b00      	cmp	r3, #0
 8001198:	d0f0      	beq.n	800117c <HAL_RCC_OscConfig+0x200>
 800119a:	e01b      	b.n	80011d4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800119c:	4b09      	ldr	r3, [pc, #36]	; (80011c4 <HAL_RCC_OscConfig+0x248>)
 800119e:	2200      	movs	r2, #0
 80011a0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80011a2:	f7ff fc49 	bl	8000a38 <HAL_GetTick>
 80011a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011a8:	e00e      	b.n	80011c8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80011aa:	f7ff fc45 	bl	8000a38 <HAL_GetTick>
 80011ae:	4602      	mov	r2, r0
 80011b0:	693b      	ldr	r3, [r7, #16]
 80011b2:	1ad3      	subs	r3, r2, r3
 80011b4:	2b02      	cmp	r3, #2
 80011b6:	d907      	bls.n	80011c8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011b8:	2303      	movs	r3, #3
 80011ba:	e150      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
 80011bc:	40023800 	.word	0x40023800
 80011c0:	42470000 	.word	0x42470000
 80011c4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011c8:	4b88      	ldr	r3, [pc, #544]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80011ca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011cc:	f003 0302 	and.w	r3, r3, #2
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d1ea      	bne.n	80011aa <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	f003 0304 	and.w	r3, r3, #4
 80011dc:	2b00      	cmp	r3, #0
 80011de:	f000 8097 	beq.w	8001310 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011e2:	2300      	movs	r3, #0
 80011e4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011e6:	4b81      	ldr	r3, [pc, #516]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d10f      	bne.n	8001212 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	60bb      	str	r3, [r7, #8]
 80011f6:	4b7d      	ldr	r3, [pc, #500]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80011f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011fa:	4a7c      	ldr	r2, [pc, #496]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80011fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001200:	6413      	str	r3, [r2, #64]	; 0x40
 8001202:	4b7a      	ldr	r3, [pc, #488]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001206:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800120a:	60bb      	str	r3, [r7, #8]
 800120c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800120e:	2301      	movs	r3, #1
 8001210:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001212:	4b77      	ldr	r3, [pc, #476]	; (80013f0 <HAL_RCC_OscConfig+0x474>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800121a:	2b00      	cmp	r3, #0
 800121c:	d118      	bne.n	8001250 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800121e:	4b74      	ldr	r3, [pc, #464]	; (80013f0 <HAL_RCC_OscConfig+0x474>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	4a73      	ldr	r2, [pc, #460]	; (80013f0 <HAL_RCC_OscConfig+0x474>)
 8001224:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001228:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800122a:	f7ff fc05 	bl	8000a38 <HAL_GetTick>
 800122e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001230:	e008      	b.n	8001244 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001232:	f7ff fc01 	bl	8000a38 <HAL_GetTick>
 8001236:	4602      	mov	r2, r0
 8001238:	693b      	ldr	r3, [r7, #16]
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d901      	bls.n	8001244 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	e10c      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001244:	4b6a      	ldr	r3, [pc, #424]	; (80013f0 <HAL_RCC_OscConfig+0x474>)
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800124c:	2b00      	cmp	r3, #0
 800124e:	d0f0      	beq.n	8001232 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	689b      	ldr	r3, [r3, #8]
 8001254:	2b01      	cmp	r3, #1
 8001256:	d106      	bne.n	8001266 <HAL_RCC_OscConfig+0x2ea>
 8001258:	4b64      	ldr	r3, [pc, #400]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800125a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125c:	4a63      	ldr	r2, [pc, #396]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6713      	str	r3, [r2, #112]	; 0x70
 8001264:	e01c      	b.n	80012a0 <HAL_RCC_OscConfig+0x324>
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	689b      	ldr	r3, [r3, #8]
 800126a:	2b05      	cmp	r3, #5
 800126c:	d10c      	bne.n	8001288 <HAL_RCC_OscConfig+0x30c>
 800126e:	4b5f      	ldr	r3, [pc, #380]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001270:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001272:	4a5e      	ldr	r2, [pc, #376]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001274:	f043 0304 	orr.w	r3, r3, #4
 8001278:	6713      	str	r3, [r2, #112]	; 0x70
 800127a:	4b5c      	ldr	r3, [pc, #368]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800127c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800127e:	4a5b      	ldr	r2, [pc, #364]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001280:	f043 0301 	orr.w	r3, r3, #1
 8001284:	6713      	str	r3, [r2, #112]	; 0x70
 8001286:	e00b      	b.n	80012a0 <HAL_RCC_OscConfig+0x324>
 8001288:	4b58      	ldr	r3, [pc, #352]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800128a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800128c:	4a57      	ldr	r2, [pc, #348]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800128e:	f023 0301 	bic.w	r3, r3, #1
 8001292:	6713      	str	r3, [r2, #112]	; 0x70
 8001294:	4b55      	ldr	r3, [pc, #340]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001296:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001298:	4a54      	ldr	r2, [pc, #336]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800129a:	f023 0304 	bic.w	r3, r3, #4
 800129e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	689b      	ldr	r3, [r3, #8]
 80012a4:	2b00      	cmp	r3, #0
 80012a6:	d015      	beq.n	80012d4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80012a8:	f7ff fbc6 	bl	8000a38 <HAL_GetTick>
 80012ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ae:	e00a      	b.n	80012c6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012b0:	f7ff fbc2 	bl	8000a38 <HAL_GetTick>
 80012b4:	4602      	mov	r2, r0
 80012b6:	693b      	ldr	r3, [r7, #16]
 80012b8:	1ad3      	subs	r3, r2, r3
 80012ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80012be:	4293      	cmp	r3, r2
 80012c0:	d901      	bls.n	80012c6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012c2:	2303      	movs	r3, #3
 80012c4:	e0cb      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012c6:	4b49      	ldr	r3, [pc, #292]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80012c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012ca:	f003 0302 	and.w	r3, r3, #2
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d0ee      	beq.n	80012b0 <HAL_RCC_OscConfig+0x334>
 80012d2:	e014      	b.n	80012fe <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012d4:	f7ff fbb0 	bl	8000a38 <HAL_GetTick>
 80012d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012da:	e00a      	b.n	80012f2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012dc:	f7ff fbac 	bl	8000a38 <HAL_GetTick>
 80012e0:	4602      	mov	r2, r0
 80012e2:	693b      	ldr	r3, [r7, #16]
 80012e4:	1ad3      	subs	r3, r2, r3
 80012e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80012ea:	4293      	cmp	r3, r2
 80012ec:	d901      	bls.n	80012f2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012ee:	2303      	movs	r3, #3
 80012f0:	e0b5      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012f2:	4b3e      	ldr	r3, [pc, #248]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80012f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012f6:	f003 0302 	and.w	r3, r3, #2
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d1ee      	bne.n	80012dc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012fe:	7dfb      	ldrb	r3, [r7, #23]
 8001300:	2b01      	cmp	r3, #1
 8001302:	d105      	bne.n	8001310 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001304:	4b39      	ldr	r3, [pc, #228]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001306:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001308:	4a38      	ldr	r2, [pc, #224]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800130a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800130e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	699b      	ldr	r3, [r3, #24]
 8001314:	2b00      	cmp	r3, #0
 8001316:	f000 80a1 	beq.w	800145c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800131a:	4b34      	ldr	r3, [pc, #208]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 800131c:	689b      	ldr	r3, [r3, #8]
 800131e:	f003 030c 	and.w	r3, r3, #12
 8001322:	2b08      	cmp	r3, #8
 8001324:	d05c      	beq.n	80013e0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	699b      	ldr	r3, [r3, #24]
 800132a:	2b02      	cmp	r3, #2
 800132c:	d141      	bne.n	80013b2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800132e:	4b31      	ldr	r3, [pc, #196]	; (80013f4 <HAL_RCC_OscConfig+0x478>)
 8001330:	2200      	movs	r2, #0
 8001332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001334:	f7ff fb80 	bl	8000a38 <HAL_GetTick>
 8001338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800133a:	e008      	b.n	800134e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800133c:	f7ff fb7c 	bl	8000a38 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	693b      	ldr	r3, [r7, #16]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	2b02      	cmp	r3, #2
 8001348:	d901      	bls.n	800134e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800134a:	2303      	movs	r3, #3
 800134c:	e087      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800134e:	4b27      	ldr	r3, [pc, #156]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001356:	2b00      	cmp	r3, #0
 8001358:	d1f0      	bne.n	800133c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	69da      	ldr	r2, [r3, #28]
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	6a1b      	ldr	r3, [r3, #32]
 8001362:	431a      	orrs	r2, r3
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001368:	019b      	lsls	r3, r3, #6
 800136a:	431a      	orrs	r2, r3
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001370:	085b      	lsrs	r3, r3, #1
 8001372:	3b01      	subs	r3, #1
 8001374:	041b      	lsls	r3, r3, #16
 8001376:	431a      	orrs	r2, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800137c:	061b      	lsls	r3, r3, #24
 800137e:	491b      	ldr	r1, [pc, #108]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001384:	4b1b      	ldr	r3, [pc, #108]	; (80013f4 <HAL_RCC_OscConfig+0x478>)
 8001386:	2201      	movs	r2, #1
 8001388:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800138a:	f7ff fb55 	bl	8000a38 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001390:	e008      	b.n	80013a4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001392:	f7ff fb51 	bl	8000a38 <HAL_GetTick>
 8001396:	4602      	mov	r2, r0
 8001398:	693b      	ldr	r3, [r7, #16]
 800139a:	1ad3      	subs	r3, r2, r3
 800139c:	2b02      	cmp	r3, #2
 800139e:	d901      	bls.n	80013a4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80013a0:	2303      	movs	r3, #3
 80013a2:	e05c      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80013a4:	4b11      	ldr	r3, [pc, #68]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d0f0      	beq.n	8001392 <HAL_RCC_OscConfig+0x416>
 80013b0:	e054      	b.n	800145c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b2:	4b10      	ldr	r3, [pc, #64]	; (80013f4 <HAL_RCC_OscConfig+0x478>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013b8:	f7ff fb3e 	bl	8000a38 <HAL_GetTick>
 80013bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013be:	e008      	b.n	80013d2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013c0:	f7ff fb3a 	bl	8000a38 <HAL_GetTick>
 80013c4:	4602      	mov	r2, r0
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	1ad3      	subs	r3, r2, r3
 80013ca:	2b02      	cmp	r3, #2
 80013cc:	d901      	bls.n	80013d2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013ce:	2303      	movs	r3, #3
 80013d0:	e045      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013d2:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_RCC_OscConfig+0x470>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f0      	bne.n	80013c0 <HAL_RCC_OscConfig+0x444>
 80013de:	e03d      	b.n	800145c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	699b      	ldr	r3, [r3, #24]
 80013e4:	2b01      	cmp	r3, #1
 80013e6:	d107      	bne.n	80013f8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013e8:	2301      	movs	r3, #1
 80013ea:	e038      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
 80013ec:	40023800 	.word	0x40023800
 80013f0:	40007000 	.word	0x40007000
 80013f4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013f8:	4b1b      	ldr	r3, [pc, #108]	; (8001468 <HAL_RCC_OscConfig+0x4ec>)
 80013fa:	685b      	ldr	r3, [r3, #4]
 80013fc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	699b      	ldr	r3, [r3, #24]
 8001402:	2b01      	cmp	r3, #1
 8001404:	d028      	beq.n	8001458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001410:	429a      	cmp	r2, r3
 8001412:	d121      	bne.n	8001458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800141e:	429a      	cmp	r2, r3
 8001420:	d11a      	bne.n	8001458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001422:	68fa      	ldr	r2, [r7, #12]
 8001424:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001428:	4013      	ands	r3, r2
 800142a:	687a      	ldr	r2, [r7, #4]
 800142c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800142e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001430:	4293      	cmp	r3, r2
 8001432:	d111      	bne.n	8001458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001434:	68fb      	ldr	r3, [r7, #12]
 8001436:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	085b      	lsrs	r3, r3, #1
 8001440:	3b01      	subs	r3, #1
 8001442:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001444:	429a      	cmp	r2, r3
 8001446:	d107      	bne.n	8001458 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001448:	68fb      	ldr	r3, [r7, #12]
 800144a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001452:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001454:	429a      	cmp	r2, r3
 8001456:	d001      	beq.n	800145c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3718      	adds	r7, #24
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	40023800 	.word	0x40023800

0800146c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b084      	sub	sp, #16
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
 8001474:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	2b00      	cmp	r3, #0
 800147a:	d101      	bne.n	8001480 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800147c:	2301      	movs	r3, #1
 800147e:	e0cc      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001480:	4b68      	ldr	r3, [pc, #416]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f003 0307 	and.w	r3, r3, #7
 8001488:	683a      	ldr	r2, [r7, #0]
 800148a:	429a      	cmp	r2, r3
 800148c:	d90c      	bls.n	80014a8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800148e:	4b65      	ldr	r3, [pc, #404]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 8001490:	683a      	ldr	r2, [r7, #0]
 8001492:	b2d2      	uxtb	r2, r2
 8001494:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001496:	4b63      	ldr	r3, [pc, #396]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	f003 0307 	and.w	r3, r3, #7
 800149e:	683a      	ldr	r2, [r7, #0]
 80014a0:	429a      	cmp	r2, r3
 80014a2:	d001      	beq.n	80014a8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80014a4:	2301      	movs	r3, #1
 80014a6:	e0b8      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f003 0302 	and.w	r3, r3, #2
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d020      	beq.n	80014f6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0304 	and.w	r3, r3, #4
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014c0:	4b59      	ldr	r3, [pc, #356]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4a58      	ldr	r2, [pc, #352]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014ca:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f003 0308 	and.w	r3, r3, #8
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d005      	beq.n	80014e4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014d8:	4b53      	ldr	r3, [pc, #332]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	4a52      	ldr	r2, [pc, #328]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014de:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014e2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014e4:	4b50      	ldr	r3, [pc, #320]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014e6:	689b      	ldr	r3, [r3, #8]
 80014e8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	689b      	ldr	r3, [r3, #8]
 80014f0:	494d      	ldr	r1, [pc, #308]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80014f2:	4313      	orrs	r3, r2
 80014f4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	f003 0301 	and.w	r3, r3, #1
 80014fe:	2b00      	cmp	r3, #0
 8001500:	d044      	beq.n	800158c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b01      	cmp	r3, #1
 8001508:	d107      	bne.n	800151a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800150a:	4b47      	ldr	r3, [pc, #284]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001512:	2b00      	cmp	r3, #0
 8001514:	d119      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001516:	2301      	movs	r3, #1
 8001518:	e07f      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	685b      	ldr	r3, [r3, #4]
 800151e:	2b02      	cmp	r3, #2
 8001520:	d003      	beq.n	800152a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001526:	2b03      	cmp	r3, #3
 8001528:	d107      	bne.n	800153a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800152a:	4b3f      	ldr	r3, [pc, #252]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001532:	2b00      	cmp	r3, #0
 8001534:	d109      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001536:	2301      	movs	r3, #1
 8001538:	e06f      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800153a:	4b3b      	ldr	r3, [pc, #236]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	f003 0302 	and.w	r3, r3, #2
 8001542:	2b00      	cmp	r3, #0
 8001544:	d101      	bne.n	800154a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001546:	2301      	movs	r3, #1
 8001548:	e067      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800154a:	4b37      	ldr	r3, [pc, #220]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800154c:	689b      	ldr	r3, [r3, #8]
 800154e:	f023 0203 	bic.w	r2, r3, #3
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	685b      	ldr	r3, [r3, #4]
 8001556:	4934      	ldr	r1, [pc, #208]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 8001558:	4313      	orrs	r3, r2
 800155a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800155c:	f7ff fa6c 	bl	8000a38 <HAL_GetTick>
 8001560:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	e00a      	b.n	800157a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001564:	f7ff fa68 	bl	8000a38 <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	68fb      	ldr	r3, [r7, #12]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001572:	4293      	cmp	r3, r2
 8001574:	d901      	bls.n	800157a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001576:	2303      	movs	r3, #3
 8001578:	e04f      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800157a:	4b2b      	ldr	r3, [pc, #172]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f003 020c 	and.w	r2, r3, #12
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	685b      	ldr	r3, [r3, #4]
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	429a      	cmp	r2, r3
 800158a:	d1eb      	bne.n	8001564 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800158c:	4b25      	ldr	r3, [pc, #148]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	f003 0307 	and.w	r3, r3, #7
 8001594:	683a      	ldr	r2, [r7, #0]
 8001596:	429a      	cmp	r2, r3
 8001598:	d20c      	bcs.n	80015b4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800159a:	4b22      	ldr	r3, [pc, #136]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 800159c:	683a      	ldr	r2, [r7, #0]
 800159e:	b2d2      	uxtb	r2, r2
 80015a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80015a2:	4b20      	ldr	r3, [pc, #128]	; (8001624 <HAL_RCC_ClockConfig+0x1b8>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0307 	and.w	r3, r3, #7
 80015aa:	683a      	ldr	r2, [r7, #0]
 80015ac:	429a      	cmp	r2, r3
 80015ae:	d001      	beq.n	80015b4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80015b0:	2301      	movs	r3, #1
 80015b2:	e032      	b.n	800161a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	f003 0304 	and.w	r3, r3, #4
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d008      	beq.n	80015d2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015c0:	4b19      	ldr	r3, [pc, #100]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	68db      	ldr	r3, [r3, #12]
 80015cc:	4916      	ldr	r1, [pc, #88]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015ce:	4313      	orrs	r3, r2
 80015d0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	f003 0308 	and.w	r3, r3, #8
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d009      	beq.n	80015f2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015de:	4b12      	ldr	r3, [pc, #72]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	691b      	ldr	r3, [r3, #16]
 80015ea:	00db      	lsls	r3, r3, #3
 80015ec:	490e      	ldr	r1, [pc, #56]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015ee:	4313      	orrs	r3, r2
 80015f0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015f2:	f000 f821 	bl	8001638 <HAL_RCC_GetSysClockFreq>
 80015f6:	4602      	mov	r2, r0
 80015f8:	4b0b      	ldr	r3, [pc, #44]	; (8001628 <HAL_RCC_ClockConfig+0x1bc>)
 80015fa:	689b      	ldr	r3, [r3, #8]
 80015fc:	091b      	lsrs	r3, r3, #4
 80015fe:	f003 030f 	and.w	r3, r3, #15
 8001602:	490a      	ldr	r1, [pc, #40]	; (800162c <HAL_RCC_ClockConfig+0x1c0>)
 8001604:	5ccb      	ldrb	r3, [r1, r3]
 8001606:	fa22 f303 	lsr.w	r3, r2, r3
 800160a:	4a09      	ldr	r2, [pc, #36]	; (8001630 <HAL_RCC_ClockConfig+0x1c4>)
 800160c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800160e:	4b09      	ldr	r3, [pc, #36]	; (8001634 <HAL_RCC_ClockConfig+0x1c8>)
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	4618      	mov	r0, r3
 8001614:	f7ff f91e 	bl	8000854 <HAL_InitTick>

  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3710      	adds	r7, #16
 800161e:	46bd      	mov	sp, r7
 8001620:	bd80      	pop	{r7, pc}
 8001622:	bf00      	nop
 8001624:	40023c00 	.word	0x40023c00
 8001628:	40023800 	.word	0x40023800
 800162c:	0800570c 	.word	0x0800570c
 8001630:	20000000 	.word	0x20000000
 8001634:	20000004 	.word	0x20000004

08001638 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001638:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800163c:	b094      	sub	sp, #80	; 0x50
 800163e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001640:	2300      	movs	r3, #0
 8001642:	647b      	str	r3, [r7, #68]	; 0x44
 8001644:	2300      	movs	r3, #0
 8001646:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001648:	2300      	movs	r3, #0
 800164a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800164c:	2300      	movs	r3, #0
 800164e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001650:	4b79      	ldr	r3, [pc, #484]	; (8001838 <HAL_RCC_GetSysClockFreq+0x200>)
 8001652:	689b      	ldr	r3, [r3, #8]
 8001654:	f003 030c 	and.w	r3, r3, #12
 8001658:	2b08      	cmp	r3, #8
 800165a:	d00d      	beq.n	8001678 <HAL_RCC_GetSysClockFreq+0x40>
 800165c:	2b08      	cmp	r3, #8
 800165e:	f200 80e1 	bhi.w	8001824 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001662:	2b00      	cmp	r3, #0
 8001664:	d002      	beq.n	800166c <HAL_RCC_GetSysClockFreq+0x34>
 8001666:	2b04      	cmp	r3, #4
 8001668:	d003      	beq.n	8001672 <HAL_RCC_GetSysClockFreq+0x3a>
 800166a:	e0db      	b.n	8001824 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800166c:	4b73      	ldr	r3, [pc, #460]	; (800183c <HAL_RCC_GetSysClockFreq+0x204>)
 800166e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001670:	e0db      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001672:	4b73      	ldr	r3, [pc, #460]	; (8001840 <HAL_RCC_GetSysClockFreq+0x208>)
 8001674:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001676:	e0d8      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001678:	4b6f      	ldr	r3, [pc, #444]	; (8001838 <HAL_RCC_GetSysClockFreq+0x200>)
 800167a:	685b      	ldr	r3, [r3, #4]
 800167c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001682:	4b6d      	ldr	r3, [pc, #436]	; (8001838 <HAL_RCC_GetSysClockFreq+0x200>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800168a:	2b00      	cmp	r3, #0
 800168c:	d063      	beq.n	8001756 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800168e:	4b6a      	ldr	r3, [pc, #424]	; (8001838 <HAL_RCC_GetSysClockFreq+0x200>)
 8001690:	685b      	ldr	r3, [r3, #4]
 8001692:	099b      	lsrs	r3, r3, #6
 8001694:	2200      	movs	r2, #0
 8001696:	63bb      	str	r3, [r7, #56]	; 0x38
 8001698:	63fa      	str	r2, [r7, #60]	; 0x3c
 800169a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800169c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80016a0:	633b      	str	r3, [r7, #48]	; 0x30
 80016a2:	2300      	movs	r3, #0
 80016a4:	637b      	str	r3, [r7, #52]	; 0x34
 80016a6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80016aa:	4622      	mov	r2, r4
 80016ac:	462b      	mov	r3, r5
 80016ae:	f04f 0000 	mov.w	r0, #0
 80016b2:	f04f 0100 	mov.w	r1, #0
 80016b6:	0159      	lsls	r1, r3, #5
 80016b8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016bc:	0150      	lsls	r0, r2, #5
 80016be:	4602      	mov	r2, r0
 80016c0:	460b      	mov	r3, r1
 80016c2:	4621      	mov	r1, r4
 80016c4:	1a51      	subs	r1, r2, r1
 80016c6:	6139      	str	r1, [r7, #16]
 80016c8:	4629      	mov	r1, r5
 80016ca:	eb63 0301 	sbc.w	r3, r3, r1
 80016ce:	617b      	str	r3, [r7, #20]
 80016d0:	f04f 0200 	mov.w	r2, #0
 80016d4:	f04f 0300 	mov.w	r3, #0
 80016d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016dc:	4659      	mov	r1, fp
 80016de:	018b      	lsls	r3, r1, #6
 80016e0:	4651      	mov	r1, sl
 80016e2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016e6:	4651      	mov	r1, sl
 80016e8:	018a      	lsls	r2, r1, #6
 80016ea:	4651      	mov	r1, sl
 80016ec:	ebb2 0801 	subs.w	r8, r2, r1
 80016f0:	4659      	mov	r1, fp
 80016f2:	eb63 0901 	sbc.w	r9, r3, r1
 80016f6:	f04f 0200 	mov.w	r2, #0
 80016fa:	f04f 0300 	mov.w	r3, #0
 80016fe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001702:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001706:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800170a:	4690      	mov	r8, r2
 800170c:	4699      	mov	r9, r3
 800170e:	4623      	mov	r3, r4
 8001710:	eb18 0303 	adds.w	r3, r8, r3
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	462b      	mov	r3, r5
 8001718:	eb49 0303 	adc.w	r3, r9, r3
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	f04f 0200 	mov.w	r2, #0
 8001722:	f04f 0300 	mov.w	r3, #0
 8001726:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800172a:	4629      	mov	r1, r5
 800172c:	024b      	lsls	r3, r1, #9
 800172e:	4621      	mov	r1, r4
 8001730:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001734:	4621      	mov	r1, r4
 8001736:	024a      	lsls	r2, r1, #9
 8001738:	4610      	mov	r0, r2
 800173a:	4619      	mov	r1, r3
 800173c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800173e:	2200      	movs	r2, #0
 8001740:	62bb      	str	r3, [r7, #40]	; 0x28
 8001742:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001744:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001748:	f7fe fd42 	bl	80001d0 <__aeabi_uldivmod>
 800174c:	4602      	mov	r2, r0
 800174e:	460b      	mov	r3, r1
 8001750:	4613      	mov	r3, r2
 8001752:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001754:	e058      	b.n	8001808 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001756:	4b38      	ldr	r3, [pc, #224]	; (8001838 <HAL_RCC_GetSysClockFreq+0x200>)
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	099b      	lsrs	r3, r3, #6
 800175c:	2200      	movs	r2, #0
 800175e:	4618      	mov	r0, r3
 8001760:	4611      	mov	r1, r2
 8001762:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001766:	623b      	str	r3, [r7, #32]
 8001768:	2300      	movs	r3, #0
 800176a:	627b      	str	r3, [r7, #36]	; 0x24
 800176c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001770:	4642      	mov	r2, r8
 8001772:	464b      	mov	r3, r9
 8001774:	f04f 0000 	mov.w	r0, #0
 8001778:	f04f 0100 	mov.w	r1, #0
 800177c:	0159      	lsls	r1, r3, #5
 800177e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001782:	0150      	lsls	r0, r2, #5
 8001784:	4602      	mov	r2, r0
 8001786:	460b      	mov	r3, r1
 8001788:	4641      	mov	r1, r8
 800178a:	ebb2 0a01 	subs.w	sl, r2, r1
 800178e:	4649      	mov	r1, r9
 8001790:	eb63 0b01 	sbc.w	fp, r3, r1
 8001794:	f04f 0200 	mov.w	r2, #0
 8001798:	f04f 0300 	mov.w	r3, #0
 800179c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80017a0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80017a4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80017a8:	ebb2 040a 	subs.w	r4, r2, sl
 80017ac:	eb63 050b 	sbc.w	r5, r3, fp
 80017b0:	f04f 0200 	mov.w	r2, #0
 80017b4:	f04f 0300 	mov.w	r3, #0
 80017b8:	00eb      	lsls	r3, r5, #3
 80017ba:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017be:	00e2      	lsls	r2, r4, #3
 80017c0:	4614      	mov	r4, r2
 80017c2:	461d      	mov	r5, r3
 80017c4:	4643      	mov	r3, r8
 80017c6:	18e3      	adds	r3, r4, r3
 80017c8:	603b      	str	r3, [r7, #0]
 80017ca:	464b      	mov	r3, r9
 80017cc:	eb45 0303 	adc.w	r3, r5, r3
 80017d0:	607b      	str	r3, [r7, #4]
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	f04f 0300 	mov.w	r3, #0
 80017da:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017de:	4629      	mov	r1, r5
 80017e0:	028b      	lsls	r3, r1, #10
 80017e2:	4621      	mov	r1, r4
 80017e4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017e8:	4621      	mov	r1, r4
 80017ea:	028a      	lsls	r2, r1, #10
 80017ec:	4610      	mov	r0, r2
 80017ee:	4619      	mov	r1, r3
 80017f0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017f2:	2200      	movs	r2, #0
 80017f4:	61bb      	str	r3, [r7, #24]
 80017f6:	61fa      	str	r2, [r7, #28]
 80017f8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017fc:	f7fe fce8 	bl	80001d0 <__aeabi_uldivmod>
 8001800:	4602      	mov	r2, r0
 8001802:	460b      	mov	r3, r1
 8001804:	4613      	mov	r3, r2
 8001806:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001808:	4b0b      	ldr	r3, [pc, #44]	; (8001838 <HAL_RCC_GetSysClockFreq+0x200>)
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	0c1b      	lsrs	r3, r3, #16
 800180e:	f003 0303 	and.w	r3, r3, #3
 8001812:	3301      	adds	r3, #1
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001818:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800181a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800181c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001820:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001822:	e002      	b.n	800182a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001824:	4b05      	ldr	r3, [pc, #20]	; (800183c <HAL_RCC_GetSysClockFreq+0x204>)
 8001826:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001828:	bf00      	nop
    }
  }
  return sysclockfreq;
 800182a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800182c:	4618      	mov	r0, r3
 800182e:	3750      	adds	r7, #80	; 0x50
 8001830:	46bd      	mov	sp, r7
 8001832:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001836:	bf00      	nop
 8001838:	40023800 	.word	0x40023800
 800183c:	00f42400 	.word	0x00f42400
 8001840:	007a1200 	.word	0x007a1200

08001844 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001848:	4b03      	ldr	r3, [pc, #12]	; (8001858 <HAL_RCC_GetHCLKFreq+0x14>)
 800184a:	681b      	ldr	r3, [r3, #0]
}
 800184c:	4618      	mov	r0, r3
 800184e:	46bd      	mov	sp, r7
 8001850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop
 8001858:	20000000 	.word	0x20000000

0800185c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001860:	f7ff fff0 	bl	8001844 <HAL_RCC_GetHCLKFreq>
 8001864:	4602      	mov	r2, r0
 8001866:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001868:	689b      	ldr	r3, [r3, #8]
 800186a:	0a9b      	lsrs	r3, r3, #10
 800186c:	f003 0307 	and.w	r3, r3, #7
 8001870:	4903      	ldr	r1, [pc, #12]	; (8001880 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001872:	5ccb      	ldrb	r3, [r1, r3]
 8001874:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001878:	4618      	mov	r0, r3
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40023800 	.word	0x40023800
 8001880:	0800571c 	.word	0x0800571c

08001884 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001884:	b480      	push	{r7}
 8001886:	b083      	sub	sp, #12
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
 800188c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	220f      	movs	r2, #15
 8001892:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001894:	4b12      	ldr	r3, [pc, #72]	; (80018e0 <HAL_RCC_GetClockConfig+0x5c>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f003 0203 	and.w	r2, r3, #3
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <HAL_RCC_GetClockConfig+0x5c>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <HAL_RCC_GetClockConfig+0x5c>)
 80018ae:	689b      	ldr	r3, [r3, #8]
 80018b0:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <HAL_RCC_GetClockConfig+0x5c>)
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	08db      	lsrs	r3, r3, #3
 80018be:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <HAL_RCC_GetClockConfig+0x60>)
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f003 0207 	and.w	r2, r3, #7
 80018ce:	683b      	ldr	r3, [r7, #0]
 80018d0:	601a      	str	r2, [r3, #0]
}
 80018d2:	bf00      	nop
 80018d4:	370c      	adds	r7, #12
 80018d6:	46bd      	mov	sp, r7
 80018d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018dc:	4770      	bx	lr
 80018de:	bf00      	nop
 80018e0:	40023800 	.word	0x40023800
 80018e4:	40023c00 	.word	0x40023c00

080018e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b082      	sub	sp, #8
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e041      	b.n	800197e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001900:	b2db      	uxtb	r3, r3
 8001902:	2b00      	cmp	r3, #0
 8001904:	d106      	bne.n	8001914 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	2200      	movs	r2, #0
 800190a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	f000 f839 	bl	8001986 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2202      	movs	r2, #2
 8001918:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681a      	ldr	r2, [r3, #0]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	3304      	adds	r3, #4
 8001924:	4619      	mov	r1, r3
 8001926:	4610      	mov	r0, r2
 8001928:	f000 f9d8 	bl	8001cdc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	2201      	movs	r2, #1
 8001968:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	2201      	movs	r2, #1
 8001970:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	2201      	movs	r2, #1
 8001978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800197c:	2300      	movs	r3, #0
}
 800197e:	4618      	mov	r0, r3
 8001980:	3708      	adds	r7, #8
 8001982:	46bd      	mov	sp, r7
 8001984:	bd80      	pop	{r7, pc}

08001986 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8001986:	b480      	push	{r7}
 8001988:	b083      	sub	sp, #12
 800198a:	af00      	add	r7, sp, #0
 800198c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800198e:	bf00      	nop
 8001990:	370c      	adds	r7, #12
 8001992:	46bd      	mov	sp, r7
 8001994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001998:	4770      	bx	lr
	...

0800199c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800199c:	b480      	push	{r7}
 800199e:	b085      	sub	sp, #20
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	2b01      	cmp	r3, #1
 80019ae:	d001      	beq.n	80019b4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80019b0:	2301      	movs	r3, #1
 80019b2:	e04e      	b.n	8001a52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	2202      	movs	r2, #2
 80019b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	68da      	ldr	r2, [r3, #12]
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	f042 0201 	orr.w	r2, r2, #1
 80019ca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a23      	ldr	r2, [pc, #140]	; (8001a60 <HAL_TIM_Base_Start_IT+0xc4>)
 80019d2:	4293      	cmp	r3, r2
 80019d4:	d022      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019de:	d01d      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	4a1f      	ldr	r2, [pc, #124]	; (8001a64 <HAL_TIM_Base_Start_IT+0xc8>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d018      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4a1e      	ldr	r2, [pc, #120]	; (8001a68 <HAL_TIM_Base_Start_IT+0xcc>)
 80019f0:	4293      	cmp	r3, r2
 80019f2:	d013      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4a1c      	ldr	r2, [pc, #112]	; (8001a6c <HAL_TIM_Base_Start_IT+0xd0>)
 80019fa:	4293      	cmp	r3, r2
 80019fc:	d00e      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	681b      	ldr	r3, [r3, #0]
 8001a02:	4a1b      	ldr	r2, [pc, #108]	; (8001a70 <HAL_TIM_Base_Start_IT+0xd4>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	d009      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	4a19      	ldr	r2, [pc, #100]	; (8001a74 <HAL_TIM_Base_Start_IT+0xd8>)
 8001a0e:	4293      	cmp	r3, r2
 8001a10:	d004      	beq.n	8001a1c <HAL_TIM_Base_Start_IT+0x80>
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4a18      	ldr	r2, [pc, #96]	; (8001a78 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a18:	4293      	cmp	r3, r2
 8001a1a:	d111      	bne.n	8001a40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	689b      	ldr	r3, [r3, #8]
 8001a22:	f003 0307 	and.w	r3, r3, #7
 8001a26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	2b06      	cmp	r3, #6
 8001a2c:	d010      	beq.n	8001a50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	681a      	ldr	r2, [r3, #0]
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f042 0201 	orr.w	r2, r2, #1
 8001a3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a3e:	e007      	b.n	8001a50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	681a      	ldr	r2, [r3, #0]
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f042 0201 	orr.w	r2, r2, #1
 8001a4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3714      	adds	r7, #20
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr
 8001a5e:	bf00      	nop
 8001a60:	40010000 	.word	0x40010000
 8001a64:	40000400 	.word	0x40000400
 8001a68:	40000800 	.word	0x40000800
 8001a6c:	40000c00 	.word	0x40000c00
 8001a70:	40010400 	.word	0x40010400
 8001a74:	40014000 	.word	0x40014000
 8001a78:	40001800 	.word	0x40001800

08001a7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b082      	sub	sp, #8
 8001a80:	af00      	add	r7, sp, #0
 8001a82:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	f003 0302 	and.w	r3, r3, #2
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d122      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	68db      	ldr	r3, [r3, #12]
 8001a98:	f003 0302 	and.w	r3, r3, #2
 8001a9c:	2b02      	cmp	r3, #2
 8001a9e:	d11b      	bne.n	8001ad8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f06f 0202 	mvn.w	r2, #2
 8001aa8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2201      	movs	r2, #1
 8001aae:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	699b      	ldr	r3, [r3, #24]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d003      	beq.n	8001ac6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001abe:	6878      	ldr	r0, [r7, #4]
 8001ac0:	f000 f8ee 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001ac4:	e005      	b.n	8001ad2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f000 f8e0 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f000 f8f1 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	691b      	ldr	r3, [r3, #16]
 8001ade:	f003 0304 	and.w	r3, r3, #4
 8001ae2:	2b04      	cmp	r3, #4
 8001ae4:	d122      	bne.n	8001b2c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	f003 0304 	and.w	r3, r3, #4
 8001af0:	2b04      	cmp	r3, #4
 8001af2:	d11b      	bne.n	8001b2c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f06f 0204 	mvn.w	r2, #4
 8001afc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2202      	movs	r2, #2
 8001b02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	699b      	ldr	r3, [r3, #24]
 8001b0a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d003      	beq.n	8001b1a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b12:	6878      	ldr	r0, [r7, #4]
 8001b14:	f000 f8c4 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001b18:	e005      	b.n	8001b26 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b1a:	6878      	ldr	r0, [r7, #4]
 8001b1c:	f000 f8b6 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b20:	6878      	ldr	r0, [r7, #4]
 8001b22:	f000 f8c7 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	2200      	movs	r2, #0
 8001b2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691b      	ldr	r3, [r3, #16]
 8001b32:	f003 0308 	and.w	r3, r3, #8
 8001b36:	2b08      	cmp	r3, #8
 8001b38:	d122      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	68db      	ldr	r3, [r3, #12]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b08      	cmp	r3, #8
 8001b46:	d11b      	bne.n	8001b80 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f06f 0208 	mvn.w	r2, #8
 8001b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	2204      	movs	r2, #4
 8001b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	69db      	ldr	r3, [r3, #28]
 8001b5e:	f003 0303 	and.w	r3, r3, #3
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d003      	beq.n	8001b6e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	f000 f89a 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001b6c:	e005      	b.n	8001b7a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b6e:	6878      	ldr	r0, [r7, #4]
 8001b70:	f000 f88c 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b74:	6878      	ldr	r0, [r7, #4]
 8001b76:	f000 f89d 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	691b      	ldr	r3, [r3, #16]
 8001b86:	f003 0310 	and.w	r3, r3, #16
 8001b8a:	2b10      	cmp	r3, #16
 8001b8c:	d122      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	f003 0310 	and.w	r3, r3, #16
 8001b98:	2b10      	cmp	r3, #16
 8001b9a:	d11b      	bne.n	8001bd4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	f06f 0210 	mvn.w	r2, #16
 8001ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2208      	movs	r2, #8
 8001baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	681b      	ldr	r3, [r3, #0]
 8001bb0:	69db      	ldr	r3, [r3, #28]
 8001bb2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001bb6:	2b00      	cmp	r3, #0
 8001bb8:	d003      	beq.n	8001bc2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001bba:	6878      	ldr	r0, [r7, #4]
 8001bbc:	f000 f870 	bl	8001ca0 <HAL_TIM_IC_CaptureCallback>
 8001bc0:	e005      	b.n	8001bce <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f000 f862 	bl	8001c8c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bc8:	6878      	ldr	r0, [r7, #4]
 8001bca:	f000 f873 	bl	8001cb4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	2200      	movs	r2, #0
 8001bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	691b      	ldr	r3, [r3, #16]
 8001bda:	f003 0301 	and.w	r3, r3, #1
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d10e      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	68db      	ldr	r3, [r3, #12]
 8001be8:	f003 0301 	and.w	r3, r3, #1
 8001bec:	2b01      	cmp	r3, #1
 8001bee:	d107      	bne.n	8001c00 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	f06f 0201 	mvn.w	r2, #1
 8001bf8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7fe fde6 	bl	80007cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	691b      	ldr	r3, [r3, #16]
 8001c06:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c0a:	2b80      	cmp	r3, #128	; 0x80
 8001c0c:	d10e      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	68db      	ldr	r3, [r3, #12]
 8001c14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c18:	2b80      	cmp	r3, #128	; 0x80
 8001c1a:	d107      	bne.n	8001c2c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	681b      	ldr	r3, [r3, #0]
 8001c20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 f902 	bl	8001e30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	691b      	ldr	r3, [r3, #16]
 8001c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c36:	2b40      	cmp	r3, #64	; 0x40
 8001c38:	d10e      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c44:	2b40      	cmp	r3, #64	; 0x40
 8001c46:	d107      	bne.n	8001c58 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	681b      	ldr	r3, [r3, #0]
 8001c4c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c50:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c52:	6878      	ldr	r0, [r7, #4]
 8001c54:	f000 f838 	bl	8001cc8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	f003 0320 	and.w	r3, r3, #32
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	d10e      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	f003 0320 	and.w	r3, r3, #32
 8001c70:	2b20      	cmp	r3, #32
 8001c72:	d107      	bne.n	8001c84 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	f06f 0220 	mvn.w	r2, #32
 8001c7c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c7e:	6878      	ldr	r0, [r7, #4]
 8001c80:	f000 f8cc 	bl	8001e1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c84:	bf00      	nop
 8001c86:	3708      	adds	r7, #8
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	bd80      	pop	{r7, pc}

08001c8c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c94:	bf00      	nop
 8001c96:	370c      	adds	r7, #12
 8001c98:	46bd      	mov	sp, r7
 8001c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9e:	4770      	bx	lr

08001ca0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001ca8:	bf00      	nop
 8001caa:	370c      	adds	r7, #12
 8001cac:	46bd      	mov	sp, r7
 8001cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cb2:	4770      	bx	lr

08001cb4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001cbc:	bf00      	nop
 8001cbe:	370c      	adds	r7, #12
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc6:	4770      	bx	lr

08001cc8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cd0:	bf00      	nop
 8001cd2:	370c      	adds	r7, #12
 8001cd4:	46bd      	mov	sp, r7
 8001cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cda:	4770      	bx	lr

08001cdc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cdc:	b480      	push	{r7}
 8001cde:	b085      	sub	sp, #20
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a40      	ldr	r2, [pc, #256]	; (8001df0 <TIM_Base_SetConfig+0x114>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d013      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001cfa:	d00f      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a3d      	ldr	r2, [pc, #244]	; (8001df4 <TIM_Base_SetConfig+0x118>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d00b      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a3c      	ldr	r2, [pc, #240]	; (8001df8 <TIM_Base_SetConfig+0x11c>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d007      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a3b      	ldr	r2, [pc, #236]	; (8001dfc <TIM_Base_SetConfig+0x120>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d003      	beq.n	8001d1c <TIM_Base_SetConfig+0x40>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a3a      	ldr	r2, [pc, #232]	; (8001e00 <TIM_Base_SetConfig+0x124>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d108      	bne.n	8001d2e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d22:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d24:	683b      	ldr	r3, [r7, #0]
 8001d26:	685b      	ldr	r3, [r3, #4]
 8001d28:	68fa      	ldr	r2, [r7, #12]
 8001d2a:	4313      	orrs	r3, r2
 8001d2c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a2f      	ldr	r2, [pc, #188]	; (8001df0 <TIM_Base_SetConfig+0x114>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d02b      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d3c:	d027      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a2c      	ldr	r2, [pc, #176]	; (8001df4 <TIM_Base_SetConfig+0x118>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d023      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a2b      	ldr	r2, [pc, #172]	; (8001df8 <TIM_Base_SetConfig+0x11c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d01f      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a2a      	ldr	r2, [pc, #168]	; (8001dfc <TIM_Base_SetConfig+0x120>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d01b      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a29      	ldr	r2, [pc, #164]	; (8001e00 <TIM_Base_SetConfig+0x124>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d017      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a28      	ldr	r2, [pc, #160]	; (8001e04 <TIM_Base_SetConfig+0x128>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d013      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a27      	ldr	r2, [pc, #156]	; (8001e08 <TIM_Base_SetConfig+0x12c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d00f      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a26      	ldr	r2, [pc, #152]	; (8001e0c <TIM_Base_SetConfig+0x130>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d00b      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a25      	ldr	r2, [pc, #148]	; (8001e10 <TIM_Base_SetConfig+0x134>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d007      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a24      	ldr	r2, [pc, #144]	; (8001e14 <TIM_Base_SetConfig+0x138>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d003      	beq.n	8001d8e <TIM_Base_SetConfig+0xb2>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a23      	ldr	r2, [pc, #140]	; (8001e18 <TIM_Base_SetConfig+0x13c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d108      	bne.n	8001da0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d94:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	68db      	ldr	r3, [r3, #12]
 8001d9a:	68fa      	ldr	r2, [r7, #12]
 8001d9c:	4313      	orrs	r3, r2
 8001d9e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	695b      	ldr	r3, [r3, #20]
 8001daa:	4313      	orrs	r3, r2
 8001dac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	68fa      	ldr	r2, [r7, #12]
 8001db2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	689a      	ldr	r2, [r3, #8]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	4a0a      	ldr	r2, [pc, #40]	; (8001df0 <TIM_Base_SetConfig+0x114>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d003      	beq.n	8001dd4 <TIM_Base_SetConfig+0xf8>
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	4a0c      	ldr	r2, [pc, #48]	; (8001e00 <TIM_Base_SetConfig+0x124>)
 8001dd0:	4293      	cmp	r3, r2
 8001dd2:	d103      	bne.n	8001ddc <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2201      	movs	r2, #1
 8001de0:	615a      	str	r2, [r3, #20]
}
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	40010000 	.word	0x40010000
 8001df4:	40000400 	.word	0x40000400
 8001df8:	40000800 	.word	0x40000800
 8001dfc:	40000c00 	.word	0x40000c00
 8001e00:	40010400 	.word	0x40010400
 8001e04:	40014000 	.word	0x40014000
 8001e08:	40014400 	.word	0x40014400
 8001e0c:	40014800 	.word	0x40014800
 8001e10:	40001800 	.word	0x40001800
 8001e14:	40001c00 	.word	0x40001c00
 8001e18:	40002000 	.word	0x40002000

08001e1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b083      	sub	sp, #12
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e30:	b480      	push	{r7}
 8001e32:	b083      	sub	sp, #12
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e38:	bf00      	nop
 8001e3a:	370c      	adds	r7, #12
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr

08001e44 <__NVIC_SetPriority>:
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	6039      	str	r1, [r7, #0]
 8001e4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	db0a      	blt.n	8001e6e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	b2da      	uxtb	r2, r3
 8001e5c:	490c      	ldr	r1, [pc, #48]	; (8001e90 <__NVIC_SetPriority+0x4c>)
 8001e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e62:	0112      	lsls	r2, r2, #4
 8001e64:	b2d2      	uxtb	r2, r2
 8001e66:	440b      	add	r3, r1
 8001e68:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e6c:	e00a      	b.n	8001e84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	b2da      	uxtb	r2, r3
 8001e72:	4908      	ldr	r1, [pc, #32]	; (8001e94 <__NVIC_SetPriority+0x50>)
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f003 030f 	and.w	r3, r3, #15
 8001e7a:	3b04      	subs	r3, #4
 8001e7c:	0112      	lsls	r2, r2, #4
 8001e7e:	b2d2      	uxtb	r2, r2
 8001e80:	440b      	add	r3, r1
 8001e82:	761a      	strb	r2, [r3, #24]
}
 8001e84:	bf00      	nop
 8001e86:	370c      	adds	r7, #12
 8001e88:	46bd      	mov	sp, r7
 8001e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e8e:	4770      	bx	lr
 8001e90:	e000e100 	.word	0xe000e100
 8001e94:	e000ed00 	.word	0xe000ed00

08001e98 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e98:	b580      	push	{r7, lr}
 8001e9a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e9c:	4b05      	ldr	r3, [pc, #20]	; (8001eb4 <SysTick_Handler+0x1c>)
 8001e9e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001ea0:	f002 f968 	bl	8004174 <xTaskGetSchedulerState>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b01      	cmp	r3, #1
 8001ea8:	d001      	beq.n	8001eae <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001eaa:	f003 f84d 	bl	8004f48 <xPortSysTickHandler>
  }
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	e000e010 	.word	0xe000e010

08001eb8 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ebc:	2100      	movs	r1, #0
 8001ebe:	f06f 0004 	mvn.w	r0, #4
 8001ec2:	f7ff ffbf 	bl	8001e44 <__NVIC_SetPriority>
#endif
}
 8001ec6:	bf00      	nop
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001ed2:	f3ef 8305 	mrs	r3, IPSR
 8001ed6:	603b      	str	r3, [r7, #0]
  return(result);
 8001ed8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d003      	beq.n	8001ee6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001ede:	f06f 0305 	mvn.w	r3, #5
 8001ee2:	607b      	str	r3, [r7, #4]
 8001ee4:	e00c      	b.n	8001f00 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ee6:	4b0a      	ldr	r3, [pc, #40]	; (8001f10 <osKernelInitialize+0x44>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d105      	bne.n	8001efa <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001eee:	4b08      	ldr	r3, [pc, #32]	; (8001f10 <osKernelInitialize+0x44>)
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
 8001ef8:	e002      	b.n	8001f00 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001efa:	f04f 33ff 	mov.w	r3, #4294967295
 8001efe:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f00:	687b      	ldr	r3, [r7, #4]
}
 8001f02:	4618      	mov	r0, r3
 8001f04:	370c      	adds	r7, #12
 8001f06:	46bd      	mov	sp, r7
 8001f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0c:	4770      	bx	lr
 8001f0e:	bf00      	nop
 8001f10:	200000ec 	.word	0x200000ec

08001f14 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f1a:	f3ef 8305 	mrs	r3, IPSR
 8001f1e:	603b      	str	r3, [r7, #0]
  return(result);
 8001f20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d003      	beq.n	8001f2e <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f26:	f06f 0305 	mvn.w	r3, #5
 8001f2a:	607b      	str	r3, [r7, #4]
 8001f2c:	e010      	b.n	8001f50 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f2e:	4b0b      	ldr	r3, [pc, #44]	; (8001f5c <osKernelStart+0x48>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2b01      	cmp	r3, #1
 8001f34:	d109      	bne.n	8001f4a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f36:	f7ff ffbf 	bl	8001eb8 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f3a:	4b08      	ldr	r3, [pc, #32]	; (8001f5c <osKernelStart+0x48>)
 8001f3c:	2202      	movs	r2, #2
 8001f3e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f40:	f001 fcbc 	bl	80038bc <vTaskStartScheduler>
      stat = osOK;
 8001f44:	2300      	movs	r3, #0
 8001f46:	607b      	str	r3, [r7, #4]
 8001f48:	e002      	b.n	8001f50 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f4a:	f04f 33ff 	mov.w	r3, #4294967295
 8001f4e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f50:	687b      	ldr	r3, [r7, #4]
}
 8001f52:	4618      	mov	r0, r3
 8001f54:	3708      	adds	r7, #8
 8001f56:	46bd      	mov	sp, r7
 8001f58:	bd80      	pop	{r7, pc}
 8001f5a:	bf00      	nop
 8001f5c:	200000ec 	.word	0x200000ec

08001f60 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f60:	b580      	push	{r7, lr}
 8001f62:	b08e      	sub	sp, #56	; 0x38
 8001f64:	af04      	add	r7, sp, #16
 8001f66:	60f8      	str	r0, [r7, #12]
 8001f68:	60b9      	str	r1, [r7, #8]
 8001f6a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f70:	f3ef 8305 	mrs	r3, IPSR
 8001f74:	617b      	str	r3, [r7, #20]
  return(result);
 8001f76:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d17e      	bne.n	800207a <osThreadNew+0x11a>
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d07b      	beq.n	800207a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f82:	2380      	movs	r3, #128	; 0x80
 8001f84:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f86:	2318      	movs	r3, #24
 8001f88:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001f8e:	f04f 33ff 	mov.w	r3, #4294967295
 8001f92:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d045      	beq.n	8002026 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d002      	beq.n	8001fa8 <osThreadNew+0x48>
        name = attr->name;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d002      	beq.n	8001fb6 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	699b      	ldr	r3, [r3, #24]
 8001fb4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d008      	beq.n	8001fce <osThreadNew+0x6e>
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b38      	cmp	r3, #56	; 0x38
 8001fc0:	d805      	bhi.n	8001fce <osThreadNew+0x6e>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	685b      	ldr	r3, [r3, #4]
 8001fc6:	f003 0301 	and.w	r3, r3, #1
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <osThreadNew+0x72>
        return (NULL);
 8001fce:	2300      	movs	r3, #0
 8001fd0:	e054      	b.n	800207c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	695b      	ldr	r3, [r3, #20]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	695b      	ldr	r3, [r3, #20]
 8001fde:	089b      	lsrs	r3, r3, #2
 8001fe0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d00e      	beq.n	8002008 <osThreadNew+0xa8>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2bbb      	cmp	r3, #187	; 0xbb
 8001ff0:	d90a      	bls.n	8002008 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d006      	beq.n	8002008 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	695b      	ldr	r3, [r3, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d002      	beq.n	8002008 <osThreadNew+0xa8>
        mem = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	61bb      	str	r3, [r7, #24]
 8002006:	e010      	b.n	800202a <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	2b00      	cmp	r3, #0
 800200e:	d10c      	bne.n	800202a <osThreadNew+0xca>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	68db      	ldr	r3, [r3, #12]
 8002014:	2b00      	cmp	r3, #0
 8002016:	d108      	bne.n	800202a <osThreadNew+0xca>
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d104      	bne.n	800202a <osThreadNew+0xca>
          mem = 0;
 8002020:	2300      	movs	r3, #0
 8002022:	61bb      	str	r3, [r7, #24]
 8002024:	e001      	b.n	800202a <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8002026:	2300      	movs	r3, #0
 8002028:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800202a:	69bb      	ldr	r3, [r7, #24]
 800202c:	2b01      	cmp	r3, #1
 800202e:	d110      	bne.n	8002052 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8002034:	687a      	ldr	r2, [r7, #4]
 8002036:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002038:	9202      	str	r2, [sp, #8]
 800203a:	9301      	str	r3, [sp, #4]
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	9300      	str	r3, [sp, #0]
 8002040:	68bb      	ldr	r3, [r7, #8]
 8002042:	6a3a      	ldr	r2, [r7, #32]
 8002044:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002046:	68f8      	ldr	r0, [r7, #12]
 8002048:	f001 fa4c 	bl	80034e4 <xTaskCreateStatic>
 800204c:	4603      	mov	r3, r0
 800204e:	613b      	str	r3, [r7, #16]
 8002050:	e013      	b.n	800207a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d110      	bne.n	800207a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002058:	6a3b      	ldr	r3, [r7, #32]
 800205a:	b29a      	uxth	r2, r3
 800205c:	f107 0310 	add.w	r3, r7, #16
 8002060:	9301      	str	r3, [sp, #4]
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	9300      	str	r3, [sp, #0]
 8002066:	68bb      	ldr	r3, [r7, #8]
 8002068:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800206a:	68f8      	ldr	r0, [r7, #12]
 800206c:	f001 fa97 	bl	800359e <xTaskCreate>
 8002070:	4603      	mov	r3, r0
 8002072:	2b01      	cmp	r3, #1
 8002074:	d001      	beq.n	800207a <osThreadNew+0x11a>
            hTask = NULL;
 8002076:	2300      	movs	r3, #0
 8002078:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800207a:	693b      	ldr	r3, [r7, #16]
}
 800207c:	4618      	mov	r0, r3
 800207e:	3728      	adds	r7, #40	; 0x28
 8002080:	46bd      	mov	sp, r7
 8002082:	bd80      	pop	{r7, pc}

08002084 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8002084:	b580      	push	{r7, lr}
 8002086:	b084      	sub	sp, #16
 8002088:	af00      	add	r7, sp, #0
 800208a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800208c:	f3ef 8305 	mrs	r3, IPSR
 8002090:	60bb      	str	r3, [r7, #8]
  return(result);
 8002092:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8002094:	2b00      	cmp	r3, #0
 8002096:	d003      	beq.n	80020a0 <osDelay+0x1c>
    stat = osErrorISR;
 8002098:	f06f 0305 	mvn.w	r3, #5
 800209c:	60fb      	str	r3, [r7, #12]
 800209e:	e007      	b.n	80020b0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80020a0:	2300      	movs	r3, #0
 80020a2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d002      	beq.n	80020b0 <osDelay+0x2c>
      vTaskDelay(ticks);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f001 fbd2 	bl	8003854 <vTaskDelay>
    }
  }

  return (stat);
 80020b0:	68fb      	ldr	r3, [r7, #12]
}
 80020b2:	4618      	mov	r0, r3
 80020b4:	3710      	adds	r7, #16
 80020b6:	46bd      	mov	sp, r7
 80020b8:	bd80      	pop	{r7, pc}

080020ba <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80020ba:	b580      	push	{r7, lr}
 80020bc:	b08a      	sub	sp, #40	; 0x28
 80020be:	af02      	add	r7, sp, #8
 80020c0:	60f8      	str	r0, [r7, #12]
 80020c2:	60b9      	str	r1, [r7, #8]
 80020c4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80020c6:	2300      	movs	r3, #0
 80020c8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020ca:	f3ef 8305 	mrs	r3, IPSR
 80020ce:	613b      	str	r3, [r7, #16]
  return(result);
 80020d0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d175      	bne.n	80021c2 <osSemaphoreNew+0x108>
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	2b00      	cmp	r3, #0
 80020da:	d072      	beq.n	80021c2 <osSemaphoreNew+0x108>
 80020dc:	68ba      	ldr	r2, [r7, #8]
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	d86e      	bhi.n	80021c2 <osSemaphoreNew+0x108>
    mem = -1;
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295
 80020e8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d015      	beq.n	800211c <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	689b      	ldr	r3, [r3, #8]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d006      	beq.n	8002106 <osSemaphoreNew+0x4c>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	68db      	ldr	r3, [r3, #12]
 80020fc:	2b4f      	cmp	r3, #79	; 0x4f
 80020fe:	d902      	bls.n	8002106 <osSemaphoreNew+0x4c>
        mem = 1;
 8002100:	2301      	movs	r3, #1
 8002102:	61bb      	str	r3, [r7, #24]
 8002104:	e00c      	b.n	8002120 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	689b      	ldr	r3, [r3, #8]
 800210a:	2b00      	cmp	r3, #0
 800210c:	d108      	bne.n	8002120 <osSemaphoreNew+0x66>
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	68db      	ldr	r3, [r3, #12]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d104      	bne.n	8002120 <osSemaphoreNew+0x66>
          mem = 0;
 8002116:	2300      	movs	r3, #0
 8002118:	61bb      	str	r3, [r7, #24]
 800211a:	e001      	b.n	8002120 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 800211c:	2300      	movs	r3, #0
 800211e:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002126:	d04c      	beq.n	80021c2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d128      	bne.n	8002180 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 800212e:	69bb      	ldr	r3, [r7, #24]
 8002130:	2b01      	cmp	r3, #1
 8002132:	d10a      	bne.n	800214a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2203      	movs	r2, #3
 800213a:	9200      	str	r2, [sp, #0]
 800213c:	2200      	movs	r2, #0
 800213e:	2100      	movs	r1, #0
 8002140:	2001      	movs	r0, #1
 8002142:	f000 fa29 	bl	8002598 <xQueueGenericCreateStatic>
 8002146:	61f8      	str	r0, [r7, #28]
 8002148:	e005      	b.n	8002156 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 800214a:	2203      	movs	r2, #3
 800214c:	2100      	movs	r1, #0
 800214e:	2001      	movs	r0, #1
 8002150:	f000 fa9a 	bl	8002688 <xQueueGenericCreate>
 8002154:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8002156:	69fb      	ldr	r3, [r7, #28]
 8002158:	2b00      	cmp	r3, #0
 800215a:	d022      	beq.n	80021a2 <osSemaphoreNew+0xe8>
 800215c:	68bb      	ldr	r3, [r7, #8]
 800215e:	2b00      	cmp	r3, #0
 8002160:	d01f      	beq.n	80021a2 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8002162:	2300      	movs	r3, #0
 8002164:	2200      	movs	r2, #0
 8002166:	2100      	movs	r1, #0
 8002168:	69f8      	ldr	r0, [r7, #28]
 800216a:	f000 fb55 	bl	8002818 <xQueueGenericSend>
 800216e:	4603      	mov	r3, r0
 8002170:	2b01      	cmp	r3, #1
 8002172:	d016      	beq.n	80021a2 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8002174:	69f8      	ldr	r0, [r7, #28]
 8002176:	f000 ffe1 	bl	800313c <vQueueDelete>
            hSemaphore = NULL;
 800217a:	2300      	movs	r3, #0
 800217c:	61fb      	str	r3, [r7, #28]
 800217e:	e010      	b.n	80021a2 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8002180:	69bb      	ldr	r3, [r7, #24]
 8002182:	2b01      	cmp	r3, #1
 8002184:	d108      	bne.n	8002198 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	461a      	mov	r2, r3
 800218c:	68b9      	ldr	r1, [r7, #8]
 800218e:	68f8      	ldr	r0, [r7, #12]
 8002190:	f000 fad7 	bl	8002742 <xQueueCreateCountingSemaphoreStatic>
 8002194:	61f8      	str	r0, [r7, #28]
 8002196:	e004      	b.n	80021a2 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8002198:	68b9      	ldr	r1, [r7, #8]
 800219a:	68f8      	ldr	r0, [r7, #12]
 800219c:	f000 fb08 	bl	80027b0 <xQueueCreateCountingSemaphore>
 80021a0:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80021a2:	69fb      	ldr	r3, [r7, #28]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d00c      	beq.n	80021c2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <osSemaphoreNew+0xfc>
          name = attr->name;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	617b      	str	r3, [r7, #20]
 80021b4:	e001      	b.n	80021ba <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80021b6:	2300      	movs	r3, #0
 80021b8:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80021ba:	6979      	ldr	r1, [r7, #20]
 80021bc:	69f8      	ldr	r0, [r7, #28]
 80021be:	f001 f909 	bl	80033d4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80021c2:	69fb      	ldr	r3, [r7, #28]
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3720      	adds	r7, #32
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b086      	sub	sp, #24
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
 80021d4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d103      	bne.n	80021ec <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80021e4:	f06f 0303 	mvn.w	r3, #3
 80021e8:	617b      	str	r3, [r7, #20]
 80021ea:	e039      	b.n	8002260 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021ec:	f3ef 8305 	mrs	r3, IPSR
 80021f0:	60fb      	str	r3, [r7, #12]
  return(result);
 80021f2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80021f4:	2b00      	cmp	r3, #0
 80021f6:	d022      	beq.n	800223e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 80021f8:	683b      	ldr	r3, [r7, #0]
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d003      	beq.n	8002206 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 80021fe:	f06f 0303 	mvn.w	r3, #3
 8002202:	617b      	str	r3, [r7, #20]
 8002204:	e02c      	b.n	8002260 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8002206:	2300      	movs	r3, #0
 8002208:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800220a:	f107 0308 	add.w	r3, r7, #8
 800220e:	461a      	mov	r2, r3
 8002210:	2100      	movs	r1, #0
 8002212:	6938      	ldr	r0, [r7, #16]
 8002214:	f000 ff12 	bl	800303c <xQueueReceiveFromISR>
 8002218:	4603      	mov	r3, r0
 800221a:	2b01      	cmp	r3, #1
 800221c:	d003      	beq.n	8002226 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800221e:	f06f 0302 	mvn.w	r3, #2
 8002222:	617b      	str	r3, [r7, #20]
 8002224:	e01c      	b.n	8002260 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8002226:	68bb      	ldr	r3, [r7, #8]
 8002228:	2b00      	cmp	r3, #0
 800222a:	d019      	beq.n	8002260 <osSemaphoreAcquire+0x94>
 800222c:	4b0f      	ldr	r3, [pc, #60]	; (800226c <osSemaphoreAcquire+0xa0>)
 800222e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002232:	601a      	str	r2, [r3, #0]
 8002234:	f3bf 8f4f 	dsb	sy
 8002238:	f3bf 8f6f 	isb	sy
 800223c:	e010      	b.n	8002260 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800223e:	6839      	ldr	r1, [r7, #0]
 8002240:	6938      	ldr	r0, [r7, #16]
 8002242:	f000 fdef 	bl	8002e24 <xQueueSemaphoreTake>
 8002246:	4603      	mov	r3, r0
 8002248:	2b01      	cmp	r3, #1
 800224a:	d009      	beq.n	8002260 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 800224c:	683b      	ldr	r3, [r7, #0]
 800224e:	2b00      	cmp	r3, #0
 8002250:	d003      	beq.n	800225a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8002252:	f06f 0301 	mvn.w	r3, #1
 8002256:	617b      	str	r3, [r7, #20]
 8002258:	e002      	b.n	8002260 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 800225a:	f06f 0302 	mvn.w	r3, #2
 800225e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8002260:	697b      	ldr	r3, [r7, #20]
}
 8002262:	4618      	mov	r0, r3
 8002264:	3718      	adds	r7, #24
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}
 800226a:	bf00      	nop
 800226c:	e000ed04 	.word	0xe000ed04

08002270 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8002270:	b580      	push	{r7, lr}
 8002272:	b086      	sub	sp, #24
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 800227c:	2300      	movs	r3, #0
 800227e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8002280:	693b      	ldr	r3, [r7, #16]
 8002282:	2b00      	cmp	r3, #0
 8002284:	d103      	bne.n	800228e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8002286:	f06f 0303 	mvn.w	r3, #3
 800228a:	617b      	str	r3, [r7, #20]
 800228c:	e02c      	b.n	80022e8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800228e:	f3ef 8305 	mrs	r3, IPSR
 8002292:	60fb      	str	r3, [r7, #12]
  return(result);
 8002294:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8002296:	2b00      	cmp	r3, #0
 8002298:	d01a      	beq.n	80022d0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800229e:	f107 0308 	add.w	r3, r7, #8
 80022a2:	4619      	mov	r1, r3
 80022a4:	6938      	ldr	r0, [r7, #16]
 80022a6:	f000 fc50 	bl	8002b4a <xQueueGiveFromISR>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b01      	cmp	r3, #1
 80022ae:	d003      	beq.n	80022b8 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80022b0:	f06f 0302 	mvn.w	r3, #2
 80022b4:	617b      	str	r3, [r7, #20]
 80022b6:	e017      	b.n	80022e8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d014      	beq.n	80022e8 <osSemaphoreRelease+0x78>
 80022be:	4b0d      	ldr	r3, [pc, #52]	; (80022f4 <osSemaphoreRelease+0x84>)
 80022c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80022c4:	601a      	str	r2, [r3, #0]
 80022c6:	f3bf 8f4f 	dsb	sy
 80022ca:	f3bf 8f6f 	isb	sy
 80022ce:	e00b      	b.n	80022e8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80022d0:	2300      	movs	r3, #0
 80022d2:	2200      	movs	r2, #0
 80022d4:	2100      	movs	r1, #0
 80022d6:	6938      	ldr	r0, [r7, #16]
 80022d8:	f000 fa9e 	bl	8002818 <xQueueGenericSend>
 80022dc:	4603      	mov	r3, r0
 80022de:	2b01      	cmp	r3, #1
 80022e0:	d002      	beq.n	80022e8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80022e2:	f06f 0302 	mvn.w	r3, #2
 80022e6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80022e8:	697b      	ldr	r3, [r7, #20]
}
 80022ea:	4618      	mov	r0, r3
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	e000ed04 	.word	0xe000ed04

080022f8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80022f8:	b480      	push	{r7}
 80022fa:	b085      	sub	sp, #20
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002304:	68fb      	ldr	r3, [r7, #12]
 8002306:	4a07      	ldr	r2, [pc, #28]	; (8002324 <vApplicationGetIdleTaskMemory+0x2c>)
 8002308:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800230a:	68bb      	ldr	r3, [r7, #8]
 800230c:	4a06      	ldr	r2, [pc, #24]	; (8002328 <vApplicationGetIdleTaskMemory+0x30>)
 800230e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2280      	movs	r2, #128	; 0x80
 8002314:	601a      	str	r2, [r3, #0]
}
 8002316:	bf00      	nop
 8002318:	3714      	adds	r7, #20
 800231a:	46bd      	mov	sp, r7
 800231c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002320:	4770      	bx	lr
 8002322:	bf00      	nop
 8002324:	200000f0 	.word	0x200000f0
 8002328:	200001ac 	.word	0x200001ac

0800232c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800232c:	b480      	push	{r7}
 800232e:	b085      	sub	sp, #20
 8002330:	af00      	add	r7, sp, #0
 8002332:	60f8      	str	r0, [r7, #12]
 8002334:	60b9      	str	r1, [r7, #8]
 8002336:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	4a07      	ldr	r2, [pc, #28]	; (8002358 <vApplicationGetTimerTaskMemory+0x2c>)
 800233c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800233e:	68bb      	ldr	r3, [r7, #8]
 8002340:	4a06      	ldr	r2, [pc, #24]	; (800235c <vApplicationGetTimerTaskMemory+0x30>)
 8002342:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	f44f 7280 	mov.w	r2, #256	; 0x100
 800234a:	601a      	str	r2, [r3, #0]
}
 800234c:	bf00      	nop
 800234e:	3714      	adds	r7, #20
 8002350:	46bd      	mov	sp, r7
 8002352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002356:	4770      	bx	lr
 8002358:	200003ac 	.word	0x200003ac
 800235c:	20000468 	.word	0x20000468

08002360 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
 8002366:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	f103 0208 	add.w	r2, r3, #8
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	f04f 32ff 	mov.w	r2, #4294967295
 8002378:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f103 0208 	add.w	r2, r3, #8
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	f103 0208 	add.w	r2, r3, #8
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8002394:	bf00      	nop
 8002396:	370c      	adds	r7, #12
 8002398:	46bd      	mov	sp, r7
 800239a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239e:	4770      	bx	lr

080023a0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80023a0:	b480      	push	{r7}
 80023a2:	b083      	sub	sp, #12
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2200      	movs	r2, #0
 80023ac:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80023ae:	bf00      	nop
 80023b0:	370c      	adds	r7, #12
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80023ba:	b480      	push	{r7}
 80023bc:	b085      	sub	sp, #20
 80023be:	af00      	add	r7, sp, #0
 80023c0:	6078      	str	r0, [r7, #4]
 80023c2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	68fa      	ldr	r2, [r7, #12]
 80023ce:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	683a      	ldr	r2, [r7, #0]
 80023e4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	687a      	ldr	r2, [r7, #4]
 80023ea:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	1c5a      	adds	r2, r3, #1
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	601a      	str	r2, [r3, #0]
}
 80023f6:	bf00      	nop
 80023f8:	3714      	adds	r7, #20
 80023fa:	46bd      	mov	sp, r7
 80023fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002400:	4770      	bx	lr

08002402 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002402:	b480      	push	{r7}
 8002404:	b085      	sub	sp, #20
 8002406:	af00      	add	r7, sp, #0
 8002408:	6078      	str	r0, [r7, #4]
 800240a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8002412:	68bb      	ldr	r3, [r7, #8]
 8002414:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002418:	d103      	bne.n	8002422 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	691b      	ldr	r3, [r3, #16]
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	e00c      	b.n	800243c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3308      	adds	r3, #8
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	e002      	b.n	8002430 <vListInsert+0x2e>
 800242a:	68fb      	ldr	r3, [r7, #12]
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68ba      	ldr	r2, [r7, #8]
 8002438:	429a      	cmp	r2, r3
 800243a:	d2f6      	bcs.n	800242a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800243c:	68fb      	ldr	r3, [r7, #12]
 800243e:	685a      	ldr	r2, [r3, #4]
 8002440:	683b      	ldr	r3, [r7, #0]
 8002442:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	683a      	ldr	r2, [r7, #0]
 800244a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800244c:	683b      	ldr	r3, [r7, #0]
 800244e:	68fa      	ldr	r2, [r7, #12]
 8002450:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	683a      	ldr	r2, [r7, #0]
 8002456:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	1c5a      	adds	r2, r3, #1
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	601a      	str	r2, [r3, #0]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr

08002474 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8002474:	b480      	push	{r7}
 8002476:	b085      	sub	sp, #20
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	691b      	ldr	r3, [r3, #16]
 8002480:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	687a      	ldr	r2, [r7, #4]
 8002488:	6892      	ldr	r2, [r2, #8]
 800248a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	687a      	ldr	r2, [r7, #4]
 8002492:	6852      	ldr	r2, [r2, #4]
 8002494:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	685b      	ldr	r3, [r3, #4]
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	429a      	cmp	r2, r3
 800249e:	d103      	bne.n	80024a8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	689a      	ldr	r2, [r3, #8]
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2200      	movs	r2, #0
 80024ac:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	1e5a      	subs	r2, r3, #1
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	681b      	ldr	r3, [r3, #0]
}
 80024bc:	4618      	mov	r0, r3
 80024be:	3714      	adds	r7, #20
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	6078      	str	r0, [r7, #4]
 80024d0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d10a      	bne.n	80024f2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80024dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80024e0:	f383 8811 	msr	BASEPRI, r3
 80024e4:	f3bf 8f6f 	isb	sy
 80024e8:	f3bf 8f4f 	dsb	sy
 80024ec:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80024ee:	bf00      	nop
 80024f0:	e7fe      	b.n	80024f0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80024f2:	f002 fc97 	bl	8004e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681a      	ldr	r2, [r3, #0]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024fe:	68f9      	ldr	r1, [r7, #12]
 8002500:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002502:	fb01 f303 	mul.w	r3, r1, r3
 8002506:	441a      	add	r2, r3
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	2200      	movs	r2, #0
 8002510:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	681a      	ldr	r2, [r3, #0]
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002522:	3b01      	subs	r3, #1
 8002524:	68f9      	ldr	r1, [r7, #12]
 8002526:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002528:	fb01 f303 	mul.w	r3, r1, r3
 800252c:	441a      	add	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	22ff      	movs	r2, #255	; 0xff
 8002536:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	22ff      	movs	r2, #255	; 0xff
 800253e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8002542:	683b      	ldr	r3, [r7, #0]
 8002544:	2b00      	cmp	r3, #0
 8002546:	d114      	bne.n	8002572 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	691b      	ldr	r3, [r3, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d01a      	beq.n	8002586 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002550:	68fb      	ldr	r3, [r7, #12]
 8002552:	3310      	adds	r3, #16
 8002554:	4618      	mov	r0, r3
 8002556:	f001 fc4b 	bl	8003df0 <xTaskRemoveFromEventList>
 800255a:	4603      	mov	r3, r0
 800255c:	2b00      	cmp	r3, #0
 800255e:	d012      	beq.n	8002586 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8002560:	4b0c      	ldr	r3, [pc, #48]	; (8002594 <xQueueGenericReset+0xcc>)
 8002562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002566:	601a      	str	r2, [r3, #0]
 8002568:	f3bf 8f4f 	dsb	sy
 800256c:	f3bf 8f6f 	isb	sy
 8002570:	e009      	b.n	8002586 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	3310      	adds	r3, #16
 8002576:	4618      	mov	r0, r3
 8002578:	f7ff fef2 	bl	8002360 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	3324      	adds	r3, #36	; 0x24
 8002580:	4618      	mov	r0, r3
 8002582:	f7ff feed 	bl	8002360 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8002586:	f002 fc7d 	bl	8004e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800258a:	2301      	movs	r3, #1
}
 800258c:	4618      	mov	r0, r3
 800258e:	3710      	adds	r7, #16
 8002590:	46bd      	mov	sp, r7
 8002592:	bd80      	pop	{r7, pc}
 8002594:	e000ed04 	.word	0xe000ed04

08002598 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8002598:	b580      	push	{r7, lr}
 800259a:	b08e      	sub	sp, #56	; 0x38
 800259c:	af02      	add	r7, sp, #8
 800259e:	60f8      	str	r0, [r7, #12]
 80025a0:	60b9      	str	r1, [r7, #8]
 80025a2:	607a      	str	r2, [r7, #4]
 80025a4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d10a      	bne.n	80025c2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80025ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025b0:	f383 8811 	msr	BASEPRI, r3
 80025b4:	f3bf 8f6f 	isb	sy
 80025b8:	f3bf 8f4f 	dsb	sy
 80025bc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80025be:	bf00      	nop
 80025c0:	e7fe      	b.n	80025c0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80025c2:	683b      	ldr	r3, [r7, #0]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d10a      	bne.n	80025de <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80025c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025cc:	f383 8811 	msr	BASEPRI, r3
 80025d0:	f3bf 8f6f 	isb	sy
 80025d4:	f3bf 8f4f 	dsb	sy
 80025d8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80025da:	bf00      	nop
 80025dc:	e7fe      	b.n	80025dc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	d002      	beq.n	80025ea <xQueueGenericCreateStatic+0x52>
 80025e4:	68bb      	ldr	r3, [r7, #8]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <xQueueGenericCreateStatic+0x56>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e000      	b.n	80025f0 <xQueueGenericCreateStatic+0x58>
 80025ee:	2300      	movs	r3, #0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d10a      	bne.n	800260a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80025f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025f8:	f383 8811 	msr	BASEPRI, r3
 80025fc:	f3bf 8f6f 	isb	sy
 8002600:	f3bf 8f4f 	dsb	sy
 8002604:	623b      	str	r3, [r7, #32]
}
 8002606:	bf00      	nop
 8002608:	e7fe      	b.n	8002608 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2b00      	cmp	r3, #0
 800260e:	d102      	bne.n	8002616 <xQueueGenericCreateStatic+0x7e>
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	2b00      	cmp	r3, #0
 8002614:	d101      	bne.n	800261a <xQueueGenericCreateStatic+0x82>
 8002616:	2301      	movs	r3, #1
 8002618:	e000      	b.n	800261c <xQueueGenericCreateStatic+0x84>
 800261a:	2300      	movs	r3, #0
 800261c:	2b00      	cmp	r3, #0
 800261e:	d10a      	bne.n	8002636 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002620:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002624:	f383 8811 	msr	BASEPRI, r3
 8002628:	f3bf 8f6f 	isb	sy
 800262c:	f3bf 8f4f 	dsb	sy
 8002630:	61fb      	str	r3, [r7, #28]
}
 8002632:	bf00      	nop
 8002634:	e7fe      	b.n	8002634 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8002636:	2350      	movs	r3, #80	; 0x50
 8002638:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	2b50      	cmp	r3, #80	; 0x50
 800263e:	d00a      	beq.n	8002656 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002640:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002644:	f383 8811 	msr	BASEPRI, r3
 8002648:	f3bf 8f6f 	isb	sy
 800264c:	f3bf 8f4f 	dsb	sy
 8002650:	61bb      	str	r3, [r7, #24]
}
 8002652:	bf00      	nop
 8002654:	e7fe      	b.n	8002654 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8002656:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800265c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800265e:	2b00      	cmp	r3, #0
 8002660:	d00d      	beq.n	800267e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8002662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800266a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800266e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002670:	9300      	str	r3, [sp, #0]
 8002672:	4613      	mov	r3, r2
 8002674:	687a      	ldr	r2, [r7, #4]
 8002676:	68b9      	ldr	r1, [r7, #8]
 8002678:	68f8      	ldr	r0, [r7, #12]
 800267a:	f000 f83f 	bl	80026fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800267e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8002680:	4618      	mov	r0, r3
 8002682:	3730      	adds	r7, #48	; 0x30
 8002684:	46bd      	mov	sp, r7
 8002686:	bd80      	pop	{r7, pc}

08002688 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8002688:	b580      	push	{r7, lr}
 800268a:	b08a      	sub	sp, #40	; 0x28
 800268c:	af02      	add	r7, sp, #8
 800268e:	60f8      	str	r0, [r7, #12]
 8002690:	60b9      	str	r1, [r7, #8]
 8002692:	4613      	mov	r3, r2
 8002694:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8002696:	68fb      	ldr	r3, [r7, #12]
 8002698:	2b00      	cmp	r3, #0
 800269a:	d10a      	bne.n	80026b2 <xQueueGenericCreate+0x2a>
	__asm volatile
 800269c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026a0:	f383 8811 	msr	BASEPRI, r3
 80026a4:	f3bf 8f6f 	isb	sy
 80026a8:	f3bf 8f4f 	dsb	sy
 80026ac:	613b      	str	r3, [r7, #16]
}
 80026ae:	bf00      	nop
 80026b0:	e7fe      	b.n	80026b0 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	68ba      	ldr	r2, [r7, #8]
 80026b6:	fb02 f303 	mul.w	r3, r2, r3
 80026ba:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	3350      	adds	r3, #80	; 0x50
 80026c0:	4618      	mov	r0, r3
 80026c2:	f002 fcd1 	bl	8005068 <pvPortMalloc>
 80026c6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80026c8:	69bb      	ldr	r3, [r7, #24]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d011      	beq.n	80026f2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80026ce:	69bb      	ldr	r3, [r7, #24]
 80026d0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80026d2:	697b      	ldr	r3, [r7, #20]
 80026d4:	3350      	adds	r3, #80	; 0x50
 80026d6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 80026d8:	69bb      	ldr	r3, [r7, #24]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80026e0:	79fa      	ldrb	r2, [r7, #7]
 80026e2:	69bb      	ldr	r3, [r7, #24]
 80026e4:	9300      	str	r3, [sp, #0]
 80026e6:	4613      	mov	r3, r2
 80026e8:	697a      	ldr	r2, [r7, #20]
 80026ea:	68b9      	ldr	r1, [r7, #8]
 80026ec:	68f8      	ldr	r0, [r7, #12]
 80026ee:	f000 f805 	bl	80026fc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80026f2:	69bb      	ldr	r3, [r7, #24]
	}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}

080026fc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80026fc:	b580      	push	{r7, lr}
 80026fe:	b084      	sub	sp, #16
 8002700:	af00      	add	r7, sp, #0
 8002702:	60f8      	str	r0, [r7, #12]
 8002704:	60b9      	str	r1, [r7, #8]
 8002706:	607a      	str	r2, [r7, #4]
 8002708:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d103      	bne.n	8002718 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8002710:	69bb      	ldr	r3, [r7, #24]
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	601a      	str	r2, [r3, #0]
 8002716:	e002      	b.n	800271e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	687a      	ldr	r2, [r7, #4]
 800271c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800271e:	69bb      	ldr	r3, [r7, #24]
 8002720:	68fa      	ldr	r2, [r7, #12]
 8002722:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002724:	69bb      	ldr	r3, [r7, #24]
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800272a:	2101      	movs	r1, #1
 800272c:	69b8      	ldr	r0, [r7, #24]
 800272e:	f7ff fecb 	bl	80024c8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	78fa      	ldrb	r2, [r7, #3]
 8002736:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800273a:	bf00      	nop
 800273c:	3710      	adds	r7, #16
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}

08002742 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8002742:	b580      	push	{r7, lr}
 8002744:	b08a      	sub	sp, #40	; 0x28
 8002746:	af02      	add	r7, sp, #8
 8002748:	60f8      	str	r0, [r7, #12]
 800274a:	60b9      	str	r1, [r7, #8]
 800274c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800274e:	68fb      	ldr	r3, [r7, #12]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d10a      	bne.n	800276a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8002754:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002758:	f383 8811 	msr	BASEPRI, r3
 800275c:	f3bf 8f6f 	isb	sy
 8002760:	f3bf 8f4f 	dsb	sy
 8002764:	61bb      	str	r3, [r7, #24]
}
 8002766:	bf00      	nop
 8002768:	e7fe      	b.n	8002768 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800276a:	68ba      	ldr	r2, [r7, #8]
 800276c:	68fb      	ldr	r3, [r7, #12]
 800276e:	429a      	cmp	r2, r3
 8002770:	d90a      	bls.n	8002788 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8002772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002776:	f383 8811 	msr	BASEPRI, r3
 800277a:	f3bf 8f6f 	isb	sy
 800277e:	f3bf 8f4f 	dsb	sy
 8002782:	617b      	str	r3, [r7, #20]
}
 8002784:	bf00      	nop
 8002786:	e7fe      	b.n	8002786 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8002788:	2302      	movs	r3, #2
 800278a:	9300      	str	r3, [sp, #0]
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	2100      	movs	r1, #0
 8002792:	68f8      	ldr	r0, [r7, #12]
 8002794:	f7ff ff00 	bl	8002598 <xQueueGenericCreateStatic>
 8002798:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800279a:	69fb      	ldr	r3, [r7, #28]
 800279c:	2b00      	cmp	r3, #0
 800279e:	d002      	beq.n	80027a6 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	68ba      	ldr	r2, [r7, #8]
 80027a4:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80027a6:	69fb      	ldr	r3, [r7, #28]
	}
 80027a8:	4618      	mov	r0, r3
 80027aa:	3720      	adds	r7, #32
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}

080027b0 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 80027b0:	b580      	push	{r7, lr}
 80027b2:	b086      	sub	sp, #24
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
 80027b8:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d10a      	bne.n	80027d6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80027c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027c4:	f383 8811 	msr	BASEPRI, r3
 80027c8:	f3bf 8f6f 	isb	sy
 80027cc:	f3bf 8f4f 	dsb	sy
 80027d0:	613b      	str	r3, [r7, #16]
}
 80027d2:	bf00      	nop
 80027d4:	e7fe      	b.n	80027d4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80027d6:	683a      	ldr	r2, [r7, #0]
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	429a      	cmp	r2, r3
 80027dc:	d90a      	bls.n	80027f4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80027de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027e2:	f383 8811 	msr	BASEPRI, r3
 80027e6:	f3bf 8f6f 	isb	sy
 80027ea:	f3bf 8f4f 	dsb	sy
 80027ee:	60fb      	str	r3, [r7, #12]
}
 80027f0:	bf00      	nop
 80027f2:	e7fe      	b.n	80027f2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80027f4:	2202      	movs	r2, #2
 80027f6:	2100      	movs	r1, #0
 80027f8:	6878      	ldr	r0, [r7, #4]
 80027fa:	f7ff ff45 	bl	8002688 <xQueueGenericCreate>
 80027fe:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8002800:	697b      	ldr	r3, [r7, #20]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d002      	beq.n	800280c <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8002806:	697b      	ldr	r3, [r7, #20]
 8002808:	683a      	ldr	r2, [r7, #0]
 800280a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800280c:	697b      	ldr	r3, [r7, #20]
	}
 800280e:	4618      	mov	r0, r3
 8002810:	3718      	adds	r7, #24
 8002812:	46bd      	mov	sp, r7
 8002814:	bd80      	pop	{r7, pc}
	...

08002818 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002818:	b580      	push	{r7, lr}
 800281a:	b08e      	sub	sp, #56	; 0x38
 800281c:	af00      	add	r7, sp, #0
 800281e:	60f8      	str	r0, [r7, #12]
 8002820:	60b9      	str	r1, [r7, #8]
 8002822:	607a      	str	r2, [r7, #4]
 8002824:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002826:	2300      	movs	r3, #0
 8002828:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800282a:	68fb      	ldr	r3, [r7, #12]
 800282c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800282e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <xQueueGenericSend+0x32>
	__asm volatile
 8002834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002846:	bf00      	nop
 8002848:	e7fe      	b.n	8002848 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d103      	bne.n	8002858 <xQueueGenericSend+0x40>
 8002850:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002852:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002854:	2b00      	cmp	r3, #0
 8002856:	d101      	bne.n	800285c <xQueueGenericSend+0x44>
 8002858:	2301      	movs	r3, #1
 800285a:	e000      	b.n	800285e <xQueueGenericSend+0x46>
 800285c:	2300      	movs	r3, #0
 800285e:	2b00      	cmp	r3, #0
 8002860:	d10a      	bne.n	8002878 <xQueueGenericSend+0x60>
	__asm volatile
 8002862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002866:	f383 8811 	msr	BASEPRI, r3
 800286a:	f3bf 8f6f 	isb	sy
 800286e:	f3bf 8f4f 	dsb	sy
 8002872:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002874:	bf00      	nop
 8002876:	e7fe      	b.n	8002876 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002878:	683b      	ldr	r3, [r7, #0]
 800287a:	2b02      	cmp	r3, #2
 800287c:	d103      	bne.n	8002886 <xQueueGenericSend+0x6e>
 800287e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002880:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002882:	2b01      	cmp	r3, #1
 8002884:	d101      	bne.n	800288a <xQueueGenericSend+0x72>
 8002886:	2301      	movs	r3, #1
 8002888:	e000      	b.n	800288c <xQueueGenericSend+0x74>
 800288a:	2300      	movs	r3, #0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d10a      	bne.n	80028a6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002890:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002894:	f383 8811 	msr	BASEPRI, r3
 8002898:	f3bf 8f6f 	isb	sy
 800289c:	f3bf 8f4f 	dsb	sy
 80028a0:	623b      	str	r3, [r7, #32]
}
 80028a2:	bf00      	nop
 80028a4:	e7fe      	b.n	80028a4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80028a6:	f001 fc65 	bl	8004174 <xTaskGetSchedulerState>
 80028aa:	4603      	mov	r3, r0
 80028ac:	2b00      	cmp	r3, #0
 80028ae:	d102      	bne.n	80028b6 <xQueueGenericSend+0x9e>
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <xQueueGenericSend+0xa2>
 80028b6:	2301      	movs	r3, #1
 80028b8:	e000      	b.n	80028bc <xQueueGenericSend+0xa4>
 80028ba:	2300      	movs	r3, #0
 80028bc:	2b00      	cmp	r3, #0
 80028be:	d10a      	bne.n	80028d6 <xQueueGenericSend+0xbe>
	__asm volatile
 80028c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80028c4:	f383 8811 	msr	BASEPRI, r3
 80028c8:	f3bf 8f6f 	isb	sy
 80028cc:	f3bf 8f4f 	dsb	sy
 80028d0:	61fb      	str	r3, [r7, #28]
}
 80028d2:	bf00      	nop
 80028d4:	e7fe      	b.n	80028d4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80028d6:	f002 faa5 	bl	8004e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80028da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028dc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80028de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d302      	bcc.n	80028ec <xQueueGenericSend+0xd4>
 80028e6:	683b      	ldr	r3, [r7, #0]
 80028e8:	2b02      	cmp	r3, #2
 80028ea:	d129      	bne.n	8002940 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80028ec:	683a      	ldr	r2, [r7, #0]
 80028ee:	68b9      	ldr	r1, [r7, #8]
 80028f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80028f2:	f000 fc5e 	bl	80031b2 <prvCopyDataToQueue>
 80028f6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80028f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d010      	beq.n	8002922 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002900:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002902:	3324      	adds	r3, #36	; 0x24
 8002904:	4618      	mov	r0, r3
 8002906:	f001 fa73 	bl	8003df0 <xTaskRemoveFromEventList>
 800290a:	4603      	mov	r3, r0
 800290c:	2b00      	cmp	r3, #0
 800290e:	d013      	beq.n	8002938 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002910:	4b3f      	ldr	r3, [pc, #252]	; (8002a10 <xQueueGenericSend+0x1f8>)
 8002912:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002916:	601a      	str	r2, [r3, #0]
 8002918:	f3bf 8f4f 	dsb	sy
 800291c:	f3bf 8f6f 	isb	sy
 8002920:	e00a      	b.n	8002938 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002922:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002924:	2b00      	cmp	r3, #0
 8002926:	d007      	beq.n	8002938 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002928:	4b39      	ldr	r3, [pc, #228]	; (8002a10 <xQueueGenericSend+0x1f8>)
 800292a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800292e:	601a      	str	r2, [r3, #0]
 8002930:	f3bf 8f4f 	dsb	sy
 8002934:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002938:	f002 faa4 	bl	8004e84 <vPortExitCritical>
				return pdPASS;
 800293c:	2301      	movs	r3, #1
 800293e:	e063      	b.n	8002a08 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2b00      	cmp	r3, #0
 8002944:	d103      	bne.n	800294e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002946:	f002 fa9d 	bl	8004e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800294a:	2300      	movs	r3, #0
 800294c:	e05c      	b.n	8002a08 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800294e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002950:	2b00      	cmp	r3, #0
 8002952:	d106      	bne.n	8002962 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002954:	f107 0314 	add.w	r3, r7, #20
 8002958:	4618      	mov	r0, r3
 800295a:	f001 faad 	bl	8003eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800295e:	2301      	movs	r3, #1
 8002960:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002962:	f002 fa8f 	bl	8004e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002966:	f001 f819 	bl	800399c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800296a:	f002 fa5b 	bl	8004e24 <vPortEnterCritical>
 800296e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002970:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002974:	b25b      	sxtb	r3, r3
 8002976:	f1b3 3fff 	cmp.w	r3, #4294967295
 800297a:	d103      	bne.n	8002984 <xQueueGenericSend+0x16c>
 800297c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800297e:	2200      	movs	r2, #0
 8002980:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002986:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800298a:	b25b      	sxtb	r3, r3
 800298c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002990:	d103      	bne.n	800299a <xQueueGenericSend+0x182>
 8002992:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002994:	2200      	movs	r2, #0
 8002996:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800299a:	f002 fa73 	bl	8004e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800299e:	1d3a      	adds	r2, r7, #4
 80029a0:	f107 0314 	add.w	r3, r7, #20
 80029a4:	4611      	mov	r1, r2
 80029a6:	4618      	mov	r0, r3
 80029a8:	f001 fa9c 	bl	8003ee4 <xTaskCheckForTimeOut>
 80029ac:	4603      	mov	r3, r0
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d124      	bne.n	80029fc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80029b2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029b4:	f000 fcf5 	bl	80033a2 <prvIsQueueFull>
 80029b8:	4603      	mov	r3, r0
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d018      	beq.n	80029f0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80029be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80029c0:	3310      	adds	r3, #16
 80029c2:	687a      	ldr	r2, [r7, #4]
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f001 f9c2 	bl	8003d50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80029cc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029ce:	f000 fc80 	bl	80032d2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80029d2:	f000 fff1 	bl	80039b8 <xTaskResumeAll>
 80029d6:	4603      	mov	r3, r0
 80029d8:	2b00      	cmp	r3, #0
 80029da:	f47f af7c 	bne.w	80028d6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80029de:	4b0c      	ldr	r3, [pc, #48]	; (8002a10 <xQueueGenericSend+0x1f8>)
 80029e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80029e4:	601a      	str	r2, [r3, #0]
 80029e6:	f3bf 8f4f 	dsb	sy
 80029ea:	f3bf 8f6f 	isb	sy
 80029ee:	e772      	b.n	80028d6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80029f0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029f2:	f000 fc6e 	bl	80032d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80029f6:	f000 ffdf 	bl	80039b8 <xTaskResumeAll>
 80029fa:	e76c      	b.n	80028d6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80029fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80029fe:	f000 fc68 	bl	80032d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002a02:	f000 ffd9 	bl	80039b8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002a06:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3738      	adds	r7, #56	; 0x38
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	e000ed04 	.word	0xe000ed04

08002a14 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b090      	sub	sp, #64	; 0x40
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	60f8      	str	r0, [r7, #12]
 8002a1c:	60b9      	str	r1, [r7, #8]
 8002a1e:	607a      	str	r2, [r7, #4]
 8002a20:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002a26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d10a      	bne.n	8002a42 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a30:	f383 8811 	msr	BASEPRI, r3
 8002a34:	f3bf 8f6f 	isb	sy
 8002a38:	f3bf 8f4f 	dsb	sy
 8002a3c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a3e:	bf00      	nop
 8002a40:	e7fe      	b.n	8002a40 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d103      	bne.n	8002a50 <xQueueGenericSendFromISR+0x3c>
 8002a48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d101      	bne.n	8002a54 <xQueueGenericSendFromISR+0x40>
 8002a50:	2301      	movs	r3, #1
 8002a52:	e000      	b.n	8002a56 <xQueueGenericSendFromISR+0x42>
 8002a54:	2300      	movs	r3, #0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d10a      	bne.n	8002a70 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002a5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a5e:	f383 8811 	msr	BASEPRI, r3
 8002a62:	f3bf 8f6f 	isb	sy
 8002a66:	f3bf 8f4f 	dsb	sy
 8002a6a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a6c:	bf00      	nop
 8002a6e:	e7fe      	b.n	8002a6e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a70:	683b      	ldr	r3, [r7, #0]
 8002a72:	2b02      	cmp	r3, #2
 8002a74:	d103      	bne.n	8002a7e <xQueueGenericSendFromISR+0x6a>
 8002a76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002a78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a7a:	2b01      	cmp	r3, #1
 8002a7c:	d101      	bne.n	8002a82 <xQueueGenericSendFromISR+0x6e>
 8002a7e:	2301      	movs	r3, #1
 8002a80:	e000      	b.n	8002a84 <xQueueGenericSendFromISR+0x70>
 8002a82:	2300      	movs	r3, #0
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	d10a      	bne.n	8002a9e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002a88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a8c:	f383 8811 	msr	BASEPRI, r3
 8002a90:	f3bf 8f6f 	isb	sy
 8002a94:	f3bf 8f4f 	dsb	sy
 8002a98:	623b      	str	r3, [r7, #32]
}
 8002a9a:	bf00      	nop
 8002a9c:	e7fe      	b.n	8002a9c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002a9e:	f002 faa3 	bl	8004fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002aa2:	f3ef 8211 	mrs	r2, BASEPRI
 8002aa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aaa:	f383 8811 	msr	BASEPRI, r3
 8002aae:	f3bf 8f6f 	isb	sy
 8002ab2:	f3bf 8f4f 	dsb	sy
 8002ab6:	61fa      	str	r2, [r7, #28]
 8002ab8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002aba:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002abc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002abe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ac4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002ac6:	429a      	cmp	r2, r3
 8002ac8:	d302      	bcc.n	8002ad0 <xQueueGenericSendFromISR+0xbc>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d12f      	bne.n	8002b30 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ad0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ad2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ad6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002adc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ade:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002ae0:	683a      	ldr	r2, [r7, #0]
 8002ae2:	68b9      	ldr	r1, [r7, #8]
 8002ae4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002ae6:	f000 fb64 	bl	80031b2 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002aea:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002af2:	d112      	bne.n	8002b1a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002af4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d016      	beq.n	8002b2a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002afc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002afe:	3324      	adds	r3, #36	; 0x24
 8002b00:	4618      	mov	r0, r3
 8002b02:	f001 f975 	bl	8003df0 <xTaskRemoveFromEventList>
 8002b06:	4603      	mov	r3, r0
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d00e      	beq.n	8002b2a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d00b      	beq.n	8002b2a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	2201      	movs	r2, #1
 8002b16:	601a      	str	r2, [r3, #0]
 8002b18:	e007      	b.n	8002b2a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002b1a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002b1e:	3301      	adds	r3, #1
 8002b20:	b2db      	uxtb	r3, r3
 8002b22:	b25a      	sxtb	r2, r3
 8002b24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b26:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002b2a:	2301      	movs	r3, #1
 8002b2c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002b2e:	e001      	b.n	8002b34 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002b30:	2300      	movs	r3, #0
 8002b32:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b36:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002b38:	697b      	ldr	r3, [r7, #20]
 8002b3a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002b3e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002b40:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3740      	adds	r7, #64	; 0x40
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}

08002b4a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8002b4a:	b580      	push	{r7, lr}
 8002b4c:	b08e      	sub	sp, #56	; 0x38
 8002b4e:	af00      	add	r7, sp, #0
 8002b50:	6078      	str	r0, [r7, #4]
 8002b52:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8002b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10a      	bne.n	8002b74 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8002b5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b62:	f383 8811 	msr	BASEPRI, r3
 8002b66:	f3bf 8f6f 	isb	sy
 8002b6a:	f3bf 8f4f 	dsb	sy
 8002b6e:	623b      	str	r3, [r7, #32]
}
 8002b70:	bf00      	nop
 8002b72:	e7fe      	b.n	8002b72 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002b74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d00a      	beq.n	8002b92 <xQueueGiveFromISR+0x48>
	__asm volatile
 8002b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002b80:	f383 8811 	msr	BASEPRI, r3
 8002b84:	f3bf 8f6f 	isb	sy
 8002b88:	f3bf 8f4f 	dsb	sy
 8002b8c:	61fb      	str	r3, [r7, #28]
}
 8002b8e:	bf00      	nop
 8002b90:	e7fe      	b.n	8002b90 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8002b92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d103      	bne.n	8002ba2 <xQueueGiveFromISR+0x58>
 8002b9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d101      	bne.n	8002ba6 <xQueueGiveFromISR+0x5c>
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	e000      	b.n	8002ba8 <xQueueGiveFromISR+0x5e>
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2b00      	cmp	r3, #0
 8002baa:	d10a      	bne.n	8002bc2 <xQueueGiveFromISR+0x78>
	__asm volatile
 8002bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bb0:	f383 8811 	msr	BASEPRI, r3
 8002bb4:	f3bf 8f6f 	isb	sy
 8002bb8:	f3bf 8f4f 	dsb	sy
 8002bbc:	61bb      	str	r3, [r7, #24]
}
 8002bbe:	bf00      	nop
 8002bc0:	e7fe      	b.n	8002bc0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002bc2:	f002 fa11 	bl	8004fe8 <vPortValidateInterruptPriority>
	__asm volatile
 8002bc6:	f3ef 8211 	mrs	r2, BASEPRI
 8002bca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002bce:	f383 8811 	msr	BASEPRI, r3
 8002bd2:	f3bf 8f6f 	isb	sy
 8002bd6:	f3bf 8f4f 	dsb	sy
 8002bda:	617a      	str	r2, [r7, #20]
 8002bdc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8002bde:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002be0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002be2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002be6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8002be8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002bec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002bee:	429a      	cmp	r2, r3
 8002bf0:	d22b      	bcs.n	8002c4a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002bf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bf4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002bf8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002bfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002bfe:	1c5a      	adds	r2, r3, #1
 8002c00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c02:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002c04:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8002c08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c0c:	d112      	bne.n	8002c34 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002c0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d016      	beq.n	8002c44 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c18:	3324      	adds	r3, #36	; 0x24
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f001 f8e8 	bl	8003df0 <xTaskRemoveFromEventList>
 8002c20:	4603      	mov	r3, r0
 8002c22:	2b00      	cmp	r3, #0
 8002c24:	d00e      	beq.n	8002c44 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d00b      	beq.n	8002c44 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	2201      	movs	r2, #1
 8002c30:	601a      	str	r2, [r3, #0]
 8002c32:	e007      	b.n	8002c44 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002c34:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002c38:	3301      	adds	r3, #1
 8002c3a:	b2db      	uxtb	r3, r3
 8002c3c:	b25a      	sxtb	r2, r3
 8002c3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002c40:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002c44:	2301      	movs	r3, #1
 8002c46:	637b      	str	r3, [r7, #52]	; 0x34
 8002c48:	e001      	b.n	8002c4e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	637b      	str	r3, [r7, #52]	; 0x34
 8002c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c50:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	f383 8811 	msr	BASEPRI, r3
}
 8002c58:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3738      	adds	r7, #56	; 0x38
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b08c      	sub	sp, #48	; 0x30
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002c70:	2300      	movs	r3, #0
 8002c72:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10a      	bne.n	8002c94 <xQueueReceive+0x30>
	__asm volatile
 8002c7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c82:	f383 8811 	msr	BASEPRI, r3
 8002c86:	f3bf 8f6f 	isb	sy
 8002c8a:	f3bf 8f4f 	dsb	sy
 8002c8e:	623b      	str	r3, [r7, #32]
}
 8002c90:	bf00      	nop
 8002c92:	e7fe      	b.n	8002c92 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c94:	68bb      	ldr	r3, [r7, #8]
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d103      	bne.n	8002ca2 <xQueueReceive+0x3e>
 8002c9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <xQueueReceive+0x42>
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e000      	b.n	8002ca8 <xQueueReceive+0x44>
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d10a      	bne.n	8002cc2 <xQueueReceive+0x5e>
	__asm volatile
 8002cac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cb0:	f383 8811 	msr	BASEPRI, r3
 8002cb4:	f3bf 8f6f 	isb	sy
 8002cb8:	f3bf 8f4f 	dsb	sy
 8002cbc:	61fb      	str	r3, [r7, #28]
}
 8002cbe:	bf00      	nop
 8002cc0:	e7fe      	b.n	8002cc0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002cc2:	f001 fa57 	bl	8004174 <xTaskGetSchedulerState>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d102      	bne.n	8002cd2 <xQueueReceive+0x6e>
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d101      	bne.n	8002cd6 <xQueueReceive+0x72>
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e000      	b.n	8002cd8 <xQueueReceive+0x74>
 8002cd6:	2300      	movs	r3, #0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d10a      	bne.n	8002cf2 <xQueueReceive+0x8e>
	__asm volatile
 8002cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ce0:	f383 8811 	msr	BASEPRI, r3
 8002ce4:	f3bf 8f6f 	isb	sy
 8002ce8:	f3bf 8f4f 	dsb	sy
 8002cec:	61bb      	str	r3, [r7, #24]
}
 8002cee:	bf00      	nop
 8002cf0:	e7fe      	b.n	8002cf0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002cf2:	f002 f897 	bl	8004e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002cf8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cfa:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002cfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d01f      	beq.n	8002d42 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002d02:	68b9      	ldr	r1, [r7, #8]
 8002d04:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002d06:	f000 fabe 	bl	8003286 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d0c:	1e5a      	subs	r2, r3, #1
 8002d0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d10:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002d12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d00f      	beq.n	8002d3a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002d1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d1c:	3310      	adds	r3, #16
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f001 f866 	bl	8003df0 <xTaskRemoveFromEventList>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d007      	beq.n	8002d3a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002d2a:	4b3d      	ldr	r3, [pc, #244]	; (8002e20 <xQueueReceive+0x1bc>)
 8002d2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002d30:	601a      	str	r2, [r3, #0]
 8002d32:	f3bf 8f4f 	dsb	sy
 8002d36:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002d3a:	f002 f8a3 	bl	8004e84 <vPortExitCritical>
				return pdPASS;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e069      	b.n	8002e16 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d103      	bne.n	8002d50 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002d48:	f002 f89c 	bl	8004e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002d4c:	2300      	movs	r3, #0
 8002d4e:	e062      	b.n	8002e16 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002d50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d106      	bne.n	8002d64 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002d56:	f107 0310 	add.w	r3, r7, #16
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f001 f8ac 	bl	8003eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002d60:	2301      	movs	r3, #1
 8002d62:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002d64:	f002 f88e 	bl	8004e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002d68:	f000 fe18 	bl	800399c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002d6c:	f002 f85a 	bl	8004e24 <vPortEnterCritical>
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002d76:	b25b      	sxtb	r3, r3
 8002d78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d7c:	d103      	bne.n	8002d86 <xQueueReceive+0x122>
 8002d7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d80:	2200      	movs	r2, #0
 8002d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002d8c:	b25b      	sxtb	r3, r3
 8002d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d92:	d103      	bne.n	8002d9c <xQueueReceive+0x138>
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	2200      	movs	r2, #0
 8002d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002d9c:	f002 f872 	bl	8004e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002da0:	1d3a      	adds	r2, r7, #4
 8002da2:	f107 0310 	add.w	r3, r7, #16
 8002da6:	4611      	mov	r1, r2
 8002da8:	4618      	mov	r0, r3
 8002daa:	f001 f89b 	bl	8003ee4 <xTaskCheckForTimeOut>
 8002dae:	4603      	mov	r3, r0
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d123      	bne.n	8002dfc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002db4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002db6:	f000 fade 	bl	8003376 <prvIsQueueEmpty>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d017      	beq.n	8002df0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc2:	3324      	adds	r3, #36	; 0x24
 8002dc4:	687a      	ldr	r2, [r7, #4]
 8002dc6:	4611      	mov	r1, r2
 8002dc8:	4618      	mov	r0, r3
 8002dca:	f000 ffc1 	bl	8003d50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002dce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dd0:	f000 fa7f 	bl	80032d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002dd4:	f000 fdf0 	bl	80039b8 <xTaskResumeAll>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d189      	bne.n	8002cf2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002dde:	4b10      	ldr	r3, [pc, #64]	; (8002e20 <xQueueReceive+0x1bc>)
 8002de0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002de4:	601a      	str	r2, [r3, #0]
 8002de6:	f3bf 8f4f 	dsb	sy
 8002dea:	f3bf 8f6f 	isb	sy
 8002dee:	e780      	b.n	8002cf2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002df0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002df2:	f000 fa6e 	bl	80032d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002df6:	f000 fddf 	bl	80039b8 <xTaskResumeAll>
 8002dfa:	e77a      	b.n	8002cf2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dfe:	f000 fa68 	bl	80032d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002e02:	f000 fdd9 	bl	80039b8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002e06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002e08:	f000 fab5 	bl	8003376 <prvIsQueueEmpty>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	f43f af6f 	beq.w	8002cf2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002e14:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002e16:	4618      	mov	r0, r3
 8002e18:	3730      	adds	r7, #48	; 0x30
 8002e1a:	46bd      	mov	sp, r7
 8002e1c:	bd80      	pop	{r7, pc}
 8002e1e:	bf00      	nop
 8002e20:	e000ed04 	.word	0xe000ed04

08002e24 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8002e24:	b580      	push	{r7, lr}
 8002e26:	b08e      	sub	sp, #56	; 0x38
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	6078      	str	r0, [r7, #4]
 8002e2c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8002e2e:	2300      	movs	r3, #0
 8002e30:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8002e36:	2300      	movs	r3, #0
 8002e38:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002e3a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d10a      	bne.n	8002e56 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8002e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e44:	f383 8811 	msr	BASEPRI, r3
 8002e48:	f3bf 8f6f 	isb	sy
 8002e4c:	f3bf 8f4f 	dsb	sy
 8002e50:	623b      	str	r3, [r7, #32]
}
 8002e52:	bf00      	nop
 8002e54:	e7fe      	b.n	8002e54 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8002e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d00a      	beq.n	8002e74 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8002e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e62:	f383 8811 	msr	BASEPRI, r3
 8002e66:	f3bf 8f6f 	isb	sy
 8002e6a:	f3bf 8f4f 	dsb	sy
 8002e6e:	61fb      	str	r3, [r7, #28]
}
 8002e70:	bf00      	nop
 8002e72:	e7fe      	b.n	8002e72 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002e74:	f001 f97e 	bl	8004174 <xTaskGetSchedulerState>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d102      	bne.n	8002e84 <xQueueSemaphoreTake+0x60>
 8002e7e:	683b      	ldr	r3, [r7, #0]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	d101      	bne.n	8002e88 <xQueueSemaphoreTake+0x64>
 8002e84:	2301      	movs	r3, #1
 8002e86:	e000      	b.n	8002e8a <xQueueSemaphoreTake+0x66>
 8002e88:	2300      	movs	r3, #0
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d10a      	bne.n	8002ea4 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8002e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002e92:	f383 8811 	msr	BASEPRI, r3
 8002e96:	f3bf 8f6f 	isb	sy
 8002e9a:	f3bf 8f4f 	dsb	sy
 8002e9e:	61bb      	str	r3, [r7, #24]
}
 8002ea0:	bf00      	nop
 8002ea2:	e7fe      	b.n	8002ea2 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ea4:	f001 ffbe 	bl	8004e24 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8002ea8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002eac:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8002eae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d024      	beq.n	8002efe <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8002eb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eb6:	1e5a      	subs	r2, r3, #1
 8002eb8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002eba:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002ebc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d104      	bne.n	8002ece <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8002ec4:	f001 facc 	bl	8004460 <pvTaskIncrementMutexHeldCount>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ecc:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002ece:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed0:	691b      	ldr	r3, [r3, #16]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d00f      	beq.n	8002ef6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002ed6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ed8:	3310      	adds	r3, #16
 8002eda:	4618      	mov	r0, r3
 8002edc:	f000 ff88 	bl	8003df0 <xTaskRemoveFromEventList>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d007      	beq.n	8002ef6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002ee6:	4b54      	ldr	r3, [pc, #336]	; (8003038 <xQueueSemaphoreTake+0x214>)
 8002ee8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002eec:	601a      	str	r2, [r3, #0]
 8002eee:	f3bf 8f4f 	dsb	sy
 8002ef2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002ef6:	f001 ffc5 	bl	8004e84 <vPortExitCritical>
				return pdPASS;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e097      	b.n	800302e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002efe:	683b      	ldr	r3, [r7, #0]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	d111      	bne.n	8002f28 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8002f04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8002f0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002f0e:	f383 8811 	msr	BASEPRI, r3
 8002f12:	f3bf 8f6f 	isb	sy
 8002f16:	f3bf 8f4f 	dsb	sy
 8002f1a:	617b      	str	r3, [r7, #20]
}
 8002f1c:	bf00      	nop
 8002f1e:	e7fe      	b.n	8002f1e <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8002f20:	f001 ffb0 	bl	8004e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002f24:	2300      	movs	r3, #0
 8002f26:	e082      	b.n	800302e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002f28:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d106      	bne.n	8002f3c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002f2e:	f107 030c 	add.w	r3, r7, #12
 8002f32:	4618      	mov	r0, r3
 8002f34:	f000 ffc0 	bl	8003eb8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002f3c:	f001 ffa2 	bl	8004e84 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002f40:	f000 fd2c 	bl	800399c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002f44:	f001 ff6e 	bl	8004e24 <vPortEnterCritical>
 8002f48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f4a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002f4e:	b25b      	sxtb	r3, r3
 8002f50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f54:	d103      	bne.n	8002f5e <xQueueSemaphoreTake+0x13a>
 8002f56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f58:	2200      	movs	r2, #0
 8002f5a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f60:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002f64:	b25b      	sxtb	r3, r3
 8002f66:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f6a:	d103      	bne.n	8002f74 <xQueueSemaphoreTake+0x150>
 8002f6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f6e:	2200      	movs	r2, #0
 8002f70:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002f74:	f001 ff86 	bl	8004e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002f78:	463a      	mov	r2, r7
 8002f7a:	f107 030c 	add.w	r3, r7, #12
 8002f7e:	4611      	mov	r1, r2
 8002f80:	4618      	mov	r0, r3
 8002f82:	f000 ffaf 	bl	8003ee4 <xTaskCheckForTimeOut>
 8002f86:	4603      	mov	r3, r0
 8002f88:	2b00      	cmp	r3, #0
 8002f8a:	d132      	bne.n	8002ff2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002f8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002f8e:	f000 f9f2 	bl	8003376 <prvIsQueueEmpty>
 8002f92:	4603      	mov	r3, r0
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d026      	beq.n	8002fe6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d109      	bne.n	8002fb4 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8002fa0:	f001 ff40 	bl	8004e24 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002fa4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fa6:	689b      	ldr	r3, [r3, #8]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f001 f901 	bl	80041b0 <xTaskPriorityInherit>
 8002fae:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8002fb0:	f001 ff68 	bl	8004e84 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fb6:	3324      	adds	r3, #36	; 0x24
 8002fb8:	683a      	ldr	r2, [r7, #0]
 8002fba:	4611      	mov	r1, r2
 8002fbc:	4618      	mov	r0, r3
 8002fbe:	f000 fec7 	bl	8003d50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002fc2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fc4:	f000 f985 	bl	80032d2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002fc8:	f000 fcf6 	bl	80039b8 <xTaskResumeAll>
 8002fcc:	4603      	mov	r3, r0
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	f47f af68 	bne.w	8002ea4 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8002fd4:	4b18      	ldr	r3, [pc, #96]	; (8003038 <xQueueSemaphoreTake+0x214>)
 8002fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002fda:	601a      	str	r2, [r3, #0]
 8002fdc:	f3bf 8f4f 	dsb	sy
 8002fe0:	f3bf 8f6f 	isb	sy
 8002fe4:	e75e      	b.n	8002ea4 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8002fe6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002fe8:	f000 f973 	bl	80032d2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002fec:	f000 fce4 	bl	80039b8 <xTaskResumeAll>
 8002ff0:	e758      	b.n	8002ea4 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8002ff2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ff4:	f000 f96d 	bl	80032d2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002ff8:	f000 fcde 	bl	80039b8 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002ffc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002ffe:	f000 f9ba 	bl	8003376 <prvIsQueueEmpty>
 8003002:	4603      	mov	r3, r0
 8003004:	2b00      	cmp	r3, #0
 8003006:	f43f af4d 	beq.w	8002ea4 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800300a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800300c:	2b00      	cmp	r3, #0
 800300e:	d00d      	beq.n	800302c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8003010:	f001 ff08 	bl	8004e24 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003014:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003016:	f000 f8b4 	bl	8003182 <prvGetDisinheritPriorityAfterTimeout>
 800301a:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	689b      	ldr	r3, [r3, #8]
 8003020:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003022:	4618      	mov	r0, r3
 8003024:	f001 f99a 	bl	800435c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003028:	f001 ff2c 	bl	8004e84 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800302c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800302e:	4618      	mov	r0, r3
 8003030:	3738      	adds	r7, #56	; 0x38
 8003032:	46bd      	mov	sp, r7
 8003034:	bd80      	pop	{r7, pc}
 8003036:	bf00      	nop
 8003038:	e000ed04 	.word	0xe000ed04

0800303c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b08e      	sub	sp, #56	; 0x38
 8003040:	af00      	add	r7, sp, #0
 8003042:	60f8      	str	r0, [r7, #12]
 8003044:	60b9      	str	r1, [r7, #8]
 8003046:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800304c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800304e:	2b00      	cmp	r3, #0
 8003050:	d10a      	bne.n	8003068 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8003052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003056:	f383 8811 	msr	BASEPRI, r3
 800305a:	f3bf 8f6f 	isb	sy
 800305e:	f3bf 8f4f 	dsb	sy
 8003062:	623b      	str	r3, [r7, #32]
}
 8003064:	bf00      	nop
 8003066:	e7fe      	b.n	8003066 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	2b00      	cmp	r3, #0
 800306c:	d103      	bne.n	8003076 <xQueueReceiveFromISR+0x3a>
 800306e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003070:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003072:	2b00      	cmp	r3, #0
 8003074:	d101      	bne.n	800307a <xQueueReceiveFromISR+0x3e>
 8003076:	2301      	movs	r3, #1
 8003078:	e000      	b.n	800307c <xQueueReceiveFromISR+0x40>
 800307a:	2300      	movs	r3, #0
 800307c:	2b00      	cmp	r3, #0
 800307e:	d10a      	bne.n	8003096 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8003080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003084:	f383 8811 	msr	BASEPRI, r3
 8003088:	f3bf 8f6f 	isb	sy
 800308c:	f3bf 8f4f 	dsb	sy
 8003090:	61fb      	str	r3, [r7, #28]
}
 8003092:	bf00      	nop
 8003094:	e7fe      	b.n	8003094 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003096:	f001 ffa7 	bl	8004fe8 <vPortValidateInterruptPriority>
	__asm volatile
 800309a:	f3ef 8211 	mrs	r2, BASEPRI
 800309e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80030a2:	f383 8811 	msr	BASEPRI, r3
 80030a6:	f3bf 8f6f 	isb	sy
 80030aa:	f3bf 8f4f 	dsb	sy
 80030ae:	61ba      	str	r2, [r7, #24]
 80030b0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80030b2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80030b4:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80030b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030ba:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80030bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d02f      	beq.n	8003122 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80030c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80030c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80030cc:	68b9      	ldr	r1, [r7, #8]
 80030ce:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80030d0:	f000 f8d9 	bl	8003286 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80030d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80030d6:	1e5a      	subs	r2, r3, #1
 80030d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030da:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80030dc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80030e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030e4:	d112      	bne.n	800310c <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80030e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d016      	beq.n	800311c <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80030f0:	3310      	adds	r3, #16
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 fe7c 	bl	8003df0 <xTaskRemoveFromEventList>
 80030f8:	4603      	mov	r3, r0
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d00e      	beq.n	800311c <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	2b00      	cmp	r3, #0
 8003102:	d00b      	beq.n	800311c <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	601a      	str	r2, [r3, #0]
 800310a:	e007      	b.n	800311c <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800310c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003110:	3301      	adds	r3, #1
 8003112:	b2db      	uxtb	r3, r3
 8003114:	b25a      	sxtb	r2, r3
 8003116:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003118:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800311c:	2301      	movs	r3, #1
 800311e:	637b      	str	r3, [r7, #52]	; 0x34
 8003120:	e001      	b.n	8003126 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8003122:	2300      	movs	r3, #0
 8003124:	637b      	str	r3, [r7, #52]	; 0x34
 8003126:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003128:	613b      	str	r3, [r7, #16]
	__asm volatile
 800312a:	693b      	ldr	r3, [r7, #16]
 800312c:	f383 8811 	msr	BASEPRI, r3
}
 8003130:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003132:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003134:	4618      	mov	r0, r3
 8003136:	3738      	adds	r7, #56	; 0x38
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d10a      	bne.n	8003164 <vQueueDelete+0x28>
	__asm volatile
 800314e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003152:	f383 8811 	msr	BASEPRI, r3
 8003156:	f3bf 8f6f 	isb	sy
 800315a:	f3bf 8f4f 	dsb	sy
 800315e:	60bb      	str	r3, [r7, #8]
}
 8003160:	bf00      	nop
 8003162:	e7fe      	b.n	8003162 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8003164:	68f8      	ldr	r0, [r7, #12]
 8003166:	f000 f95f 	bl	8003428 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8003170:	2b00      	cmp	r3, #0
 8003172:	d102      	bne.n	800317a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8003174:	68f8      	ldr	r0, [r7, #12]
 8003176:	f002 f843 	bl	8005200 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}

08003182 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003182:	b480      	push	{r7}
 8003184:	b085      	sub	sp, #20
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800318e:	2b00      	cmp	r3, #0
 8003190:	d006      	beq.n	80031a0 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 800319c:	60fb      	str	r3, [r7, #12]
 800319e:	e001      	b.n	80031a4 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80031a0:	2300      	movs	r3, #0
 80031a2:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80031a4:	68fb      	ldr	r3, [r7, #12]
	}
 80031a6:	4618      	mov	r0, r3
 80031a8:	3714      	adds	r7, #20
 80031aa:	46bd      	mov	sp, r7
 80031ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b0:	4770      	bx	lr

080031b2 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80031b2:	b580      	push	{r7, lr}
 80031b4:	b086      	sub	sp, #24
 80031b6:	af00      	add	r7, sp, #0
 80031b8:	60f8      	str	r0, [r7, #12]
 80031ba:	60b9      	str	r1, [r7, #8]
 80031bc:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80031be:	2300      	movs	r3, #0
 80031c0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031c6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d10d      	bne.n	80031ec <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d14d      	bne.n	8003274 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	689b      	ldr	r3, [r3, #8]
 80031dc:	4618      	mov	r0, r3
 80031de:	f001 f84f 	bl	8004280 <xTaskPriorityDisinherit>
 80031e2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	2200      	movs	r2, #0
 80031e8:	609a      	str	r2, [r3, #8]
 80031ea:	e043      	b.n	8003274 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2b00      	cmp	r3, #0
 80031f0:	d119      	bne.n	8003226 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6858      	ldr	r0, [r3, #4]
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031fa:	461a      	mov	r2, r3
 80031fc:	68b9      	ldr	r1, [r7, #8]
 80031fe:	f002 f943 	bl	8005488 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320a:	441a      	add	r2, r3
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	685a      	ldr	r2, [r3, #4]
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	689b      	ldr	r3, [r3, #8]
 8003218:	429a      	cmp	r2, r3
 800321a:	d32b      	bcc.n	8003274 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	605a      	str	r2, [r3, #4]
 8003224:	e026      	b.n	8003274 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	68d8      	ldr	r0, [r3, #12]
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322e:	461a      	mov	r2, r3
 8003230:	68b9      	ldr	r1, [r7, #8]
 8003232:	f002 f929 	bl	8005488 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003236:	68fb      	ldr	r3, [r7, #12]
 8003238:	68da      	ldr	r2, [r3, #12]
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800323e:	425b      	negs	r3, r3
 8003240:	441a      	add	r2, r3
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	68da      	ldr	r2, [r3, #12]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	429a      	cmp	r2, r3
 8003250:	d207      	bcs.n	8003262 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689a      	ldr	r2, [r3, #8]
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800325a:	425b      	negs	r3, r3
 800325c:	441a      	add	r2, r3
 800325e:	68fb      	ldr	r3, [r7, #12]
 8003260:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	2b02      	cmp	r3, #2
 8003266:	d105      	bne.n	8003274 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003268:	693b      	ldr	r3, [r7, #16]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d002      	beq.n	8003274 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800326e:	693b      	ldr	r3, [r7, #16]
 8003270:	3b01      	subs	r3, #1
 8003272:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003274:	693b      	ldr	r3, [r7, #16]
 8003276:	1c5a      	adds	r2, r3, #1
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800327c:	697b      	ldr	r3, [r7, #20]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3718      	adds	r7, #24
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}

08003286 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003286:	b580      	push	{r7, lr}
 8003288:	b082      	sub	sp, #8
 800328a:	af00      	add	r7, sp, #0
 800328c:	6078      	str	r0, [r7, #4]
 800328e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003294:	2b00      	cmp	r3, #0
 8003296:	d018      	beq.n	80032ca <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	68da      	ldr	r2, [r3, #12]
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a0:	441a      	add	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	68da      	ldr	r2, [r3, #12]
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	429a      	cmp	r2, r3
 80032b0:	d303      	bcc.n	80032ba <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681a      	ldr	r2, [r3, #0]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	68d9      	ldr	r1, [r3, #12]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032c2:	461a      	mov	r2, r3
 80032c4:	6838      	ldr	r0, [r7, #0]
 80032c6:	f002 f8df 	bl	8005488 <memcpy>
	}
}
 80032ca:	bf00      	nop
 80032cc:	3708      	adds	r7, #8
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b084      	sub	sp, #16
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80032da:	f001 fda3 	bl	8004e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80032e4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80032e6:	e011      	b.n	800330c <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d012      	beq.n	8003316 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	3324      	adds	r3, #36	; 0x24
 80032f4:	4618      	mov	r0, r3
 80032f6:	f000 fd7b 	bl	8003df0 <xTaskRemoveFromEventList>
 80032fa:	4603      	mov	r3, r0
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d001      	beq.n	8003304 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003300:	f000 fe52 	bl	8003fa8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003304:	7bfb      	ldrb	r3, [r7, #15]
 8003306:	3b01      	subs	r3, #1
 8003308:	b2db      	uxtb	r3, r3
 800330a:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800330c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003310:	2b00      	cmp	r3, #0
 8003312:	dce9      	bgt.n	80032e8 <prvUnlockQueue+0x16>
 8003314:	e000      	b.n	8003318 <prvUnlockQueue+0x46>
					break;
 8003316:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	22ff      	movs	r2, #255	; 0xff
 800331c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003320:	f001 fdb0 	bl	8004e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003324:	f001 fd7e 	bl	8004e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800332e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003330:	e011      	b.n	8003356 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	691b      	ldr	r3, [r3, #16]
 8003336:	2b00      	cmp	r3, #0
 8003338:	d012      	beq.n	8003360 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	3310      	adds	r3, #16
 800333e:	4618      	mov	r0, r3
 8003340:	f000 fd56 	bl	8003df0 <xTaskRemoveFromEventList>
 8003344:	4603      	mov	r3, r0
 8003346:	2b00      	cmp	r3, #0
 8003348:	d001      	beq.n	800334e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800334a:	f000 fe2d 	bl	8003fa8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800334e:	7bbb      	ldrb	r3, [r7, #14]
 8003350:	3b01      	subs	r3, #1
 8003352:	b2db      	uxtb	r3, r3
 8003354:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003356:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800335a:	2b00      	cmp	r3, #0
 800335c:	dce9      	bgt.n	8003332 <prvUnlockQueue+0x60>
 800335e:	e000      	b.n	8003362 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003360:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	22ff      	movs	r2, #255	; 0xff
 8003366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800336a:	f001 fd8b 	bl	8004e84 <vPortExitCritical>
}
 800336e:	bf00      	nop
 8003370:	3710      	adds	r7, #16
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b084      	sub	sp, #16
 800337a:	af00      	add	r7, sp, #0
 800337c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800337e:	f001 fd51 	bl	8004e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003386:	2b00      	cmp	r3, #0
 8003388:	d102      	bne.n	8003390 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800338a:	2301      	movs	r3, #1
 800338c:	60fb      	str	r3, [r7, #12]
 800338e:	e001      	b.n	8003394 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003390:	2300      	movs	r3, #0
 8003392:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003394:	f001 fd76 	bl	8004e84 <vPortExitCritical>

	return xReturn;
 8003398:	68fb      	ldr	r3, [r7, #12]
}
 800339a:	4618      	mov	r0, r3
 800339c:	3710      	adds	r7, #16
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b084      	sub	sp, #16
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80033aa:	f001 fd3b 	bl	8004e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d102      	bne.n	80033c0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80033ba:	2301      	movs	r3, #1
 80033bc:	60fb      	str	r3, [r7, #12]
 80033be:	e001      	b.n	80033c4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80033c0:	2300      	movs	r3, #0
 80033c2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80033c4:	f001 fd5e 	bl	8004e84 <vPortExitCritical>

	return xReturn;
 80033c8:	68fb      	ldr	r3, [r7, #12]
}
 80033ca:	4618      	mov	r0, r3
 80033cc:	3710      	adds	r7, #16
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}
	...

080033d4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80033d4:	b480      	push	{r7}
 80033d6:	b085      	sub	sp, #20
 80033d8:	af00      	add	r7, sp, #0
 80033da:	6078      	str	r0, [r7, #4]
 80033dc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80033de:	2300      	movs	r3, #0
 80033e0:	60fb      	str	r3, [r7, #12]
 80033e2:	e014      	b.n	800340e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80033e4:	4a0f      	ldr	r2, [pc, #60]	; (8003424 <vQueueAddToRegistry+0x50>)
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d10b      	bne.n	8003408 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80033f0:	490c      	ldr	r1, [pc, #48]	; (8003424 <vQueueAddToRegistry+0x50>)
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	683a      	ldr	r2, [r7, #0]
 80033f6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80033fa:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <vQueueAddToRegistry+0x50>)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	00db      	lsls	r3, r3, #3
 8003400:	4413      	add	r3, r2
 8003402:	687a      	ldr	r2, [r7, #4]
 8003404:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003406:	e006      	b.n	8003416 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	3301      	adds	r3, #1
 800340c:	60fb      	str	r3, [r7, #12]
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2b07      	cmp	r3, #7
 8003412:	d9e7      	bls.n	80033e4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003414:	bf00      	nop
 8003416:	bf00      	nop
 8003418:	3714      	adds	r7, #20
 800341a:	46bd      	mov	sp, r7
 800341c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003420:	4770      	bx	lr
 8003422:	bf00      	nop
 8003424:	20000868 	.word	0x20000868

08003428 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003430:	2300      	movs	r3, #0
 8003432:	60fb      	str	r3, [r7, #12]
 8003434:	e016      	b.n	8003464 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8003436:	4a10      	ldr	r2, [pc, #64]	; (8003478 <vQueueUnregisterQueue+0x50>)
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	00db      	lsls	r3, r3, #3
 800343c:	4413      	add	r3, r2
 800343e:	685b      	ldr	r3, [r3, #4]
 8003440:	687a      	ldr	r2, [r7, #4]
 8003442:	429a      	cmp	r2, r3
 8003444:	d10b      	bne.n	800345e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8003446:	4a0c      	ldr	r2, [pc, #48]	; (8003478 <vQueueUnregisterQueue+0x50>)
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2100      	movs	r1, #0
 800344c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8003450:	4a09      	ldr	r2, [pc, #36]	; (8003478 <vQueueUnregisterQueue+0x50>)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	00db      	lsls	r3, r3, #3
 8003456:	4413      	add	r3, r2
 8003458:	2200      	movs	r2, #0
 800345a:	605a      	str	r2, [r3, #4]
				break;
 800345c:	e006      	b.n	800346c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	3301      	adds	r3, #1
 8003462:	60fb      	str	r3, [r7, #12]
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2b07      	cmp	r3, #7
 8003468:	d9e5      	bls.n	8003436 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800346a:	bf00      	nop
 800346c:	bf00      	nop
 800346e:	3714      	adds	r7, #20
 8003470:	46bd      	mov	sp, r7
 8003472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003476:	4770      	bx	lr
 8003478:	20000868 	.word	0x20000868

0800347c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800347c:	b580      	push	{r7, lr}
 800347e:	b086      	sub	sp, #24
 8003480:	af00      	add	r7, sp, #0
 8003482:	60f8      	str	r0, [r7, #12]
 8003484:	60b9      	str	r1, [r7, #8]
 8003486:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800348c:	f001 fcca 	bl	8004e24 <vPortEnterCritical>
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003496:	b25b      	sxtb	r3, r3
 8003498:	f1b3 3fff 	cmp.w	r3, #4294967295
 800349c:	d103      	bne.n	80034a6 <vQueueWaitForMessageRestricted+0x2a>
 800349e:	697b      	ldr	r3, [r7, #20]
 80034a0:	2200      	movs	r2, #0
 80034a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80034a6:	697b      	ldr	r3, [r7, #20]
 80034a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80034ac:	b25b      	sxtb	r3, r3
 80034ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034b2:	d103      	bne.n	80034bc <vQueueWaitForMessageRestricted+0x40>
 80034b4:	697b      	ldr	r3, [r7, #20]
 80034b6:	2200      	movs	r2, #0
 80034b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80034bc:	f001 fce2 	bl	8004e84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80034c0:	697b      	ldr	r3, [r7, #20]
 80034c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d106      	bne.n	80034d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	3324      	adds	r3, #36	; 0x24
 80034cc:	687a      	ldr	r2, [r7, #4]
 80034ce:	68b9      	ldr	r1, [r7, #8]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f000 fc61 	bl	8003d98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80034d6:	6978      	ldr	r0, [r7, #20]
 80034d8:	f7ff fefb 	bl	80032d2 <prvUnlockQueue>
	}
 80034dc:	bf00      	nop
 80034de:	3718      	adds	r7, #24
 80034e0:	46bd      	mov	sp, r7
 80034e2:	bd80      	pop	{r7, pc}

080034e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80034e4:	b580      	push	{r7, lr}
 80034e6:	b08e      	sub	sp, #56	; 0x38
 80034e8:	af04      	add	r7, sp, #16
 80034ea:	60f8      	str	r0, [r7, #12]
 80034ec:	60b9      	str	r1, [r7, #8]
 80034ee:	607a      	str	r2, [r7, #4]
 80034f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80034f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d10a      	bne.n	800350e <xTaskCreateStatic+0x2a>
	__asm volatile
 80034f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80034fc:	f383 8811 	msr	BASEPRI, r3
 8003500:	f3bf 8f6f 	isb	sy
 8003504:	f3bf 8f4f 	dsb	sy
 8003508:	623b      	str	r3, [r7, #32]
}
 800350a:	bf00      	nop
 800350c:	e7fe      	b.n	800350c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800350e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10a      	bne.n	800352a <xTaskCreateStatic+0x46>
	__asm volatile
 8003514:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003518:	f383 8811 	msr	BASEPRI, r3
 800351c:	f3bf 8f6f 	isb	sy
 8003520:	f3bf 8f4f 	dsb	sy
 8003524:	61fb      	str	r3, [r7, #28]
}
 8003526:	bf00      	nop
 8003528:	e7fe      	b.n	8003528 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800352a:	23bc      	movs	r3, #188	; 0xbc
 800352c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	2bbc      	cmp	r3, #188	; 0xbc
 8003532:	d00a      	beq.n	800354a <xTaskCreateStatic+0x66>
	__asm volatile
 8003534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003538:	f383 8811 	msr	BASEPRI, r3
 800353c:	f3bf 8f6f 	isb	sy
 8003540:	f3bf 8f4f 	dsb	sy
 8003544:	61bb      	str	r3, [r7, #24]
}
 8003546:	bf00      	nop
 8003548:	e7fe      	b.n	8003548 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800354a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800354c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800354e:	2b00      	cmp	r3, #0
 8003550:	d01e      	beq.n	8003590 <xTaskCreateStatic+0xac>
 8003552:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003554:	2b00      	cmp	r3, #0
 8003556:	d01b      	beq.n	8003590 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003558:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800355a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800355c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800355e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003560:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003564:	2202      	movs	r2, #2
 8003566:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800356a:	2300      	movs	r3, #0
 800356c:	9303      	str	r3, [sp, #12]
 800356e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003570:	9302      	str	r3, [sp, #8]
 8003572:	f107 0314 	add.w	r3, r7, #20
 8003576:	9301      	str	r3, [sp, #4]
 8003578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800357a:	9300      	str	r3, [sp, #0]
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	68b9      	ldr	r1, [r7, #8]
 8003582:	68f8      	ldr	r0, [r7, #12]
 8003584:	f000 f850 	bl	8003628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003588:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800358a:	f000 f8f3 	bl	8003774 <prvAddNewTaskToReadyList>
 800358e:	e001      	b.n	8003594 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003590:	2300      	movs	r3, #0
 8003592:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003594:	697b      	ldr	r3, [r7, #20]
	}
 8003596:	4618      	mov	r0, r3
 8003598:	3728      	adds	r7, #40	; 0x28
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}

0800359e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b08c      	sub	sp, #48	; 0x30
 80035a2:	af04      	add	r7, sp, #16
 80035a4:	60f8      	str	r0, [r7, #12]
 80035a6:	60b9      	str	r1, [r7, #8]
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80035ae:	88fb      	ldrh	r3, [r7, #6]
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	4618      	mov	r0, r3
 80035b4:	f001 fd58 	bl	8005068 <pvPortMalloc>
 80035b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00e      	beq.n	80035de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80035c0:	20bc      	movs	r0, #188	; 0xbc
 80035c2:	f001 fd51 	bl	8005068 <pvPortMalloc>
 80035c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80035c8:	69fb      	ldr	r3, [r7, #28]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d003      	beq.n	80035d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80035ce:	69fb      	ldr	r3, [r7, #28]
 80035d0:	697a      	ldr	r2, [r7, #20]
 80035d2:	631a      	str	r2, [r3, #48]	; 0x30
 80035d4:	e005      	b.n	80035e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80035d6:	6978      	ldr	r0, [r7, #20]
 80035d8:	f001 fe12 	bl	8005200 <vPortFree>
 80035dc:	e001      	b.n	80035e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80035de:	2300      	movs	r3, #0
 80035e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80035e2:	69fb      	ldr	r3, [r7, #28]
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d017      	beq.n	8003618 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	2200      	movs	r2, #0
 80035ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80035f0:	88fa      	ldrh	r2, [r7, #6]
 80035f2:	2300      	movs	r3, #0
 80035f4:	9303      	str	r3, [sp, #12]
 80035f6:	69fb      	ldr	r3, [r7, #28]
 80035f8:	9302      	str	r3, [sp, #8]
 80035fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035fc:	9301      	str	r3, [sp, #4]
 80035fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	68b9      	ldr	r1, [r7, #8]
 8003606:	68f8      	ldr	r0, [r7, #12]
 8003608:	f000 f80e 	bl	8003628 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800360c:	69f8      	ldr	r0, [r7, #28]
 800360e:	f000 f8b1 	bl	8003774 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003612:	2301      	movs	r3, #1
 8003614:	61bb      	str	r3, [r7, #24]
 8003616:	e002      	b.n	800361e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003618:	f04f 33ff 	mov.w	r3, #4294967295
 800361c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800361e:	69bb      	ldr	r3, [r7, #24]
	}
 8003620:	4618      	mov	r0, r3
 8003622:	3720      	adds	r7, #32
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}

08003628 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b088      	sub	sp, #32
 800362c:	af00      	add	r7, sp, #0
 800362e:	60f8      	str	r0, [r7, #12]
 8003630:	60b9      	str	r1, [r7, #8]
 8003632:	607a      	str	r2, [r7, #4]
 8003634:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003638:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	009b      	lsls	r3, r3, #2
 800363e:	461a      	mov	r2, r3
 8003640:	21a5      	movs	r1, #165	; 0xa5
 8003642:	f001 ff2f 	bl	80054a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003646:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003648:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003650:	3b01      	subs	r3, #1
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	4413      	add	r3, r2
 8003656:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	f023 0307 	bic.w	r3, r3, #7
 800365e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003660:	69bb      	ldr	r3, [r7, #24]
 8003662:	f003 0307 	and.w	r3, r3, #7
 8003666:	2b00      	cmp	r3, #0
 8003668:	d00a      	beq.n	8003680 <prvInitialiseNewTask+0x58>
	__asm volatile
 800366a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800366e:	f383 8811 	msr	BASEPRI, r3
 8003672:	f3bf 8f6f 	isb	sy
 8003676:	f3bf 8f4f 	dsb	sy
 800367a:	617b      	str	r3, [r7, #20]
}
 800367c:	bf00      	nop
 800367e:	e7fe      	b.n	800367e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003680:	68bb      	ldr	r3, [r7, #8]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d01f      	beq.n	80036c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003686:	2300      	movs	r3, #0
 8003688:	61fb      	str	r3, [r7, #28]
 800368a:	e012      	b.n	80036b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800368c:	68ba      	ldr	r2, [r7, #8]
 800368e:	69fb      	ldr	r3, [r7, #28]
 8003690:	4413      	add	r3, r2
 8003692:	7819      	ldrb	r1, [r3, #0]
 8003694:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003696:	69fb      	ldr	r3, [r7, #28]
 8003698:	4413      	add	r3, r2
 800369a:	3334      	adds	r3, #52	; 0x34
 800369c:	460a      	mov	r2, r1
 800369e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80036a0:	68ba      	ldr	r2, [r7, #8]
 80036a2:	69fb      	ldr	r3, [r7, #28]
 80036a4:	4413      	add	r3, r2
 80036a6:	781b      	ldrb	r3, [r3, #0]
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d006      	beq.n	80036ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80036ac:	69fb      	ldr	r3, [r7, #28]
 80036ae:	3301      	adds	r3, #1
 80036b0:	61fb      	str	r3, [r7, #28]
 80036b2:	69fb      	ldr	r3, [r7, #28]
 80036b4:	2b0f      	cmp	r3, #15
 80036b6:	d9e9      	bls.n	800368c <prvInitialiseNewTask+0x64>
 80036b8:	e000      	b.n	80036bc <prvInitialiseNewTask+0x94>
			{
				break;
 80036ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80036bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036c4:	e003      	b.n	80036ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	2200      	movs	r2, #0
 80036ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80036ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036d0:	2b37      	cmp	r3, #55	; 0x37
 80036d2:	d901      	bls.n	80036d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80036d4:	2337      	movs	r3, #55	; 0x37
 80036d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80036d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80036de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80036e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80036e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036e6:	2200      	movs	r2, #0
 80036e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80036ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036ec:	3304      	adds	r3, #4
 80036ee:	4618      	mov	r0, r3
 80036f0:	f7fe fe56 	bl	80023a0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80036f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f6:	3318      	adds	r3, #24
 80036f8:	4618      	mov	r0, r3
 80036fa:	f7fe fe51 	bl	80023a0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80036fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003700:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003702:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003706:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800370a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800370c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800370e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003710:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003712:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003716:	2200      	movs	r2, #0
 8003718:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800371c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800371e:	2200      	movs	r2, #0
 8003720:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003726:	3354      	adds	r3, #84	; 0x54
 8003728:	2260      	movs	r2, #96	; 0x60
 800372a:	2100      	movs	r1, #0
 800372c:	4618      	mov	r0, r3
 800372e:	f001 feb9 	bl	80054a4 <memset>
 8003732:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003734:	4a0c      	ldr	r2, [pc, #48]	; (8003768 <prvInitialiseNewTask+0x140>)
 8003736:	659a      	str	r2, [r3, #88]	; 0x58
 8003738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800373a:	4a0c      	ldr	r2, [pc, #48]	; (800376c <prvInitialiseNewTask+0x144>)
 800373c:	65da      	str	r2, [r3, #92]	; 0x5c
 800373e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003740:	4a0b      	ldr	r2, [pc, #44]	; (8003770 <prvInitialiseNewTask+0x148>)
 8003742:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003744:	683a      	ldr	r2, [r7, #0]
 8003746:	68f9      	ldr	r1, [r7, #12]
 8003748:	69b8      	ldr	r0, [r7, #24]
 800374a:	f001 fa3f 	bl	8004bcc <pxPortInitialiseStack>
 800374e:	4602      	mov	r2, r0
 8003750:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003752:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003754:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003756:	2b00      	cmp	r3, #0
 8003758:	d002      	beq.n	8003760 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800375a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800375c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800375e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003760:	bf00      	nop
 8003762:	3720      	adds	r7, #32
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}
 8003768:	08005744 	.word	0x08005744
 800376c:	08005764 	.word	0x08005764
 8003770:	08005724 	.word	0x08005724

08003774 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b082      	sub	sp, #8
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800377c:	f001 fb52 	bl	8004e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003780:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <prvAddNewTaskToReadyList+0xc4>)
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	3301      	adds	r3, #1
 8003786:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <prvAddNewTaskToReadyList+0xc4>)
 8003788:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800378a:	4b2c      	ldr	r3, [pc, #176]	; (800383c <prvAddNewTaskToReadyList+0xc8>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d109      	bne.n	80037a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8003792:	4a2a      	ldr	r2, [pc, #168]	; (800383c <prvAddNewTaskToReadyList+0xc8>)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8003798:	4b27      	ldr	r3, [pc, #156]	; (8003838 <prvAddNewTaskToReadyList+0xc4>)
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	2b01      	cmp	r3, #1
 800379e:	d110      	bne.n	80037c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80037a0:	f000 fc26 	bl	8003ff0 <prvInitialiseTaskLists>
 80037a4:	e00d      	b.n	80037c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80037a6:	4b26      	ldr	r3, [pc, #152]	; (8003840 <prvAddNewTaskToReadyList+0xcc>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80037ae:	4b23      	ldr	r3, [pc, #140]	; (800383c <prvAddNewTaskToReadyList+0xc8>)
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037b8:	429a      	cmp	r2, r3
 80037ba:	d802      	bhi.n	80037c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80037bc:	4a1f      	ldr	r2, [pc, #124]	; (800383c <prvAddNewTaskToReadyList+0xc8>)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80037c2:	4b20      	ldr	r3, [pc, #128]	; (8003844 <prvAddNewTaskToReadyList+0xd0>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	3301      	adds	r3, #1
 80037c8:	4a1e      	ldr	r2, [pc, #120]	; (8003844 <prvAddNewTaskToReadyList+0xd0>)
 80037ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80037cc:	4b1d      	ldr	r3, [pc, #116]	; (8003844 <prvAddNewTaskToReadyList+0xd0>)
 80037ce:	681a      	ldr	r2, [r3, #0]
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037d8:	4b1b      	ldr	r3, [pc, #108]	; (8003848 <prvAddNewTaskToReadyList+0xd4>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d903      	bls.n	80037e8 <prvAddNewTaskToReadyList+0x74>
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037e4:	4a18      	ldr	r2, [pc, #96]	; (8003848 <prvAddNewTaskToReadyList+0xd4>)
 80037e6:	6013      	str	r3, [r2, #0]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80037ec:	4613      	mov	r3, r2
 80037ee:	009b      	lsls	r3, r3, #2
 80037f0:	4413      	add	r3, r2
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4a15      	ldr	r2, [pc, #84]	; (800384c <prvAddNewTaskToReadyList+0xd8>)
 80037f6:	441a      	add	r2, r3
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3304      	adds	r3, #4
 80037fc:	4619      	mov	r1, r3
 80037fe:	4610      	mov	r0, r2
 8003800:	f7fe fddb 	bl	80023ba <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003804:	f001 fb3e 	bl	8004e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8003808:	4b0d      	ldr	r3, [pc, #52]	; (8003840 <prvAddNewTaskToReadyList+0xcc>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	2b00      	cmp	r3, #0
 800380e:	d00e      	beq.n	800382e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003810:	4b0a      	ldr	r3, [pc, #40]	; (800383c <prvAddNewTaskToReadyList+0xc8>)
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800381a:	429a      	cmp	r2, r3
 800381c:	d207      	bcs.n	800382e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800381e:	4b0c      	ldr	r3, [pc, #48]	; (8003850 <prvAddNewTaskToReadyList+0xdc>)
 8003820:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003824:	601a      	str	r2, [r3, #0]
 8003826:	f3bf 8f4f 	dsb	sy
 800382a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800382e:	bf00      	nop
 8003830:	3708      	adds	r7, #8
 8003832:	46bd      	mov	sp, r7
 8003834:	bd80      	pop	{r7, pc}
 8003836:	bf00      	nop
 8003838:	20000d7c 	.word	0x20000d7c
 800383c:	200008a8 	.word	0x200008a8
 8003840:	20000d88 	.word	0x20000d88
 8003844:	20000d98 	.word	0x20000d98
 8003848:	20000d84 	.word	0x20000d84
 800384c:	200008ac 	.word	0x200008ac
 8003850:	e000ed04 	.word	0xe000ed04

08003854 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003854:	b580      	push	{r7, lr}
 8003856:	b084      	sub	sp, #16
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800385c:	2300      	movs	r3, #0
 800385e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d017      	beq.n	8003896 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8003866:	4b13      	ldr	r3, [pc, #76]	; (80038b4 <vTaskDelay+0x60>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d00a      	beq.n	8003884 <vTaskDelay+0x30>
	__asm volatile
 800386e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003872:	f383 8811 	msr	BASEPRI, r3
 8003876:	f3bf 8f6f 	isb	sy
 800387a:	f3bf 8f4f 	dsb	sy
 800387e:	60bb      	str	r3, [r7, #8]
}
 8003880:	bf00      	nop
 8003882:	e7fe      	b.n	8003882 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003884:	f000 f88a 	bl	800399c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8003888:	2100      	movs	r1, #0
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 fdfc 	bl	8004488 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8003890:	f000 f892 	bl	80039b8 <xTaskResumeAll>
 8003894:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d107      	bne.n	80038ac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 800389c:	4b06      	ldr	r3, [pc, #24]	; (80038b8 <vTaskDelay+0x64>)
 800389e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80038a2:	601a      	str	r2, [r3, #0]
 80038a4:	f3bf 8f4f 	dsb	sy
 80038a8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80038ac:	bf00      	nop
 80038ae:	3710      	adds	r7, #16
 80038b0:	46bd      	mov	sp, r7
 80038b2:	bd80      	pop	{r7, pc}
 80038b4:	20000da4 	.word	0x20000da4
 80038b8:	e000ed04 	.word	0xe000ed04

080038bc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80038bc:	b580      	push	{r7, lr}
 80038be:	b08a      	sub	sp, #40	; 0x28
 80038c0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80038c2:	2300      	movs	r3, #0
 80038c4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80038c6:	2300      	movs	r3, #0
 80038c8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80038ca:	463a      	mov	r2, r7
 80038cc:	1d39      	adds	r1, r7, #4
 80038ce:	f107 0308 	add.w	r3, r7, #8
 80038d2:	4618      	mov	r0, r3
 80038d4:	f7fe fd10 	bl	80022f8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80038d8:	6839      	ldr	r1, [r7, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	9202      	str	r2, [sp, #8]
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	2300      	movs	r3, #0
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	2300      	movs	r3, #0
 80038e8:	460a      	mov	r2, r1
 80038ea:	4924      	ldr	r1, [pc, #144]	; (800397c <vTaskStartScheduler+0xc0>)
 80038ec:	4824      	ldr	r0, [pc, #144]	; (8003980 <vTaskStartScheduler+0xc4>)
 80038ee:	f7ff fdf9 	bl	80034e4 <xTaskCreateStatic>
 80038f2:	4603      	mov	r3, r0
 80038f4:	4a23      	ldr	r2, [pc, #140]	; (8003984 <vTaskStartScheduler+0xc8>)
 80038f6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80038f8:	4b22      	ldr	r3, [pc, #136]	; (8003984 <vTaskStartScheduler+0xc8>)
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d002      	beq.n	8003906 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003900:	2301      	movs	r3, #1
 8003902:	617b      	str	r3, [r7, #20]
 8003904:	e001      	b.n	800390a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8003906:	2300      	movs	r3, #0
 8003908:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800390a:	697b      	ldr	r3, [r7, #20]
 800390c:	2b01      	cmp	r3, #1
 800390e:	d102      	bne.n	8003916 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003910:	f000 fe0e 	bl	8004530 <xTimerCreateTimerTask>
 8003914:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	2b01      	cmp	r3, #1
 800391a:	d11b      	bne.n	8003954 <vTaskStartScheduler+0x98>
	__asm volatile
 800391c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003920:	f383 8811 	msr	BASEPRI, r3
 8003924:	f3bf 8f6f 	isb	sy
 8003928:	f3bf 8f4f 	dsb	sy
 800392c:	613b      	str	r3, [r7, #16]
}
 800392e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003930:	4b15      	ldr	r3, [pc, #84]	; (8003988 <vTaskStartScheduler+0xcc>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	3354      	adds	r3, #84	; 0x54
 8003936:	4a15      	ldr	r2, [pc, #84]	; (800398c <vTaskStartScheduler+0xd0>)
 8003938:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800393a:	4b15      	ldr	r3, [pc, #84]	; (8003990 <vTaskStartScheduler+0xd4>)
 800393c:	f04f 32ff 	mov.w	r2, #4294967295
 8003940:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003942:	4b14      	ldr	r3, [pc, #80]	; (8003994 <vTaskStartScheduler+0xd8>)
 8003944:	2201      	movs	r2, #1
 8003946:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8003948:	4b13      	ldr	r3, [pc, #76]	; (8003998 <vTaskStartScheduler+0xdc>)
 800394a:	2200      	movs	r2, #0
 800394c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800394e:	f001 f9c7 	bl	8004ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003952:	e00e      	b.n	8003972 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003954:	697b      	ldr	r3, [r7, #20]
 8003956:	f1b3 3fff 	cmp.w	r3, #4294967295
 800395a:	d10a      	bne.n	8003972 <vTaskStartScheduler+0xb6>
	__asm volatile
 800395c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003960:	f383 8811 	msr	BASEPRI, r3
 8003964:	f3bf 8f6f 	isb	sy
 8003968:	f3bf 8f4f 	dsb	sy
 800396c:	60fb      	str	r3, [r7, #12]
}
 800396e:	bf00      	nop
 8003970:	e7fe      	b.n	8003970 <vTaskStartScheduler+0xb4>
}
 8003972:	bf00      	nop
 8003974:	3718      	adds	r7, #24
 8003976:	46bd      	mov	sp, r7
 8003978:	bd80      	pop	{r7, pc}
 800397a:	bf00      	nop
 800397c:	08005678 	.word	0x08005678
 8003980:	08003fc1 	.word	0x08003fc1
 8003984:	20000da0 	.word	0x20000da0
 8003988:	200008a8 	.word	0x200008a8
 800398c:	20000010 	.word	0x20000010
 8003990:	20000d9c 	.word	0x20000d9c
 8003994:	20000d88 	.word	0x20000d88
 8003998:	20000d80 	.word	0x20000d80

0800399c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80039a0:	4b04      	ldr	r3, [pc, #16]	; (80039b4 <vTaskSuspendAll+0x18>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	3301      	adds	r3, #1
 80039a6:	4a03      	ldr	r2, [pc, #12]	; (80039b4 <vTaskSuspendAll+0x18>)
 80039a8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80039aa:	bf00      	nop
 80039ac:	46bd      	mov	sp, r7
 80039ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b2:	4770      	bx	lr
 80039b4:	20000da4 	.word	0x20000da4

080039b8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80039b8:	b580      	push	{r7, lr}
 80039ba:	b084      	sub	sp, #16
 80039bc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80039be:	2300      	movs	r3, #0
 80039c0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80039c2:	2300      	movs	r3, #0
 80039c4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80039c6:	4b42      	ldr	r3, [pc, #264]	; (8003ad0 <xTaskResumeAll+0x118>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d10a      	bne.n	80039e4 <xTaskResumeAll+0x2c>
	__asm volatile
 80039ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d2:	f383 8811 	msr	BASEPRI, r3
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	f3bf 8f4f 	dsb	sy
 80039de:	603b      	str	r3, [r7, #0]
}
 80039e0:	bf00      	nop
 80039e2:	e7fe      	b.n	80039e2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80039e4:	f001 fa1e 	bl	8004e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80039e8:	4b39      	ldr	r3, [pc, #228]	; (8003ad0 <xTaskResumeAll+0x118>)
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	3b01      	subs	r3, #1
 80039ee:	4a38      	ldr	r2, [pc, #224]	; (8003ad0 <xTaskResumeAll+0x118>)
 80039f0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80039f2:	4b37      	ldr	r3, [pc, #220]	; (8003ad0 <xTaskResumeAll+0x118>)
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d162      	bne.n	8003ac0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80039fa:	4b36      	ldr	r3, [pc, #216]	; (8003ad4 <xTaskResumeAll+0x11c>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d05e      	beq.n	8003ac0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a02:	e02f      	b.n	8003a64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003a04:	4b34      	ldr	r3, [pc, #208]	; (8003ad8 <xTaskResumeAll+0x120>)
 8003a06:	68db      	ldr	r3, [r3, #12]
 8003a08:	68db      	ldr	r3, [r3, #12]
 8003a0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	3318      	adds	r3, #24
 8003a10:	4618      	mov	r0, r3
 8003a12:	f7fe fd2f 	bl	8002474 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f7fe fd2a 	bl	8002474 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a24:	4b2d      	ldr	r3, [pc, #180]	; (8003adc <xTaskResumeAll+0x124>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d903      	bls.n	8003a34 <xTaskResumeAll+0x7c>
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a30:	4a2a      	ldr	r2, [pc, #168]	; (8003adc <xTaskResumeAll+0x124>)
 8003a32:	6013      	str	r3, [r2, #0]
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a38:	4613      	mov	r3, r2
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	4413      	add	r3, r2
 8003a3e:	009b      	lsls	r3, r3, #2
 8003a40:	4a27      	ldr	r2, [pc, #156]	; (8003ae0 <xTaskResumeAll+0x128>)
 8003a42:	441a      	add	r2, r3
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	3304      	adds	r3, #4
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f7fe fcb5 	bl	80023ba <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a54:	4b23      	ldr	r3, [pc, #140]	; (8003ae4 <xTaskResumeAll+0x12c>)
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a5a:	429a      	cmp	r2, r3
 8003a5c:	d302      	bcc.n	8003a64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003a5e:	4b22      	ldr	r3, [pc, #136]	; (8003ae8 <xTaskResumeAll+0x130>)
 8003a60:	2201      	movs	r2, #1
 8003a62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003a64:	4b1c      	ldr	r3, [pc, #112]	; (8003ad8 <xTaskResumeAll+0x120>)
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d1cb      	bne.n	8003a04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003a72:	f000 fb5f 	bl	8004134 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8003a76:	4b1d      	ldr	r3, [pc, #116]	; (8003aec <xTaskResumeAll+0x134>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d010      	beq.n	8003aa4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003a82:	f000 f847 	bl	8003b14 <xTaskIncrementTick>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d002      	beq.n	8003a92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8003a8c:	4b16      	ldr	r3, [pc, #88]	; (8003ae8 <xTaskResumeAll+0x130>)
 8003a8e:	2201      	movs	r2, #1
 8003a90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	3b01      	subs	r3, #1
 8003a96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d1f1      	bne.n	8003a82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8003a9e:	4b13      	ldr	r3, [pc, #76]	; (8003aec <xTaskResumeAll+0x134>)
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8003aa4:	4b10      	ldr	r3, [pc, #64]	; (8003ae8 <xTaskResumeAll+0x130>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d009      	beq.n	8003ac0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8003aac:	2301      	movs	r3, #1
 8003aae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8003ab0:	4b0f      	ldr	r3, [pc, #60]	; (8003af0 <xTaskResumeAll+0x138>)
 8003ab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ab6:	601a      	str	r2, [r3, #0]
 8003ab8:	f3bf 8f4f 	dsb	sy
 8003abc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8003ac0:	f001 f9e0 	bl	8004e84 <vPortExitCritical>

	return xAlreadyYielded;
 8003ac4:	68bb      	ldr	r3, [r7, #8]
}
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	20000da4 	.word	0x20000da4
 8003ad4:	20000d7c 	.word	0x20000d7c
 8003ad8:	20000d3c 	.word	0x20000d3c
 8003adc:	20000d84 	.word	0x20000d84
 8003ae0:	200008ac 	.word	0x200008ac
 8003ae4:	200008a8 	.word	0x200008a8
 8003ae8:	20000d90 	.word	0x20000d90
 8003aec:	20000d8c 	.word	0x20000d8c
 8003af0:	e000ed04 	.word	0xe000ed04

08003af4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003af4:	b480      	push	{r7}
 8003af6:	b083      	sub	sp, #12
 8003af8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8003afa:	4b05      	ldr	r3, [pc, #20]	; (8003b10 <xTaskGetTickCount+0x1c>)
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003b00:	687b      	ldr	r3, [r7, #4]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	370c      	adds	r7, #12
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr
 8003b0e:	bf00      	nop
 8003b10:	20000d80 	.word	0x20000d80

08003b14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003b14:	b580      	push	{r7, lr}
 8003b16:	b086      	sub	sp, #24
 8003b18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8003b1a:	2300      	movs	r3, #0
 8003b1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003b1e:	4b4f      	ldr	r3, [pc, #316]	; (8003c5c <xTaskIncrementTick+0x148>)
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	f040 808f 	bne.w	8003c46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8003b28:	4b4d      	ldr	r3, [pc, #308]	; (8003c60 <xTaskIncrementTick+0x14c>)
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	3301      	adds	r3, #1
 8003b2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003b30:	4a4b      	ldr	r2, [pc, #300]	; (8003c60 <xTaskIncrementTick+0x14c>)
 8003b32:	693b      	ldr	r3, [r7, #16]
 8003b34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8003b36:	693b      	ldr	r3, [r7, #16]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d120      	bne.n	8003b7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003b3c:	4b49      	ldr	r3, [pc, #292]	; (8003c64 <xTaskIncrementTick+0x150>)
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d00a      	beq.n	8003b5c <xTaskIncrementTick+0x48>
	__asm volatile
 8003b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b4a:	f383 8811 	msr	BASEPRI, r3
 8003b4e:	f3bf 8f6f 	isb	sy
 8003b52:	f3bf 8f4f 	dsb	sy
 8003b56:	603b      	str	r3, [r7, #0]
}
 8003b58:	bf00      	nop
 8003b5a:	e7fe      	b.n	8003b5a <xTaskIncrementTick+0x46>
 8003b5c:	4b41      	ldr	r3, [pc, #260]	; (8003c64 <xTaskIncrementTick+0x150>)
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	60fb      	str	r3, [r7, #12]
 8003b62:	4b41      	ldr	r3, [pc, #260]	; (8003c68 <xTaskIncrementTick+0x154>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	4a3f      	ldr	r2, [pc, #252]	; (8003c64 <xTaskIncrementTick+0x150>)
 8003b68:	6013      	str	r3, [r2, #0]
 8003b6a:	4a3f      	ldr	r2, [pc, #252]	; (8003c68 <xTaskIncrementTick+0x154>)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6013      	str	r3, [r2, #0]
 8003b70:	4b3e      	ldr	r3, [pc, #248]	; (8003c6c <xTaskIncrementTick+0x158>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	3301      	adds	r3, #1
 8003b76:	4a3d      	ldr	r2, [pc, #244]	; (8003c6c <xTaskIncrementTick+0x158>)
 8003b78:	6013      	str	r3, [r2, #0]
 8003b7a:	f000 fadb 	bl	8004134 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003b7e:	4b3c      	ldr	r3, [pc, #240]	; (8003c70 <xTaskIncrementTick+0x15c>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	693a      	ldr	r2, [r7, #16]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d349      	bcc.n	8003c1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003b88:	4b36      	ldr	r3, [pc, #216]	; (8003c64 <xTaskIncrementTick+0x150>)
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d104      	bne.n	8003b9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003b92:	4b37      	ldr	r3, [pc, #220]	; (8003c70 <xTaskIncrementTick+0x15c>)
 8003b94:	f04f 32ff 	mov.w	r2, #4294967295
 8003b98:	601a      	str	r2, [r3, #0]
					break;
 8003b9a:	e03f      	b.n	8003c1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b9c:	4b31      	ldr	r3, [pc, #196]	; (8003c64 <xTaskIncrementTick+0x150>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	68db      	ldr	r3, [r3, #12]
 8003ba2:	68db      	ldr	r3, [r3, #12]
 8003ba4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8003bac:	693a      	ldr	r2, [r7, #16]
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	429a      	cmp	r2, r3
 8003bb2:	d203      	bcs.n	8003bbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8003bb4:	4a2e      	ldr	r2, [pc, #184]	; (8003c70 <xTaskIncrementTick+0x15c>)
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8003bba:	e02f      	b.n	8003c1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	3304      	adds	r3, #4
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	f7fe fc57 	bl	8002474 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d004      	beq.n	8003bd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	3318      	adds	r3, #24
 8003bd2:	4618      	mov	r0, r3
 8003bd4:	f7fe fc4e 	bl	8002474 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8003bd8:	68bb      	ldr	r3, [r7, #8]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	4b25      	ldr	r3, [pc, #148]	; (8003c74 <xTaskIncrementTick+0x160>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d903      	bls.n	8003bec <xTaskIncrementTick+0xd8>
 8003be4:	68bb      	ldr	r3, [r7, #8]
 8003be6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003be8:	4a22      	ldr	r2, [pc, #136]	; (8003c74 <xTaskIncrementTick+0x160>)
 8003bea:	6013      	str	r3, [r2, #0]
 8003bec:	68bb      	ldr	r3, [r7, #8]
 8003bee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bf0:	4613      	mov	r3, r2
 8003bf2:	009b      	lsls	r3, r3, #2
 8003bf4:	4413      	add	r3, r2
 8003bf6:	009b      	lsls	r3, r3, #2
 8003bf8:	4a1f      	ldr	r2, [pc, #124]	; (8003c78 <xTaskIncrementTick+0x164>)
 8003bfa:	441a      	add	r2, r3
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	3304      	adds	r3, #4
 8003c00:	4619      	mov	r1, r3
 8003c02:	4610      	mov	r0, r2
 8003c04:	f7fe fbd9 	bl	80023ba <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c0c:	4b1b      	ldr	r3, [pc, #108]	; (8003c7c <xTaskIncrementTick+0x168>)
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c12:	429a      	cmp	r2, r3
 8003c14:	d3b8      	bcc.n	8003b88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8003c16:	2301      	movs	r3, #1
 8003c18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003c1a:	e7b5      	b.n	8003b88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003c1c:	4b17      	ldr	r3, [pc, #92]	; (8003c7c <xTaskIncrementTick+0x168>)
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c22:	4915      	ldr	r1, [pc, #84]	; (8003c78 <xTaskIncrementTick+0x164>)
 8003c24:	4613      	mov	r3, r2
 8003c26:	009b      	lsls	r3, r3, #2
 8003c28:	4413      	add	r3, r2
 8003c2a:	009b      	lsls	r3, r3, #2
 8003c2c:	440b      	add	r3, r1
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d901      	bls.n	8003c38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003c34:	2301      	movs	r3, #1
 8003c36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8003c38:	4b11      	ldr	r3, [pc, #68]	; (8003c80 <xTaskIncrementTick+0x16c>)
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d007      	beq.n	8003c50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003c40:	2301      	movs	r3, #1
 8003c42:	617b      	str	r3, [r7, #20]
 8003c44:	e004      	b.n	8003c50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8003c46:	4b0f      	ldr	r3, [pc, #60]	; (8003c84 <xTaskIncrementTick+0x170>)
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	3301      	adds	r3, #1
 8003c4c:	4a0d      	ldr	r2, [pc, #52]	; (8003c84 <xTaskIncrementTick+0x170>)
 8003c4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003c50:	697b      	ldr	r3, [r7, #20]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3718      	adds	r7, #24
 8003c56:	46bd      	mov	sp, r7
 8003c58:	bd80      	pop	{r7, pc}
 8003c5a:	bf00      	nop
 8003c5c:	20000da4 	.word	0x20000da4
 8003c60:	20000d80 	.word	0x20000d80
 8003c64:	20000d34 	.word	0x20000d34
 8003c68:	20000d38 	.word	0x20000d38
 8003c6c:	20000d94 	.word	0x20000d94
 8003c70:	20000d9c 	.word	0x20000d9c
 8003c74:	20000d84 	.word	0x20000d84
 8003c78:	200008ac 	.word	0x200008ac
 8003c7c:	200008a8 	.word	0x200008a8
 8003c80:	20000d90 	.word	0x20000d90
 8003c84:	20000d8c 	.word	0x20000d8c

08003c88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8003c88:	b480      	push	{r7}
 8003c8a:	b085      	sub	sp, #20
 8003c8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8003c8e:	4b2a      	ldr	r3, [pc, #168]	; (8003d38 <vTaskSwitchContext+0xb0>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d003      	beq.n	8003c9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8003c96:	4b29      	ldr	r3, [pc, #164]	; (8003d3c <vTaskSwitchContext+0xb4>)
 8003c98:	2201      	movs	r2, #1
 8003c9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8003c9c:	e046      	b.n	8003d2c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8003c9e:	4b27      	ldr	r3, [pc, #156]	; (8003d3c <vTaskSwitchContext+0xb4>)
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ca4:	4b26      	ldr	r3, [pc, #152]	; (8003d40 <vTaskSwitchContext+0xb8>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	60fb      	str	r3, [r7, #12]
 8003caa:	e010      	b.n	8003cce <vTaskSwitchContext+0x46>
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d10a      	bne.n	8003cc8 <vTaskSwitchContext+0x40>
	__asm volatile
 8003cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cb6:	f383 8811 	msr	BASEPRI, r3
 8003cba:	f3bf 8f6f 	isb	sy
 8003cbe:	f3bf 8f4f 	dsb	sy
 8003cc2:	607b      	str	r3, [r7, #4]
}
 8003cc4:	bf00      	nop
 8003cc6:	e7fe      	b.n	8003cc6 <vTaskSwitchContext+0x3e>
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	3b01      	subs	r3, #1
 8003ccc:	60fb      	str	r3, [r7, #12]
 8003cce:	491d      	ldr	r1, [pc, #116]	; (8003d44 <vTaskSwitchContext+0xbc>)
 8003cd0:	68fa      	ldr	r2, [r7, #12]
 8003cd2:	4613      	mov	r3, r2
 8003cd4:	009b      	lsls	r3, r3, #2
 8003cd6:	4413      	add	r3, r2
 8003cd8:	009b      	lsls	r3, r3, #2
 8003cda:	440b      	add	r3, r1
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d0e4      	beq.n	8003cac <vTaskSwitchContext+0x24>
 8003ce2:	68fa      	ldr	r2, [r7, #12]
 8003ce4:	4613      	mov	r3, r2
 8003ce6:	009b      	lsls	r3, r3, #2
 8003ce8:	4413      	add	r3, r2
 8003cea:	009b      	lsls	r3, r3, #2
 8003cec:	4a15      	ldr	r2, [pc, #84]	; (8003d44 <vTaskSwitchContext+0xbc>)
 8003cee:	4413      	add	r3, r2
 8003cf0:	60bb      	str	r3, [r7, #8]
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	685b      	ldr	r3, [r3, #4]
 8003cf6:	685a      	ldr	r2, [r3, #4]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	605a      	str	r2, [r3, #4]
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	685a      	ldr	r2, [r3, #4]
 8003d00:	68bb      	ldr	r3, [r7, #8]
 8003d02:	3308      	adds	r3, #8
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d104      	bne.n	8003d12 <vTaskSwitchContext+0x8a>
 8003d08:	68bb      	ldr	r3, [r7, #8]
 8003d0a:	685b      	ldr	r3, [r3, #4]
 8003d0c:	685a      	ldr	r2, [r3, #4]
 8003d0e:	68bb      	ldr	r3, [r7, #8]
 8003d10:	605a      	str	r2, [r3, #4]
 8003d12:	68bb      	ldr	r3, [r7, #8]
 8003d14:	685b      	ldr	r3, [r3, #4]
 8003d16:	68db      	ldr	r3, [r3, #12]
 8003d18:	4a0b      	ldr	r2, [pc, #44]	; (8003d48 <vTaskSwitchContext+0xc0>)
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	4a08      	ldr	r2, [pc, #32]	; (8003d40 <vTaskSwitchContext+0xb8>)
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003d22:	4b09      	ldr	r3, [pc, #36]	; (8003d48 <vTaskSwitchContext+0xc0>)
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	3354      	adds	r3, #84	; 0x54
 8003d28:	4a08      	ldr	r2, [pc, #32]	; (8003d4c <vTaskSwitchContext+0xc4>)
 8003d2a:	6013      	str	r3, [r2, #0]
}
 8003d2c:	bf00      	nop
 8003d2e:	3714      	adds	r7, #20
 8003d30:	46bd      	mov	sp, r7
 8003d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d36:	4770      	bx	lr
 8003d38:	20000da4 	.word	0x20000da4
 8003d3c:	20000d90 	.word	0x20000d90
 8003d40:	20000d84 	.word	0x20000d84
 8003d44:	200008ac 	.word	0x200008ac
 8003d48:	200008a8 	.word	0x200008a8
 8003d4c:	20000010 	.word	0x20000010

08003d50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003d50:	b580      	push	{r7, lr}
 8003d52:	b084      	sub	sp, #16
 8003d54:	af00      	add	r7, sp, #0
 8003d56:	6078      	str	r0, [r7, #4]
 8003d58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	60fb      	str	r3, [r7, #12]
}
 8003d72:	bf00      	nop
 8003d74:	e7fe      	b.n	8003d74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003d76:	4b07      	ldr	r3, [pc, #28]	; (8003d94 <vTaskPlaceOnEventList+0x44>)
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	3318      	adds	r3, #24
 8003d7c:	4619      	mov	r1, r3
 8003d7e:	6878      	ldr	r0, [r7, #4]
 8003d80:	f7fe fb3f 	bl	8002402 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003d84:	2101      	movs	r1, #1
 8003d86:	6838      	ldr	r0, [r7, #0]
 8003d88:	f000 fb7e 	bl	8004488 <prvAddCurrentTaskToDelayedList>
}
 8003d8c:	bf00      	nop
 8003d8e:	3710      	adds	r7, #16
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	200008a8 	.word	0x200008a8

08003d98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	b086      	sub	sp, #24
 8003d9c:	af00      	add	r7, sp, #0
 8003d9e:	60f8      	str	r0, [r7, #12]
 8003da0:	60b9      	str	r1, [r7, #8]
 8003da2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d10a      	bne.n	8003dc0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003daa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dae:	f383 8811 	msr	BASEPRI, r3
 8003db2:	f3bf 8f6f 	isb	sy
 8003db6:	f3bf 8f4f 	dsb	sy
 8003dba:	617b      	str	r3, [r7, #20]
}
 8003dbc:	bf00      	nop
 8003dbe:	e7fe      	b.n	8003dbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003dc0:	4b0a      	ldr	r3, [pc, #40]	; (8003dec <vTaskPlaceOnEventListRestricted+0x54>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	3318      	adds	r3, #24
 8003dc6:	4619      	mov	r1, r3
 8003dc8:	68f8      	ldr	r0, [r7, #12]
 8003dca:	f7fe faf6 	bl	80023ba <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d002      	beq.n	8003dda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003dd4:	f04f 33ff 	mov.w	r3, #4294967295
 8003dd8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003dda:	6879      	ldr	r1, [r7, #4]
 8003ddc:	68b8      	ldr	r0, [r7, #8]
 8003dde:	f000 fb53 	bl	8004488 <prvAddCurrentTaskToDelayedList>
	}
 8003de2:	bf00      	nop
 8003de4:	3718      	adds	r7, #24
 8003de6:	46bd      	mov	sp, r7
 8003de8:	bd80      	pop	{r7, pc}
 8003dea:	bf00      	nop
 8003dec:	200008a8 	.word	0x200008a8

08003df0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003df0:	b580      	push	{r7, lr}
 8003df2:	b086      	sub	sp, #24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	68db      	ldr	r3, [r3, #12]
 8003dfe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003e00:	693b      	ldr	r3, [r7, #16]
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d10a      	bne.n	8003e1c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003e06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e0a:	f383 8811 	msr	BASEPRI, r3
 8003e0e:	f3bf 8f6f 	isb	sy
 8003e12:	f3bf 8f4f 	dsb	sy
 8003e16:	60fb      	str	r3, [r7, #12]
}
 8003e18:	bf00      	nop
 8003e1a:	e7fe      	b.n	8003e1a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003e1c:	693b      	ldr	r3, [r7, #16]
 8003e1e:	3318      	adds	r3, #24
 8003e20:	4618      	mov	r0, r3
 8003e22:	f7fe fb27 	bl	8002474 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003e26:	4b1e      	ldr	r3, [pc, #120]	; (8003ea0 <xTaskRemoveFromEventList+0xb0>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d11d      	bne.n	8003e6a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003e2e:	693b      	ldr	r3, [r7, #16]
 8003e30:	3304      	adds	r3, #4
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fe fb1e 	bl	8002474 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003e38:	693b      	ldr	r3, [r7, #16]
 8003e3a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e3c:	4b19      	ldr	r3, [pc, #100]	; (8003ea4 <xTaskRemoveFromEventList+0xb4>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	d903      	bls.n	8003e4c <xTaskRemoveFromEventList+0x5c>
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e48:	4a16      	ldr	r2, [pc, #88]	; (8003ea4 <xTaskRemoveFromEventList+0xb4>)
 8003e4a:	6013      	str	r3, [r2, #0]
 8003e4c:	693b      	ldr	r3, [r7, #16]
 8003e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e50:	4613      	mov	r3, r2
 8003e52:	009b      	lsls	r3, r3, #2
 8003e54:	4413      	add	r3, r2
 8003e56:	009b      	lsls	r3, r3, #2
 8003e58:	4a13      	ldr	r2, [pc, #76]	; (8003ea8 <xTaskRemoveFromEventList+0xb8>)
 8003e5a:	441a      	add	r2, r3
 8003e5c:	693b      	ldr	r3, [r7, #16]
 8003e5e:	3304      	adds	r3, #4
 8003e60:	4619      	mov	r1, r3
 8003e62:	4610      	mov	r0, r2
 8003e64:	f7fe faa9 	bl	80023ba <vListInsertEnd>
 8003e68:	e005      	b.n	8003e76 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003e6a:	693b      	ldr	r3, [r7, #16]
 8003e6c:	3318      	adds	r3, #24
 8003e6e:	4619      	mov	r1, r3
 8003e70:	480e      	ldr	r0, [pc, #56]	; (8003eac <xTaskRemoveFromEventList+0xbc>)
 8003e72:	f7fe faa2 	bl	80023ba <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003e76:	693b      	ldr	r3, [r7, #16]
 8003e78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e7a:	4b0d      	ldr	r3, [pc, #52]	; (8003eb0 <xTaskRemoveFromEventList+0xc0>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	429a      	cmp	r2, r3
 8003e82:	d905      	bls.n	8003e90 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003e84:	2301      	movs	r3, #1
 8003e86:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003e88:	4b0a      	ldr	r3, [pc, #40]	; (8003eb4 <xTaskRemoveFromEventList+0xc4>)
 8003e8a:	2201      	movs	r2, #1
 8003e8c:	601a      	str	r2, [r3, #0]
 8003e8e:	e001      	b.n	8003e94 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003e90:	2300      	movs	r3, #0
 8003e92:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003e94:	697b      	ldr	r3, [r7, #20]
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3718      	adds	r7, #24
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000da4 	.word	0x20000da4
 8003ea4:	20000d84 	.word	0x20000d84
 8003ea8:	200008ac 	.word	0x200008ac
 8003eac:	20000d3c 	.word	0x20000d3c
 8003eb0:	200008a8 	.word	0x200008a8
 8003eb4:	20000d90 	.word	0x20000d90

08003eb8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003eb8:	b480      	push	{r7}
 8003eba:	b083      	sub	sp, #12
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003ec0:	4b06      	ldr	r3, [pc, #24]	; (8003edc <vTaskInternalSetTimeOutState+0x24>)
 8003ec2:	681a      	ldr	r2, [r3, #0]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003ec8:	4b05      	ldr	r3, [pc, #20]	; (8003ee0 <vTaskInternalSetTimeOutState+0x28>)
 8003eca:	681a      	ldr	r2, [r3, #0]
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	605a      	str	r2, [r3, #4]
}
 8003ed0:	bf00      	nop
 8003ed2:	370c      	adds	r7, #12
 8003ed4:	46bd      	mov	sp, r7
 8003ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eda:	4770      	bx	lr
 8003edc:	20000d94 	.word	0x20000d94
 8003ee0:	20000d80 	.word	0x20000d80

08003ee4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b088      	sub	sp, #32
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
 8003eec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d10a      	bne.n	8003f0a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003ef4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ef8:	f383 8811 	msr	BASEPRI, r3
 8003efc:	f3bf 8f6f 	isb	sy
 8003f00:	f3bf 8f4f 	dsb	sy
 8003f04:	613b      	str	r3, [r7, #16]
}
 8003f06:	bf00      	nop
 8003f08:	e7fe      	b.n	8003f08 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d10a      	bne.n	8003f26 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f14:	f383 8811 	msr	BASEPRI, r3
 8003f18:	f3bf 8f6f 	isb	sy
 8003f1c:	f3bf 8f4f 	dsb	sy
 8003f20:	60fb      	str	r3, [r7, #12]
}
 8003f22:	bf00      	nop
 8003f24:	e7fe      	b.n	8003f24 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003f26:	f000 ff7d 	bl	8004e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003f2a:	4b1d      	ldr	r3, [pc, #116]	; (8003fa0 <xTaskCheckForTimeOut+0xbc>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	685b      	ldr	r3, [r3, #4]
 8003f34:	69ba      	ldr	r2, [r7, #24]
 8003f36:	1ad3      	subs	r3, r2, r3
 8003f38:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003f3a:	683b      	ldr	r3, [r7, #0]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f42:	d102      	bne.n	8003f4a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003f44:	2300      	movs	r3, #0
 8003f46:	61fb      	str	r3, [r7, #28]
 8003f48:	e023      	b.n	8003f92 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	4b15      	ldr	r3, [pc, #84]	; (8003fa4 <xTaskCheckForTimeOut+0xc0>)
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	429a      	cmp	r2, r3
 8003f54:	d007      	beq.n	8003f66 <xTaskCheckForTimeOut+0x82>
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	685b      	ldr	r3, [r3, #4]
 8003f5a:	69ba      	ldr	r2, [r7, #24]
 8003f5c:	429a      	cmp	r2, r3
 8003f5e:	d302      	bcc.n	8003f66 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003f60:	2301      	movs	r3, #1
 8003f62:	61fb      	str	r3, [r7, #28]
 8003f64:	e015      	b.n	8003f92 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	697a      	ldr	r2, [r7, #20]
 8003f6c:	429a      	cmp	r2, r3
 8003f6e:	d20b      	bcs.n	8003f88 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	697b      	ldr	r3, [r7, #20]
 8003f76:	1ad2      	subs	r2, r2, r3
 8003f78:	683b      	ldr	r3, [r7, #0]
 8003f7a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f7ff ff9b 	bl	8003eb8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003f82:	2300      	movs	r3, #0
 8003f84:	61fb      	str	r3, [r7, #28]
 8003f86:	e004      	b.n	8003f92 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003f88:	683b      	ldr	r3, [r7, #0]
 8003f8a:	2200      	movs	r2, #0
 8003f8c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003f92:	f000 ff77 	bl	8004e84 <vPortExitCritical>

	return xReturn;
 8003f96:	69fb      	ldr	r3, [r7, #28]
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3720      	adds	r7, #32
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	20000d80 	.word	0x20000d80
 8003fa4:	20000d94 	.word	0x20000d94

08003fa8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003fa8:	b480      	push	{r7}
 8003faa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003fac:	4b03      	ldr	r3, [pc, #12]	; (8003fbc <vTaskMissedYield+0x14>)
 8003fae:	2201      	movs	r2, #1
 8003fb0:	601a      	str	r2, [r3, #0]
}
 8003fb2:	bf00      	nop
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	20000d90 	.word	0x20000d90

08003fc0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003fc0:	b580      	push	{r7, lr}
 8003fc2:	b082      	sub	sp, #8
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003fc8:	f000 f852 	bl	8004070 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003fcc:	4b06      	ldr	r3, [pc, #24]	; (8003fe8 <prvIdleTask+0x28>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	2b01      	cmp	r3, #1
 8003fd2:	d9f9      	bls.n	8003fc8 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003fd4:	4b05      	ldr	r3, [pc, #20]	; (8003fec <prvIdleTask+0x2c>)
 8003fd6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f3bf 8f4f 	dsb	sy
 8003fe0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003fe4:	e7f0      	b.n	8003fc8 <prvIdleTask+0x8>
 8003fe6:	bf00      	nop
 8003fe8:	200008ac 	.word	0x200008ac
 8003fec:	e000ed04 	.word	0xe000ed04

08003ff0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003ff0:	b580      	push	{r7, lr}
 8003ff2:	b082      	sub	sp, #8
 8003ff4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003ff6:	2300      	movs	r3, #0
 8003ff8:	607b      	str	r3, [r7, #4]
 8003ffa:	e00c      	b.n	8004016 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003ffc:	687a      	ldr	r2, [r7, #4]
 8003ffe:	4613      	mov	r3, r2
 8004000:	009b      	lsls	r3, r3, #2
 8004002:	4413      	add	r3, r2
 8004004:	009b      	lsls	r3, r3, #2
 8004006:	4a12      	ldr	r2, [pc, #72]	; (8004050 <prvInitialiseTaskLists+0x60>)
 8004008:	4413      	add	r3, r2
 800400a:	4618      	mov	r0, r3
 800400c:	f7fe f9a8 	bl	8002360 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	3301      	adds	r3, #1
 8004014:	607b      	str	r3, [r7, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2b37      	cmp	r3, #55	; 0x37
 800401a:	d9ef      	bls.n	8003ffc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800401c:	480d      	ldr	r0, [pc, #52]	; (8004054 <prvInitialiseTaskLists+0x64>)
 800401e:	f7fe f99f 	bl	8002360 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004022:	480d      	ldr	r0, [pc, #52]	; (8004058 <prvInitialiseTaskLists+0x68>)
 8004024:	f7fe f99c 	bl	8002360 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004028:	480c      	ldr	r0, [pc, #48]	; (800405c <prvInitialiseTaskLists+0x6c>)
 800402a:	f7fe f999 	bl	8002360 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800402e:	480c      	ldr	r0, [pc, #48]	; (8004060 <prvInitialiseTaskLists+0x70>)
 8004030:	f7fe f996 	bl	8002360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004034:	480b      	ldr	r0, [pc, #44]	; (8004064 <prvInitialiseTaskLists+0x74>)
 8004036:	f7fe f993 	bl	8002360 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800403a:	4b0b      	ldr	r3, [pc, #44]	; (8004068 <prvInitialiseTaskLists+0x78>)
 800403c:	4a05      	ldr	r2, [pc, #20]	; (8004054 <prvInitialiseTaskLists+0x64>)
 800403e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004040:	4b0a      	ldr	r3, [pc, #40]	; (800406c <prvInitialiseTaskLists+0x7c>)
 8004042:	4a05      	ldr	r2, [pc, #20]	; (8004058 <prvInitialiseTaskLists+0x68>)
 8004044:	601a      	str	r2, [r3, #0]
}
 8004046:	bf00      	nop
 8004048:	3708      	adds	r7, #8
 800404a:	46bd      	mov	sp, r7
 800404c:	bd80      	pop	{r7, pc}
 800404e:	bf00      	nop
 8004050:	200008ac 	.word	0x200008ac
 8004054:	20000d0c 	.word	0x20000d0c
 8004058:	20000d20 	.word	0x20000d20
 800405c:	20000d3c 	.word	0x20000d3c
 8004060:	20000d50 	.word	0x20000d50
 8004064:	20000d68 	.word	0x20000d68
 8004068:	20000d34 	.word	0x20000d34
 800406c:	20000d38 	.word	0x20000d38

08004070 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004070:	b580      	push	{r7, lr}
 8004072:	b082      	sub	sp, #8
 8004074:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004076:	e019      	b.n	80040ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004078:	f000 fed4 	bl	8004e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800407c:	4b10      	ldr	r3, [pc, #64]	; (80040c0 <prvCheckTasksWaitingTermination+0x50>)
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	68db      	ldr	r3, [r3, #12]
 8004082:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	3304      	adds	r3, #4
 8004088:	4618      	mov	r0, r3
 800408a:	f7fe f9f3 	bl	8002474 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800408e:	4b0d      	ldr	r3, [pc, #52]	; (80040c4 <prvCheckTasksWaitingTermination+0x54>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	3b01      	subs	r3, #1
 8004094:	4a0b      	ldr	r2, [pc, #44]	; (80040c4 <prvCheckTasksWaitingTermination+0x54>)
 8004096:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004098:	4b0b      	ldr	r3, [pc, #44]	; (80040c8 <prvCheckTasksWaitingTermination+0x58>)
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	3b01      	subs	r3, #1
 800409e:	4a0a      	ldr	r2, [pc, #40]	; (80040c8 <prvCheckTasksWaitingTermination+0x58>)
 80040a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80040a2:	f000 feef 	bl	8004e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f000 f810 	bl	80040cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80040ac:	4b06      	ldr	r3, [pc, #24]	; (80040c8 <prvCheckTasksWaitingTermination+0x58>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d1e1      	bne.n	8004078 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80040b4:	bf00      	nop
 80040b6:	bf00      	nop
 80040b8:	3708      	adds	r7, #8
 80040ba:	46bd      	mov	sp, r7
 80040bc:	bd80      	pop	{r7, pc}
 80040be:	bf00      	nop
 80040c0:	20000d50 	.word	0x20000d50
 80040c4:	20000d7c 	.word	0x20000d7c
 80040c8:	20000d64 	.word	0x20000d64

080040cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	3354      	adds	r3, #84	; 0x54
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 f9f9 	bl	80054d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d108      	bne.n	80040fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ec:	4618      	mov	r0, r3
 80040ee:	f001 f887 	bl	8005200 <vPortFree>
				vPortFree( pxTCB );
 80040f2:	6878      	ldr	r0, [r7, #4]
 80040f4:	f001 f884 	bl	8005200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80040f8:	e018      	b.n	800412c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004100:	2b01      	cmp	r3, #1
 8004102:	d103      	bne.n	800410c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004104:	6878      	ldr	r0, [r7, #4]
 8004106:	f001 f87b 	bl	8005200 <vPortFree>
	}
 800410a:	e00f      	b.n	800412c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004112:	2b02      	cmp	r3, #2
 8004114:	d00a      	beq.n	800412c <prvDeleteTCB+0x60>
	__asm volatile
 8004116:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411a:	f383 8811 	msr	BASEPRI, r3
 800411e:	f3bf 8f6f 	isb	sy
 8004122:	f3bf 8f4f 	dsb	sy
 8004126:	60fb      	str	r3, [r7, #12]
}
 8004128:	bf00      	nop
 800412a:	e7fe      	b.n	800412a <prvDeleteTCB+0x5e>
	}
 800412c:	bf00      	nop
 800412e:	3710      	adds	r7, #16
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004134:	b480      	push	{r7}
 8004136:	b083      	sub	sp, #12
 8004138:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800413a:	4b0c      	ldr	r3, [pc, #48]	; (800416c <prvResetNextTaskUnblockTime+0x38>)
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d104      	bne.n	800414e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004144:	4b0a      	ldr	r3, [pc, #40]	; (8004170 <prvResetNextTaskUnblockTime+0x3c>)
 8004146:	f04f 32ff 	mov.w	r2, #4294967295
 800414a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800414c:	e008      	b.n	8004160 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800414e:	4b07      	ldr	r3, [pc, #28]	; (800416c <prvResetNextTaskUnblockTime+0x38>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68db      	ldr	r3, [r3, #12]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	685b      	ldr	r3, [r3, #4]
 800415c:	4a04      	ldr	r2, [pc, #16]	; (8004170 <prvResetNextTaskUnblockTime+0x3c>)
 800415e:	6013      	str	r3, [r2, #0]
}
 8004160:	bf00      	nop
 8004162:	370c      	adds	r7, #12
 8004164:	46bd      	mov	sp, r7
 8004166:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416a:	4770      	bx	lr
 800416c:	20000d34 	.word	0x20000d34
 8004170:	20000d9c 	.word	0x20000d9c

08004174 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004174:	b480      	push	{r7}
 8004176:	b083      	sub	sp, #12
 8004178:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800417a:	4b0b      	ldr	r3, [pc, #44]	; (80041a8 <xTaskGetSchedulerState+0x34>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	2b00      	cmp	r3, #0
 8004180:	d102      	bne.n	8004188 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004182:	2301      	movs	r3, #1
 8004184:	607b      	str	r3, [r7, #4]
 8004186:	e008      	b.n	800419a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004188:	4b08      	ldr	r3, [pc, #32]	; (80041ac <xTaskGetSchedulerState+0x38>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004190:	2302      	movs	r3, #2
 8004192:	607b      	str	r3, [r7, #4]
 8004194:	e001      	b.n	800419a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004196:	2300      	movs	r3, #0
 8004198:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800419a:	687b      	ldr	r3, [r7, #4]
	}
 800419c:	4618      	mov	r0, r3
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	20000d88 	.word	0x20000d88
 80041ac:	20000da4 	.word	0x20000da4

080041b0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 80041b0:	b580      	push	{r7, lr}
 80041b2:	b084      	sub	sp, #16
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 80041bc:	2300      	movs	r3, #0
 80041be:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d051      	beq.n	800426a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041ca:	4b2a      	ldr	r3, [pc, #168]	; (8004274 <xTaskPriorityInherit+0xc4>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041d0:	429a      	cmp	r2, r3
 80041d2:	d241      	bcs.n	8004258 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	699b      	ldr	r3, [r3, #24]
 80041d8:	2b00      	cmp	r3, #0
 80041da:	db06      	blt.n	80041ea <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80041dc:	4b25      	ldr	r3, [pc, #148]	; (8004274 <xTaskPriorityInherit+0xc4>)
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041e2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80041ea:	68bb      	ldr	r3, [r7, #8]
 80041ec:	6959      	ldr	r1, [r3, #20]
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041f2:	4613      	mov	r3, r2
 80041f4:	009b      	lsls	r3, r3, #2
 80041f6:	4413      	add	r3, r2
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	4a1f      	ldr	r2, [pc, #124]	; (8004278 <xTaskPriorityInherit+0xc8>)
 80041fc:	4413      	add	r3, r2
 80041fe:	4299      	cmp	r1, r3
 8004200:	d122      	bne.n	8004248 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004202:	68bb      	ldr	r3, [r7, #8]
 8004204:	3304      	adds	r3, #4
 8004206:	4618      	mov	r0, r3
 8004208:	f7fe f934 	bl	8002474 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800420c:	4b19      	ldr	r3, [pc, #100]	; (8004274 <xTaskPriorityInherit+0xc4>)
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004212:	68bb      	ldr	r3, [r7, #8]
 8004214:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800421a:	4b18      	ldr	r3, [pc, #96]	; (800427c <xTaskPriorityInherit+0xcc>)
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	429a      	cmp	r2, r3
 8004220:	d903      	bls.n	800422a <xTaskPriorityInherit+0x7a>
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004226:	4a15      	ldr	r2, [pc, #84]	; (800427c <xTaskPriorityInherit+0xcc>)
 8004228:	6013      	str	r3, [r2, #0]
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800422e:	4613      	mov	r3, r2
 8004230:	009b      	lsls	r3, r3, #2
 8004232:	4413      	add	r3, r2
 8004234:	009b      	lsls	r3, r3, #2
 8004236:	4a10      	ldr	r2, [pc, #64]	; (8004278 <xTaskPriorityInherit+0xc8>)
 8004238:	441a      	add	r2, r3
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	3304      	adds	r3, #4
 800423e:	4619      	mov	r1, r3
 8004240:	4610      	mov	r0, r2
 8004242:	f7fe f8ba 	bl	80023ba <vListInsertEnd>
 8004246:	e004      	b.n	8004252 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004248:	4b0a      	ldr	r3, [pc, #40]	; (8004274 <xTaskPriorityInherit+0xc4>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800424e:	68bb      	ldr	r3, [r7, #8]
 8004250:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004252:	2301      	movs	r3, #1
 8004254:	60fb      	str	r3, [r7, #12]
 8004256:	e008      	b.n	800426a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800425c:	4b05      	ldr	r3, [pc, #20]	; (8004274 <xTaskPriorityInherit+0xc4>)
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004262:	429a      	cmp	r2, r3
 8004264:	d201      	bcs.n	800426a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004266:	2301      	movs	r3, #1
 8004268:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800426a:	68fb      	ldr	r3, [r7, #12]
	}
 800426c:	4618      	mov	r0, r3
 800426e:	3710      	adds	r7, #16
 8004270:	46bd      	mov	sp, r7
 8004272:	bd80      	pop	{r7, pc}
 8004274:	200008a8 	.word	0x200008a8
 8004278:	200008ac 	.word	0x200008ac
 800427c:	20000d84 	.word	0x20000d84

08004280 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004280:	b580      	push	{r7, lr}
 8004282:	b086      	sub	sp, #24
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800428c:	2300      	movs	r3, #0
 800428e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2b00      	cmp	r3, #0
 8004294:	d056      	beq.n	8004344 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004296:	4b2e      	ldr	r3, [pc, #184]	; (8004350 <xTaskPriorityDisinherit+0xd0>)
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	693a      	ldr	r2, [r7, #16]
 800429c:	429a      	cmp	r2, r3
 800429e:	d00a      	beq.n	80042b6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60fb      	str	r3, [r7, #12]
}
 80042b2:	bf00      	nop
 80042b4:	e7fe      	b.n	80042b4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80042be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c2:	f383 8811 	msr	BASEPRI, r3
 80042c6:	f3bf 8f6f 	isb	sy
 80042ca:	f3bf 8f4f 	dsb	sy
 80042ce:	60bb      	str	r3, [r7, #8]
}
 80042d0:	bf00      	nop
 80042d2:	e7fe      	b.n	80042d2 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042d8:	1e5a      	subs	r2, r3, #1
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042e6:	429a      	cmp	r2, r3
 80042e8:	d02c      	beq.n	8004344 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d128      	bne.n	8004344 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80042f2:	693b      	ldr	r3, [r7, #16]
 80042f4:	3304      	adds	r3, #4
 80042f6:	4618      	mov	r0, r3
 80042f8:	f7fe f8bc 	bl	8002474 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004300:	693b      	ldr	r3, [r7, #16]
 8004302:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004304:	693b      	ldr	r3, [r7, #16]
 8004306:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004308:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800430c:	693b      	ldr	r3, [r7, #16]
 800430e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004314:	4b0f      	ldr	r3, [pc, #60]	; (8004354 <xTaskPriorityDisinherit+0xd4>)
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	429a      	cmp	r2, r3
 800431a:	d903      	bls.n	8004324 <xTaskPriorityDisinherit+0xa4>
 800431c:	693b      	ldr	r3, [r7, #16]
 800431e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004320:	4a0c      	ldr	r2, [pc, #48]	; (8004354 <xTaskPriorityDisinherit+0xd4>)
 8004322:	6013      	str	r3, [r2, #0]
 8004324:	693b      	ldr	r3, [r7, #16]
 8004326:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004328:	4613      	mov	r3, r2
 800432a:	009b      	lsls	r3, r3, #2
 800432c:	4413      	add	r3, r2
 800432e:	009b      	lsls	r3, r3, #2
 8004330:	4a09      	ldr	r2, [pc, #36]	; (8004358 <xTaskPriorityDisinherit+0xd8>)
 8004332:	441a      	add	r2, r3
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	3304      	adds	r3, #4
 8004338:	4619      	mov	r1, r3
 800433a:	4610      	mov	r0, r2
 800433c:	f7fe f83d 	bl	80023ba <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004340:	2301      	movs	r3, #1
 8004342:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004344:	697b      	ldr	r3, [r7, #20]
	}
 8004346:	4618      	mov	r0, r3
 8004348:	3718      	adds	r7, #24
 800434a:	46bd      	mov	sp, r7
 800434c:	bd80      	pop	{r7, pc}
 800434e:	bf00      	nop
 8004350:	200008a8 	.word	0x200008a8
 8004354:	20000d84 	.word	0x20000d84
 8004358:	200008ac 	.word	0x200008ac

0800435c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800435c:	b580      	push	{r7, lr}
 800435e:	b088      	sub	sp, #32
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800436a:	2301      	movs	r3, #1
 800436c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	2b00      	cmp	r3, #0
 8004372:	d06a      	beq.n	800444a <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004374:	69bb      	ldr	r3, [r7, #24]
 8004376:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004378:	2b00      	cmp	r3, #0
 800437a:	d10a      	bne.n	8004392 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 800437c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004380:	f383 8811 	msr	BASEPRI, r3
 8004384:	f3bf 8f6f 	isb	sy
 8004388:	f3bf 8f4f 	dsb	sy
 800438c:	60fb      	str	r3, [r7, #12]
}
 800438e:	bf00      	nop
 8004390:	e7fe      	b.n	8004390 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004396:	683a      	ldr	r2, [r7, #0]
 8004398:	429a      	cmp	r2, r3
 800439a:	d902      	bls.n	80043a2 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	e002      	b.n	80043a8 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 80043a2:	69bb      	ldr	r3, [r7, #24]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80043a6:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 80043a8:	69bb      	ldr	r3, [r7, #24]
 80043aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ac:	69fa      	ldr	r2, [r7, #28]
 80043ae:	429a      	cmp	r2, r3
 80043b0:	d04b      	beq.n	800444a <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 80043b2:	69bb      	ldr	r3, [r7, #24]
 80043b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	429a      	cmp	r2, r3
 80043ba:	d146      	bne.n	800444a <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 80043bc:	4b25      	ldr	r3, [pc, #148]	; (8004454 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	69ba      	ldr	r2, [r7, #24]
 80043c2:	429a      	cmp	r2, r3
 80043c4:	d10a      	bne.n	80043dc <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 80043c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ca:	f383 8811 	msr	BASEPRI, r3
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	f3bf 8f4f 	dsb	sy
 80043d6:	60bb      	str	r3, [r7, #8]
}
 80043d8:	bf00      	nop
 80043da:	e7fe      	b.n	80043da <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80043dc:	69bb      	ldr	r3, [r7, #24]
 80043de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043e0:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	69fa      	ldr	r2, [r7, #28]
 80043e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80043e8:	69bb      	ldr	r3, [r7, #24]
 80043ea:	699b      	ldr	r3, [r3, #24]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	db04      	blt.n	80043fa <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80043f0:	69fb      	ldr	r3, [r7, #28]
 80043f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80043fa:	69bb      	ldr	r3, [r7, #24]
 80043fc:	6959      	ldr	r1, [r3, #20]
 80043fe:	693a      	ldr	r2, [r7, #16]
 8004400:	4613      	mov	r3, r2
 8004402:	009b      	lsls	r3, r3, #2
 8004404:	4413      	add	r3, r2
 8004406:	009b      	lsls	r3, r3, #2
 8004408:	4a13      	ldr	r2, [pc, #76]	; (8004458 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800440a:	4413      	add	r3, r2
 800440c:	4299      	cmp	r1, r3
 800440e:	d11c      	bne.n	800444a <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004410:	69bb      	ldr	r3, [r7, #24]
 8004412:	3304      	adds	r3, #4
 8004414:	4618      	mov	r0, r3
 8004416:	f7fe f82d 	bl	8002474 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800441e:	4b0f      	ldr	r3, [pc, #60]	; (800445c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	429a      	cmp	r2, r3
 8004424:	d903      	bls.n	800442e <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8004426:	69bb      	ldr	r3, [r7, #24]
 8004428:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800442a:	4a0c      	ldr	r2, [pc, #48]	; (800445c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800442c:	6013      	str	r3, [r2, #0]
 800442e:	69bb      	ldr	r3, [r7, #24]
 8004430:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004432:	4613      	mov	r3, r2
 8004434:	009b      	lsls	r3, r3, #2
 8004436:	4413      	add	r3, r2
 8004438:	009b      	lsls	r3, r3, #2
 800443a:	4a07      	ldr	r2, [pc, #28]	; (8004458 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800443c:	441a      	add	r2, r3
 800443e:	69bb      	ldr	r3, [r7, #24]
 8004440:	3304      	adds	r3, #4
 8004442:	4619      	mov	r1, r3
 8004444:	4610      	mov	r0, r2
 8004446:	f7fd ffb8 	bl	80023ba <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800444a:	bf00      	nop
 800444c:	3720      	adds	r7, #32
 800444e:	46bd      	mov	sp, r7
 8004450:	bd80      	pop	{r7, pc}
 8004452:	bf00      	nop
 8004454:	200008a8 	.word	0x200008a8
 8004458:	200008ac 	.word	0x200008ac
 800445c:	20000d84 	.word	0x20000d84

08004460 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004460:	b480      	push	{r7}
 8004462:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004464:	4b07      	ldr	r3, [pc, #28]	; (8004484 <pvTaskIncrementMutexHeldCount+0x24>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d004      	beq.n	8004476 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800446c:	4b05      	ldr	r3, [pc, #20]	; (8004484 <pvTaskIncrementMutexHeldCount+0x24>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004472:	3201      	adds	r2, #1
 8004474:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8004476:	4b03      	ldr	r3, [pc, #12]	; (8004484 <pvTaskIncrementMutexHeldCount+0x24>)
 8004478:	681b      	ldr	r3, [r3, #0]
	}
 800447a:	4618      	mov	r0, r3
 800447c:	46bd      	mov	sp, r7
 800447e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004482:	4770      	bx	lr
 8004484:	200008a8 	.word	0x200008a8

08004488 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004488:	b580      	push	{r7, lr}
 800448a:	b084      	sub	sp, #16
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
 8004490:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004492:	4b21      	ldr	r3, [pc, #132]	; (8004518 <prvAddCurrentTaskToDelayedList+0x90>)
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004498:	4b20      	ldr	r3, [pc, #128]	; (800451c <prvAddCurrentTaskToDelayedList+0x94>)
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	3304      	adds	r3, #4
 800449e:	4618      	mov	r0, r3
 80044a0:	f7fd ffe8 	bl	8002474 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044aa:	d10a      	bne.n	80044c2 <prvAddCurrentTaskToDelayedList+0x3a>
 80044ac:	683b      	ldr	r3, [r7, #0]
 80044ae:	2b00      	cmp	r3, #0
 80044b0:	d007      	beq.n	80044c2 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044b2:	4b1a      	ldr	r3, [pc, #104]	; (800451c <prvAddCurrentTaskToDelayedList+0x94>)
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	3304      	adds	r3, #4
 80044b8:	4619      	mov	r1, r3
 80044ba:	4819      	ldr	r0, [pc, #100]	; (8004520 <prvAddCurrentTaskToDelayedList+0x98>)
 80044bc:	f7fd ff7d 	bl	80023ba <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80044c0:	e026      	b.n	8004510 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	4413      	add	r3, r2
 80044c8:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80044ca:	4b14      	ldr	r3, [pc, #80]	; (800451c <prvAddCurrentTaskToDelayedList+0x94>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	68ba      	ldr	r2, [r7, #8]
 80044d0:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80044d2:	68ba      	ldr	r2, [r7, #8]
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	429a      	cmp	r2, r3
 80044d8:	d209      	bcs.n	80044ee <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044da:	4b12      	ldr	r3, [pc, #72]	; (8004524 <prvAddCurrentTaskToDelayedList+0x9c>)
 80044dc:	681a      	ldr	r2, [r3, #0]
 80044de:	4b0f      	ldr	r3, [pc, #60]	; (800451c <prvAddCurrentTaskToDelayedList+0x94>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	3304      	adds	r3, #4
 80044e4:	4619      	mov	r1, r3
 80044e6:	4610      	mov	r0, r2
 80044e8:	f7fd ff8b 	bl	8002402 <vListInsert>
}
 80044ec:	e010      	b.n	8004510 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80044ee:	4b0e      	ldr	r3, [pc, #56]	; (8004528 <prvAddCurrentTaskToDelayedList+0xa0>)
 80044f0:	681a      	ldr	r2, [r3, #0]
 80044f2:	4b0a      	ldr	r3, [pc, #40]	; (800451c <prvAddCurrentTaskToDelayedList+0x94>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	3304      	adds	r3, #4
 80044f8:	4619      	mov	r1, r3
 80044fa:	4610      	mov	r0, r2
 80044fc:	f7fd ff81 	bl	8002402 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004500:	4b0a      	ldr	r3, [pc, #40]	; (800452c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004502:	681b      	ldr	r3, [r3, #0]
 8004504:	68ba      	ldr	r2, [r7, #8]
 8004506:	429a      	cmp	r2, r3
 8004508:	d202      	bcs.n	8004510 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800450a:	4a08      	ldr	r2, [pc, #32]	; (800452c <prvAddCurrentTaskToDelayedList+0xa4>)
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	6013      	str	r3, [r2, #0]
}
 8004510:	bf00      	nop
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}
 8004518:	20000d80 	.word	0x20000d80
 800451c:	200008a8 	.word	0x200008a8
 8004520:	20000d68 	.word	0x20000d68
 8004524:	20000d38 	.word	0x20000d38
 8004528:	20000d34 	.word	0x20000d34
 800452c:	20000d9c 	.word	0x20000d9c

08004530 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08a      	sub	sp, #40	; 0x28
 8004534:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800453a:	f000 fb07 	bl	8004b4c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800453e:	4b1c      	ldr	r3, [pc, #112]	; (80045b0 <xTimerCreateTimerTask+0x80>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d021      	beq.n	800458a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004546:	2300      	movs	r3, #0
 8004548:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800454a:	2300      	movs	r3, #0
 800454c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800454e:	1d3a      	adds	r2, r7, #4
 8004550:	f107 0108 	add.w	r1, r7, #8
 8004554:	f107 030c 	add.w	r3, r7, #12
 8004558:	4618      	mov	r0, r3
 800455a:	f7fd fee7 	bl	800232c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800455e:	6879      	ldr	r1, [r7, #4]
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	68fa      	ldr	r2, [r7, #12]
 8004564:	9202      	str	r2, [sp, #8]
 8004566:	9301      	str	r3, [sp, #4]
 8004568:	2302      	movs	r3, #2
 800456a:	9300      	str	r3, [sp, #0]
 800456c:	2300      	movs	r3, #0
 800456e:	460a      	mov	r2, r1
 8004570:	4910      	ldr	r1, [pc, #64]	; (80045b4 <xTimerCreateTimerTask+0x84>)
 8004572:	4811      	ldr	r0, [pc, #68]	; (80045b8 <xTimerCreateTimerTask+0x88>)
 8004574:	f7fe ffb6 	bl	80034e4 <xTaskCreateStatic>
 8004578:	4603      	mov	r3, r0
 800457a:	4a10      	ldr	r2, [pc, #64]	; (80045bc <xTimerCreateTimerTask+0x8c>)
 800457c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800457e:	4b0f      	ldr	r3, [pc, #60]	; (80045bc <xTimerCreateTimerTask+0x8c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d001      	beq.n	800458a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004586:	2301      	movs	r3, #1
 8004588:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10a      	bne.n	80045a6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	613b      	str	r3, [r7, #16]
}
 80045a2:	bf00      	nop
 80045a4:	e7fe      	b.n	80045a4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80045a6:	697b      	ldr	r3, [r7, #20]
}
 80045a8:	4618      	mov	r0, r3
 80045aa:	3718      	adds	r7, #24
 80045ac:	46bd      	mov	sp, r7
 80045ae:	bd80      	pop	{r7, pc}
 80045b0:	20000dd8 	.word	0x20000dd8
 80045b4:	08005680 	.word	0x08005680
 80045b8:	080046f5 	.word	0x080046f5
 80045bc:	20000ddc 	.word	0x20000ddc

080045c0 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80045c0:	b580      	push	{r7, lr}
 80045c2:	b08a      	sub	sp, #40	; 0x28
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	60f8      	str	r0, [r7, #12]
 80045c8:	60b9      	str	r1, [r7, #8]
 80045ca:	607a      	str	r2, [r7, #4]
 80045cc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80045ce:	2300      	movs	r3, #0
 80045d0:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	2b00      	cmp	r3, #0
 80045d6:	d10a      	bne.n	80045ee <xTimerGenericCommand+0x2e>
	__asm volatile
 80045d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045dc:	f383 8811 	msr	BASEPRI, r3
 80045e0:	f3bf 8f6f 	isb	sy
 80045e4:	f3bf 8f4f 	dsb	sy
 80045e8:	623b      	str	r3, [r7, #32]
}
 80045ea:	bf00      	nop
 80045ec:	e7fe      	b.n	80045ec <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80045ee:	4b1a      	ldr	r3, [pc, #104]	; (8004658 <xTimerGenericCommand+0x98>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d02a      	beq.n	800464c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004602:	68bb      	ldr	r3, [r7, #8]
 8004604:	2b05      	cmp	r3, #5
 8004606:	dc18      	bgt.n	800463a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004608:	f7ff fdb4 	bl	8004174 <xTaskGetSchedulerState>
 800460c:	4603      	mov	r3, r0
 800460e:	2b02      	cmp	r3, #2
 8004610:	d109      	bne.n	8004626 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004612:	4b11      	ldr	r3, [pc, #68]	; (8004658 <xTimerGenericCommand+0x98>)
 8004614:	6818      	ldr	r0, [r3, #0]
 8004616:	f107 0110 	add.w	r1, r7, #16
 800461a:	2300      	movs	r3, #0
 800461c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800461e:	f7fe f8fb 	bl	8002818 <xQueueGenericSend>
 8004622:	6278      	str	r0, [r7, #36]	; 0x24
 8004624:	e012      	b.n	800464c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004626:	4b0c      	ldr	r3, [pc, #48]	; (8004658 <xTimerGenericCommand+0x98>)
 8004628:	6818      	ldr	r0, [r3, #0]
 800462a:	f107 0110 	add.w	r1, r7, #16
 800462e:	2300      	movs	r3, #0
 8004630:	2200      	movs	r2, #0
 8004632:	f7fe f8f1 	bl	8002818 <xQueueGenericSend>
 8004636:	6278      	str	r0, [r7, #36]	; 0x24
 8004638:	e008      	b.n	800464c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800463a:	4b07      	ldr	r3, [pc, #28]	; (8004658 <xTimerGenericCommand+0x98>)
 800463c:	6818      	ldr	r0, [r3, #0]
 800463e:	f107 0110 	add.w	r1, r7, #16
 8004642:	2300      	movs	r3, #0
 8004644:	683a      	ldr	r2, [r7, #0]
 8004646:	f7fe f9e5 	bl	8002a14 <xQueueGenericSendFromISR>
 800464a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800464c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800464e:	4618      	mov	r0, r3
 8004650:	3728      	adds	r7, #40	; 0x28
 8004652:	46bd      	mov	sp, r7
 8004654:	bd80      	pop	{r7, pc}
 8004656:	bf00      	nop
 8004658:	20000dd8 	.word	0x20000dd8

0800465c <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800465c:	b580      	push	{r7, lr}
 800465e:	b088      	sub	sp, #32
 8004660:	af02      	add	r7, sp, #8
 8004662:	6078      	str	r0, [r7, #4]
 8004664:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004666:	4b22      	ldr	r3, [pc, #136]	; (80046f0 <prvProcessExpiredTimer+0x94>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	68db      	ldr	r3, [r3, #12]
 800466e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004670:	697b      	ldr	r3, [r7, #20]
 8004672:	3304      	adds	r3, #4
 8004674:	4618      	mov	r0, r3
 8004676:	f7fd fefd 	bl	8002474 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800467a:	697b      	ldr	r3, [r7, #20]
 800467c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004680:	f003 0304 	and.w	r3, r3, #4
 8004684:	2b00      	cmp	r3, #0
 8004686:	d022      	beq.n	80046ce <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004688:	697b      	ldr	r3, [r7, #20]
 800468a:	699a      	ldr	r2, [r3, #24]
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	18d1      	adds	r1, r2, r3
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	683a      	ldr	r2, [r7, #0]
 8004694:	6978      	ldr	r0, [r7, #20]
 8004696:	f000 f8d1 	bl	800483c <prvInsertTimerInActiveList>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d01f      	beq.n	80046e0 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80046a0:	2300      	movs	r3, #0
 80046a2:	9300      	str	r3, [sp, #0]
 80046a4:	2300      	movs	r3, #0
 80046a6:	687a      	ldr	r2, [r7, #4]
 80046a8:	2100      	movs	r1, #0
 80046aa:	6978      	ldr	r0, [r7, #20]
 80046ac:	f7ff ff88 	bl	80045c0 <xTimerGenericCommand>
 80046b0:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80046b2:	693b      	ldr	r3, [r7, #16]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d113      	bne.n	80046e0 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	60fb      	str	r3, [r7, #12]
}
 80046ca:	bf00      	nop
 80046cc:	e7fe      	b.n	80046cc <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d4:	f023 0301 	bic.w	r3, r3, #1
 80046d8:	b2da      	uxtb	r2, r3
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80046e0:	697b      	ldr	r3, [r7, #20]
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	6978      	ldr	r0, [r7, #20]
 80046e6:	4798      	blx	r3
}
 80046e8:	bf00      	nop
 80046ea:	3718      	adds	r7, #24
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}
 80046f0:	20000dd0 	.word	0x20000dd0

080046f4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b084      	sub	sp, #16
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80046fc:	f107 0308 	add.w	r3, r7, #8
 8004700:	4618      	mov	r0, r3
 8004702:	f000 f857 	bl	80047b4 <prvGetNextExpireTime>
 8004706:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004708:	68bb      	ldr	r3, [r7, #8]
 800470a:	4619      	mov	r1, r3
 800470c:	68f8      	ldr	r0, [r7, #12]
 800470e:	f000 f803 	bl	8004718 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004712:	f000 f8d5 	bl	80048c0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004716:	e7f1      	b.n	80046fc <prvTimerTask+0x8>

08004718 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004722:	f7ff f93b 	bl	800399c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004726:	f107 0308 	add.w	r3, r7, #8
 800472a:	4618      	mov	r0, r3
 800472c:	f000 f866 	bl	80047fc <prvSampleTimeNow>
 8004730:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004732:	68bb      	ldr	r3, [r7, #8]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d130      	bne.n	800479a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	2b00      	cmp	r3, #0
 800473c:	d10a      	bne.n	8004754 <prvProcessTimerOrBlockTask+0x3c>
 800473e:	687a      	ldr	r2, [r7, #4]
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	429a      	cmp	r2, r3
 8004744:	d806      	bhi.n	8004754 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004746:	f7ff f937 	bl	80039b8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	6878      	ldr	r0, [r7, #4]
 800474e:	f7ff ff85 	bl	800465c <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004752:	e024      	b.n	800479e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004754:	683b      	ldr	r3, [r7, #0]
 8004756:	2b00      	cmp	r3, #0
 8004758:	d008      	beq.n	800476c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800475a:	4b13      	ldr	r3, [pc, #76]	; (80047a8 <prvProcessTimerOrBlockTask+0x90>)
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <prvProcessTimerOrBlockTask+0x50>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <prvProcessTimerOrBlockTask+0x52>
 8004768:	2300      	movs	r3, #0
 800476a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800476c:	4b0f      	ldr	r3, [pc, #60]	; (80047ac <prvProcessTimerOrBlockTask+0x94>)
 800476e:	6818      	ldr	r0, [r3, #0]
 8004770:	687a      	ldr	r2, [r7, #4]
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	1ad3      	subs	r3, r2, r3
 8004776:	683a      	ldr	r2, [r7, #0]
 8004778:	4619      	mov	r1, r3
 800477a:	f7fe fe7f 	bl	800347c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800477e:	f7ff f91b 	bl	80039b8 <xTaskResumeAll>
 8004782:	4603      	mov	r3, r0
 8004784:	2b00      	cmp	r3, #0
 8004786:	d10a      	bne.n	800479e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004788:	4b09      	ldr	r3, [pc, #36]	; (80047b0 <prvProcessTimerOrBlockTask+0x98>)
 800478a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	f3bf 8f4f 	dsb	sy
 8004794:	f3bf 8f6f 	isb	sy
}
 8004798:	e001      	b.n	800479e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800479a:	f7ff f90d 	bl	80039b8 <xTaskResumeAll>
}
 800479e:	bf00      	nop
 80047a0:	3710      	adds	r7, #16
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	20000dd4 	.word	0x20000dd4
 80047ac:	20000dd8 	.word	0x20000dd8
 80047b0:	e000ed04 	.word	0xe000ed04

080047b4 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80047bc:	4b0e      	ldr	r3, [pc, #56]	; (80047f8 <prvGetNextExpireTime+0x44>)
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d101      	bne.n	80047ca <prvGetNextExpireTime+0x16>
 80047c6:	2201      	movs	r2, #1
 80047c8:	e000      	b.n	80047cc <prvGetNextExpireTime+0x18>
 80047ca:	2200      	movs	r2, #0
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d105      	bne.n	80047e4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80047d8:	4b07      	ldr	r3, [pc, #28]	; (80047f8 <prvGetNextExpireTime+0x44>)
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	60fb      	str	r3, [r7, #12]
 80047e2:	e001      	b.n	80047e8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80047e4:	2300      	movs	r3, #0
 80047e6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80047e8:	68fb      	ldr	r3, [r7, #12]
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3714      	adds	r7, #20
 80047ee:	46bd      	mov	sp, r7
 80047f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047f4:	4770      	bx	lr
 80047f6:	bf00      	nop
 80047f8:	20000dd0 	.word	0x20000dd0

080047fc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80047fc:	b580      	push	{r7, lr}
 80047fe:	b084      	sub	sp, #16
 8004800:	af00      	add	r7, sp, #0
 8004802:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004804:	f7ff f976 	bl	8003af4 <xTaskGetTickCount>
 8004808:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800480a:	4b0b      	ldr	r3, [pc, #44]	; (8004838 <prvSampleTimeNow+0x3c>)
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	68fa      	ldr	r2, [r7, #12]
 8004810:	429a      	cmp	r2, r3
 8004812:	d205      	bcs.n	8004820 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004814:	f000 f936 	bl	8004a84 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2201      	movs	r2, #1
 800481c:	601a      	str	r2, [r3, #0]
 800481e:	e002      	b.n	8004826 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	2200      	movs	r2, #0
 8004824:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004826:	4a04      	ldr	r2, [pc, #16]	; (8004838 <prvSampleTimeNow+0x3c>)
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800482c:	68fb      	ldr	r3, [r7, #12]
}
 800482e:	4618      	mov	r0, r3
 8004830:	3710      	adds	r7, #16
 8004832:	46bd      	mov	sp, r7
 8004834:	bd80      	pop	{r7, pc}
 8004836:	bf00      	nop
 8004838:	20000de0 	.word	0x20000de0

0800483c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b086      	sub	sp, #24
 8004840:	af00      	add	r7, sp, #0
 8004842:	60f8      	str	r0, [r7, #12]
 8004844:	60b9      	str	r1, [r7, #8]
 8004846:	607a      	str	r2, [r7, #4]
 8004848:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800484a:	2300      	movs	r3, #0
 800484c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	68ba      	ldr	r2, [r7, #8]
 8004852:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	68fa      	ldr	r2, [r7, #12]
 8004858:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800485a:	68ba      	ldr	r2, [r7, #8]
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	429a      	cmp	r2, r3
 8004860:	d812      	bhi.n	8004888 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004862:	687a      	ldr	r2, [r7, #4]
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	1ad2      	subs	r2, r2, r3
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	699b      	ldr	r3, [r3, #24]
 800486c:	429a      	cmp	r2, r3
 800486e:	d302      	bcc.n	8004876 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004870:	2301      	movs	r3, #1
 8004872:	617b      	str	r3, [r7, #20]
 8004874:	e01b      	b.n	80048ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004876:	4b10      	ldr	r3, [pc, #64]	; (80048b8 <prvInsertTimerInActiveList+0x7c>)
 8004878:	681a      	ldr	r2, [r3, #0]
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	3304      	adds	r3, #4
 800487e:	4619      	mov	r1, r3
 8004880:	4610      	mov	r0, r2
 8004882:	f7fd fdbe 	bl	8002402 <vListInsert>
 8004886:	e012      	b.n	80048ae <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004888:	687a      	ldr	r2, [r7, #4]
 800488a:	683b      	ldr	r3, [r7, #0]
 800488c:	429a      	cmp	r2, r3
 800488e:	d206      	bcs.n	800489e <prvInsertTimerInActiveList+0x62>
 8004890:	68ba      	ldr	r2, [r7, #8]
 8004892:	683b      	ldr	r3, [r7, #0]
 8004894:	429a      	cmp	r2, r3
 8004896:	d302      	bcc.n	800489e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004898:	2301      	movs	r3, #1
 800489a:	617b      	str	r3, [r7, #20]
 800489c:	e007      	b.n	80048ae <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800489e:	4b07      	ldr	r3, [pc, #28]	; (80048bc <prvInsertTimerInActiveList+0x80>)
 80048a0:	681a      	ldr	r2, [r3, #0]
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	3304      	adds	r3, #4
 80048a6:	4619      	mov	r1, r3
 80048a8:	4610      	mov	r0, r2
 80048aa:	f7fd fdaa 	bl	8002402 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80048ae:	697b      	ldr	r3, [r7, #20]
}
 80048b0:	4618      	mov	r0, r3
 80048b2:	3718      	adds	r7, #24
 80048b4:	46bd      	mov	sp, r7
 80048b6:	bd80      	pop	{r7, pc}
 80048b8:	20000dd4 	.word	0x20000dd4
 80048bc:	20000dd0 	.word	0x20000dd0

080048c0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b08e      	sub	sp, #56	; 0x38
 80048c4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80048c6:	e0ca      	b.n	8004a5e <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	da18      	bge.n	8004900 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80048ce:	1d3b      	adds	r3, r7, #4
 80048d0:	3304      	adds	r3, #4
 80048d2:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80048d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d10a      	bne.n	80048f0 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80048da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048de:	f383 8811 	msr	BASEPRI, r3
 80048e2:	f3bf 8f6f 	isb	sy
 80048e6:	f3bf 8f4f 	dsb	sy
 80048ea:	61fb      	str	r3, [r7, #28]
}
 80048ec:	bf00      	nop
 80048ee:	e7fe      	b.n	80048ee <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80048f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048f6:	6850      	ldr	r0, [r2, #4]
 80048f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80048fa:	6892      	ldr	r2, [r2, #8]
 80048fc:	4611      	mov	r1, r2
 80048fe:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2b00      	cmp	r3, #0
 8004904:	f2c0 80aa 	blt.w	8004a5c <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800490c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800490e:	695b      	ldr	r3, [r3, #20]
 8004910:	2b00      	cmp	r3, #0
 8004912:	d004      	beq.n	800491e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004914:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004916:	3304      	adds	r3, #4
 8004918:	4618      	mov	r0, r3
 800491a:	f7fd fdab 	bl	8002474 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800491e:	463b      	mov	r3, r7
 8004920:	4618      	mov	r0, r3
 8004922:	f7ff ff6b 	bl	80047fc <prvSampleTimeNow>
 8004926:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	2b09      	cmp	r3, #9
 800492c:	f200 8097 	bhi.w	8004a5e <prvProcessReceivedCommands+0x19e>
 8004930:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <prvProcessReceivedCommands+0x78>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	08004961 	.word	0x08004961
 800493c:	08004961 	.word	0x08004961
 8004940:	08004961 	.word	0x08004961
 8004944:	080049d5 	.word	0x080049d5
 8004948:	080049e9 	.word	0x080049e9
 800494c:	08004a33 	.word	0x08004a33
 8004950:	08004961 	.word	0x08004961
 8004954:	08004961 	.word	0x08004961
 8004958:	080049d5 	.word	0x080049d5
 800495c:	080049e9 	.word	0x080049e9
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8004960:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004962:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004966:	f043 0301 	orr.w	r3, r3, #1
 800496a:	b2da      	uxtb	r2, r3
 800496c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800496e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8004972:	68ba      	ldr	r2, [r7, #8]
 8004974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	18d1      	adds	r1, r2, r3
 800497a:	68bb      	ldr	r3, [r7, #8]
 800497c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800497e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004980:	f7ff ff5c 	bl	800483c <prvInsertTimerInActiveList>
 8004984:	4603      	mov	r3, r0
 8004986:	2b00      	cmp	r3, #0
 8004988:	d069      	beq.n	8004a5e <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800498a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800498c:	6a1b      	ldr	r3, [r3, #32]
 800498e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004990:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004992:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004994:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004998:	f003 0304 	and.w	r3, r3, #4
 800499c:	2b00      	cmp	r3, #0
 800499e:	d05e      	beq.n	8004a5e <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80049a0:	68ba      	ldr	r2, [r7, #8]
 80049a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	441a      	add	r2, r3
 80049a8:	2300      	movs	r3, #0
 80049aa:	9300      	str	r3, [sp, #0]
 80049ac:	2300      	movs	r3, #0
 80049ae:	2100      	movs	r1, #0
 80049b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049b2:	f7ff fe05 	bl	80045c0 <xTimerGenericCommand>
 80049b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80049b8:	6a3b      	ldr	r3, [r7, #32]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d14f      	bne.n	8004a5e <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80049be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049c2:	f383 8811 	msr	BASEPRI, r3
 80049c6:	f3bf 8f6f 	isb	sy
 80049ca:	f3bf 8f4f 	dsb	sy
 80049ce:	61bb      	str	r3, [r7, #24]
}
 80049d0:	bf00      	nop
 80049d2:	e7fe      	b.n	80049d2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80049d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049da:	f023 0301 	bic.w	r3, r3, #1
 80049de:	b2da      	uxtb	r2, r3
 80049e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049e2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80049e6:	e03a      	b.n	8004a5e <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80049e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80049ee:	f043 0301 	orr.w	r3, r3, #1
 80049f2:	b2da      	uxtb	r2, r3
 80049f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80049fa:	68ba      	ldr	r2, [r7, #8]
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a02:	699b      	ldr	r3, [r3, #24]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10a      	bne.n	8004a1e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8004a08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0c:	f383 8811 	msr	BASEPRI, r3
 8004a10:	f3bf 8f6f 	isb	sy
 8004a14:	f3bf 8f4f 	dsb	sy
 8004a18:	617b      	str	r3, [r7, #20]
}
 8004a1a:	bf00      	nop
 8004a1c:	e7fe      	b.n	8004a1c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8004a1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a20:	699a      	ldr	r2, [r3, #24]
 8004a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a24:	18d1      	adds	r1, r2, r3
 8004a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a2a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a2c:	f7ff ff06 	bl	800483c <prvInsertTimerInActiveList>
					break;
 8004a30:	e015      	b.n	8004a5e <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8004a32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a34:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a38:	f003 0302 	and.w	r3, r3, #2
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d103      	bne.n	8004a48 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8004a40:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a42:	f000 fbdd 	bl	8005200 <vPortFree>
 8004a46:	e00a      	b.n	8004a5e <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004a48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004a4e:	f023 0301 	bic.w	r3, r3, #1
 8004a52:	b2da      	uxtb	r2, r3
 8004a54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8004a5a:	e000      	b.n	8004a5e <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8004a5c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8004a5e:	4b08      	ldr	r3, [pc, #32]	; (8004a80 <prvProcessReceivedCommands+0x1c0>)
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	1d39      	adds	r1, r7, #4
 8004a64:	2200      	movs	r2, #0
 8004a66:	4618      	mov	r0, r3
 8004a68:	f7fe f8fc 	bl	8002c64 <xQueueReceive>
 8004a6c:	4603      	mov	r3, r0
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	f47f af2a 	bne.w	80048c8 <prvProcessReceivedCommands+0x8>
	}
}
 8004a74:	bf00      	nop
 8004a76:	bf00      	nop
 8004a78:	3730      	adds	r7, #48	; 0x30
 8004a7a:	46bd      	mov	sp, r7
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	20000dd8 	.word	0x20000dd8

08004a84 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004a8a:	e048      	b.n	8004b1e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004a8c:	4b2d      	ldr	r3, [pc, #180]	; (8004b44 <prvSwitchTimerLists+0xc0>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	68db      	ldr	r3, [r3, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a96:	4b2b      	ldr	r3, [pc, #172]	; (8004b44 <prvSwitchTimerLists+0xc0>)
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	68db      	ldr	r3, [r3, #12]
 8004a9c:	68db      	ldr	r3, [r3, #12]
 8004a9e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	3304      	adds	r3, #4
 8004aa4:	4618      	mov	r0, r3
 8004aa6:	f7fd fce5 	bl	8002474 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a1b      	ldr	r3, [r3, #32]
 8004aae:	68f8      	ldr	r0, [r7, #12]
 8004ab0:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004ab8:	f003 0304 	and.w	r3, r3, #4
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d02e      	beq.n	8004b1e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	699b      	ldr	r3, [r3, #24]
 8004ac4:	693a      	ldr	r2, [r7, #16]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8004aca:	68ba      	ldr	r2, [r7, #8]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d90e      	bls.n	8004af0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	68fa      	ldr	r2, [r7, #12]
 8004adc:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004ade:	4b19      	ldr	r3, [pc, #100]	; (8004b44 <prvSwitchTimerLists+0xc0>)
 8004ae0:	681a      	ldr	r2, [r3, #0]
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	3304      	adds	r3, #4
 8004ae6:	4619      	mov	r1, r3
 8004ae8:	4610      	mov	r0, r2
 8004aea:	f7fd fc8a 	bl	8002402 <vListInsert>
 8004aee:	e016      	b.n	8004b1e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004af0:	2300      	movs	r3, #0
 8004af2:	9300      	str	r3, [sp, #0]
 8004af4:	2300      	movs	r3, #0
 8004af6:	693a      	ldr	r2, [r7, #16]
 8004af8:	2100      	movs	r1, #0
 8004afa:	68f8      	ldr	r0, [r7, #12]
 8004afc:	f7ff fd60 	bl	80045c0 <xTimerGenericCommand>
 8004b00:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d10a      	bne.n	8004b1e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8004b08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b0c:	f383 8811 	msr	BASEPRI, r3
 8004b10:	f3bf 8f6f 	isb	sy
 8004b14:	f3bf 8f4f 	dsb	sy
 8004b18:	603b      	str	r3, [r7, #0]
}
 8004b1a:	bf00      	nop
 8004b1c:	e7fe      	b.n	8004b1c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8004b1e:	4b09      	ldr	r3, [pc, #36]	; (8004b44 <prvSwitchTimerLists+0xc0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d1b1      	bne.n	8004a8c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8004b28:	4b06      	ldr	r3, [pc, #24]	; (8004b44 <prvSwitchTimerLists+0xc0>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8004b2e:	4b06      	ldr	r3, [pc, #24]	; (8004b48 <prvSwitchTimerLists+0xc4>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a04      	ldr	r2, [pc, #16]	; (8004b44 <prvSwitchTimerLists+0xc0>)
 8004b34:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8004b36:	4a04      	ldr	r2, [pc, #16]	; (8004b48 <prvSwitchTimerLists+0xc4>)
 8004b38:	697b      	ldr	r3, [r7, #20]
 8004b3a:	6013      	str	r3, [r2, #0]
}
 8004b3c:	bf00      	nop
 8004b3e:	3718      	adds	r7, #24
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	20000dd0 	.word	0x20000dd0
 8004b48:	20000dd4 	.word	0x20000dd4

08004b4c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8004b4c:	b580      	push	{r7, lr}
 8004b4e:	b082      	sub	sp, #8
 8004b50:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8004b52:	f000 f967 	bl	8004e24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8004b56:	4b15      	ldr	r3, [pc, #84]	; (8004bac <prvCheckForValidListAndQueue+0x60>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d120      	bne.n	8004ba0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8004b5e:	4814      	ldr	r0, [pc, #80]	; (8004bb0 <prvCheckForValidListAndQueue+0x64>)
 8004b60:	f7fd fbfe 	bl	8002360 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8004b64:	4813      	ldr	r0, [pc, #76]	; (8004bb4 <prvCheckForValidListAndQueue+0x68>)
 8004b66:	f7fd fbfb 	bl	8002360 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8004b6a:	4b13      	ldr	r3, [pc, #76]	; (8004bb8 <prvCheckForValidListAndQueue+0x6c>)
 8004b6c:	4a10      	ldr	r2, [pc, #64]	; (8004bb0 <prvCheckForValidListAndQueue+0x64>)
 8004b6e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8004b70:	4b12      	ldr	r3, [pc, #72]	; (8004bbc <prvCheckForValidListAndQueue+0x70>)
 8004b72:	4a10      	ldr	r2, [pc, #64]	; (8004bb4 <prvCheckForValidListAndQueue+0x68>)
 8004b74:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8004b76:	2300      	movs	r3, #0
 8004b78:	9300      	str	r3, [sp, #0]
 8004b7a:	4b11      	ldr	r3, [pc, #68]	; (8004bc0 <prvCheckForValidListAndQueue+0x74>)
 8004b7c:	4a11      	ldr	r2, [pc, #68]	; (8004bc4 <prvCheckForValidListAndQueue+0x78>)
 8004b7e:	2110      	movs	r1, #16
 8004b80:	200a      	movs	r0, #10
 8004b82:	f7fd fd09 	bl	8002598 <xQueueGenericCreateStatic>
 8004b86:	4603      	mov	r3, r0
 8004b88:	4a08      	ldr	r2, [pc, #32]	; (8004bac <prvCheckForValidListAndQueue+0x60>)
 8004b8a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004b8c:	4b07      	ldr	r3, [pc, #28]	; (8004bac <prvCheckForValidListAndQueue+0x60>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d005      	beq.n	8004ba0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004b94:	4b05      	ldr	r3, [pc, #20]	; (8004bac <prvCheckForValidListAndQueue+0x60>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	490b      	ldr	r1, [pc, #44]	; (8004bc8 <prvCheckForValidListAndQueue+0x7c>)
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fe fc1a 	bl	80033d4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004ba0:	f000 f970 	bl	8004e84 <vPortExitCritical>
}
 8004ba4:	bf00      	nop
 8004ba6:	46bd      	mov	sp, r7
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	20000dd8 	.word	0x20000dd8
 8004bb0:	20000da8 	.word	0x20000da8
 8004bb4:	20000dbc 	.word	0x20000dbc
 8004bb8:	20000dd0 	.word	0x20000dd0
 8004bbc:	20000dd4 	.word	0x20000dd4
 8004bc0:	20000e84 	.word	0x20000e84
 8004bc4:	20000de4 	.word	0x20000de4
 8004bc8:	08005688 	.word	0x08005688

08004bcc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004bcc:	b480      	push	{r7}
 8004bce:	b085      	sub	sp, #20
 8004bd0:	af00      	add	r7, sp, #0
 8004bd2:	60f8      	str	r0, [r7, #12]
 8004bd4:	60b9      	str	r1, [r7, #8]
 8004bd6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	3b04      	subs	r3, #4
 8004bdc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8004be4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	3b04      	subs	r3, #4
 8004bea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	f023 0201 	bic.w	r2, r3, #1
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	3b04      	subs	r3, #4
 8004bfa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8004bfc:	4a0c      	ldr	r2, [pc, #48]	; (8004c30 <pxPortInitialiseStack+0x64>)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	3b14      	subs	r3, #20
 8004c06:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8004c08:	687a      	ldr	r2, [r7, #4]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3b04      	subs	r3, #4
 8004c12:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	f06f 0202 	mvn.w	r2, #2
 8004c1a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	3b20      	subs	r3, #32
 8004c20:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8004c22:	68fb      	ldr	r3, [r7, #12]
}
 8004c24:	4618      	mov	r0, r3
 8004c26:	3714      	adds	r7, #20
 8004c28:	46bd      	mov	sp, r7
 8004c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2e:	4770      	bx	lr
 8004c30:	08004c35 	.word	0x08004c35

08004c34 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8004c34:	b480      	push	{r7}
 8004c36:	b085      	sub	sp, #20
 8004c38:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8004c3a:	2300      	movs	r3, #0
 8004c3c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004c3e:	4b12      	ldr	r3, [pc, #72]	; (8004c88 <prvTaskExitError+0x54>)
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c46:	d00a      	beq.n	8004c5e <prvTaskExitError+0x2a>
	__asm volatile
 8004c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c4c:	f383 8811 	msr	BASEPRI, r3
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	f3bf 8f4f 	dsb	sy
 8004c58:	60fb      	str	r3, [r7, #12]
}
 8004c5a:	bf00      	nop
 8004c5c:	e7fe      	b.n	8004c5c <prvTaskExitError+0x28>
	__asm volatile
 8004c5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c62:	f383 8811 	msr	BASEPRI, r3
 8004c66:	f3bf 8f6f 	isb	sy
 8004c6a:	f3bf 8f4f 	dsb	sy
 8004c6e:	60bb      	str	r3, [r7, #8]
}
 8004c70:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004c72:	bf00      	nop
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d0fc      	beq.n	8004c74 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8004c7a:	bf00      	nop
 8004c7c:	bf00      	nop
 8004c7e:	3714      	adds	r7, #20
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr
 8004c88:	2000000c 	.word	0x2000000c
 8004c8c:	00000000 	.word	0x00000000

08004c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004c90:	4b07      	ldr	r3, [pc, #28]	; (8004cb0 <pxCurrentTCBConst2>)
 8004c92:	6819      	ldr	r1, [r3, #0]
 8004c94:	6808      	ldr	r0, [r1, #0]
 8004c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9a:	f380 8809 	msr	PSP, r0
 8004c9e:	f3bf 8f6f 	isb	sy
 8004ca2:	f04f 0000 	mov.w	r0, #0
 8004ca6:	f380 8811 	msr	BASEPRI, r0
 8004caa:	4770      	bx	lr
 8004cac:	f3af 8000 	nop.w

08004cb0 <pxCurrentTCBConst2>:
 8004cb0:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004cb4:	bf00      	nop
 8004cb6:	bf00      	nop

08004cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004cb8:	4808      	ldr	r0, [pc, #32]	; (8004cdc <prvPortStartFirstTask+0x24>)
 8004cba:	6800      	ldr	r0, [r0, #0]
 8004cbc:	6800      	ldr	r0, [r0, #0]
 8004cbe:	f380 8808 	msr	MSP, r0
 8004cc2:	f04f 0000 	mov.w	r0, #0
 8004cc6:	f380 8814 	msr	CONTROL, r0
 8004cca:	b662      	cpsie	i
 8004ccc:	b661      	cpsie	f
 8004cce:	f3bf 8f4f 	dsb	sy
 8004cd2:	f3bf 8f6f 	isb	sy
 8004cd6:	df00      	svc	0
 8004cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8004cda:	bf00      	nop
 8004cdc:	e000ed08 	.word	0xe000ed08

08004ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	b086      	sub	sp, #24
 8004ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8004ce6:	4b46      	ldr	r3, [pc, #280]	; (8004e00 <xPortStartScheduler+0x120>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4a46      	ldr	r2, [pc, #280]	; (8004e04 <xPortStartScheduler+0x124>)
 8004cec:	4293      	cmp	r3, r2
 8004cee:	d10a      	bne.n	8004d06 <xPortStartScheduler+0x26>
	__asm volatile
 8004cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf4:	f383 8811 	msr	BASEPRI, r3
 8004cf8:	f3bf 8f6f 	isb	sy
 8004cfc:	f3bf 8f4f 	dsb	sy
 8004d00:	613b      	str	r3, [r7, #16]
}
 8004d02:	bf00      	nop
 8004d04:	e7fe      	b.n	8004d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8004d06:	4b3e      	ldr	r3, [pc, #248]	; (8004e00 <xPortStartScheduler+0x120>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	4a3f      	ldr	r2, [pc, #252]	; (8004e08 <xPortStartScheduler+0x128>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d10a      	bne.n	8004d26 <xPortStartScheduler+0x46>
	__asm volatile
 8004d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d14:	f383 8811 	msr	BASEPRI, r3
 8004d18:	f3bf 8f6f 	isb	sy
 8004d1c:	f3bf 8f4f 	dsb	sy
 8004d20:	60fb      	str	r3, [r7, #12]
}
 8004d22:	bf00      	nop
 8004d24:	e7fe      	b.n	8004d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8004d26:	4b39      	ldr	r3, [pc, #228]	; (8004e0c <xPortStartScheduler+0x12c>)
 8004d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	781b      	ldrb	r3, [r3, #0]
 8004d2e:	b2db      	uxtb	r3, r3
 8004d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	22ff      	movs	r2, #255	; 0xff
 8004d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8004d38:	697b      	ldr	r3, [r7, #20]
 8004d3a:	781b      	ldrb	r3, [r3, #0]
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004d40:	78fb      	ldrb	r3, [r7, #3]
 8004d42:	b2db      	uxtb	r3, r3
 8004d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004d48:	b2da      	uxtb	r2, r3
 8004d4a:	4b31      	ldr	r3, [pc, #196]	; (8004e10 <xPortStartScheduler+0x130>)
 8004d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004d4e:	4b31      	ldr	r3, [pc, #196]	; (8004e14 <xPortStartScheduler+0x134>)
 8004d50:	2207      	movs	r2, #7
 8004d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d54:	e009      	b.n	8004d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004d56:	4b2f      	ldr	r3, [pc, #188]	; (8004e14 <xPortStartScheduler+0x134>)
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	3b01      	subs	r3, #1
 8004d5c:	4a2d      	ldr	r2, [pc, #180]	; (8004e14 <xPortStartScheduler+0x134>)
 8004d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004d60:	78fb      	ldrb	r3, [r7, #3]
 8004d62:	b2db      	uxtb	r3, r3
 8004d64:	005b      	lsls	r3, r3, #1
 8004d66:	b2db      	uxtb	r3, r3
 8004d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004d6a:	78fb      	ldrb	r3, [r7, #3]
 8004d6c:	b2db      	uxtb	r3, r3
 8004d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d72:	2b80      	cmp	r3, #128	; 0x80
 8004d74:	d0ef      	beq.n	8004d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004d76:	4b27      	ldr	r3, [pc, #156]	; (8004e14 <xPortStartScheduler+0x134>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f1c3 0307 	rsb	r3, r3, #7
 8004d7e:	2b04      	cmp	r3, #4
 8004d80:	d00a      	beq.n	8004d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8004d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d86:	f383 8811 	msr	BASEPRI, r3
 8004d8a:	f3bf 8f6f 	isb	sy
 8004d8e:	f3bf 8f4f 	dsb	sy
 8004d92:	60bb      	str	r3, [r7, #8]
}
 8004d94:	bf00      	nop
 8004d96:	e7fe      	b.n	8004d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004d98:	4b1e      	ldr	r3, [pc, #120]	; (8004e14 <xPortStartScheduler+0x134>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	021b      	lsls	r3, r3, #8
 8004d9e:	4a1d      	ldr	r2, [pc, #116]	; (8004e14 <xPortStartScheduler+0x134>)
 8004da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004da2:	4b1c      	ldr	r3, [pc, #112]	; (8004e14 <xPortStartScheduler+0x134>)
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004daa:	4a1a      	ldr	r2, [pc, #104]	; (8004e14 <xPortStartScheduler+0x134>)
 8004dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	b2da      	uxtb	r2, r3
 8004db2:	697b      	ldr	r3, [r7, #20]
 8004db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004db6:	4b18      	ldr	r3, [pc, #96]	; (8004e18 <xPortStartScheduler+0x138>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	4a17      	ldr	r2, [pc, #92]	; (8004e18 <xPortStartScheduler+0x138>)
 8004dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004dc2:	4b15      	ldr	r3, [pc, #84]	; (8004e18 <xPortStartScheduler+0x138>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	4a14      	ldr	r2, [pc, #80]	; (8004e18 <xPortStartScheduler+0x138>)
 8004dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004dce:	f000 f8dd 	bl	8004f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004dd2:	4b12      	ldr	r3, [pc, #72]	; (8004e1c <xPortStartScheduler+0x13c>)
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004dd8:	f000 f8fc 	bl	8004fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004ddc:	4b10      	ldr	r3, [pc, #64]	; (8004e20 <xPortStartScheduler+0x140>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	4a0f      	ldr	r2, [pc, #60]	; (8004e20 <xPortStartScheduler+0x140>)
 8004de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004de8:	f7ff ff66 	bl	8004cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004dec:	f7fe ff4c 	bl	8003c88 <vTaskSwitchContext>
	prvTaskExitError();
 8004df0:	f7ff ff20 	bl	8004c34 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004df4:	2300      	movs	r3, #0
}
 8004df6:	4618      	mov	r0, r3
 8004df8:	3718      	adds	r7, #24
 8004dfa:	46bd      	mov	sp, r7
 8004dfc:	bd80      	pop	{r7, pc}
 8004dfe:	bf00      	nop
 8004e00:	e000ed00 	.word	0xe000ed00
 8004e04:	410fc271 	.word	0x410fc271
 8004e08:	410fc270 	.word	0x410fc270
 8004e0c:	e000e400 	.word	0xe000e400
 8004e10:	20000ed4 	.word	0x20000ed4
 8004e14:	20000ed8 	.word	0x20000ed8
 8004e18:	e000ed20 	.word	0xe000ed20
 8004e1c:	2000000c 	.word	0x2000000c
 8004e20:	e000ef34 	.word	0xe000ef34

08004e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004e24:	b480      	push	{r7}
 8004e26:	b083      	sub	sp, #12
 8004e28:	af00      	add	r7, sp, #0
	__asm volatile
 8004e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2e:	f383 8811 	msr	BASEPRI, r3
 8004e32:	f3bf 8f6f 	isb	sy
 8004e36:	f3bf 8f4f 	dsb	sy
 8004e3a:	607b      	str	r3, [r7, #4]
}
 8004e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <vPortEnterCritical+0x58>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3301      	adds	r3, #1
 8004e44:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <vPortEnterCritical+0x58>)
 8004e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004e48:	4b0c      	ldr	r3, [pc, #48]	; (8004e7c <vPortEnterCritical+0x58>)
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	2b01      	cmp	r3, #1
 8004e4e:	d10f      	bne.n	8004e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004e50:	4b0b      	ldr	r3, [pc, #44]	; (8004e80 <vPortEnterCritical+0x5c>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d00a      	beq.n	8004e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8004e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5e:	f383 8811 	msr	BASEPRI, r3
 8004e62:	f3bf 8f6f 	isb	sy
 8004e66:	f3bf 8f4f 	dsb	sy
 8004e6a:	603b      	str	r3, [r7, #0]
}
 8004e6c:	bf00      	nop
 8004e6e:	e7fe      	b.n	8004e6e <vPortEnterCritical+0x4a>
	}
}
 8004e70:	bf00      	nop
 8004e72:	370c      	adds	r7, #12
 8004e74:	46bd      	mov	sp, r7
 8004e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e7a:	4770      	bx	lr
 8004e7c:	2000000c 	.word	0x2000000c
 8004e80:	e000ed04 	.word	0xe000ed04

08004e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004e84:	b480      	push	{r7}
 8004e86:	b083      	sub	sp, #12
 8004e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004e8a:	4b12      	ldr	r3, [pc, #72]	; (8004ed4 <vPortExitCritical+0x50>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d10a      	bne.n	8004ea8 <vPortExitCritical+0x24>
	__asm volatile
 8004e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e96:	f383 8811 	msr	BASEPRI, r3
 8004e9a:	f3bf 8f6f 	isb	sy
 8004e9e:	f3bf 8f4f 	dsb	sy
 8004ea2:	607b      	str	r3, [r7, #4]
}
 8004ea4:	bf00      	nop
 8004ea6:	e7fe      	b.n	8004ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004ea8:	4b0a      	ldr	r3, [pc, #40]	; (8004ed4 <vPortExitCritical+0x50>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	3b01      	subs	r3, #1
 8004eae:	4a09      	ldr	r2, [pc, #36]	; (8004ed4 <vPortExitCritical+0x50>)
 8004eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004eb2:	4b08      	ldr	r3, [pc, #32]	; (8004ed4 <vPortExitCritical+0x50>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d105      	bne.n	8004ec6 <vPortExitCritical+0x42>
 8004eba:	2300      	movs	r3, #0
 8004ebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004ebe:	683b      	ldr	r3, [r7, #0]
 8004ec0:	f383 8811 	msr	BASEPRI, r3
}
 8004ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004ec6:	bf00      	nop
 8004ec8:	370c      	adds	r7, #12
 8004eca:	46bd      	mov	sp, r7
 8004ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed0:	4770      	bx	lr
 8004ed2:	bf00      	nop
 8004ed4:	2000000c 	.word	0x2000000c
	...

08004ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ee0:	f3ef 8009 	mrs	r0, PSP
 8004ee4:	f3bf 8f6f 	isb	sy
 8004ee8:	4b15      	ldr	r3, [pc, #84]	; (8004f40 <pxCurrentTCBConst>)
 8004eea:	681a      	ldr	r2, [r3, #0]
 8004eec:	f01e 0f10 	tst.w	lr, #16
 8004ef0:	bf08      	it	eq
 8004ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004efa:	6010      	str	r0, [r2, #0]
 8004efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004f04:	f380 8811 	msr	BASEPRI, r0
 8004f08:	f3bf 8f4f 	dsb	sy
 8004f0c:	f3bf 8f6f 	isb	sy
 8004f10:	f7fe feba 	bl	8003c88 <vTaskSwitchContext>
 8004f14:	f04f 0000 	mov.w	r0, #0
 8004f18:	f380 8811 	msr	BASEPRI, r0
 8004f1c:	bc09      	pop	{r0, r3}
 8004f1e:	6819      	ldr	r1, [r3, #0]
 8004f20:	6808      	ldr	r0, [r1, #0]
 8004f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f26:	f01e 0f10 	tst.w	lr, #16
 8004f2a:	bf08      	it	eq
 8004f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004f30:	f380 8809 	msr	PSP, r0
 8004f34:	f3bf 8f6f 	isb	sy
 8004f38:	4770      	bx	lr
 8004f3a:	bf00      	nop
 8004f3c:	f3af 8000 	nop.w

08004f40 <pxCurrentTCBConst>:
 8004f40:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004f44:	bf00      	nop
 8004f46:	bf00      	nop

08004f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b082      	sub	sp, #8
 8004f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8004f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f52:	f383 8811 	msr	BASEPRI, r3
 8004f56:	f3bf 8f6f 	isb	sy
 8004f5a:	f3bf 8f4f 	dsb	sy
 8004f5e:	607b      	str	r3, [r7, #4]
}
 8004f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004f62:	f7fe fdd7 	bl	8003b14 <xTaskIncrementTick>
 8004f66:	4603      	mov	r3, r0
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d003      	beq.n	8004f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004f6c:	4b06      	ldr	r3, [pc, #24]	; (8004f88 <xPortSysTickHandler+0x40>)
 8004f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f72:	601a      	str	r2, [r3, #0]
 8004f74:	2300      	movs	r3, #0
 8004f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004f78:	683b      	ldr	r3, [r7, #0]
 8004f7a:	f383 8811 	msr	BASEPRI, r3
}
 8004f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004f80:	bf00      	nop
 8004f82:	3708      	adds	r7, #8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}
 8004f88:	e000ed04 	.word	0xe000ed04

08004f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004f8c:	b480      	push	{r7}
 8004f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004f90:	4b0b      	ldr	r3, [pc, #44]	; (8004fc0 <vPortSetupTimerInterrupt+0x34>)
 8004f92:	2200      	movs	r2, #0
 8004f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004f96:	4b0b      	ldr	r3, [pc, #44]	; (8004fc4 <vPortSetupTimerInterrupt+0x38>)
 8004f98:	2200      	movs	r2, #0
 8004f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004f9c:	4b0a      	ldr	r3, [pc, #40]	; (8004fc8 <vPortSetupTimerInterrupt+0x3c>)
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a0a      	ldr	r2, [pc, #40]	; (8004fcc <vPortSetupTimerInterrupt+0x40>)
 8004fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8004fa6:	099b      	lsrs	r3, r3, #6
 8004fa8:	4a09      	ldr	r2, [pc, #36]	; (8004fd0 <vPortSetupTimerInterrupt+0x44>)
 8004faa:	3b01      	subs	r3, #1
 8004fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004fae:	4b04      	ldr	r3, [pc, #16]	; (8004fc0 <vPortSetupTimerInterrupt+0x34>)
 8004fb0:	2207      	movs	r2, #7
 8004fb2:	601a      	str	r2, [r3, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	46bd      	mov	sp, r7
 8004fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbc:	4770      	bx	lr
 8004fbe:	bf00      	nop
 8004fc0:	e000e010 	.word	0xe000e010
 8004fc4:	e000e018 	.word	0xe000e018
 8004fc8:	20000000 	.word	0x20000000
 8004fcc:	10624dd3 	.word	0x10624dd3
 8004fd0:	e000e014 	.word	0xe000e014

08004fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004fe4 <vPortEnableVFP+0x10>
 8004fd8:	6801      	ldr	r1, [r0, #0]
 8004fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004fde:	6001      	str	r1, [r0, #0]
 8004fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004fe2:	bf00      	nop
 8004fe4:	e000ed88 	.word	0xe000ed88

08004fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004fe8:	b480      	push	{r7}
 8004fea:	b085      	sub	sp, #20
 8004fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004fee:	f3ef 8305 	mrs	r3, IPSR
 8004ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2b0f      	cmp	r3, #15
 8004ff8:	d914      	bls.n	8005024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004ffa:	4a17      	ldr	r2, [pc, #92]	; (8005058 <vPortValidateInterruptPriority+0x70>)
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	4413      	add	r3, r2
 8005000:	781b      	ldrb	r3, [r3, #0]
 8005002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005004:	4b15      	ldr	r3, [pc, #84]	; (800505c <vPortValidateInterruptPriority+0x74>)
 8005006:	781b      	ldrb	r3, [r3, #0]
 8005008:	7afa      	ldrb	r2, [r7, #11]
 800500a:	429a      	cmp	r2, r3
 800500c:	d20a      	bcs.n	8005024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800500e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005012:	f383 8811 	msr	BASEPRI, r3
 8005016:	f3bf 8f6f 	isb	sy
 800501a:	f3bf 8f4f 	dsb	sy
 800501e:	607b      	str	r3, [r7, #4]
}
 8005020:	bf00      	nop
 8005022:	e7fe      	b.n	8005022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005024:	4b0e      	ldr	r3, [pc, #56]	; (8005060 <vPortValidateInterruptPriority+0x78>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800502c:	4b0d      	ldr	r3, [pc, #52]	; (8005064 <vPortValidateInterruptPriority+0x7c>)
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	429a      	cmp	r2, r3
 8005032:	d90a      	bls.n	800504a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005038:	f383 8811 	msr	BASEPRI, r3
 800503c:	f3bf 8f6f 	isb	sy
 8005040:	f3bf 8f4f 	dsb	sy
 8005044:	603b      	str	r3, [r7, #0]
}
 8005046:	bf00      	nop
 8005048:	e7fe      	b.n	8005048 <vPortValidateInterruptPriority+0x60>
	}
 800504a:	bf00      	nop
 800504c:	3714      	adds	r7, #20
 800504e:	46bd      	mov	sp, r7
 8005050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005054:	4770      	bx	lr
 8005056:	bf00      	nop
 8005058:	e000e3f0 	.word	0xe000e3f0
 800505c:	20000ed4 	.word	0x20000ed4
 8005060:	e000ed0c 	.word	0xe000ed0c
 8005064:	20000ed8 	.word	0x20000ed8

08005068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b08a      	sub	sp, #40	; 0x28
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005070:	2300      	movs	r3, #0
 8005072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005074:	f7fe fc92 	bl	800399c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005078:	4b5b      	ldr	r3, [pc, #364]	; (80051e8 <pvPortMalloc+0x180>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d101      	bne.n	8005084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005080:	f000 f920 	bl	80052c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005084:	4b59      	ldr	r3, [pc, #356]	; (80051ec <pvPortMalloc+0x184>)
 8005086:	681a      	ldr	r2, [r3, #0]
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	4013      	ands	r3, r2
 800508c:	2b00      	cmp	r3, #0
 800508e:	f040 8093 	bne.w	80051b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	2b00      	cmp	r3, #0
 8005096:	d01d      	beq.n	80050d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005098:	2208      	movs	r2, #8
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4413      	add	r3, r2
 800509e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	f003 0307 	and.w	r3, r3, #7
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d014      	beq.n	80050d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f023 0307 	bic.w	r3, r3, #7
 80050b0:	3308      	adds	r3, #8
 80050b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	f003 0307 	and.w	r3, r3, #7
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d00a      	beq.n	80050d4 <pvPortMalloc+0x6c>
	__asm volatile
 80050be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c2:	f383 8811 	msr	BASEPRI, r3
 80050c6:	f3bf 8f6f 	isb	sy
 80050ca:	f3bf 8f4f 	dsb	sy
 80050ce:	617b      	str	r3, [r7, #20]
}
 80050d0:	bf00      	nop
 80050d2:	e7fe      	b.n	80050d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d06e      	beq.n	80051b8 <pvPortMalloc+0x150>
 80050da:	4b45      	ldr	r3, [pc, #276]	; (80051f0 <pvPortMalloc+0x188>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	429a      	cmp	r2, r3
 80050e2:	d869      	bhi.n	80051b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80050e4:	4b43      	ldr	r3, [pc, #268]	; (80051f4 <pvPortMalloc+0x18c>)
 80050e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80050e8:	4b42      	ldr	r3, [pc, #264]	; (80051f4 <pvPortMalloc+0x18c>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050ee:	e004      	b.n	80050fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80050f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80050f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80050fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	687a      	ldr	r2, [r7, #4]
 8005100:	429a      	cmp	r2, r3
 8005102:	d903      	bls.n	800510c <pvPortMalloc+0xa4>
 8005104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	2b00      	cmp	r3, #0
 800510a:	d1f1      	bne.n	80050f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800510c:	4b36      	ldr	r3, [pc, #216]	; (80051e8 <pvPortMalloc+0x180>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005112:	429a      	cmp	r2, r3
 8005114:	d050      	beq.n	80051b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005116:	6a3b      	ldr	r3, [r7, #32]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	2208      	movs	r2, #8
 800511c:	4413      	add	r3, r2
 800511e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	6a3b      	ldr	r3, [r7, #32]
 8005126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800512a:	685a      	ldr	r2, [r3, #4]
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	1ad2      	subs	r2, r2, r3
 8005130:	2308      	movs	r3, #8
 8005132:	005b      	lsls	r3, r3, #1
 8005134:	429a      	cmp	r2, r3
 8005136:	d91f      	bls.n	8005178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4413      	add	r3, r2
 800513e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005140:	69bb      	ldr	r3, [r7, #24]
 8005142:	f003 0307 	and.w	r3, r3, #7
 8005146:	2b00      	cmp	r3, #0
 8005148:	d00a      	beq.n	8005160 <pvPortMalloc+0xf8>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	613b      	str	r3, [r7, #16]
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	685a      	ldr	r2, [r3, #4]
 8005164:	687b      	ldr	r3, [r7, #4]
 8005166:	1ad2      	subs	r2, r2, r3
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800516c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005172:	69b8      	ldr	r0, [r7, #24]
 8005174:	f000 f908 	bl	8005388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005178:	4b1d      	ldr	r3, [pc, #116]	; (80051f0 <pvPortMalloc+0x188>)
 800517a:	681a      	ldr	r2, [r3, #0]
 800517c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800517e:	685b      	ldr	r3, [r3, #4]
 8005180:	1ad3      	subs	r3, r2, r3
 8005182:	4a1b      	ldr	r2, [pc, #108]	; (80051f0 <pvPortMalloc+0x188>)
 8005184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005186:	4b1a      	ldr	r3, [pc, #104]	; (80051f0 <pvPortMalloc+0x188>)
 8005188:	681a      	ldr	r2, [r3, #0]
 800518a:	4b1b      	ldr	r3, [pc, #108]	; (80051f8 <pvPortMalloc+0x190>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	429a      	cmp	r2, r3
 8005190:	d203      	bcs.n	800519a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005192:	4b17      	ldr	r3, [pc, #92]	; (80051f0 <pvPortMalloc+0x188>)
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	4a18      	ldr	r2, [pc, #96]	; (80051f8 <pvPortMalloc+0x190>)
 8005198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800519a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800519c:	685a      	ldr	r2, [r3, #4]
 800519e:	4b13      	ldr	r3, [pc, #76]	; (80051ec <pvPortMalloc+0x184>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	431a      	orrs	r2, r3
 80051a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80051a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051aa:	2200      	movs	r2, #0
 80051ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80051ae:	4b13      	ldr	r3, [pc, #76]	; (80051fc <pvPortMalloc+0x194>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	3301      	adds	r3, #1
 80051b4:	4a11      	ldr	r2, [pc, #68]	; (80051fc <pvPortMalloc+0x194>)
 80051b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80051b8:	f7fe fbfe 	bl	80039b8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80051bc:	69fb      	ldr	r3, [r7, #28]
 80051be:	f003 0307 	and.w	r3, r3, #7
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d00a      	beq.n	80051dc <pvPortMalloc+0x174>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	60fb      	str	r3, [r7, #12]
}
 80051d8:	bf00      	nop
 80051da:	e7fe      	b.n	80051da <pvPortMalloc+0x172>
	return pvReturn;
 80051dc:	69fb      	ldr	r3, [r7, #28]
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3728      	adds	r7, #40	; 0x28
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20004ae4 	.word	0x20004ae4
 80051ec:	20004af8 	.word	0x20004af8
 80051f0:	20004ae8 	.word	0x20004ae8
 80051f4:	20004adc 	.word	0x20004adc
 80051f8:	20004aec 	.word	0x20004aec
 80051fc:	20004af0 	.word	0x20004af0

08005200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	2b00      	cmp	r3, #0
 8005210:	d04d      	beq.n	80052ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005212:	2308      	movs	r3, #8
 8005214:	425b      	negs	r3, r3
 8005216:	697a      	ldr	r2, [r7, #20]
 8005218:	4413      	add	r3, r2
 800521a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800521c:	697b      	ldr	r3, [r7, #20]
 800521e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	685a      	ldr	r2, [r3, #4]
 8005224:	4b24      	ldr	r3, [pc, #144]	; (80052b8 <vPortFree+0xb8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	4013      	ands	r3, r2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d10a      	bne.n	8005244 <vPortFree+0x44>
	__asm volatile
 800522e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005232:	f383 8811 	msr	BASEPRI, r3
 8005236:	f3bf 8f6f 	isb	sy
 800523a:	f3bf 8f4f 	dsb	sy
 800523e:	60fb      	str	r3, [r7, #12]
}
 8005240:	bf00      	nop
 8005242:	e7fe      	b.n	8005242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005244:	693b      	ldr	r3, [r7, #16]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d00a      	beq.n	8005262 <vPortFree+0x62>
	__asm volatile
 800524c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005250:	f383 8811 	msr	BASEPRI, r3
 8005254:	f3bf 8f6f 	isb	sy
 8005258:	f3bf 8f4f 	dsb	sy
 800525c:	60bb      	str	r3, [r7, #8]
}
 800525e:	bf00      	nop
 8005260:	e7fe      	b.n	8005260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	4b14      	ldr	r3, [pc, #80]	; (80052b8 <vPortFree+0xb8>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4013      	ands	r3, r2
 800526c:	2b00      	cmp	r3, #0
 800526e:	d01e      	beq.n	80052ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d11a      	bne.n	80052ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	685a      	ldr	r2, [r3, #4]
 800527c:	4b0e      	ldr	r3, [pc, #56]	; (80052b8 <vPortFree+0xb8>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	43db      	mvns	r3, r3
 8005282:	401a      	ands	r2, r3
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005288:	f7fe fb88 	bl	800399c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	685a      	ldr	r2, [r3, #4]
 8005290:	4b0a      	ldr	r3, [pc, #40]	; (80052bc <vPortFree+0xbc>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4413      	add	r3, r2
 8005296:	4a09      	ldr	r2, [pc, #36]	; (80052bc <vPortFree+0xbc>)
 8005298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800529a:	6938      	ldr	r0, [r7, #16]
 800529c:	f000 f874 	bl	8005388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80052a0:	4b07      	ldr	r3, [pc, #28]	; (80052c0 <vPortFree+0xc0>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3301      	adds	r3, #1
 80052a6:	4a06      	ldr	r2, [pc, #24]	; (80052c0 <vPortFree+0xc0>)
 80052a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80052aa:	f7fe fb85 	bl	80039b8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80052ae:	bf00      	nop
 80052b0:	3718      	adds	r7, #24
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20004af8 	.word	0x20004af8
 80052bc:	20004ae8 	.word	0x20004ae8
 80052c0:	20004af4 	.word	0x20004af4

080052c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80052c4:	b480      	push	{r7}
 80052c6:	b085      	sub	sp, #20
 80052c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80052ca:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80052ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80052d0:	4b27      	ldr	r3, [pc, #156]	; (8005370 <prvHeapInit+0xac>)
 80052d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80052d4:	68fb      	ldr	r3, [r7, #12]
 80052d6:	f003 0307 	and.w	r3, r3, #7
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d00c      	beq.n	80052f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	3307      	adds	r3, #7
 80052e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f023 0307 	bic.w	r3, r3, #7
 80052ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80052ec:	68ba      	ldr	r2, [r7, #8]
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	4a1f      	ldr	r2, [pc, #124]	; (8005370 <prvHeapInit+0xac>)
 80052f4:	4413      	add	r3, r2
 80052f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80052fc:	4a1d      	ldr	r2, [pc, #116]	; (8005374 <prvHeapInit+0xb0>)
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005302:	4b1c      	ldr	r3, [pc, #112]	; (8005374 <prvHeapInit+0xb0>)
 8005304:	2200      	movs	r2, #0
 8005306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	68ba      	ldr	r2, [r7, #8]
 800530c:	4413      	add	r3, r2
 800530e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005310:	2208      	movs	r2, #8
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	1a9b      	subs	r3, r3, r2
 8005316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f023 0307 	bic.w	r3, r3, #7
 800531e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005320:	68fb      	ldr	r3, [r7, #12]
 8005322:	4a15      	ldr	r2, [pc, #84]	; (8005378 <prvHeapInit+0xb4>)
 8005324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005326:	4b14      	ldr	r3, [pc, #80]	; (8005378 <prvHeapInit+0xb4>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	2200      	movs	r2, #0
 800532c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800532e:	4b12      	ldr	r3, [pc, #72]	; (8005378 <prvHeapInit+0xb4>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	2200      	movs	r2, #0
 8005334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800533a:	683b      	ldr	r3, [r7, #0]
 800533c:	68fa      	ldr	r2, [r7, #12]
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005344:	4b0c      	ldr	r3, [pc, #48]	; (8005378 <prvHeapInit+0xb4>)
 8005346:	681a      	ldr	r2, [r3, #0]
 8005348:	683b      	ldr	r3, [r7, #0]
 800534a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800534c:	683b      	ldr	r3, [r7, #0]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	4a0a      	ldr	r2, [pc, #40]	; (800537c <prvHeapInit+0xb8>)
 8005352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005354:	683b      	ldr	r3, [r7, #0]
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	4a09      	ldr	r2, [pc, #36]	; (8005380 <prvHeapInit+0xbc>)
 800535a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800535c:	4b09      	ldr	r3, [pc, #36]	; (8005384 <prvHeapInit+0xc0>)
 800535e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005362:	601a      	str	r2, [r3, #0]
}
 8005364:	bf00      	nop
 8005366:	3714      	adds	r7, #20
 8005368:	46bd      	mov	sp, r7
 800536a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536e:	4770      	bx	lr
 8005370:	20000edc 	.word	0x20000edc
 8005374:	20004adc 	.word	0x20004adc
 8005378:	20004ae4 	.word	0x20004ae4
 800537c:	20004aec 	.word	0x20004aec
 8005380:	20004ae8 	.word	0x20004ae8
 8005384:	20004af8 	.word	0x20004af8

08005388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005388:	b480      	push	{r7}
 800538a:	b085      	sub	sp, #20
 800538c:	af00      	add	r7, sp, #0
 800538e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005390:	4b28      	ldr	r3, [pc, #160]	; (8005434 <prvInsertBlockIntoFreeList+0xac>)
 8005392:	60fb      	str	r3, [r7, #12]
 8005394:	e002      	b.n	800539c <prvInsertBlockIntoFreeList+0x14>
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	687a      	ldr	r2, [r7, #4]
 80053a2:	429a      	cmp	r2, r3
 80053a4:	d8f7      	bhi.n	8005396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	685b      	ldr	r3, [r3, #4]
 80053ae:	68ba      	ldr	r2, [r7, #8]
 80053b0:	4413      	add	r3, r2
 80053b2:	687a      	ldr	r2, [r7, #4]
 80053b4:	429a      	cmp	r2, r3
 80053b6:	d108      	bne.n	80053ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	685a      	ldr	r2, [r3, #4]
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	685b      	ldr	r3, [r3, #4]
 80053c0:	441a      	add	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	685b      	ldr	r3, [r3, #4]
 80053d2:	68ba      	ldr	r2, [r7, #8]
 80053d4:	441a      	add	r2, r3
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	429a      	cmp	r2, r3
 80053dc:	d118      	bne.n	8005410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681a      	ldr	r2, [r3, #0]
 80053e2:	4b15      	ldr	r3, [pc, #84]	; (8005438 <prvInsertBlockIntoFreeList+0xb0>)
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d00d      	beq.n	8005406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	685a      	ldr	r2, [r3, #4]
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	685b      	ldr	r3, [r3, #4]
 80053f4:	441a      	add	r2, r3
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	681a      	ldr	r2, [r3, #0]
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	601a      	str	r2, [r3, #0]
 8005404:	e008      	b.n	8005418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005406:	4b0c      	ldr	r3, [pc, #48]	; (8005438 <prvInsertBlockIntoFreeList+0xb0>)
 8005408:	681a      	ldr	r2, [r3, #0]
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	601a      	str	r2, [r3, #0]
 800540e:	e003      	b.n	8005418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681a      	ldr	r2, [r3, #0]
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005418:	68fa      	ldr	r2, [r7, #12]
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	429a      	cmp	r2, r3
 800541e:	d002      	beq.n	8005426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	687a      	ldr	r2, [r7, #4]
 8005424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005426:	bf00      	nop
 8005428:	3714      	adds	r7, #20
 800542a:	46bd      	mov	sp, r7
 800542c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005430:	4770      	bx	lr
 8005432:	bf00      	nop
 8005434:	20004adc 	.word	0x20004adc
 8005438:	20004ae4 	.word	0x20004ae4

0800543c <__libc_init_array>:
 800543c:	b570      	push	{r4, r5, r6, lr}
 800543e:	4d0d      	ldr	r5, [pc, #52]	; (8005474 <__libc_init_array+0x38>)
 8005440:	4c0d      	ldr	r4, [pc, #52]	; (8005478 <__libc_init_array+0x3c>)
 8005442:	1b64      	subs	r4, r4, r5
 8005444:	10a4      	asrs	r4, r4, #2
 8005446:	2600      	movs	r6, #0
 8005448:	42a6      	cmp	r6, r4
 800544a:	d109      	bne.n	8005460 <__libc_init_array+0x24>
 800544c:	4d0b      	ldr	r5, [pc, #44]	; (800547c <__libc_init_array+0x40>)
 800544e:	4c0c      	ldr	r4, [pc, #48]	; (8005480 <__libc_init_array+0x44>)
 8005450:	f000 f8f2 	bl	8005638 <_init>
 8005454:	1b64      	subs	r4, r4, r5
 8005456:	10a4      	asrs	r4, r4, #2
 8005458:	2600      	movs	r6, #0
 800545a:	42a6      	cmp	r6, r4
 800545c:	d105      	bne.n	800546a <__libc_init_array+0x2e>
 800545e:	bd70      	pop	{r4, r5, r6, pc}
 8005460:	f855 3b04 	ldr.w	r3, [r5], #4
 8005464:	4798      	blx	r3
 8005466:	3601      	adds	r6, #1
 8005468:	e7ee      	b.n	8005448 <__libc_init_array+0xc>
 800546a:	f855 3b04 	ldr.w	r3, [r5], #4
 800546e:	4798      	blx	r3
 8005470:	3601      	adds	r6, #1
 8005472:	e7f2      	b.n	800545a <__libc_init_array+0x1e>
 8005474:	0800578c 	.word	0x0800578c
 8005478:	0800578c 	.word	0x0800578c
 800547c:	0800578c 	.word	0x0800578c
 8005480:	08005790 	.word	0x08005790

08005484 <__retarget_lock_acquire_recursive>:
 8005484:	4770      	bx	lr

08005486 <__retarget_lock_release_recursive>:
 8005486:	4770      	bx	lr

08005488 <memcpy>:
 8005488:	440a      	add	r2, r1
 800548a:	4291      	cmp	r1, r2
 800548c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005490:	d100      	bne.n	8005494 <memcpy+0xc>
 8005492:	4770      	bx	lr
 8005494:	b510      	push	{r4, lr}
 8005496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800549a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800549e:	4291      	cmp	r1, r2
 80054a0:	d1f9      	bne.n	8005496 <memcpy+0xe>
 80054a2:	bd10      	pop	{r4, pc}

080054a4 <memset>:
 80054a4:	4402      	add	r2, r0
 80054a6:	4603      	mov	r3, r0
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d100      	bne.n	80054ae <memset+0xa>
 80054ac:	4770      	bx	lr
 80054ae:	f803 1b01 	strb.w	r1, [r3], #1
 80054b2:	e7f9      	b.n	80054a8 <memset+0x4>

080054b4 <cleanup_glue>:
 80054b4:	b538      	push	{r3, r4, r5, lr}
 80054b6:	460c      	mov	r4, r1
 80054b8:	6809      	ldr	r1, [r1, #0]
 80054ba:	4605      	mov	r5, r0
 80054bc:	b109      	cbz	r1, 80054c2 <cleanup_glue+0xe>
 80054be:	f7ff fff9 	bl	80054b4 <cleanup_glue>
 80054c2:	4621      	mov	r1, r4
 80054c4:	4628      	mov	r0, r5
 80054c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054ca:	f000 b869 	b.w	80055a0 <_free_r>
	...

080054d0 <_reclaim_reent>:
 80054d0:	4b2c      	ldr	r3, [pc, #176]	; (8005584 <_reclaim_reent+0xb4>)
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	4283      	cmp	r3, r0
 80054d6:	b570      	push	{r4, r5, r6, lr}
 80054d8:	4604      	mov	r4, r0
 80054da:	d051      	beq.n	8005580 <_reclaim_reent+0xb0>
 80054dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80054de:	b143      	cbz	r3, 80054f2 <_reclaim_reent+0x22>
 80054e0:	68db      	ldr	r3, [r3, #12]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d14a      	bne.n	800557c <_reclaim_reent+0xac>
 80054e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80054e8:	6819      	ldr	r1, [r3, #0]
 80054ea:	b111      	cbz	r1, 80054f2 <_reclaim_reent+0x22>
 80054ec:	4620      	mov	r0, r4
 80054ee:	f000 f857 	bl	80055a0 <_free_r>
 80054f2:	6961      	ldr	r1, [r4, #20]
 80054f4:	b111      	cbz	r1, 80054fc <_reclaim_reent+0x2c>
 80054f6:	4620      	mov	r0, r4
 80054f8:	f000 f852 	bl	80055a0 <_free_r>
 80054fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80054fe:	b111      	cbz	r1, 8005506 <_reclaim_reent+0x36>
 8005500:	4620      	mov	r0, r4
 8005502:	f000 f84d 	bl	80055a0 <_free_r>
 8005506:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005508:	b111      	cbz	r1, 8005510 <_reclaim_reent+0x40>
 800550a:	4620      	mov	r0, r4
 800550c:	f000 f848 	bl	80055a0 <_free_r>
 8005510:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005512:	b111      	cbz	r1, 800551a <_reclaim_reent+0x4a>
 8005514:	4620      	mov	r0, r4
 8005516:	f000 f843 	bl	80055a0 <_free_r>
 800551a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800551c:	b111      	cbz	r1, 8005524 <_reclaim_reent+0x54>
 800551e:	4620      	mov	r0, r4
 8005520:	f000 f83e 	bl	80055a0 <_free_r>
 8005524:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005526:	b111      	cbz	r1, 800552e <_reclaim_reent+0x5e>
 8005528:	4620      	mov	r0, r4
 800552a:	f000 f839 	bl	80055a0 <_free_r>
 800552e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005530:	b111      	cbz	r1, 8005538 <_reclaim_reent+0x68>
 8005532:	4620      	mov	r0, r4
 8005534:	f000 f834 	bl	80055a0 <_free_r>
 8005538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800553a:	b111      	cbz	r1, 8005542 <_reclaim_reent+0x72>
 800553c:	4620      	mov	r0, r4
 800553e:	f000 f82f 	bl	80055a0 <_free_r>
 8005542:	69a3      	ldr	r3, [r4, #24]
 8005544:	b1e3      	cbz	r3, 8005580 <_reclaim_reent+0xb0>
 8005546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005548:	4620      	mov	r0, r4
 800554a:	4798      	blx	r3
 800554c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800554e:	b1b9      	cbz	r1, 8005580 <_reclaim_reent+0xb0>
 8005550:	4620      	mov	r0, r4
 8005552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005556:	f7ff bfad 	b.w	80054b4 <cleanup_glue>
 800555a:	5949      	ldr	r1, [r1, r5]
 800555c:	b941      	cbnz	r1, 8005570 <_reclaim_reent+0xa0>
 800555e:	3504      	adds	r5, #4
 8005560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005562:	2d80      	cmp	r5, #128	; 0x80
 8005564:	68d9      	ldr	r1, [r3, #12]
 8005566:	d1f8      	bne.n	800555a <_reclaim_reent+0x8a>
 8005568:	4620      	mov	r0, r4
 800556a:	f000 f819 	bl	80055a0 <_free_r>
 800556e:	e7ba      	b.n	80054e6 <_reclaim_reent+0x16>
 8005570:	680e      	ldr	r6, [r1, #0]
 8005572:	4620      	mov	r0, r4
 8005574:	f000 f814 	bl	80055a0 <_free_r>
 8005578:	4631      	mov	r1, r6
 800557a:	e7ef      	b.n	800555c <_reclaim_reent+0x8c>
 800557c:	2500      	movs	r5, #0
 800557e:	e7ef      	b.n	8005560 <_reclaim_reent+0x90>
 8005580:	bd70      	pop	{r4, r5, r6, pc}
 8005582:	bf00      	nop
 8005584:	20000010 	.word	0x20000010

08005588 <__malloc_lock>:
 8005588:	4801      	ldr	r0, [pc, #4]	; (8005590 <__malloc_lock+0x8>)
 800558a:	f7ff bf7b 	b.w	8005484 <__retarget_lock_acquire_recursive>
 800558e:	bf00      	nop
 8005590:	20004afc 	.word	0x20004afc

08005594 <__malloc_unlock>:
 8005594:	4801      	ldr	r0, [pc, #4]	; (800559c <__malloc_unlock+0x8>)
 8005596:	f7ff bf76 	b.w	8005486 <__retarget_lock_release_recursive>
 800559a:	bf00      	nop
 800559c:	20004afc 	.word	0x20004afc

080055a0 <_free_r>:
 80055a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80055a2:	2900      	cmp	r1, #0
 80055a4:	d044      	beq.n	8005630 <_free_r+0x90>
 80055a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80055aa:	9001      	str	r0, [sp, #4]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	f1a1 0404 	sub.w	r4, r1, #4
 80055b2:	bfb8      	it	lt
 80055b4:	18e4      	addlt	r4, r4, r3
 80055b6:	f7ff ffe7 	bl	8005588 <__malloc_lock>
 80055ba:	4a1e      	ldr	r2, [pc, #120]	; (8005634 <_free_r+0x94>)
 80055bc:	9801      	ldr	r0, [sp, #4]
 80055be:	6813      	ldr	r3, [r2, #0]
 80055c0:	b933      	cbnz	r3, 80055d0 <_free_r+0x30>
 80055c2:	6063      	str	r3, [r4, #4]
 80055c4:	6014      	str	r4, [r2, #0]
 80055c6:	b003      	add	sp, #12
 80055c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80055cc:	f7ff bfe2 	b.w	8005594 <__malloc_unlock>
 80055d0:	42a3      	cmp	r3, r4
 80055d2:	d908      	bls.n	80055e6 <_free_r+0x46>
 80055d4:	6825      	ldr	r5, [r4, #0]
 80055d6:	1961      	adds	r1, r4, r5
 80055d8:	428b      	cmp	r3, r1
 80055da:	bf01      	itttt	eq
 80055dc:	6819      	ldreq	r1, [r3, #0]
 80055de:	685b      	ldreq	r3, [r3, #4]
 80055e0:	1949      	addeq	r1, r1, r5
 80055e2:	6021      	streq	r1, [r4, #0]
 80055e4:	e7ed      	b.n	80055c2 <_free_r+0x22>
 80055e6:	461a      	mov	r2, r3
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	b10b      	cbz	r3, 80055f0 <_free_r+0x50>
 80055ec:	42a3      	cmp	r3, r4
 80055ee:	d9fa      	bls.n	80055e6 <_free_r+0x46>
 80055f0:	6811      	ldr	r1, [r2, #0]
 80055f2:	1855      	adds	r5, r2, r1
 80055f4:	42a5      	cmp	r5, r4
 80055f6:	d10b      	bne.n	8005610 <_free_r+0x70>
 80055f8:	6824      	ldr	r4, [r4, #0]
 80055fa:	4421      	add	r1, r4
 80055fc:	1854      	adds	r4, r2, r1
 80055fe:	42a3      	cmp	r3, r4
 8005600:	6011      	str	r1, [r2, #0]
 8005602:	d1e0      	bne.n	80055c6 <_free_r+0x26>
 8005604:	681c      	ldr	r4, [r3, #0]
 8005606:	685b      	ldr	r3, [r3, #4]
 8005608:	6053      	str	r3, [r2, #4]
 800560a:	4421      	add	r1, r4
 800560c:	6011      	str	r1, [r2, #0]
 800560e:	e7da      	b.n	80055c6 <_free_r+0x26>
 8005610:	d902      	bls.n	8005618 <_free_r+0x78>
 8005612:	230c      	movs	r3, #12
 8005614:	6003      	str	r3, [r0, #0]
 8005616:	e7d6      	b.n	80055c6 <_free_r+0x26>
 8005618:	6825      	ldr	r5, [r4, #0]
 800561a:	1961      	adds	r1, r4, r5
 800561c:	428b      	cmp	r3, r1
 800561e:	bf04      	itt	eq
 8005620:	6819      	ldreq	r1, [r3, #0]
 8005622:	685b      	ldreq	r3, [r3, #4]
 8005624:	6063      	str	r3, [r4, #4]
 8005626:	bf04      	itt	eq
 8005628:	1949      	addeq	r1, r1, r5
 800562a:	6021      	streq	r1, [r4, #0]
 800562c:	6054      	str	r4, [r2, #4]
 800562e:	e7ca      	b.n	80055c6 <_free_r+0x26>
 8005630:	b003      	add	sp, #12
 8005632:	bd30      	pop	{r4, r5, pc}
 8005634:	20004b00 	.word	0x20004b00

08005638 <_init>:
 8005638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800563a:	bf00      	nop
 800563c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800563e:	bc08      	pop	{r3}
 8005640:	469e      	mov	lr, r3
 8005642:	4770      	bx	lr

08005644 <_fini>:
 8005644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005646:	bf00      	nop
 8005648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800564a:	bc08      	pop	{r3}
 800564c:	469e      	mov	lr, r3
 800564e:	4770      	bx	lr
