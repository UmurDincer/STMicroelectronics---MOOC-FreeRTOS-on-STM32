
010Event_Flags.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005180  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000114  08005310  08005310  00015310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005424  08005424  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005424  08005424  00015424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800542c  0800542c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800542c  0800542c  0001542c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005430  08005430  00015430  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005434  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00001e30  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20001ea4  20001ea4  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00015ef8  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002fbb  00000000  00000000  00035f9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001230  00000000  00000000  00038f58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000010f8  00000000  00000000  0003a188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000030ad  00000000  00000000  0003b280  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012ec3  00000000  00000000  0003e32d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d2535  00000000  00000000  000511f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00123725  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004f30  00000000  00000000  00123778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080052f8 	.word	0x080052f8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080052f8 	.word	0x080052f8

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 80004d4:	b480      	push	{r7}
 80004d6:	b083      	sub	sp, #12
 80004d8:	af00      	add	r7, sp, #0
 80004da:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004dc:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004e0:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	; 0xe80
 80004e4:	f003 0301 	and.w	r3, r3, #1
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d013      	beq.n	8000514 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 80004ec:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 80004f0:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	; 0xe00
 80004f4:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 80004f8:	2b00      	cmp	r3, #0
 80004fa:	d00b      	beq.n	8000514 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 80004fc:	e000      	b.n	8000500 <ITM_SendChar+0x2c>
    {
      __NOP();
 80004fe:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8000500:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d0f9      	beq.n	80004fe <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800050a:	f04f 4360 	mov.w	r3, #3758096384	; 0xe0000000
 800050e:	687a      	ldr	r2, [r7, #4]
 8000510:	b2d2      	uxtb	r2, r2
 8000512:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8000514:	687b      	ldr	r3, [r7, #4]
}
 8000516:	4618      	mov	r0, r3
 8000518:	370c      	adds	r7, #12
 800051a:	46bd      	mov	sp, r7
 800051c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000520:	4770      	bx	lr
	...

08000524 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000528:	f000 fa44 	bl	80009b4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800052c:	f000 f83a 	bl	80005a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000530:	f000 f8a0 	bl	8000674 <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000534:	f001 fcbe 	bl	8001eb4 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of Task1 */
  Task1Handle = osThreadNew(StartTask1, NULL, &Task1_attributes);
 8000538:	4a10      	ldr	r2, [pc, #64]	; (800057c <main+0x58>)
 800053a:	2100      	movs	r1, #0
 800053c:	4810      	ldr	r0, [pc, #64]	; (8000580 <main+0x5c>)
 800053e:	f001 fd03 	bl	8001f48 <osThreadNew>
 8000542:	4603      	mov	r3, r0
 8000544:	4a0f      	ldr	r2, [pc, #60]	; (8000584 <main+0x60>)
 8000546:	6013      	str	r3, [r2, #0]

  /* creation of Task2 */
  Task2Handle = osThreadNew(StartTask2, NULL, &Task2_attributes);
 8000548:	4a0f      	ldr	r2, [pc, #60]	; (8000588 <main+0x64>)
 800054a:	2100      	movs	r1, #0
 800054c:	480f      	ldr	r0, [pc, #60]	; (800058c <main+0x68>)
 800054e:	f001 fcfb 	bl	8001f48 <osThreadNew>
 8000552:	4603      	mov	r3, r0
 8000554:	4a0e      	ldr	r2, [pc, #56]	; (8000590 <main+0x6c>)
 8000556:	6013      	str	r3, [r2, #0]

  /* creation of Task3 */
  Task3Handle = osThreadNew(StartTask3, NULL, &Task3_attributes);
 8000558:	4a0e      	ldr	r2, [pc, #56]	; (8000594 <main+0x70>)
 800055a:	2100      	movs	r1, #0
 800055c:	480e      	ldr	r0, [pc, #56]	; (8000598 <main+0x74>)
 800055e:	f001 fcf3 	bl	8001f48 <osThreadNew>
 8000562:	4603      	mov	r3, r0
 8000564:	4a0d      	ldr	r2, [pc, #52]	; (800059c <main+0x78>)
 8000566:	6013      	str	r3, [r2, #0]
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  EventGroup1 = osEventFlagsNew(NULL);
 8000568:	2000      	movs	r0, #0
 800056a:	f001 fd9a 	bl	80020a2 <osEventFlagsNew>
 800056e:	4603      	mov	r3, r0
 8000570:	4a0b      	ldr	r2, [pc, #44]	; (80005a0 <main+0x7c>)
 8000572:	6013      	str	r3, [r2, #0]
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000574:	f001 fcc2 	bl	8001efc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000578:	e7fe      	b.n	8000578 <main+0x54>
 800057a:	bf00      	nop
 800057c:	08005340 	.word	0x08005340
 8000580:	08000745 	.word	0x08000745
 8000584:	20000090 	.word	0x20000090
 8000588:	08005364 	.word	0x08005364
 800058c:	08000769 	.word	0x08000769
 8000590:	20000094 	.word	0x20000094
 8000594:	08005388 	.word	0x08005388
 8000598:	08000791 	.word	0x08000791
 800059c:	20000098 	.word	0x20000098
 80005a0:	2000009c 	.word	0x2000009c

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b094      	sub	sp, #80	; 0x50
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0320 	add.w	r3, r7, #32
 80005ae:	2230      	movs	r2, #48	; 0x30
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f004 fdd6 	bl	8005164 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	f107 030c 	add.w	r3, r7, #12
 80005bc:	2200      	movs	r2, #0
 80005be:	601a      	str	r2, [r3, #0]
 80005c0:	605a      	str	r2, [r3, #4]
 80005c2:	609a      	str	r2, [r3, #8]
 80005c4:	60da      	str	r2, [r3, #12]
 80005c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005c8:	2300      	movs	r3, #0
 80005ca:	60bb      	str	r3, [r7, #8]
 80005cc:	4b27      	ldr	r3, [pc, #156]	; (800066c <SystemClock_Config+0xc8>)
 80005ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005d0:	4a26      	ldr	r2, [pc, #152]	; (800066c <SystemClock_Config+0xc8>)
 80005d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005d6:	6413      	str	r3, [r2, #64]	; 0x40
 80005d8:	4b24      	ldr	r3, [pc, #144]	; (800066c <SystemClock_Config+0xc8>)
 80005da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005e0:	60bb      	str	r3, [r7, #8]
 80005e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005e4:	2300      	movs	r3, #0
 80005e6:	607b      	str	r3, [r7, #4]
 80005e8:	4b21      	ldr	r3, [pc, #132]	; (8000670 <SystemClock_Config+0xcc>)
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	4a20      	ldr	r2, [pc, #128]	; (8000670 <SystemClock_Config+0xcc>)
 80005ee:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005f2:	6013      	str	r3, [r2, #0]
 80005f4:	4b1e      	ldr	r3, [pc, #120]	; (8000670 <SystemClock_Config+0xcc>)
 80005f6:	681b      	ldr	r3, [r3, #0]
 80005f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005fc:	607b      	str	r3, [r7, #4]
 80005fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000600:	2302      	movs	r3, #2
 8000602:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000604:	2301      	movs	r3, #1
 8000606:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000608:	2310      	movs	r3, #16
 800060a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800060c:	2302      	movs	r3, #2
 800060e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000610:	2300      	movs	r3, #0
 8000612:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000614:	2308      	movs	r3, #8
 8000616:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000618:	2340      	movs	r3, #64	; 0x40
 800061a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000620:	2307      	movs	r3, #7
 8000622:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000624:	f107 0320 	add.w	r3, r7, #32
 8000628:	4618      	mov	r0, r3
 800062a:	f000 fc9b 	bl	8000f64 <HAL_RCC_OscConfig>
 800062e:	4603      	mov	r3, r0
 8000630:	2b00      	cmp	r3, #0
 8000632:	d001      	beq.n	8000638 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000634:	f000 f8d0 	bl	80007d8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000638:	230f      	movs	r3, #15
 800063a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800063c:	2302      	movs	r3, #2
 800063e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV16;
 8000640:	23b0      	movs	r3, #176	; 0xb0
 8000642:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000648:	2300      	movs	r3, #0
 800064a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800064c:	f107 030c 	add.w	r3, r7, #12
 8000650:	2100      	movs	r1, #0
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fefe 	bl	8001454 <HAL_RCC_ClockConfig>
 8000658:	4603      	mov	r3, r0
 800065a:	2b00      	cmp	r3, #0
 800065c:	d001      	beq.n	8000662 <SystemClock_Config+0xbe>
  {
    Error_Handler();
 800065e:	f000 f8bb 	bl	80007d8 <Error_Handler>
  }
}
 8000662:	bf00      	nop
 8000664:	3750      	adds	r7, #80	; 0x50
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
 800066a:	bf00      	nop
 800066c:	40023800 	.word	0x40023800
 8000670:	40007000 	.word	0x40007000

08000674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	b088      	sub	sp, #32
 8000678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800067a:	f107 030c 	add.w	r3, r7, #12
 800067e:	2200      	movs	r2, #0
 8000680:	601a      	str	r2, [r3, #0]
 8000682:	605a      	str	r2, [r3, #4]
 8000684:	609a      	str	r2, [r3, #8]
 8000686:	60da      	str	r2, [r3, #12]
 8000688:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800068a:	2300      	movs	r3, #0
 800068c:	60bb      	str	r3, [r7, #8]
 800068e:	4b19      	ldr	r3, [pc, #100]	; (80006f4 <MX_GPIO_Init+0x80>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000692:	4a18      	ldr	r2, [pc, #96]	; (80006f4 <MX_GPIO_Init+0x80>)
 8000694:	f043 0301 	orr.w	r3, r3, #1
 8000698:	6313      	str	r3, [r2, #48]	; 0x30
 800069a:	4b16      	ldr	r3, [pc, #88]	; (80006f4 <MX_GPIO_Init+0x80>)
 800069c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800069e:	f003 0301 	and.w	r3, r3, #1
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <MX_GPIO_Init+0x80>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a11      	ldr	r2, [pc, #68]	; (80006f4 <MX_GPIO_Init+0x80>)
 80006b0:	f043 0302 	orr.w	r3, r3, #2
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0f      	ldr	r3, [pc, #60]	; (80006f4 <MX_GPIO_Init+0x80>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0302 	and.w	r3, r3, #2
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : Button_Pin */
  GPIO_InitStruct.Pin = Button_Pin;
 80006c2:	2301      	movs	r3, #1
 80006c4:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006c6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006cc:	2300      	movs	r3, #0
 80006ce:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(Button_GPIO_Port, &GPIO_InitStruct);
 80006d0:	f107 030c 	add.w	r3, r7, #12
 80006d4:	4619      	mov	r1, r3
 80006d6:	4808      	ldr	r0, [pc, #32]	; (80006f8 <MX_GPIO_Init+0x84>)
 80006d8:	f000 fa90 	bl	8000bfc <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80006dc:	2200      	movs	r2, #0
 80006de:	2105      	movs	r1, #5
 80006e0:	2006      	movs	r0, #6
 80006e2:	f000 fa61 	bl	8000ba8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80006e6:	2006      	movs	r0, #6
 80006e8:	f000 fa7a 	bl	8000be0 <HAL_NVIC_EnableIRQ>

}
 80006ec:	bf00      	nop
 80006ee:	3720      	adds	r7, #32
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	40023800 	.word	0x40023800
 80006f8:	40020000 	.word	0x40020000

080006fc <task_action>:

/* USER CODE BEGIN 4 */
void task_action(char message)
{
 80006fc:	b580      	push	{r7, lr}
 80006fe:	b082      	sub	sp, #8
 8000700:	af00      	add	r7, sp, #0
 8000702:	4603      	mov	r3, r0
 8000704:	71fb      	strb	r3, [r7, #7]
	ITM_SendChar(message);
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff fee3 	bl	80004d4 <ITM_SendChar>
	ITM_SendChar('\n');
 800070e:	200a      	movs	r0, #10
 8000710:	f7ff fee0 	bl	80004d4 <ITM_SendChar>
}
 8000714:	bf00      	nop
 8000716:	3708      	adds	r7, #8
 8000718:	46bd      	mov	sp, r7
 800071a:	bd80      	pop	{r7, pc}

0800071c <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
 8000722:	4603      	mov	r3, r0
 8000724:	80fb      	strh	r3, [r7, #6]
	osEventFlagsSet(EventGroup1, 0x50);
 8000726:	4b06      	ldr	r3, [pc, #24]	; (8000740 <HAL_GPIO_EXTI_Callback+0x24>)
 8000728:	681b      	ldr	r3, [r3, #0]
 800072a:	2150      	movs	r1, #80	; 0x50
 800072c:	4618      	mov	r0, r3
 800072e:	f001 fcf7 	bl	8002120 <osEventFlagsSet>
	task_action('!');
 8000732:	2021      	movs	r0, #33	; 0x21
 8000734:	f7ff ffe2 	bl	80006fc <task_action>

}
 8000738:	bf00      	nop
 800073a:	3708      	adds	r7, #8
 800073c:	46bd      	mov	sp, r7
 800073e:	bd80      	pop	{r7, pc}
 8000740:	2000009c 	.word	0x2000009c

08000744 <StartTask1>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartTask1 */
void StartTask1(void *argument)
{
 8000744:	b580      	push	{r7, lr}
 8000746:	b082      	sub	sp, #8
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 800074c:	4b05      	ldr	r3, [pc, #20]	; (8000764 <StartTask1+0x20>)
 800074e:	6818      	ldr	r0, [r3, #0]
 8000750:	f04f 33ff 	mov.w	r3, #4294967295
 8000754:	2201      	movs	r2, #1
 8000756:	2151      	movs	r1, #81	; 0x51
 8000758:	f001 fd26 	bl	80021a8 <osEventFlagsWait>
	task_action('1');
 800075c:	2031      	movs	r0, #49	; 0x31
 800075e:	f7ff ffcd 	bl	80006fc <task_action>
	osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 8000762:	e7f3      	b.n	800074c <StartTask1+0x8>
 8000764:	2000009c 	.word	0x2000009c

08000768 <StartTask2>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask2 */
void StartTask2(void *argument)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b082      	sub	sp, #8
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask2 */
  /* Infinite loop */
  for(;;)
  {
	osEventFlagsSet(EventGroup1, 1);
 8000770:	4b06      	ldr	r3, [pc, #24]	; (800078c <StartTask2+0x24>)
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2101      	movs	r1, #1
 8000776:	4618      	mov	r0, r3
 8000778:	f001 fcd2 	bl	8002120 <osEventFlagsSet>
	task_action('2');
 800077c:	2032      	movs	r0, #50	; 0x32
 800077e:	f7ff ffbd 	bl	80006fc <task_action>
	osDelay(3000);
 8000782:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8000786:	f001 fc71 	bl	800206c <osDelay>
	osEventFlagsSet(EventGroup1, 1);
 800078a:	e7f1      	b.n	8000770 <StartTask2+0x8>
 800078c:	2000009c 	.word	0x2000009c

08000790 <StartTask3>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTask3 */
void StartTask3(void *argument)
{
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTask3 */
  /* Infinite loop */
  for(;;)
  {
	osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 8000798:	4b05      	ldr	r3, [pc, #20]	; (80007b0 <StartTask3+0x20>)
 800079a:	6818      	ldr	r0, [r3, #0]
 800079c:	f04f 33ff 	mov.w	r3, #4294967295
 80007a0:	2201      	movs	r2, #1
 80007a2:	2151      	movs	r1, #81	; 0x51
 80007a4:	f001 fd00 	bl	80021a8 <osEventFlagsWait>
	task_action('3');
 80007a8:	2033      	movs	r0, #51	; 0x33
 80007aa:	f7ff ffa7 	bl	80006fc <task_action>
	osEventFlagsWait(EventGroup1, 0x51, osFlagsWaitAll, osWaitForever);
 80007ae:	e7f3      	b.n	8000798 <StartTask3+0x8>
 80007b0:	2000009c 	.word	0x2000009c

080007b4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007b4:	b580      	push	{r7, lr}
 80007b6:	b082      	sub	sp, #8
 80007b8:	af00      	add	r7, sp, #0
 80007ba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007bc:	687b      	ldr	r3, [r7, #4]
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	4a04      	ldr	r2, [pc, #16]	; (80007d4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007c2:	4293      	cmp	r3, r2
 80007c4:	d101      	bne.n	80007ca <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007c6:	f000 f917 	bl	80009f8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007ca:	bf00      	nop
 80007cc:	3708      	adds	r7, #8
 80007ce:	46bd      	mov	sp, r7
 80007d0:	bd80      	pop	{r7, pc}
 80007d2:	bf00      	nop
 80007d4:	40001000 	.word	0x40001000

080007d8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007dc:	b672      	cpsid	i
}
 80007de:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007e0:	e7fe      	b.n	80007e0 <Error_Handler+0x8>
	...

080007e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80007ea:	2300      	movs	r3, #0
 80007ec:	607b      	str	r3, [r7, #4]
 80007ee:	4b12      	ldr	r3, [pc, #72]	; (8000838 <HAL_MspInit+0x54>)
 80007f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007f2:	4a11      	ldr	r2, [pc, #68]	; (8000838 <HAL_MspInit+0x54>)
 80007f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80007f8:	6453      	str	r3, [r2, #68]	; 0x44
 80007fa:	4b0f      	ldr	r3, [pc, #60]	; (8000838 <HAL_MspInit+0x54>)
 80007fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000802:	607b      	str	r3, [r7, #4]
 8000804:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	603b      	str	r3, [r7, #0]
 800080a:	4b0b      	ldr	r3, [pc, #44]	; (8000838 <HAL_MspInit+0x54>)
 800080c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800080e:	4a0a      	ldr	r2, [pc, #40]	; (8000838 <HAL_MspInit+0x54>)
 8000810:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000814:	6413      	str	r3, [r2, #64]	; 0x40
 8000816:	4b08      	ldr	r3, [pc, #32]	; (8000838 <HAL_MspInit+0x54>)
 8000818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800081a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800081e:	603b      	str	r3, [r7, #0]
 8000820:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000822:	2200      	movs	r2, #0
 8000824:	210f      	movs	r1, #15
 8000826:	f06f 0001 	mvn.w	r0, #1
 800082a:	f000 f9bd 	bl	8000ba8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800082e:	bf00      	nop
 8000830:	3708      	adds	r7, #8
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800

0800083c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b08c      	sub	sp, #48	; 0x30
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000848:	2300      	movs	r3, #0
 800084a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 800084c:	2200      	movs	r2, #0
 800084e:	6879      	ldr	r1, [r7, #4]
 8000850:	2036      	movs	r0, #54	; 0x36
 8000852:	f000 f9a9 	bl	8000ba8 <HAL_NVIC_SetPriority>

  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000856:	2036      	movs	r0, #54	; 0x36
 8000858:	f000 f9c2 	bl	8000be0 <HAL_NVIC_EnableIRQ>

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800085c:	2300      	movs	r3, #0
 800085e:	60fb      	str	r3, [r7, #12]
 8000860:	4b1e      	ldr	r3, [pc, #120]	; (80008dc <HAL_InitTick+0xa0>)
 8000862:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000864:	4a1d      	ldr	r2, [pc, #116]	; (80008dc <HAL_InitTick+0xa0>)
 8000866:	f043 0310 	orr.w	r3, r3, #16
 800086a:	6413      	str	r3, [r2, #64]	; 0x40
 800086c:	4b1b      	ldr	r3, [pc, #108]	; (80008dc <HAL_InitTick+0xa0>)
 800086e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000870:	f003 0310 	and.w	r3, r3, #16
 8000874:	60fb      	str	r3, [r7, #12]
 8000876:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000878:	f107 0210 	add.w	r2, r7, #16
 800087c:	f107 0314 	add.w	r3, r7, #20
 8000880:	4611      	mov	r1, r2
 8000882:	4618      	mov	r0, r3
 8000884:	f000 fff2 	bl	800186c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000888:	f000 ffdc 	bl	8001844 <HAL_RCC_GetPCLK1Freq>
 800088c:	62f8      	str	r0, [r7, #44]	; 0x2c
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800088e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000890:	4a13      	ldr	r2, [pc, #76]	; (80008e0 <HAL_InitTick+0xa4>)
 8000892:	fba2 2303 	umull	r2, r3, r2, r3
 8000896:	0c9b      	lsrs	r3, r3, #18
 8000898:	3b01      	subs	r3, #1
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <HAL_InitTick+0xa8>)
 800089e:	4a12      	ldr	r2, [pc, #72]	; (80008e8 <HAL_InitTick+0xac>)
 80008a0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80008a2:	4b10      	ldr	r3, [pc, #64]	; (80008e4 <HAL_InitTick+0xa8>)
 80008a4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80008a8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80008aa:	4a0e      	ldr	r2, [pc, #56]	; (80008e4 <HAL_InitTick+0xa8>)
 80008ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80008ae:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008b0:	4b0c      	ldr	r3, [pc, #48]	; (80008e4 <HAL_InitTick+0xa8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008b6:	4b0b      	ldr	r3, [pc, #44]	; (80008e4 <HAL_InitTick+0xa8>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	609a      	str	r2, [r3, #8]

  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 80008bc:	4809      	ldr	r0, [pc, #36]	; (80008e4 <HAL_InitTick+0xa8>)
 80008be:	f001 f807 	bl	80018d0 <HAL_TIM_Base_Init>
 80008c2:	4603      	mov	r3, r0
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d104      	bne.n	80008d2 <HAL_InitTick+0x96>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 80008c8:	4806      	ldr	r0, [pc, #24]	; (80008e4 <HAL_InitTick+0xa8>)
 80008ca:	f001 f85b 	bl	8001984 <HAL_TIM_Base_Start_IT>
 80008ce:	4603      	mov	r3, r0
 80008d0:	e000      	b.n	80008d4 <HAL_InitTick+0x98>
  }

  /* Return function status */
  return HAL_ERROR;
 80008d2:	2301      	movs	r3, #1
}
 80008d4:	4618      	mov	r0, r3
 80008d6:	3730      	adds	r7, #48	; 0x30
 80008d8:	46bd      	mov	sp, r7
 80008da:	bd80      	pop	{r7, pc}
 80008dc:	40023800 	.word	0x40023800
 80008e0:	431bde83 	.word	0x431bde83
 80008e4:	200000a0 	.word	0x200000a0
 80008e8:	40001000 	.word	0x40001000

080008ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80008f0:	e7fe      	b.n	80008f0 <NMI_Handler+0x4>

080008f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80008f2:	b480      	push	{r7}
 80008f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80008f6:	e7fe      	b.n	80008f6 <HardFault_Handler+0x4>

080008f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80008fc:	e7fe      	b.n	80008fc <MemManage_Handler+0x4>

080008fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80008fe:	b480      	push	{r7}
 8000900:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000902:	e7fe      	b.n	8000902 <BusFault_Handler+0x4>

08000904 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000904:	b480      	push	{r7}
 8000906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000908:	e7fe      	b.n	8000908 <UsageFault_Handler+0x4>

0800090a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800090a:	b480      	push	{r7}
 800090c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800090e:	bf00      	nop
 8000910:	46bd      	mov	sp, r7
 8000912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000916:	4770      	bx	lr

08000918 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000918:	b580      	push	{r7, lr}
 800091a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(Button_Pin);
 800091c:	2001      	movs	r0, #1
 800091e:	f000 fb09 	bl	8000f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000922:	bf00      	nop
 8000924:	bd80      	pop	{r7, pc}
	...

08000928 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 800092c:	4802      	ldr	r0, [pc, #8]	; (8000938 <TIM6_DAC_IRQHandler+0x10>)
 800092e:	f001 f899 	bl	8001a64 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	200000a0 	.word	0x200000a0

0800093c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000940:	4b06      	ldr	r3, [pc, #24]	; (800095c <SystemInit+0x20>)
 8000942:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000946:	4a05      	ldr	r2, [pc, #20]	; (800095c <SystemInit+0x20>)
 8000948:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800094c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000950:	bf00      	nop
 8000952:	46bd      	mov	sp, r7
 8000954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000958:	4770      	bx	lr
 800095a:	bf00      	nop
 800095c:	e000ed00 	.word	0xe000ed00

08000960 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000960:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000998 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000964:	480d      	ldr	r0, [pc, #52]	; (800099c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000966:	490e      	ldr	r1, [pc, #56]	; (80009a0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000968:	4a0e      	ldr	r2, [pc, #56]	; (80009a4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800096a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800096c:	e002      	b.n	8000974 <LoopCopyDataInit>

0800096e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800096e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000970:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000972:	3304      	adds	r3, #4

08000974 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000974:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000976:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000978:	d3f9      	bcc.n	800096e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800097a:	4a0b      	ldr	r2, [pc, #44]	; (80009a8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800097c:	4c0b      	ldr	r4, [pc, #44]	; (80009ac <LoopFillZerobss+0x26>)
  movs r3, #0
 800097e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000980:	e001      	b.n	8000986 <LoopFillZerobss>

08000982 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000982:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000984:	3204      	adds	r2, #4

08000986 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000986:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000988:	d3fb      	bcc.n	8000982 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800098a:	f7ff ffd7 	bl	800093c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800098e:	f004 fbb5 	bl	80050fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000992:	f7ff fdc7 	bl	8000524 <main>
  bx  lr    
 8000996:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000998:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800099c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009a0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009a4:	08005434 	.word	0x08005434
  ldr r2, =_sbss
 80009a8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009ac:	20001ea4 	.word	0x20001ea4

080009b0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80009b0:	e7fe      	b.n	80009b0 <ADC_IRQHandler>
	...

080009b4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80009b8:	4b0e      	ldr	r3, [pc, #56]	; (80009f4 <HAL_Init+0x40>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	4a0d      	ldr	r2, [pc, #52]	; (80009f4 <HAL_Init+0x40>)
 80009be:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80009c2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80009c4:	4b0b      	ldr	r3, [pc, #44]	; (80009f4 <HAL_Init+0x40>)
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4a0a      	ldr	r2, [pc, #40]	; (80009f4 <HAL_Init+0x40>)
 80009ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80009ce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80009d0:	4b08      	ldr	r3, [pc, #32]	; (80009f4 <HAL_Init+0x40>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	4a07      	ldr	r2, [pc, #28]	; (80009f4 <HAL_Init+0x40>)
 80009d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80009da:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009dc:	2003      	movs	r0, #3
 80009de:	f000 f8d8 	bl	8000b92 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80009e2:	200f      	movs	r0, #15
 80009e4:	f7ff ff2a 	bl	800083c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009e8:	f7ff fefc 	bl	80007e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009ec:	2300      	movs	r3, #0
}
 80009ee:	4618      	mov	r0, r3
 80009f0:	bd80      	pop	{r7, pc}
 80009f2:	bf00      	nop
 80009f4:	40023c00 	.word	0x40023c00

080009f8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80009f8:	b480      	push	{r7}
 80009fa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80009fc:	4b06      	ldr	r3, [pc, #24]	; (8000a18 <HAL_IncTick+0x20>)
 80009fe:	781b      	ldrb	r3, [r3, #0]
 8000a00:	461a      	mov	r2, r3
 8000a02:	4b06      	ldr	r3, [pc, #24]	; (8000a1c <HAL_IncTick+0x24>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	4413      	add	r3, r2
 8000a08:	4a04      	ldr	r2, [pc, #16]	; (8000a1c <HAL_IncTick+0x24>)
 8000a0a:	6013      	str	r3, [r2, #0]
}
 8000a0c:	bf00      	nop
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop
 8000a18:	20000008 	.word	0x20000008
 8000a1c:	200000e8 	.word	0x200000e8

08000a20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  return uwTick;
 8000a24:	4b03      	ldr	r3, [pc, #12]	; (8000a34 <HAL_GetTick+0x14>)
 8000a26:	681b      	ldr	r3, [r3, #0]
}
 8000a28:	4618      	mov	r0, r3
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a30:	4770      	bx	lr
 8000a32:	bf00      	nop
 8000a34:	200000e8 	.word	0x200000e8

08000a38 <__NVIC_SetPriorityGrouping>:
{
 8000a38:	b480      	push	{r7}
 8000a3a:	b085      	sub	sp, #20
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	f003 0307 	and.w	r3, r3, #7
 8000a46:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a48:	4b0c      	ldr	r3, [pc, #48]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a4a:	68db      	ldr	r3, [r3, #12]
 8000a4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a4e:	68ba      	ldr	r2, [r7, #8]
 8000a50:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a54:	4013      	ands	r3, r2
 8000a56:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a5c:	68bb      	ldr	r3, [r7, #8]
 8000a5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a60:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a64:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a6a:	4a04      	ldr	r2, [pc, #16]	; (8000a7c <__NVIC_SetPriorityGrouping+0x44>)
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	60d3      	str	r3, [r2, #12]
}
 8000a70:	bf00      	nop
 8000a72:	3714      	adds	r7, #20
 8000a74:	46bd      	mov	sp, r7
 8000a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a7a:	4770      	bx	lr
 8000a7c:	e000ed00 	.word	0xe000ed00

08000a80 <__NVIC_GetPriorityGrouping>:
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a84:	4b04      	ldr	r3, [pc, #16]	; (8000a98 <__NVIC_GetPriorityGrouping+0x18>)
 8000a86:	68db      	ldr	r3, [r3, #12]
 8000a88:	0a1b      	lsrs	r3, r3, #8
 8000a8a:	f003 0307 	and.w	r3, r3, #7
}
 8000a8e:	4618      	mov	r0, r3
 8000a90:	46bd      	mov	sp, r7
 8000a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a96:	4770      	bx	lr
 8000a98:	e000ed00 	.word	0xe000ed00

08000a9c <__NVIC_EnableIRQ>:
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	b083      	sub	sp, #12
 8000aa0:	af00      	add	r7, sp, #0
 8000aa2:	4603      	mov	r3, r0
 8000aa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000aa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	db0b      	blt.n	8000ac6 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000aae:	79fb      	ldrb	r3, [r7, #7]
 8000ab0:	f003 021f 	and.w	r2, r3, #31
 8000ab4:	4907      	ldr	r1, [pc, #28]	; (8000ad4 <__NVIC_EnableIRQ+0x38>)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	095b      	lsrs	r3, r3, #5
 8000abc:	2001      	movs	r0, #1
 8000abe:	fa00 f202 	lsl.w	r2, r0, r2
 8000ac2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	e000e100 	.word	0xe000e100

08000ad8 <__NVIC_SetPriority>:
{
 8000ad8:	b480      	push	{r7}
 8000ada:	b083      	sub	sp, #12
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	4603      	mov	r3, r0
 8000ae0:	6039      	str	r1, [r7, #0]
 8000ae2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ae4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	db0a      	blt.n	8000b02 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000aec:	683b      	ldr	r3, [r7, #0]
 8000aee:	b2da      	uxtb	r2, r3
 8000af0:	490c      	ldr	r1, [pc, #48]	; (8000b24 <__NVIC_SetPriority+0x4c>)
 8000af2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af6:	0112      	lsls	r2, r2, #4
 8000af8:	b2d2      	uxtb	r2, r2
 8000afa:	440b      	add	r3, r1
 8000afc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8000b00:	e00a      	b.n	8000b18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b02:	683b      	ldr	r3, [r7, #0]
 8000b04:	b2da      	uxtb	r2, r3
 8000b06:	4908      	ldr	r1, [pc, #32]	; (8000b28 <__NVIC_SetPriority+0x50>)
 8000b08:	79fb      	ldrb	r3, [r7, #7]
 8000b0a:	f003 030f 	and.w	r3, r3, #15
 8000b0e:	3b04      	subs	r3, #4
 8000b10:	0112      	lsls	r2, r2, #4
 8000b12:	b2d2      	uxtb	r2, r2
 8000b14:	440b      	add	r3, r1
 8000b16:	761a      	strb	r2, [r3, #24]
}
 8000b18:	bf00      	nop
 8000b1a:	370c      	adds	r7, #12
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000e100 	.word	0xe000e100
 8000b28:	e000ed00 	.word	0xe000ed00

08000b2c <NVIC_EncodePriority>:
{
 8000b2c:	b480      	push	{r7}
 8000b2e:	b089      	sub	sp, #36	; 0x24
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	60f8      	str	r0, [r7, #12]
 8000b34:	60b9      	str	r1, [r7, #8]
 8000b36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b38:	68fb      	ldr	r3, [r7, #12]
 8000b3a:	f003 0307 	and.w	r3, r3, #7
 8000b3e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b40:	69fb      	ldr	r3, [r7, #28]
 8000b42:	f1c3 0307 	rsb	r3, r3, #7
 8000b46:	2b04      	cmp	r3, #4
 8000b48:	bf28      	it	cs
 8000b4a:	2304      	movcs	r3, #4
 8000b4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b4e:	69fb      	ldr	r3, [r7, #28]
 8000b50:	3304      	adds	r3, #4
 8000b52:	2b06      	cmp	r3, #6
 8000b54:	d902      	bls.n	8000b5c <NVIC_EncodePriority+0x30>
 8000b56:	69fb      	ldr	r3, [r7, #28]
 8000b58:	3b03      	subs	r3, #3
 8000b5a:	e000      	b.n	8000b5e <NVIC_EncodePriority+0x32>
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b60:	f04f 32ff 	mov.w	r2, #4294967295
 8000b64:	69bb      	ldr	r3, [r7, #24]
 8000b66:	fa02 f303 	lsl.w	r3, r2, r3
 8000b6a:	43da      	mvns	r2, r3
 8000b6c:	68bb      	ldr	r3, [r7, #8]
 8000b6e:	401a      	ands	r2, r3
 8000b70:	697b      	ldr	r3, [r7, #20]
 8000b72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b74:	f04f 31ff 	mov.w	r1, #4294967295
 8000b78:	697b      	ldr	r3, [r7, #20]
 8000b7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b7e:	43d9      	mvns	r1, r3
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b84:	4313      	orrs	r3, r2
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3724      	adds	r7, #36	; 0x24
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b90:	4770      	bx	lr

08000b92 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b92:	b580      	push	{r7, lr}
 8000b94:	b082      	sub	sp, #8
 8000b96:	af00      	add	r7, sp, #0
 8000b98:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b9a:	6878      	ldr	r0, [r7, #4]
 8000b9c:	f7ff ff4c 	bl	8000a38 <__NVIC_SetPriorityGrouping>
}
 8000ba0:	bf00      	nop
 8000ba2:	3708      	adds	r7, #8
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	bd80      	pop	{r7, pc}

08000ba8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	4603      	mov	r3, r0
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000bb6:	2300      	movs	r3, #0
 8000bb8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000bba:	f7ff ff61 	bl	8000a80 <__NVIC_GetPriorityGrouping>
 8000bbe:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bc0:	687a      	ldr	r2, [r7, #4]
 8000bc2:	68b9      	ldr	r1, [r7, #8]
 8000bc4:	6978      	ldr	r0, [r7, #20]
 8000bc6:	f7ff ffb1 	bl	8000b2c <NVIC_EncodePriority>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000bd0:	4611      	mov	r1, r2
 8000bd2:	4618      	mov	r0, r3
 8000bd4:	f7ff ff80 	bl	8000ad8 <__NVIC_SetPriority>
}
 8000bd8:	bf00      	nop
 8000bda:	3718      	adds	r7, #24
 8000bdc:	46bd      	mov	sp, r7
 8000bde:	bd80      	pop	{r7, pc}

08000be0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	b082      	sub	sp, #8
 8000be4:	af00      	add	r7, sp, #0
 8000be6:	4603      	mov	r3, r0
 8000be8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bee:	4618      	mov	r0, r3
 8000bf0:	f7ff ff54 	bl	8000a9c <__NVIC_EnableIRQ>
}
 8000bf4:	bf00      	nop
 8000bf6:	3708      	adds	r7, #8
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	bd80      	pop	{r7, pc}

08000bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000bfc:	b480      	push	{r7}
 8000bfe:	b089      	sub	sp, #36	; 0x24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000c06:	2300      	movs	r3, #0
 8000c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000c0a:	2300      	movs	r3, #0
 8000c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000c0e:	2300      	movs	r3, #0
 8000c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000c12:	2300      	movs	r3, #0
 8000c14:	61fb      	str	r3, [r7, #28]
 8000c16:	e16b      	b.n	8000ef0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000c18:	2201      	movs	r2, #1
 8000c1a:	69fb      	ldr	r3, [r7, #28]
 8000c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	681b      	ldr	r3, [r3, #0]
 8000c26:	697a      	ldr	r2, [r7, #20]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000c2c:	693a      	ldr	r2, [r7, #16]
 8000c2e:	697b      	ldr	r3, [r7, #20]
 8000c30:	429a      	cmp	r2, r3
 8000c32:	f040 815a 	bne.w	8000eea <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	f003 0303 	and.w	r3, r3, #3
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d005      	beq.n	8000c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c42:	683b      	ldr	r3, [r7, #0]
 8000c44:	685b      	ldr	r3, [r3, #4]
 8000c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d130      	bne.n	8000cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000c4e:	687b      	ldr	r3, [r7, #4]
 8000c50:	689b      	ldr	r3, [r3, #8]
 8000c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000c54:	69fb      	ldr	r3, [r7, #28]
 8000c56:	005b      	lsls	r3, r3, #1
 8000c58:	2203      	movs	r2, #3
 8000c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5e:	43db      	mvns	r3, r3
 8000c60:	69ba      	ldr	r2, [r7, #24]
 8000c62:	4013      	ands	r3, r2
 8000c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000c66:	683b      	ldr	r3, [r7, #0]
 8000c68:	68da      	ldr	r2, [r3, #12]
 8000c6a:	69fb      	ldr	r3, [r7, #28]
 8000c6c:	005b      	lsls	r3, r3, #1
 8000c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c72:	69ba      	ldr	r2, [r7, #24]
 8000c74:	4313      	orrs	r3, r2
 8000c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000c78:	687b      	ldr	r3, [r7, #4]
 8000c7a:	69ba      	ldr	r2, [r7, #24]
 8000c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	685b      	ldr	r3, [r3, #4]
 8000c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000c84:	2201      	movs	r2, #1
 8000c86:	69fb      	ldr	r3, [r7, #28]
 8000c88:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8c:	43db      	mvns	r3, r3
 8000c8e:	69ba      	ldr	r2, [r7, #24]
 8000c90:	4013      	ands	r3, r2
 8000c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c94:	683b      	ldr	r3, [r7, #0]
 8000c96:	685b      	ldr	r3, [r3, #4]
 8000c98:	091b      	lsrs	r3, r3, #4
 8000c9a:	f003 0201 	and.w	r2, r3, #1
 8000c9e:	69fb      	ldr	r3, [r7, #28]
 8000ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca4:	69ba      	ldr	r2, [r7, #24]
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	69ba      	ldr	r2, [r7, #24]
 8000cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cb0:	683b      	ldr	r3, [r7, #0]
 8000cb2:	685b      	ldr	r3, [r3, #4]
 8000cb4:	f003 0303 	and.w	r3, r3, #3
 8000cb8:	2b03      	cmp	r3, #3
 8000cba:	d017      	beq.n	8000cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	68db      	ldr	r3, [r3, #12]
 8000cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000cc2:	69fb      	ldr	r3, [r7, #28]
 8000cc4:	005b      	lsls	r3, r3, #1
 8000cc6:	2203      	movs	r2, #3
 8000cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ccc:	43db      	mvns	r3, r3
 8000cce:	69ba      	ldr	r2, [r7, #24]
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd4:	683b      	ldr	r3, [r7, #0]
 8000cd6:	689a      	ldr	r2, [r3, #8]
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	005b      	lsls	r3, r3, #1
 8000cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ce0:	69ba      	ldr	r2, [r7, #24]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	69ba      	ldr	r2, [r7, #24]
 8000cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cec:	683b      	ldr	r3, [r7, #0]
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	f003 0303 	and.w	r3, r3, #3
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d123      	bne.n	8000d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000cf8:	69fb      	ldr	r3, [r7, #28]
 8000cfa:	08da      	lsrs	r2, r3, #3
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	3208      	adds	r2, #8
 8000d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	f003 0307 	and.w	r3, r3, #7
 8000d0c:	009b      	lsls	r3, r3, #2
 8000d0e:	220f      	movs	r2, #15
 8000d10:	fa02 f303 	lsl.w	r3, r2, r3
 8000d14:	43db      	mvns	r3, r3
 8000d16:	69ba      	ldr	r2, [r7, #24]
 8000d18:	4013      	ands	r3, r2
 8000d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000d1c:	683b      	ldr	r3, [r7, #0]
 8000d1e:	691a      	ldr	r2, [r3, #16]
 8000d20:	69fb      	ldr	r3, [r7, #28]
 8000d22:	f003 0307 	and.w	r3, r3, #7
 8000d26:	009b      	lsls	r3, r3, #2
 8000d28:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2c:	69ba      	ldr	r2, [r7, #24]
 8000d2e:	4313      	orrs	r3, r2
 8000d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000d32:	69fb      	ldr	r3, [r7, #28]
 8000d34:	08da      	lsrs	r2, r3, #3
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	3208      	adds	r2, #8
 8000d3a:	69b9      	ldr	r1, [r7, #24]
 8000d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000d46:	69fb      	ldr	r3, [r7, #28]
 8000d48:	005b      	lsls	r3, r3, #1
 8000d4a:	2203      	movs	r2, #3
 8000d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d50:	43db      	mvns	r3, r3
 8000d52:	69ba      	ldr	r2, [r7, #24]
 8000d54:	4013      	ands	r3, r2
 8000d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000d58:	683b      	ldr	r3, [r7, #0]
 8000d5a:	685b      	ldr	r3, [r3, #4]
 8000d5c:	f003 0203 	and.w	r2, r3, #3
 8000d60:	69fb      	ldr	r3, [r7, #28]
 8000d62:	005b      	lsls	r3, r3, #1
 8000d64:	fa02 f303 	lsl.w	r3, r2, r3
 8000d68:	69ba      	ldr	r2, [r7, #24]
 8000d6a:	4313      	orrs	r3, r2
 8000d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	69ba      	ldr	r2, [r7, #24]
 8000d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000d74:	683b      	ldr	r3, [r7, #0]
 8000d76:	685b      	ldr	r3, [r3, #4]
 8000d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	f000 80b4 	beq.w	8000eea <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d82:	2300      	movs	r3, #0
 8000d84:	60fb      	str	r3, [r7, #12]
 8000d86:	4b60      	ldr	r3, [pc, #384]	; (8000f08 <HAL_GPIO_Init+0x30c>)
 8000d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d8a:	4a5f      	ldr	r2, [pc, #380]	; (8000f08 <HAL_GPIO_Init+0x30c>)
 8000d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d90:	6453      	str	r3, [r2, #68]	; 0x44
 8000d92:	4b5d      	ldr	r3, [pc, #372]	; (8000f08 <HAL_GPIO_Init+0x30c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000d9a:	60fb      	str	r3, [r7, #12]
 8000d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000d9e:	4a5b      	ldr	r2, [pc, #364]	; (8000f0c <HAL_GPIO_Init+0x310>)
 8000da0:	69fb      	ldr	r3, [r7, #28]
 8000da2:	089b      	lsrs	r3, r3, #2
 8000da4:	3302      	adds	r3, #2
 8000da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000dac:	69fb      	ldr	r3, [r7, #28]
 8000dae:	f003 0303 	and.w	r3, r3, #3
 8000db2:	009b      	lsls	r3, r3, #2
 8000db4:	220f      	movs	r2, #15
 8000db6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dba:	43db      	mvns	r3, r3
 8000dbc:	69ba      	ldr	r2, [r7, #24]
 8000dbe:	4013      	ands	r3, r2
 8000dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	4a52      	ldr	r2, [pc, #328]	; (8000f10 <HAL_GPIO_Init+0x314>)
 8000dc6:	4293      	cmp	r3, r2
 8000dc8:	d02b      	beq.n	8000e22 <HAL_GPIO_Init+0x226>
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a51      	ldr	r2, [pc, #324]	; (8000f14 <HAL_GPIO_Init+0x318>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d025      	beq.n	8000e1e <HAL_GPIO_Init+0x222>
 8000dd2:	687b      	ldr	r3, [r7, #4]
 8000dd4:	4a50      	ldr	r2, [pc, #320]	; (8000f18 <HAL_GPIO_Init+0x31c>)
 8000dd6:	4293      	cmp	r3, r2
 8000dd8:	d01f      	beq.n	8000e1a <HAL_GPIO_Init+0x21e>
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	4a4f      	ldr	r2, [pc, #316]	; (8000f1c <HAL_GPIO_Init+0x320>)
 8000dde:	4293      	cmp	r3, r2
 8000de0:	d019      	beq.n	8000e16 <HAL_GPIO_Init+0x21a>
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	4a4e      	ldr	r2, [pc, #312]	; (8000f20 <HAL_GPIO_Init+0x324>)
 8000de6:	4293      	cmp	r3, r2
 8000de8:	d013      	beq.n	8000e12 <HAL_GPIO_Init+0x216>
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	4a4d      	ldr	r2, [pc, #308]	; (8000f24 <HAL_GPIO_Init+0x328>)
 8000dee:	4293      	cmp	r3, r2
 8000df0:	d00d      	beq.n	8000e0e <HAL_GPIO_Init+0x212>
 8000df2:	687b      	ldr	r3, [r7, #4]
 8000df4:	4a4c      	ldr	r2, [pc, #304]	; (8000f28 <HAL_GPIO_Init+0x32c>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d007      	beq.n	8000e0a <HAL_GPIO_Init+0x20e>
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	4a4b      	ldr	r2, [pc, #300]	; (8000f2c <HAL_GPIO_Init+0x330>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	d101      	bne.n	8000e06 <HAL_GPIO_Init+0x20a>
 8000e02:	2307      	movs	r3, #7
 8000e04:	e00e      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e06:	2308      	movs	r3, #8
 8000e08:	e00c      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e0a:	2306      	movs	r3, #6
 8000e0c:	e00a      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e0e:	2305      	movs	r3, #5
 8000e10:	e008      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e12:	2304      	movs	r3, #4
 8000e14:	e006      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e16:	2303      	movs	r3, #3
 8000e18:	e004      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	e002      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e1e:	2301      	movs	r3, #1
 8000e20:	e000      	b.n	8000e24 <HAL_GPIO_Init+0x228>
 8000e22:	2300      	movs	r3, #0
 8000e24:	69fa      	ldr	r2, [r7, #28]
 8000e26:	f002 0203 	and.w	r2, r2, #3
 8000e2a:	0092      	lsls	r2, r2, #2
 8000e2c:	4093      	lsls	r3, r2
 8000e2e:	69ba      	ldr	r2, [r7, #24]
 8000e30:	4313      	orrs	r3, r2
 8000e32:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000e34:	4935      	ldr	r1, [pc, #212]	; (8000f0c <HAL_GPIO_Init+0x310>)
 8000e36:	69fb      	ldr	r3, [r7, #28]
 8000e38:	089b      	lsrs	r3, r3, #2
 8000e3a:	3302      	adds	r3, #2
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000e42:	4b3b      	ldr	r3, [pc, #236]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000e44:	689b      	ldr	r3, [r3, #8]
 8000e46:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	43db      	mvns	r3, r3
 8000e4c:	69ba      	ldr	r2, [r7, #24]
 8000e4e:	4013      	ands	r3, r2
 8000e50:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	685b      	ldr	r3, [r3, #4]
 8000e56:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d003      	beq.n	8000e66 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	693b      	ldr	r3, [r7, #16]
 8000e62:	4313      	orrs	r3, r2
 8000e64:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000e66:	4a32      	ldr	r2, [pc, #200]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000e68:	69bb      	ldr	r3, [r7, #24]
 8000e6a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000e6c:	4b30      	ldr	r3, [pc, #192]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000e6e:	68db      	ldr	r3, [r3, #12]
 8000e70:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e72:	693b      	ldr	r3, [r7, #16]
 8000e74:	43db      	mvns	r3, r3
 8000e76:	69ba      	ldr	r2, [r7, #24]
 8000e78:	4013      	ands	r3, r2
 8000e7a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	d003      	beq.n	8000e90 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	693b      	ldr	r3, [r7, #16]
 8000e8c:	4313      	orrs	r3, r2
 8000e8e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8000e90:	4a27      	ldr	r2, [pc, #156]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000e92:	69bb      	ldr	r3, [r7, #24]
 8000e94:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000e96:	4b26      	ldr	r3, [pc, #152]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000e98:	685b      	ldr	r3, [r3, #4]
 8000e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000e9c:	693b      	ldr	r3, [r7, #16]
 8000e9e:	43db      	mvns	r3, r3
 8000ea0:	69ba      	ldr	r2, [r7, #24]
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000ea6:	683b      	ldr	r3, [r7, #0]
 8000ea8:	685b      	ldr	r3, [r3, #4]
 8000eaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d003      	beq.n	8000eba <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8000eb2:	69ba      	ldr	r2, [r7, #24]
 8000eb4:	693b      	ldr	r3, [r7, #16]
 8000eb6:	4313      	orrs	r3, r2
 8000eb8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8000eba:	4a1d      	ldr	r2, [pc, #116]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000ebc:	69bb      	ldr	r3, [r7, #24]
 8000ebe:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000ec0:	4b1b      	ldr	r3, [pc, #108]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000ec2:	681b      	ldr	r3, [r3, #0]
 8000ec4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000ec6:	693b      	ldr	r3, [r7, #16]
 8000ec8:	43db      	mvns	r3, r3
 8000eca:	69ba      	ldr	r2, [r7, #24]
 8000ecc:	4013      	ands	r3, r2
 8000ece:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d003      	beq.n	8000ee4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8000edc:	69ba      	ldr	r2, [r7, #24]
 8000ede:	693b      	ldr	r3, [r7, #16]
 8000ee0:	4313      	orrs	r3, r2
 8000ee2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8000ee4:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <HAL_GPIO_Init+0x334>)
 8000ee6:	69bb      	ldr	r3, [r7, #24]
 8000ee8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3301      	adds	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	2b0f      	cmp	r3, #15
 8000ef4:	f67f ae90 	bls.w	8000c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8000ef8:	bf00      	nop
 8000efa:	bf00      	nop
 8000efc:	3724      	adds	r7, #36	; 0x24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800
 8000f0c:	40013800 	.word	0x40013800
 8000f10:	40020000 	.word	0x40020000
 8000f14:	40020400 	.word	0x40020400
 8000f18:	40020800 	.word	0x40020800
 8000f1c:	40020c00 	.word	0x40020c00
 8000f20:	40021000 	.word	0x40021000
 8000f24:	40021400 	.word	0x40021400
 8000f28:	40021800 	.word	0x40021800
 8000f2c:	40021c00 	.word	0x40021c00
 8000f30:	40013c00 	.word	0x40013c00

08000f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8000f3e:	4b08      	ldr	r3, [pc, #32]	; (8000f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f40:	695a      	ldr	r2, [r3, #20]
 8000f42:	88fb      	ldrh	r3, [r7, #6]
 8000f44:	4013      	ands	r3, r2
 8000f46:	2b00      	cmp	r3, #0
 8000f48:	d006      	beq.n	8000f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000f4a:	4a05      	ldr	r2, [pc, #20]	; (8000f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000f4c:	88fb      	ldrh	r3, [r7, #6]
 8000f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000f50:	88fb      	ldrh	r3, [r7, #6]
 8000f52:	4618      	mov	r0, r3
 8000f54:	f7ff fbe2 	bl	800071c <HAL_GPIO_EXTI_Callback>
  }
}
 8000f58:	bf00      	nop
 8000f5a:	3708      	adds	r7, #8
 8000f5c:	46bd      	mov	sp, r7
 8000f5e:	bd80      	pop	{r7, pc}
 8000f60:	40013c00 	.word	0x40013c00

08000f64 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b086      	sub	sp, #24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000f6c:	687b      	ldr	r3, [r7, #4]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d101      	bne.n	8000f76 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000f72:	2301      	movs	r3, #1
 8000f74:	e267      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	681b      	ldr	r3, [r3, #0]
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d075      	beq.n	800106e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f82:	4b88      	ldr	r3, [pc, #544]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000f84:	689b      	ldr	r3, [r3, #8]
 8000f86:	f003 030c 	and.w	r3, r3, #12
 8000f8a:	2b04      	cmp	r3, #4
 8000f8c:	d00c      	beq.n	8000fa8 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f8e:	4b85      	ldr	r3, [pc, #532]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000f90:	689b      	ldr	r3, [r3, #8]
 8000f92:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8000f96:	2b08      	cmp	r3, #8
 8000f98:	d112      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8000f9a:	4b82      	ldr	r3, [pc, #520]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000f9c:	685b      	ldr	r3, [r3, #4]
 8000f9e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000fa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8000fa6:	d10b      	bne.n	8000fc0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fa8:	4b7e      	ldr	r3, [pc, #504]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d05b      	beq.n	800106c <HAL_RCC_OscConfig+0x108>
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d157      	bne.n	800106c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	e242      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	685b      	ldr	r3, [r3, #4]
 8000fc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000fc8:	d106      	bne.n	8000fd8 <HAL_RCC_OscConfig+0x74>
 8000fca:	4b76      	ldr	r3, [pc, #472]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	4a75      	ldr	r2, [pc, #468]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000fd0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000fd4:	6013      	str	r3, [r2, #0]
 8000fd6:	e01d      	b.n	8001014 <HAL_RCC_OscConfig+0xb0>
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000fe0:	d10c      	bne.n	8000ffc <HAL_RCC_OscConfig+0x98>
 8000fe2:	4b70      	ldr	r3, [pc, #448]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a6f      	ldr	r2, [pc, #444]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000fe8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000fec:	6013      	str	r3, [r2, #0]
 8000fee:	4b6d      	ldr	r3, [pc, #436]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a6c      	ldr	r2, [pc, #432]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000ff4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000ff8:	6013      	str	r3, [r2, #0]
 8000ffa:	e00b      	b.n	8001014 <HAL_RCC_OscConfig+0xb0>
 8000ffc:	4b69      	ldr	r3, [pc, #420]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	4a68      	ldr	r2, [pc, #416]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001002:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001006:	6013      	str	r3, [r2, #0]
 8001008:	4b66      	ldr	r3, [pc, #408]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	4a65      	ldr	r2, [pc, #404]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 800100e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001012:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	685b      	ldr	r3, [r3, #4]
 8001018:	2b00      	cmp	r3, #0
 800101a:	d013      	beq.n	8001044 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800101c:	f7ff fd00 	bl	8000a20 <HAL_GetTick>
 8001020:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001022:	e008      	b.n	8001036 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001024:	f7ff fcfc 	bl	8000a20 <HAL_GetTick>
 8001028:	4602      	mov	r2, r0
 800102a:	693b      	ldr	r3, [r7, #16]
 800102c:	1ad3      	subs	r3, r2, r3
 800102e:	2b64      	cmp	r3, #100	; 0x64
 8001030:	d901      	bls.n	8001036 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001032:	2303      	movs	r3, #3
 8001034:	e207      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001036:	4b5b      	ldr	r3, [pc, #364]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d0f0      	beq.n	8001024 <HAL_RCC_OscConfig+0xc0>
 8001042:	e014      	b.n	800106e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fcec 	bl	8000a20 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800104c:	f7ff fce8 	bl	8000a20 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b64      	cmp	r3, #100	; 0x64
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e1f3      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800105e:	4b51      	ldr	r3, [pc, #324]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001066:	2b00      	cmp	r3, #0
 8001068:	d1f0      	bne.n	800104c <HAL_RCC_OscConfig+0xe8>
 800106a:	e000      	b.n	800106e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800106c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	f003 0302 	and.w	r3, r3, #2
 8001076:	2b00      	cmp	r3, #0
 8001078:	d063      	beq.n	8001142 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800107a:	4b4a      	ldr	r3, [pc, #296]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 800107c:	689b      	ldr	r3, [r3, #8]
 800107e:	f003 030c 	and.w	r3, r3, #12
 8001082:	2b00      	cmp	r3, #0
 8001084:	d00b      	beq.n	800109e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001086:	4b47      	ldr	r3, [pc, #284]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001088:	689b      	ldr	r3, [r3, #8]
 800108a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800108e:	2b08      	cmp	r3, #8
 8001090:	d11c      	bne.n	80010cc <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001092:	4b44      	ldr	r3, [pc, #272]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001094:	685b      	ldr	r3, [r3, #4]
 8001096:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800109a:	2b00      	cmp	r3, #0
 800109c:	d116      	bne.n	80010cc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800109e:	4b41      	ldr	r3, [pc, #260]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f003 0302 	and.w	r3, r3, #2
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d005      	beq.n	80010b6 <HAL_RCC_OscConfig+0x152>
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	68db      	ldr	r3, [r3, #12]
 80010ae:	2b01      	cmp	r3, #1
 80010b0:	d001      	beq.n	80010b6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80010b2:	2301      	movs	r3, #1
 80010b4:	e1c7      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010b6:	4b3b      	ldr	r3, [pc, #236]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 80010b8:	681b      	ldr	r3, [r3, #0]
 80010ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	691b      	ldr	r3, [r3, #16]
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	4937      	ldr	r1, [pc, #220]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 80010c6:	4313      	orrs	r3, r2
 80010c8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010ca:	e03a      	b.n	8001142 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	68db      	ldr	r3, [r3, #12]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d020      	beq.n	8001116 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80010d4:	4b34      	ldr	r3, [pc, #208]	; (80011a8 <HAL_RCC_OscConfig+0x244>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010da:	f7ff fca1 	bl	8000a20 <HAL_GetTick>
 80010de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010e0:	e008      	b.n	80010f4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80010e2:	f7ff fc9d 	bl	8000a20 <HAL_GetTick>
 80010e6:	4602      	mov	r2, r0
 80010e8:	693b      	ldr	r3, [r7, #16]
 80010ea:	1ad3      	subs	r3, r2, r3
 80010ec:	2b02      	cmp	r3, #2
 80010ee:	d901      	bls.n	80010f4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80010f0:	2303      	movs	r3, #3
 80010f2:	e1a8      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80010f4:	4b2b      	ldr	r3, [pc, #172]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f003 0302 	and.w	r3, r3, #2
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	d0f0      	beq.n	80010e2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001100:	4b28      	ldr	r3, [pc, #160]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001102:	681b      	ldr	r3, [r3, #0]
 8001104:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	691b      	ldr	r3, [r3, #16]
 800110c:	00db      	lsls	r3, r3, #3
 800110e:	4925      	ldr	r1, [pc, #148]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001110:	4313      	orrs	r3, r2
 8001112:	600b      	str	r3, [r1, #0]
 8001114:	e015      	b.n	8001142 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_RCC_OscConfig+0x244>)
 8001118:	2200      	movs	r2, #0
 800111a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800111c:	f7ff fc80 	bl	8000a20 <HAL_GetTick>
 8001120:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001122:	e008      	b.n	8001136 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001124:	f7ff fc7c 	bl	8000a20 <HAL_GetTick>
 8001128:	4602      	mov	r2, r0
 800112a:	693b      	ldr	r3, [r7, #16]
 800112c:	1ad3      	subs	r3, r2, r3
 800112e:	2b02      	cmp	r3, #2
 8001130:	d901      	bls.n	8001136 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e187      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001136:	4b1b      	ldr	r3, [pc, #108]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f003 0302 	and.w	r3, r3, #2
 800113e:	2b00      	cmp	r3, #0
 8001140:	d1f0      	bne.n	8001124 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	f003 0308 	and.w	r3, r3, #8
 800114a:	2b00      	cmp	r3, #0
 800114c:	d036      	beq.n	80011bc <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	695b      	ldr	r3, [r3, #20]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d016      	beq.n	8001184 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001156:	4b15      	ldr	r3, [pc, #84]	; (80011ac <HAL_RCC_OscConfig+0x248>)
 8001158:	2201      	movs	r2, #1
 800115a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800115c:	f7ff fc60 	bl	8000a20 <HAL_GetTick>
 8001160:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001162:	e008      	b.n	8001176 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001164:	f7ff fc5c 	bl	8000a20 <HAL_GetTick>
 8001168:	4602      	mov	r2, r0
 800116a:	693b      	ldr	r3, [r7, #16]
 800116c:	1ad3      	subs	r3, r2, r3
 800116e:	2b02      	cmp	r3, #2
 8001170:	d901      	bls.n	8001176 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001172:	2303      	movs	r3, #3
 8001174:	e167      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001176:	4b0b      	ldr	r3, [pc, #44]	; (80011a4 <HAL_RCC_OscConfig+0x240>)
 8001178:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800117a:	f003 0302 	and.w	r3, r3, #2
 800117e:	2b00      	cmp	r3, #0
 8001180:	d0f0      	beq.n	8001164 <HAL_RCC_OscConfig+0x200>
 8001182:	e01b      	b.n	80011bc <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <HAL_RCC_OscConfig+0x248>)
 8001186:	2200      	movs	r2, #0
 8001188:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800118a:	f7ff fc49 	bl	8000a20 <HAL_GetTick>
 800118e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001190:	e00e      	b.n	80011b0 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001192:	f7ff fc45 	bl	8000a20 <HAL_GetTick>
 8001196:	4602      	mov	r2, r0
 8001198:	693b      	ldr	r3, [r7, #16]
 800119a:	1ad3      	subs	r3, r2, r3
 800119c:	2b02      	cmp	r3, #2
 800119e:	d907      	bls.n	80011b0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80011a0:	2303      	movs	r3, #3
 80011a2:	e150      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
 80011a4:	40023800 	.word	0x40023800
 80011a8:	42470000 	.word	0x42470000
 80011ac:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80011b0:	4b88      	ldr	r3, [pc, #544]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80011b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d1ea      	bne.n	8001192 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0304 	and.w	r3, r3, #4
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 8097 	beq.w	80012f8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80011ca:	2300      	movs	r3, #0
 80011cc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80011ce:	4b81      	ldr	r3, [pc, #516]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80011d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d10f      	bne.n	80011fa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b7d      	ldr	r3, [pc, #500]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80011e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011e2:	4a7c      	ldr	r2, [pc, #496]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80011e4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011e8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ea:	4b7a      	ldr	r3, [pc, #488]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80011ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80011f6:	2301      	movs	r3, #1
 80011f8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80011fa:	4b77      	ldr	r3, [pc, #476]	; (80013d8 <HAL_RCC_OscConfig+0x474>)
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001202:	2b00      	cmp	r3, #0
 8001204:	d118      	bne.n	8001238 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001206:	4b74      	ldr	r3, [pc, #464]	; (80013d8 <HAL_RCC_OscConfig+0x474>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	4a73      	ldr	r2, [pc, #460]	; (80013d8 <HAL_RCC_OscConfig+0x474>)
 800120c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001210:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001212:	f7ff fc05 	bl	8000a20 <HAL_GetTick>
 8001216:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001218:	e008      	b.n	800122c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800121a:	f7ff fc01 	bl	8000a20 <HAL_GetTick>
 800121e:	4602      	mov	r2, r0
 8001220:	693b      	ldr	r3, [r7, #16]
 8001222:	1ad3      	subs	r3, r2, r3
 8001224:	2b02      	cmp	r3, #2
 8001226:	d901      	bls.n	800122c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001228:	2303      	movs	r3, #3
 800122a:	e10c      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800122c:	4b6a      	ldr	r3, [pc, #424]	; (80013d8 <HAL_RCC_OscConfig+0x474>)
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001234:	2b00      	cmp	r3, #0
 8001236:	d0f0      	beq.n	800121a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	2b01      	cmp	r3, #1
 800123e:	d106      	bne.n	800124e <HAL_RCC_OscConfig+0x2ea>
 8001240:	4b64      	ldr	r3, [pc, #400]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001244:	4a63      	ldr	r2, [pc, #396]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001246:	f043 0301 	orr.w	r3, r3, #1
 800124a:	6713      	str	r3, [r2, #112]	; 0x70
 800124c:	e01c      	b.n	8001288 <HAL_RCC_OscConfig+0x324>
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	689b      	ldr	r3, [r3, #8]
 8001252:	2b05      	cmp	r3, #5
 8001254:	d10c      	bne.n	8001270 <HAL_RCC_OscConfig+0x30c>
 8001256:	4b5f      	ldr	r3, [pc, #380]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800125a:	4a5e      	ldr	r2, [pc, #376]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 800125c:	f043 0304 	orr.w	r3, r3, #4
 8001260:	6713      	str	r3, [r2, #112]	; 0x70
 8001262:	4b5c      	ldr	r3, [pc, #368]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001264:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001266:	4a5b      	ldr	r2, [pc, #364]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001268:	f043 0301 	orr.w	r3, r3, #1
 800126c:	6713      	str	r3, [r2, #112]	; 0x70
 800126e:	e00b      	b.n	8001288 <HAL_RCC_OscConfig+0x324>
 8001270:	4b58      	ldr	r3, [pc, #352]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001272:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001274:	4a57      	ldr	r2, [pc, #348]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001276:	f023 0301 	bic.w	r3, r3, #1
 800127a:	6713      	str	r3, [r2, #112]	; 0x70
 800127c:	4b55      	ldr	r3, [pc, #340]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 800127e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001280:	4a54      	ldr	r2, [pc, #336]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001282:	f023 0304 	bic.w	r3, r3, #4
 8001286:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d015      	beq.n	80012bc <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001290:	f7ff fbc6 	bl	8000a20 <HAL_GetTick>
 8001294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001296:	e00a      	b.n	80012ae <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001298:	f7ff fbc2 	bl	8000a20 <HAL_GetTick>
 800129c:	4602      	mov	r2, r0
 800129e:	693b      	ldr	r3, [r7, #16]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80012a6:	4293      	cmp	r3, r2
 80012a8:	d901      	bls.n	80012ae <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80012aa:	2303      	movs	r3, #3
 80012ac:	e0cb      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80012ae:	4b49      	ldr	r3, [pc, #292]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80012b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012b2:	f003 0302 	and.w	r3, r3, #2
 80012b6:	2b00      	cmp	r3, #0
 80012b8:	d0ee      	beq.n	8001298 <HAL_RCC_OscConfig+0x334>
 80012ba:	e014      	b.n	80012e6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80012bc:	f7ff fbb0 	bl	8000a20 <HAL_GetTick>
 80012c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012c2:	e00a      	b.n	80012da <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80012c4:	f7ff fbac 	bl	8000a20 <HAL_GetTick>
 80012c8:	4602      	mov	r2, r0
 80012ca:	693b      	ldr	r3, [r7, #16]
 80012cc:	1ad3      	subs	r3, r2, r3
 80012ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e0b5      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80012da:	4b3e      	ldr	r3, [pc, #248]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80012dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80012de:	f003 0302 	and.w	r3, r3, #2
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1ee      	bne.n	80012c4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80012e6:	7dfb      	ldrb	r3, [r7, #23]
 80012e8:	2b01      	cmp	r3, #1
 80012ea:	d105      	bne.n	80012f8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80012ec:	4b39      	ldr	r3, [pc, #228]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80012ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f0:	4a38      	ldr	r2, [pc, #224]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80012f2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80012f6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	699b      	ldr	r3, [r3, #24]
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	f000 80a1 	beq.w	8001444 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001302:	4b34      	ldr	r3, [pc, #208]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	f003 030c 	and.w	r3, r3, #12
 800130a:	2b08      	cmp	r3, #8
 800130c:	d05c      	beq.n	80013c8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	699b      	ldr	r3, [r3, #24]
 8001312:	2b02      	cmp	r3, #2
 8001314:	d141      	bne.n	800139a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001316:	4b31      	ldr	r3, [pc, #196]	; (80013dc <HAL_RCC_OscConfig+0x478>)
 8001318:	2200      	movs	r2, #0
 800131a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800131c:	f7ff fb80 	bl	8000a20 <HAL_GetTick>
 8001320:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001322:	e008      	b.n	8001336 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001324:	f7ff fb7c 	bl	8000a20 <HAL_GetTick>
 8001328:	4602      	mov	r2, r0
 800132a:	693b      	ldr	r3, [r7, #16]
 800132c:	1ad3      	subs	r3, r2, r3
 800132e:	2b02      	cmp	r3, #2
 8001330:	d901      	bls.n	8001336 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001332:	2303      	movs	r3, #3
 8001334:	e087      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001336:	4b27      	ldr	r3, [pc, #156]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800133e:	2b00      	cmp	r3, #0
 8001340:	d1f0      	bne.n	8001324 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	69da      	ldr	r2, [r3, #28]
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6a1b      	ldr	r3, [r3, #32]
 800134a:	431a      	orrs	r2, r3
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001350:	019b      	lsls	r3, r3, #6
 8001352:	431a      	orrs	r2, r3
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001358:	085b      	lsrs	r3, r3, #1
 800135a:	3b01      	subs	r3, #1
 800135c:	041b      	lsls	r3, r3, #16
 800135e:	431a      	orrs	r2, r3
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001364:	061b      	lsls	r3, r3, #24
 8001366:	491b      	ldr	r1, [pc, #108]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 8001368:	4313      	orrs	r3, r2
 800136a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <HAL_RCC_OscConfig+0x478>)
 800136e:	2201      	movs	r2, #1
 8001370:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001372:	f7ff fb55 	bl	8000a20 <HAL_GetTick>
 8001376:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001378:	e008      	b.n	800138c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800137a:	f7ff fb51 	bl	8000a20 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b02      	cmp	r3, #2
 8001386:	d901      	bls.n	800138c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001388:	2303      	movs	r3, #3
 800138a:	e05c      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800138c:	4b11      	ldr	r3, [pc, #68]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d0f0      	beq.n	800137a <HAL_RCC_OscConfig+0x416>
 8001398:	e054      	b.n	8001444 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800139a:	4b10      	ldr	r3, [pc, #64]	; (80013dc <HAL_RCC_OscConfig+0x478>)
 800139c:	2200      	movs	r2, #0
 800139e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80013a0:	f7ff fb3e 	bl	8000a20 <HAL_GetTick>
 80013a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013a6:	e008      	b.n	80013ba <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80013a8:	f7ff fb3a 	bl	8000a20 <HAL_GetTick>
 80013ac:	4602      	mov	r2, r0
 80013ae:	693b      	ldr	r3, [r7, #16]
 80013b0:	1ad3      	subs	r3, r2, r3
 80013b2:	2b02      	cmp	r3, #2
 80013b4:	d901      	bls.n	80013ba <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80013b6:	2303      	movs	r3, #3
 80013b8:	e045      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80013ba:	4b06      	ldr	r3, [pc, #24]	; (80013d4 <HAL_RCC_OscConfig+0x470>)
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d1f0      	bne.n	80013a8 <HAL_RCC_OscConfig+0x444>
 80013c6:	e03d      	b.n	8001444 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	699b      	ldr	r3, [r3, #24]
 80013cc:	2b01      	cmp	r3, #1
 80013ce:	d107      	bne.n	80013e0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80013d0:	2301      	movs	r3, #1
 80013d2:	e038      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
 80013d4:	40023800 	.word	0x40023800
 80013d8:	40007000 	.word	0x40007000
 80013dc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80013e0:	4b1b      	ldr	r3, [pc, #108]	; (8001450 <HAL_RCC_OscConfig+0x4ec>)
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	699b      	ldr	r3, [r3, #24]
 80013ea:	2b01      	cmp	r3, #1
 80013ec:	d028      	beq.n	8001440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80013ee:	68fb      	ldr	r3, [r7, #12]
 80013f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80013f8:	429a      	cmp	r2, r3
 80013fa:	d121      	bne.n	8001440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80013fc:	68fb      	ldr	r3, [r7, #12]
 80013fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001406:	429a      	cmp	r2, r3
 8001408:	d11a      	bne.n	8001440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800140a:	68fa      	ldr	r2, [r7, #12]
 800140c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001410:	4013      	ands	r3, r2
 8001412:	687a      	ldr	r2, [r7, #4]
 8001414:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001416:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001418:	4293      	cmp	r3, r2
 800141a:	d111      	bne.n	8001440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800141c:	68fb      	ldr	r3, [r7, #12]
 800141e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001426:	085b      	lsrs	r3, r3, #1
 8001428:	3b01      	subs	r3, #1
 800142a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800142c:	429a      	cmp	r2, r3
 800142e:	d107      	bne.n	8001440 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800143c:	429a      	cmp	r2, r3
 800143e:	d001      	beq.n	8001444 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001440:	2301      	movs	r3, #1
 8001442:	e000      	b.n	8001446 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001444:	2300      	movs	r3, #0
}
 8001446:	4618      	mov	r0, r3
 8001448:	3718      	adds	r7, #24
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	40023800 	.word	0x40023800

08001454 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001454:	b580      	push	{r7, lr}
 8001456:	b084      	sub	sp, #16
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	2b00      	cmp	r3, #0
 8001462:	d101      	bne.n	8001468 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001464:	2301      	movs	r3, #1
 8001466:	e0cc      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001468:	4b68      	ldr	r3, [pc, #416]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	f003 0307 	and.w	r3, r3, #7
 8001470:	683a      	ldr	r2, [r7, #0]
 8001472:	429a      	cmp	r2, r3
 8001474:	d90c      	bls.n	8001490 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001476:	4b65      	ldr	r3, [pc, #404]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001478:	683a      	ldr	r2, [r7, #0]
 800147a:	b2d2      	uxtb	r2, r2
 800147c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800147e:	4b63      	ldr	r3, [pc, #396]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	f003 0307 	and.w	r3, r3, #7
 8001486:	683a      	ldr	r2, [r7, #0]
 8001488:	429a      	cmp	r2, r3
 800148a:	d001      	beq.n	8001490 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800148c:	2301      	movs	r3, #1
 800148e:	e0b8      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d020      	beq.n	80014de <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d005      	beq.n	80014b4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80014a8:	4b59      	ldr	r3, [pc, #356]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014aa:	689b      	ldr	r3, [r3, #8]
 80014ac:	4a58      	ldr	r2, [pc, #352]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014ae:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80014b2:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	f003 0308 	and.w	r3, r3, #8
 80014bc:	2b00      	cmp	r3, #0
 80014be:	d005      	beq.n	80014cc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80014c0:	4b53      	ldr	r3, [pc, #332]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014c2:	689b      	ldr	r3, [r3, #8]
 80014c4:	4a52      	ldr	r2, [pc, #328]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014c6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80014ca:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80014cc:	4b50      	ldr	r3, [pc, #320]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014ce:	689b      	ldr	r3, [r3, #8]
 80014d0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	689b      	ldr	r3, [r3, #8]
 80014d8:	494d      	ldr	r1, [pc, #308]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014da:	4313      	orrs	r3, r2
 80014dc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f003 0301 	and.w	r3, r3, #1
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d044      	beq.n	8001574 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	2b01      	cmp	r3, #1
 80014f0:	d107      	bne.n	8001502 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	4b47      	ldr	r3, [pc, #284]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d119      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80014fe:	2301      	movs	r3, #1
 8001500:	e07f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	685b      	ldr	r3, [r3, #4]
 8001506:	2b02      	cmp	r3, #2
 8001508:	d003      	beq.n	8001512 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800150e:	2b03      	cmp	r3, #3
 8001510:	d107      	bne.n	8001522 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001512:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800151a:	2b00      	cmp	r3, #0
 800151c:	d109      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e06f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001522:	4b3b      	ldr	r3, [pc, #236]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f003 0302 	and.w	r3, r3, #2
 800152a:	2b00      	cmp	r3, #0
 800152c:	d101      	bne.n	8001532 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800152e:	2301      	movs	r3, #1
 8001530:	e067      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001532:	4b37      	ldr	r3, [pc, #220]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001534:	689b      	ldr	r3, [r3, #8]
 8001536:	f023 0203 	bic.w	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	685b      	ldr	r3, [r3, #4]
 800153e:	4934      	ldr	r1, [pc, #208]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001540:	4313      	orrs	r3, r2
 8001542:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001544:	f7ff fa6c 	bl	8000a20 <HAL_GetTick>
 8001548:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800154a:	e00a      	b.n	8001562 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800154c:	f7ff fa68 	bl	8000a20 <HAL_GetTick>
 8001550:	4602      	mov	r2, r0
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	1ad3      	subs	r3, r2, r3
 8001556:	f241 3288 	movw	r2, #5000	; 0x1388
 800155a:	4293      	cmp	r3, r2
 800155c:	d901      	bls.n	8001562 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800155e:	2303      	movs	r3, #3
 8001560:	e04f      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001562:	4b2b      	ldr	r3, [pc, #172]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 020c 	and.w	r2, r3, #12
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	685b      	ldr	r3, [r3, #4]
 800156e:	009b      	lsls	r3, r3, #2
 8001570:	429a      	cmp	r2, r3
 8001572:	d1eb      	bne.n	800154c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001574:	4b25      	ldr	r3, [pc, #148]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d20c      	bcs.n	800159c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 8001584:	683a      	ldr	r2, [r7, #0]
 8001586:	b2d2      	uxtb	r2, r2
 8001588:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800158a:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_RCC_ClockConfig+0x1b8>)
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	f003 0307 	and.w	r3, r3, #7
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	429a      	cmp	r2, r3
 8001596:	d001      	beq.n	800159c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e032      	b.n	8001602 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f003 0304 	and.w	r3, r3, #4
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d008      	beq.n	80015ba <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80015a8:	4b19      	ldr	r3, [pc, #100]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015aa:	689b      	ldr	r3, [r3, #8]
 80015ac:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	4916      	ldr	r1, [pc, #88]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015b6:	4313      	orrs	r3, r2
 80015b8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	f003 0308 	and.w	r3, r3, #8
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d009      	beq.n	80015da <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80015c6:	4b12      	ldr	r3, [pc, #72]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	691b      	ldr	r3, [r3, #16]
 80015d2:	00db      	lsls	r3, r3, #3
 80015d4:	490e      	ldr	r1, [pc, #56]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015d6:	4313      	orrs	r3, r2
 80015d8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80015da:	f000 f821 	bl	8001620 <HAL_RCC_GetSysClockFreq>
 80015de:	4602      	mov	r2, r0
 80015e0:	4b0b      	ldr	r3, [pc, #44]	; (8001610 <HAL_RCC_ClockConfig+0x1bc>)
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	091b      	lsrs	r3, r3, #4
 80015e6:	f003 030f 	and.w	r3, r3, #15
 80015ea:	490a      	ldr	r1, [pc, #40]	; (8001614 <HAL_RCC_ClockConfig+0x1c0>)
 80015ec:	5ccb      	ldrb	r3, [r1, r3]
 80015ee:	fa22 f303 	lsr.w	r3, r2, r3
 80015f2:	4a09      	ldr	r2, [pc, #36]	; (8001618 <HAL_RCC_ClockConfig+0x1c4>)
 80015f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80015f6:	4b09      	ldr	r3, [pc, #36]	; (800161c <HAL_RCC_ClockConfig+0x1c8>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7ff f91e 	bl	800083c <HAL_InitTick>

  return HAL_OK;
 8001600:	2300      	movs	r3, #0
}
 8001602:	4618      	mov	r0, r3
 8001604:	3710      	adds	r7, #16
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	40023c00 	.word	0x40023c00
 8001610:	40023800 	.word	0x40023800
 8001614:	080053ac 	.word	0x080053ac
 8001618:	20000000 	.word	0x20000000
 800161c:	20000004 	.word	0x20000004

08001620 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001620:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001624:	b094      	sub	sp, #80	; 0x50
 8001626:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001628:	2300      	movs	r3, #0
 800162a:	647b      	str	r3, [r7, #68]	; 0x44
 800162c:	2300      	movs	r3, #0
 800162e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001630:	2300      	movs	r3, #0
 8001632:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001634:	2300      	movs	r3, #0
 8001636:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001638:	4b79      	ldr	r3, [pc, #484]	; (8001820 <HAL_RCC_GetSysClockFreq+0x200>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 030c 	and.w	r3, r3, #12
 8001640:	2b08      	cmp	r3, #8
 8001642:	d00d      	beq.n	8001660 <HAL_RCC_GetSysClockFreq+0x40>
 8001644:	2b08      	cmp	r3, #8
 8001646:	f200 80e1 	bhi.w	800180c <HAL_RCC_GetSysClockFreq+0x1ec>
 800164a:	2b00      	cmp	r3, #0
 800164c:	d002      	beq.n	8001654 <HAL_RCC_GetSysClockFreq+0x34>
 800164e:	2b04      	cmp	r3, #4
 8001650:	d003      	beq.n	800165a <HAL_RCC_GetSysClockFreq+0x3a>
 8001652:	e0db      	b.n	800180c <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001654:	4b73      	ldr	r3, [pc, #460]	; (8001824 <HAL_RCC_GetSysClockFreq+0x204>)
 8001656:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001658:	e0db      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800165a:	4b73      	ldr	r3, [pc, #460]	; (8001828 <HAL_RCC_GetSysClockFreq+0x208>)
 800165c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800165e:	e0d8      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001660:	4b6f      	ldr	r3, [pc, #444]	; (8001820 <HAL_RCC_GetSysClockFreq+0x200>)
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001668:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800166a:	4b6d      	ldr	r3, [pc, #436]	; (8001820 <HAL_RCC_GetSysClockFreq+0x200>)
 800166c:	685b      	ldr	r3, [r3, #4]
 800166e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001672:	2b00      	cmp	r3, #0
 8001674:	d063      	beq.n	800173e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001676:	4b6a      	ldr	r3, [pc, #424]	; (8001820 <HAL_RCC_GetSysClockFreq+0x200>)
 8001678:	685b      	ldr	r3, [r3, #4]
 800167a:	099b      	lsrs	r3, r3, #6
 800167c:	2200      	movs	r2, #0
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001680:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001684:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001688:	633b      	str	r3, [r7, #48]	; 0x30
 800168a:	2300      	movs	r3, #0
 800168c:	637b      	str	r3, [r7, #52]	; 0x34
 800168e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001692:	4622      	mov	r2, r4
 8001694:	462b      	mov	r3, r5
 8001696:	f04f 0000 	mov.w	r0, #0
 800169a:	f04f 0100 	mov.w	r1, #0
 800169e:	0159      	lsls	r1, r3, #5
 80016a0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80016a4:	0150      	lsls	r0, r2, #5
 80016a6:	4602      	mov	r2, r0
 80016a8:	460b      	mov	r3, r1
 80016aa:	4621      	mov	r1, r4
 80016ac:	1a51      	subs	r1, r2, r1
 80016ae:	6139      	str	r1, [r7, #16]
 80016b0:	4629      	mov	r1, r5
 80016b2:	eb63 0301 	sbc.w	r3, r3, r1
 80016b6:	617b      	str	r3, [r7, #20]
 80016b8:	f04f 0200 	mov.w	r2, #0
 80016bc:	f04f 0300 	mov.w	r3, #0
 80016c0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80016c4:	4659      	mov	r1, fp
 80016c6:	018b      	lsls	r3, r1, #6
 80016c8:	4651      	mov	r1, sl
 80016ca:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80016ce:	4651      	mov	r1, sl
 80016d0:	018a      	lsls	r2, r1, #6
 80016d2:	4651      	mov	r1, sl
 80016d4:	ebb2 0801 	subs.w	r8, r2, r1
 80016d8:	4659      	mov	r1, fp
 80016da:	eb63 0901 	sbc.w	r9, r3, r1
 80016de:	f04f 0200 	mov.w	r2, #0
 80016e2:	f04f 0300 	mov.w	r3, #0
 80016e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80016ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80016ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80016f2:	4690      	mov	r8, r2
 80016f4:	4699      	mov	r9, r3
 80016f6:	4623      	mov	r3, r4
 80016f8:	eb18 0303 	adds.w	r3, r8, r3
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	462b      	mov	r3, r5
 8001700:	eb49 0303 	adc.w	r3, r9, r3
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	f04f 0200 	mov.w	r2, #0
 800170a:	f04f 0300 	mov.w	r3, #0
 800170e:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001712:	4629      	mov	r1, r5
 8001714:	024b      	lsls	r3, r1, #9
 8001716:	4621      	mov	r1, r4
 8001718:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800171c:	4621      	mov	r1, r4
 800171e:	024a      	lsls	r2, r1, #9
 8001720:	4610      	mov	r0, r2
 8001722:	4619      	mov	r1, r3
 8001724:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001726:	2200      	movs	r2, #0
 8001728:	62bb      	str	r3, [r7, #40]	; 0x28
 800172a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800172c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001730:	f7fe fd4e 	bl	80001d0 <__aeabi_uldivmod>
 8001734:	4602      	mov	r2, r0
 8001736:	460b      	mov	r3, r1
 8001738:	4613      	mov	r3, r2
 800173a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800173c:	e058      	b.n	80017f0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800173e:	4b38      	ldr	r3, [pc, #224]	; (8001820 <HAL_RCC_GetSysClockFreq+0x200>)
 8001740:	685b      	ldr	r3, [r3, #4]
 8001742:	099b      	lsrs	r3, r3, #6
 8001744:	2200      	movs	r2, #0
 8001746:	4618      	mov	r0, r3
 8001748:	4611      	mov	r1, r2
 800174a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800174e:	623b      	str	r3, [r7, #32]
 8001750:	2300      	movs	r3, #0
 8001752:	627b      	str	r3, [r7, #36]	; 0x24
 8001754:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001758:	4642      	mov	r2, r8
 800175a:	464b      	mov	r3, r9
 800175c:	f04f 0000 	mov.w	r0, #0
 8001760:	f04f 0100 	mov.w	r1, #0
 8001764:	0159      	lsls	r1, r3, #5
 8001766:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800176a:	0150      	lsls	r0, r2, #5
 800176c:	4602      	mov	r2, r0
 800176e:	460b      	mov	r3, r1
 8001770:	4641      	mov	r1, r8
 8001772:	ebb2 0a01 	subs.w	sl, r2, r1
 8001776:	4649      	mov	r1, r9
 8001778:	eb63 0b01 	sbc.w	fp, r3, r1
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001788:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800178c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001790:	ebb2 040a 	subs.w	r4, r2, sl
 8001794:	eb63 050b 	sbc.w	r5, r3, fp
 8001798:	f04f 0200 	mov.w	r2, #0
 800179c:	f04f 0300 	mov.w	r3, #0
 80017a0:	00eb      	lsls	r3, r5, #3
 80017a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80017a6:	00e2      	lsls	r2, r4, #3
 80017a8:	4614      	mov	r4, r2
 80017aa:	461d      	mov	r5, r3
 80017ac:	4643      	mov	r3, r8
 80017ae:	18e3      	adds	r3, r4, r3
 80017b0:	603b      	str	r3, [r7, #0]
 80017b2:	464b      	mov	r3, r9
 80017b4:	eb45 0303 	adc.w	r3, r5, r3
 80017b8:	607b      	str	r3, [r7, #4]
 80017ba:	f04f 0200 	mov.w	r2, #0
 80017be:	f04f 0300 	mov.w	r3, #0
 80017c2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80017c6:	4629      	mov	r1, r5
 80017c8:	028b      	lsls	r3, r1, #10
 80017ca:	4621      	mov	r1, r4
 80017cc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80017d0:	4621      	mov	r1, r4
 80017d2:	028a      	lsls	r2, r1, #10
 80017d4:	4610      	mov	r0, r2
 80017d6:	4619      	mov	r1, r3
 80017d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80017da:	2200      	movs	r2, #0
 80017dc:	61bb      	str	r3, [r7, #24]
 80017de:	61fa      	str	r2, [r7, #28]
 80017e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80017e4:	f7fe fcf4 	bl	80001d0 <__aeabi_uldivmod>
 80017e8:	4602      	mov	r2, r0
 80017ea:	460b      	mov	r3, r1
 80017ec:	4613      	mov	r3, r2
 80017ee:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80017f0:	4b0b      	ldr	r3, [pc, #44]	; (8001820 <HAL_RCC_GetSysClockFreq+0x200>)
 80017f2:	685b      	ldr	r3, [r3, #4]
 80017f4:	0c1b      	lsrs	r3, r3, #16
 80017f6:	f003 0303 	and.w	r3, r3, #3
 80017fa:	3301      	adds	r3, #1
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001800:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001802:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001804:	fbb2 f3f3 	udiv	r3, r2, r3
 8001808:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800180a:	e002      	b.n	8001812 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800180c:	4b05      	ldr	r3, [pc, #20]	; (8001824 <HAL_RCC_GetSysClockFreq+0x204>)
 800180e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001810:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001812:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001814:	4618      	mov	r0, r3
 8001816:	3750      	adds	r7, #80	; 0x50
 8001818:	46bd      	mov	sp, r7
 800181a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800181e:	bf00      	nop
 8001820:	40023800 	.word	0x40023800
 8001824:	00f42400 	.word	0x00f42400
 8001828:	007a1200 	.word	0x007a1200

0800182c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800182c:	b480      	push	{r7}
 800182e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001830:	4b03      	ldr	r3, [pc, #12]	; (8001840 <HAL_RCC_GetHCLKFreq+0x14>)
 8001832:	681b      	ldr	r3, [r3, #0]
}
 8001834:	4618      	mov	r0, r3
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr
 800183e:	bf00      	nop
 8001840:	20000000 	.word	0x20000000

08001844 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001848:	f7ff fff0 	bl	800182c <HAL_RCC_GetHCLKFreq>
 800184c:	4602      	mov	r2, r0
 800184e:	4b05      	ldr	r3, [pc, #20]	; (8001864 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001850:	689b      	ldr	r3, [r3, #8]
 8001852:	0a9b      	lsrs	r3, r3, #10
 8001854:	f003 0307 	and.w	r3, r3, #7
 8001858:	4903      	ldr	r1, [pc, #12]	; (8001868 <HAL_RCC_GetPCLK1Freq+0x24>)
 800185a:	5ccb      	ldrb	r3, [r1, r3]
 800185c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001860:	4618      	mov	r0, r3
 8001862:	bd80      	pop	{r7, pc}
 8001864:	40023800 	.word	0x40023800
 8001868:	080053bc 	.word	0x080053bc

0800186c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
 8001874:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	220f      	movs	r2, #15
 800187a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800187c:	4b12      	ldr	r3, [pc, #72]	; (80018c8 <HAL_RCC_GetClockConfig+0x5c>)
 800187e:	689b      	ldr	r3, [r3, #8]
 8001880:	f003 0203 	and.w	r2, r3, #3
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001888:	4b0f      	ldr	r3, [pc, #60]	; (80018c8 <HAL_RCC_GetClockConfig+0x5c>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001894:	4b0c      	ldr	r3, [pc, #48]	; (80018c8 <HAL_RCC_GetClockConfig+0x5c>)
 8001896:	689b      	ldr	r3, [r3, #8]
 8001898:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 80018a0:	4b09      	ldr	r3, [pc, #36]	; (80018c8 <HAL_RCC_GetClockConfig+0x5c>)
 80018a2:	689b      	ldr	r3, [r3, #8]
 80018a4:	08db      	lsrs	r3, r3, #3
 80018a6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80018ae:	4b07      	ldr	r3, [pc, #28]	; (80018cc <HAL_RCC_GetClockConfig+0x60>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	f003 0207 	and.w	r2, r3, #7
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	601a      	str	r2, [r3, #0]
}
 80018ba:	bf00      	nop
 80018bc:	370c      	adds	r7, #12
 80018be:	46bd      	mov	sp, r7
 80018c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c4:	4770      	bx	lr
 80018c6:	bf00      	nop
 80018c8:	40023800 	.word	0x40023800
 80018cc:	40023c00 	.word	0x40023c00

080018d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80018d0:	b580      	push	{r7, lr}
 80018d2:	b082      	sub	sp, #8
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d101      	bne.n	80018e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e041      	b.n	8001966 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80018e8:	b2db      	uxtb	r3, r3
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d106      	bne.n	80018fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2200      	movs	r2, #0
 80018f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80018f6:	6878      	ldr	r0, [r7, #4]
 80018f8:	f000 f839 	bl	800196e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	2202      	movs	r2, #2
 8001900:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681a      	ldr	r2, [r3, #0]
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	3304      	adds	r3, #4
 800190c:	4619      	mov	r1, r3
 800190e:	4610      	mov	r0, r2
 8001910:	f000 f9d8 	bl	8001cc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	2201      	movs	r2, #1
 8001918:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	2201      	movs	r2, #1
 8001920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	2201      	movs	r2, #1
 8001928:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	2201      	movs	r2, #1
 8001930:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	2201      	movs	r2, #1
 8001938:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2201      	movs	r2, #1
 8001940:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	2201      	movs	r2, #1
 8001948:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2201      	movs	r2, #1
 8001958:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	2201      	movs	r2, #1
 8001960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001964:	2300      	movs	r3, #0
}
 8001966:	4618      	mov	r0, r3
 8001968:	3708      	adds	r7, #8
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}

0800196e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8001976:	bf00      	nop
 8001978:	370c      	adds	r7, #12
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
	...

08001984 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001984:	b480      	push	{r7}
 8001986:	b085      	sub	sp, #20
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001992:	b2db      	uxtb	r3, r3
 8001994:	2b01      	cmp	r3, #1
 8001996:	d001      	beq.n	800199c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e04e      	b.n	8001a3a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	2202      	movs	r2, #2
 80019a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	68da      	ldr	r2, [r3, #12]
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f042 0201 	orr.w	r2, r2, #1
 80019b2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	4a23      	ldr	r2, [pc, #140]	; (8001a48 <HAL_TIM_Base_Start_IT+0xc4>)
 80019ba:	4293      	cmp	r3, r2
 80019bc:	d022      	beq.n	8001a04 <HAL_TIM_Base_Start_IT+0x80>
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80019c6:	d01d      	beq.n	8001a04 <HAL_TIM_Base_Start_IT+0x80>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a1f      	ldr	r2, [pc, #124]	; (8001a4c <HAL_TIM_Base_Start_IT+0xc8>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d018      	beq.n	8001a04 <HAL_TIM_Base_Start_IT+0x80>
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	4a1e      	ldr	r2, [pc, #120]	; (8001a50 <HAL_TIM_Base_Start_IT+0xcc>)
 80019d8:	4293      	cmp	r3, r2
 80019da:	d013      	beq.n	8001a04 <HAL_TIM_Base_Start_IT+0x80>
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a1c      	ldr	r2, [pc, #112]	; (8001a54 <HAL_TIM_Base_Start_IT+0xd0>)
 80019e2:	4293      	cmp	r3, r2
 80019e4:	d00e      	beq.n	8001a04 <HAL_TIM_Base_Start_IT+0x80>
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	4a1b      	ldr	r2, [pc, #108]	; (8001a58 <HAL_TIM_Base_Start_IT+0xd4>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d009      	beq.n	8001a04 <HAL_TIM_Base_Start_IT+0x80>
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	4a19      	ldr	r2, [pc, #100]	; (8001a5c <HAL_TIM_Base_Start_IT+0xd8>)
 80019f6:	4293      	cmp	r3, r2
 80019f8:	d004      	beq.n	8001a04 <HAL_TIM_Base_Start_IT+0x80>
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	4a18      	ldr	r2, [pc, #96]	; (8001a60 <HAL_TIM_Base_Start_IT+0xdc>)
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d111      	bne.n	8001a28 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	689b      	ldr	r3, [r3, #8]
 8001a0a:	f003 0307 	and.w	r3, r3, #7
 8001a0e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d010      	beq.n	8001a38 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f042 0201 	orr.w	r2, r2, #1
 8001a24:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001a26:	e007      	b.n	8001a38 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	681a      	ldr	r2, [r3, #0]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f042 0201 	orr.w	r2, r2, #1
 8001a36:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3714      	adds	r7, #20
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a44:	4770      	bx	lr
 8001a46:	bf00      	nop
 8001a48:	40010000 	.word	0x40010000
 8001a4c:	40000400 	.word	0x40000400
 8001a50:	40000800 	.word	0x40000800
 8001a54:	40000c00 	.word	0x40000c00
 8001a58:	40010400 	.word	0x40010400
 8001a5c:	40014000 	.word	0x40014000
 8001a60:	40001800 	.word	0x40001800

08001a64 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001a64:	b580      	push	{r7, lr}
 8001a66:	b082      	sub	sp, #8
 8001a68:	af00      	add	r7, sp, #0
 8001a6a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	691b      	ldr	r3, [r3, #16]
 8001a72:	f003 0302 	and.w	r3, r3, #2
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d122      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	f003 0302 	and.w	r3, r3, #2
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d11b      	bne.n	8001ac0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f06f 0202 	mvn.w	r2, #2
 8001a90:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	2201      	movs	r2, #1
 8001a96:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	699b      	ldr	r3, [r3, #24]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	d003      	beq.n	8001aae <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001aa6:	6878      	ldr	r0, [r7, #4]
 8001aa8:	f000 f8ee 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8001aac:	e005      	b.n	8001aba <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001aae:	6878      	ldr	r0, [r7, #4]
 8001ab0:	f000 f8e0 	bl	8001c74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ab4:	6878      	ldr	r0, [r7, #4]
 8001ab6:	f000 f8f1 	bl	8001c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2200      	movs	r2, #0
 8001abe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	691b      	ldr	r3, [r3, #16]
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	2b04      	cmp	r3, #4
 8001acc:	d122      	bne.n	8001b14 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	68db      	ldr	r3, [r3, #12]
 8001ad4:	f003 0304 	and.w	r3, r3, #4
 8001ad8:	2b04      	cmp	r3, #4
 8001ada:	d11b      	bne.n	8001b14 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	f06f 0204 	mvn.w	r2, #4
 8001ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2202      	movs	r2, #2
 8001aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	699b      	ldr	r3, [r3, #24]
 8001af2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d003      	beq.n	8001b02 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001afa:	6878      	ldr	r0, [r7, #4]
 8001afc:	f000 f8c4 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8001b00:	e005      	b.n	8001b0e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b02:	6878      	ldr	r0, [r7, #4]
 8001b04:	f000 f8b6 	bl	8001c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b08:	6878      	ldr	r0, [r7, #4]
 8001b0a:	f000 f8c7 	bl	8001c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2200      	movs	r2, #0
 8001b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	681b      	ldr	r3, [r3, #0]
 8001b18:	691b      	ldr	r3, [r3, #16]
 8001b1a:	f003 0308 	and.w	r3, r3, #8
 8001b1e:	2b08      	cmp	r3, #8
 8001b20:	d122      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	68db      	ldr	r3, [r3, #12]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b08      	cmp	r3, #8
 8001b2e:	d11b      	bne.n	8001b68 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f06f 0208 	mvn.w	r2, #8
 8001b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2204      	movs	r2, #4
 8001b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	69db      	ldr	r3, [r3, #28]
 8001b46:	f003 0303 	and.w	r3, r3, #3
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d003      	beq.n	8001b56 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001b4e:	6878      	ldr	r0, [r7, #4]
 8001b50:	f000 f89a 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8001b54:	e005      	b.n	8001b62 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001b56:	6878      	ldr	r0, [r7, #4]
 8001b58:	f000 f88c 	bl	8001c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001b5c:	6878      	ldr	r0, [r7, #4]
 8001b5e:	f000 f89d 	bl	8001c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	2200      	movs	r2, #0
 8001b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	691b      	ldr	r3, [r3, #16]
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	2b10      	cmp	r3, #16
 8001b74:	d122      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	681b      	ldr	r3, [r3, #0]
 8001b7a:	68db      	ldr	r3, [r3, #12]
 8001b7c:	f003 0310 	and.w	r3, r3, #16
 8001b80:	2b10      	cmp	r3, #16
 8001b82:	d11b      	bne.n	8001bbc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f06f 0210 	mvn.w	r2, #16
 8001b8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	2208      	movs	r2, #8
 8001b92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d003      	beq.n	8001baa <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001ba2:	6878      	ldr	r0, [r7, #4]
 8001ba4:	f000 f870 	bl	8001c88 <HAL_TIM_IC_CaptureCallback>
 8001ba8:	e005      	b.n	8001bb6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001baa:	6878      	ldr	r0, [r7, #4]
 8001bac:	f000 f862 	bl	8001c74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f873 	bl	8001c9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	2200      	movs	r2, #0
 8001bba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	691b      	ldr	r3, [r3, #16]
 8001bc2:	f003 0301 	and.w	r3, r3, #1
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d10e      	bne.n	8001be8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	681b      	ldr	r3, [r3, #0]
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d107      	bne.n	8001be8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f06f 0201 	mvn.w	r2, #1
 8001be0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001be2:	6878      	ldr	r0, [r7, #4]
 8001be4:	f7fe fde6 	bl	80007b4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	691b      	ldr	r3, [r3, #16]
 8001bee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bf2:	2b80      	cmp	r3, #128	; 0x80
 8001bf4:	d10e      	bne.n	8001c14 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	68db      	ldr	r3, [r3, #12]
 8001bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c00:	2b80      	cmp	r3, #128	; 0x80
 8001c02:	d107      	bne.n	8001c14 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001c0c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8001c0e:	6878      	ldr	r0, [r7, #4]
 8001c10:	f000 f902 	bl	8001e18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	691b      	ldr	r3, [r3, #16]
 8001c1a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c1e:	2b40      	cmp	r3, #64	; 0x40
 8001c20:	d10e      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001c2c:	2b40      	cmp	r3, #64	; 0x40
 8001c2e:	d107      	bne.n	8001c40 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001c38:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001c3a:	6878      	ldr	r0, [r7, #4]
 8001c3c:	f000 f838 	bl	8001cb0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	691b      	ldr	r3, [r3, #16]
 8001c46:	f003 0320 	and.w	r3, r3, #32
 8001c4a:	2b20      	cmp	r3, #32
 8001c4c:	d10e      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	f003 0320 	and.w	r3, r3, #32
 8001c58:	2b20      	cmp	r3, #32
 8001c5a:	d107      	bne.n	8001c6c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f06f 0220 	mvn.w	r2, #32
 8001c64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8001c66:	6878      	ldr	r0, [r7, #4]
 8001c68:	f000 f8cc 	bl	8001e04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001c6c:	bf00      	nop
 8001c6e:	3708      	adds	r7, #8
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}

08001c74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001c74:	b480      	push	{r7}
 8001c76:	b083      	sub	sp, #12
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8001c7c:	bf00      	nop
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8001c90:	bf00      	nop
 8001c92:	370c      	adds	r7, #12
 8001c94:	46bd      	mov	sp, r7
 8001c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9a:	4770      	bx	lr

08001c9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b083      	sub	sp, #12
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr

08001cb0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8001cb8:	bf00      	nop
 8001cba:	370c      	adds	r7, #12
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc2:	4770      	bx	lr

08001cc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b085      	sub	sp, #20
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	4a40      	ldr	r2, [pc, #256]	; (8001dd8 <TIM_Base_SetConfig+0x114>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d013      	beq.n	8001d04 <TIM_Base_SetConfig+0x40>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001ce2:	d00f      	beq.n	8001d04 <TIM_Base_SetConfig+0x40>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	4a3d      	ldr	r2, [pc, #244]	; (8001ddc <TIM_Base_SetConfig+0x118>)
 8001ce8:	4293      	cmp	r3, r2
 8001cea:	d00b      	beq.n	8001d04 <TIM_Base_SetConfig+0x40>
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	4a3c      	ldr	r2, [pc, #240]	; (8001de0 <TIM_Base_SetConfig+0x11c>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d007      	beq.n	8001d04 <TIM_Base_SetConfig+0x40>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	4a3b      	ldr	r2, [pc, #236]	; (8001de4 <TIM_Base_SetConfig+0x120>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d003      	beq.n	8001d04 <TIM_Base_SetConfig+0x40>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	4a3a      	ldr	r2, [pc, #232]	; (8001de8 <TIM_Base_SetConfig+0x124>)
 8001d00:	4293      	cmp	r3, r2
 8001d02:	d108      	bne.n	8001d16 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8001d0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	68fa      	ldr	r2, [r7, #12]
 8001d12:	4313      	orrs	r3, r2
 8001d14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a2f      	ldr	r2, [pc, #188]	; (8001dd8 <TIM_Base_SetConfig+0x114>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d02b      	beq.n	8001d76 <TIM_Base_SetConfig+0xb2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001d24:	d027      	beq.n	8001d76 <TIM_Base_SetConfig+0xb2>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a2c      	ldr	r2, [pc, #176]	; (8001ddc <TIM_Base_SetConfig+0x118>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d023      	beq.n	8001d76 <TIM_Base_SetConfig+0xb2>
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	4a2b      	ldr	r2, [pc, #172]	; (8001de0 <TIM_Base_SetConfig+0x11c>)
 8001d32:	4293      	cmp	r3, r2
 8001d34:	d01f      	beq.n	8001d76 <TIM_Base_SetConfig+0xb2>
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	4a2a      	ldr	r2, [pc, #168]	; (8001de4 <TIM_Base_SetConfig+0x120>)
 8001d3a:	4293      	cmp	r3, r2
 8001d3c:	d01b      	beq.n	8001d76 <TIM_Base_SetConfig+0xb2>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	4a29      	ldr	r2, [pc, #164]	; (8001de8 <TIM_Base_SetConfig+0x124>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d017      	beq.n	8001d76 <TIM_Base_SetConfig+0xb2>
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a28      	ldr	r2, [pc, #160]	; (8001dec <TIM_Base_SetConfig+0x128>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <TIM_Base_SetConfig+0xb2>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a27      	ldr	r2, [pc, #156]	; (8001df0 <TIM_Base_SetConfig+0x12c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d00f      	beq.n	8001d76 <TIM_Base_SetConfig+0xb2>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a26      	ldr	r2, [pc, #152]	; (8001df4 <TIM_Base_SetConfig+0x130>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d00b      	beq.n	8001d76 <TIM_Base_SetConfig+0xb2>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a25      	ldr	r2, [pc, #148]	; (8001df8 <TIM_Base_SetConfig+0x134>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d007      	beq.n	8001d76 <TIM_Base_SetConfig+0xb2>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a24      	ldr	r2, [pc, #144]	; (8001dfc <TIM_Base_SetConfig+0x138>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d003      	beq.n	8001d76 <TIM_Base_SetConfig+0xb2>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a23      	ldr	r2, [pc, #140]	; (8001e00 <TIM_Base_SetConfig+0x13c>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d108      	bne.n	8001d88 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	68db      	ldr	r3, [r3, #12]
 8001d82:	68fa      	ldr	r2, [r7, #12]
 8001d84:	4313      	orrs	r3, r2
 8001d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	695b      	ldr	r3, [r3, #20]
 8001d92:	4313      	orrs	r3, r2
 8001d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	68fa      	ldr	r2, [r7, #12]
 8001d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	689a      	ldr	r2, [r3, #8]
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	4a0a      	ldr	r2, [pc, #40]	; (8001dd8 <TIM_Base_SetConfig+0x114>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d003      	beq.n	8001dbc <TIM_Base_SetConfig+0xf8>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	4a0c      	ldr	r2, [pc, #48]	; (8001de8 <TIM_Base_SetConfig+0x124>)
 8001db8:	4293      	cmp	r3, r2
 8001dba:	d103      	bne.n	8001dc4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	691a      	ldr	r2, [r3, #16]
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2201      	movs	r2, #1
 8001dc8:	615a      	str	r2, [r3, #20]
}
 8001dca:	bf00      	nop
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd4:	4770      	bx	lr
 8001dd6:	bf00      	nop
 8001dd8:	40010000 	.word	0x40010000
 8001ddc:	40000400 	.word	0x40000400
 8001de0:	40000800 	.word	0x40000800
 8001de4:	40000c00 	.word	0x40000c00
 8001de8:	40010400 	.word	0x40010400
 8001dec:	40014000 	.word	0x40014000
 8001df0:	40014400 	.word	0x40014400
 8001df4:	40014800 	.word	0x40014800
 8001df8:	40001800 	.word	0x40001800
 8001dfc:	40001c00 	.word	0x40001c00
 8001e00:	40002000 	.word	0x40002000

08001e04 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8001e04:	b480      	push	{r7}
 8001e06:	b083      	sub	sp, #12
 8001e08:	af00      	add	r7, sp, #0
 8001e0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8001e0c:	bf00      	nop
 8001e0e:	370c      	adds	r7, #12
 8001e10:	46bd      	mov	sp, r7
 8001e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e16:	4770      	bx	lr

08001e18 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8001e18:	b480      	push	{r7}
 8001e1a:	b083      	sub	sp, #12
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8001e20:	bf00      	nop
 8001e22:	370c      	adds	r7, #12
 8001e24:	46bd      	mov	sp, r7
 8001e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2a:	4770      	bx	lr

08001e2c <__NVIC_SetPriority>:
{
 8001e2c:	b480      	push	{r7}
 8001e2e:	b083      	sub	sp, #12
 8001e30:	af00      	add	r7, sp, #0
 8001e32:	4603      	mov	r3, r0
 8001e34:	6039      	str	r1, [r7, #0]
 8001e36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001e38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	db0a      	blt.n	8001e56 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	b2da      	uxtb	r2, r3
 8001e44:	490c      	ldr	r1, [pc, #48]	; (8001e78 <__NVIC_SetPriority+0x4c>)
 8001e46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e4a:	0112      	lsls	r2, r2, #4
 8001e4c:	b2d2      	uxtb	r2, r2
 8001e4e:	440b      	add	r3, r1
 8001e50:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001e54:	e00a      	b.n	8001e6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	b2da      	uxtb	r2, r3
 8001e5a:	4908      	ldr	r1, [pc, #32]	; (8001e7c <__NVIC_SetPriority+0x50>)
 8001e5c:	79fb      	ldrb	r3, [r7, #7]
 8001e5e:	f003 030f 	and.w	r3, r3, #15
 8001e62:	3b04      	subs	r3, #4
 8001e64:	0112      	lsls	r2, r2, #4
 8001e66:	b2d2      	uxtb	r2, r2
 8001e68:	440b      	add	r3, r1
 8001e6a:	761a      	strb	r2, [r3, #24]
}
 8001e6c:	bf00      	nop
 8001e6e:	370c      	adds	r7, #12
 8001e70:	46bd      	mov	sp, r7
 8001e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e76:	4770      	bx	lr
 8001e78:	e000e100 	.word	0xe000e100
 8001e7c:	e000ed00 	.word	0xe000ed00

08001e80 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8001e84:	4b05      	ldr	r3, [pc, #20]	; (8001e9c <SysTick_Handler+0x1c>)
 8001e86:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8001e88:	f002 f89c 	bl	8003fc4 <xTaskGetSchedulerState>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	2b01      	cmp	r3, #1
 8001e90:	d001      	beq.n	8001e96 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8001e92:	f002 feb9 	bl	8004c08 <xPortSysTickHandler>
  }
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	e000e010 	.word	0xe000e010

08001ea0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8001ea4:	2100      	movs	r1, #0
 8001ea6:	f06f 0004 	mvn.w	r0, #4
 8001eaa:	f7ff ffbf 	bl	8001e2c <__NVIC_SetPriority>
#endif
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
	...

08001eb4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8001eb4:	b480      	push	{r7}
 8001eb6:	b083      	sub	sp, #12
 8001eb8:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001eba:	f3ef 8305 	mrs	r3, IPSR
 8001ebe:	603b      	str	r3, [r7, #0]
  return(result);
 8001ec0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d003      	beq.n	8001ece <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8001ec6:	f06f 0305 	mvn.w	r3, #5
 8001eca:	607b      	str	r3, [r7, #4]
 8001ecc:	e00c      	b.n	8001ee8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8001ece:	4b0a      	ldr	r3, [pc, #40]	; (8001ef8 <osKernelInitialize+0x44>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8001ed6:	4b08      	ldr	r3, [pc, #32]	; (8001ef8 <osKernelInitialize+0x44>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8001edc:	2300      	movs	r3, #0
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	e002      	b.n	8001ee8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8001ee2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ee6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001ee8:	687b      	ldr	r3, [r7, #4]
}
 8001eea:	4618      	mov	r0, r3
 8001eec:	370c      	adds	r7, #12
 8001eee:	46bd      	mov	sp, r7
 8001ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ef4:	4770      	bx	lr
 8001ef6:	bf00      	nop
 8001ef8:	200000ec 	.word	0x200000ec

08001efc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b082      	sub	sp, #8
 8001f00:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f02:	f3ef 8305 	mrs	r3, IPSR
 8001f06:	603b      	str	r3, [r7, #0]
  return(result);
 8001f08:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <osKernelStart+0x1a>
    stat = osErrorISR;
 8001f0e:	f06f 0305 	mvn.w	r3, #5
 8001f12:	607b      	str	r3, [r7, #4]
 8001f14:	e010      	b.n	8001f38 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8001f16:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <osKernelStart+0x48>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	2b01      	cmp	r3, #1
 8001f1c:	d109      	bne.n	8001f32 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8001f1e:	f7ff ffbf 	bl	8001ea0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8001f22:	4b08      	ldr	r3, [pc, #32]	; (8001f44 <osKernelStart+0x48>)
 8001f24:	2202      	movs	r2, #2
 8001f26:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8001f28:	f001 fb52 	bl	80035d0 <vTaskStartScheduler>
      stat = osOK;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	e002      	b.n	8001f38 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8001f32:	f04f 33ff 	mov.w	r3, #4294967295
 8001f36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8001f38:	687b      	ldr	r3, [r7, #4]
}
 8001f3a:	4618      	mov	r0, r3
 8001f3c:	3708      	adds	r7, #8
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	200000ec 	.word	0x200000ec

08001f48 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b08e      	sub	sp, #56	; 0x38
 8001f4c:	af04      	add	r7, sp, #16
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	60b9      	str	r1, [r7, #8]
 8001f52:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8001f54:	2300      	movs	r3, #0
 8001f56:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8001f58:	f3ef 8305 	mrs	r3, IPSR
 8001f5c:	617b      	str	r3, [r7, #20]
  return(result);
 8001f5e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d17e      	bne.n	8002062 <osThreadNew+0x11a>
 8001f64:	68fb      	ldr	r3, [r7, #12]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d07b      	beq.n	8002062 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8001f6a:	2380      	movs	r3, #128	; 0x80
 8001f6c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8001f6e:	2318      	movs	r3, #24
 8001f70:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8001f72:	2300      	movs	r3, #0
 8001f74:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8001f76:	f04f 33ff 	mov.w	r3, #4294967295
 8001f7a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d045      	beq.n	800200e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <osThreadNew+0x48>
        name = attr->name;
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	699b      	ldr	r3, [r3, #24]
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d002      	beq.n	8001f9e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8001f9e:	69fb      	ldr	r3, [r7, #28]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d008      	beq.n	8001fb6 <osThreadNew+0x6e>
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	2b38      	cmp	r3, #56	; 0x38
 8001fa8:	d805      	bhi.n	8001fb6 <osThreadNew+0x6e>
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	f003 0301 	and.w	r3, r3, #1
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d001      	beq.n	8001fba <osThreadNew+0x72>
        return (NULL);
 8001fb6:	2300      	movs	r3, #0
 8001fb8:	e054      	b.n	8002064 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	695b      	ldr	r3, [r3, #20]
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d003      	beq.n	8001fca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	695b      	ldr	r3, [r3, #20]
 8001fc6:	089b      	lsrs	r3, r3, #2
 8001fc8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d00e      	beq.n	8001ff0 <osThreadNew+0xa8>
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	68db      	ldr	r3, [r3, #12]
 8001fd6:	2bbb      	cmp	r3, #187	; 0xbb
 8001fd8:	d90a      	bls.n	8001ff0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d006      	beq.n	8001ff0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d002      	beq.n	8001ff0 <osThreadNew+0xa8>
        mem = 1;
 8001fea:	2301      	movs	r3, #1
 8001fec:	61bb      	str	r3, [r7, #24]
 8001fee:	e010      	b.n	8002012 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d10c      	bne.n	8002012 <osThreadNew+0xca>
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	68db      	ldr	r3, [r3, #12]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d108      	bne.n	8002012 <osThreadNew+0xca>
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691b      	ldr	r3, [r3, #16]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d104      	bne.n	8002012 <osThreadNew+0xca>
          mem = 0;
 8002008:	2300      	movs	r3, #0
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	e001      	b.n	8002012 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8002012:	69bb      	ldr	r3, [r7, #24]
 8002014:	2b01      	cmp	r3, #1
 8002016:	d110      	bne.n	800203a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800201c:	687a      	ldr	r2, [r7, #4]
 800201e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8002020:	9202      	str	r2, [sp, #8]
 8002022:	9301      	str	r3, [sp, #4]
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	9300      	str	r3, [sp, #0]
 8002028:	68bb      	ldr	r3, [r7, #8]
 800202a:	6a3a      	ldr	r2, [r7, #32]
 800202c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800202e:	68f8      	ldr	r0, [r7, #12]
 8002030:	f001 f8e2 	bl	80031f8 <xTaskCreateStatic>
 8002034:	4603      	mov	r3, r0
 8002036:	613b      	str	r3, [r7, #16]
 8002038:	e013      	b.n	8002062 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800203a:	69bb      	ldr	r3, [r7, #24]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d110      	bne.n	8002062 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8002040:	6a3b      	ldr	r3, [r7, #32]
 8002042:	b29a      	uxth	r2, r3
 8002044:	f107 0310 	add.w	r3, r7, #16
 8002048:	9301      	str	r3, [sp, #4]
 800204a:	69fb      	ldr	r3, [r7, #28]
 800204c:	9300      	str	r3, [sp, #0]
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002052:	68f8      	ldr	r0, [r7, #12]
 8002054:	f001 f92d 	bl	80032b2 <xTaskCreate>
 8002058:	4603      	mov	r3, r0
 800205a:	2b01      	cmp	r3, #1
 800205c:	d001      	beq.n	8002062 <osThreadNew+0x11a>
            hTask = NULL;
 800205e:	2300      	movs	r3, #0
 8002060:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8002062:	693b      	ldr	r3, [r7, #16]
}
 8002064:	4618      	mov	r0, r3
 8002066:	3728      	adds	r7, #40	; 0x28
 8002068:	46bd      	mov	sp, r7
 800206a:	bd80      	pop	{r7, pc}

0800206c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002074:	f3ef 8305 	mrs	r3, IPSR
 8002078:	60bb      	str	r3, [r7, #8]
  return(result);
 800207a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800207c:	2b00      	cmp	r3, #0
 800207e:	d003      	beq.n	8002088 <osDelay+0x1c>
    stat = osErrorISR;
 8002080:	f06f 0305 	mvn.w	r3, #5
 8002084:	60fb      	str	r3, [r7, #12]
 8002086:	e007      	b.n	8002098 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8002088:	2300      	movs	r3, #0
 800208a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2b00      	cmp	r3, #0
 8002090:	d002      	beq.n	8002098 <osDelay+0x2c>
      vTaskDelay(ticks);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f001 fa68 	bl	8003568 <vTaskDelay>
    }
  }

  return (stat);
 8002098:	68fb      	ldr	r3, [r7, #12]
}
 800209a:	4618      	mov	r0, r3
 800209c:	3710      	adds	r7, #16
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b086      	sub	sp, #24
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 80020aa:	2300      	movs	r3, #0
 80020ac:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80020ae:	f3ef 8305 	mrs	r3, IPSR
 80020b2:	60fb      	str	r3, [r7, #12]
  return(result);
 80020b4:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d12d      	bne.n	8002116 <osEventFlagsNew+0x74>
    mem = -1;
 80020ba:	f04f 33ff 	mov.w	r3, #4294967295
 80020be:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d015      	beq.n	80020f2 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	689b      	ldr	r3, [r3, #8]
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d006      	beq.n	80020dc <osEventFlagsNew+0x3a>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b1f      	cmp	r3, #31
 80020d4:	d902      	bls.n	80020dc <osEventFlagsNew+0x3a>
        mem = 1;
 80020d6:	2301      	movs	r3, #1
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	e00c      	b.n	80020f6 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	689b      	ldr	r3, [r3, #8]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d108      	bne.n	80020f6 <osEventFlagsNew+0x54>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	68db      	ldr	r3, [r3, #12]
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	d104      	bne.n	80020f6 <osEventFlagsNew+0x54>
          mem = 0;
 80020ec:	2300      	movs	r3, #0
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	e001      	b.n	80020f6 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 80020f2:	2300      	movs	r3, #0
 80020f4:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 80020f6:	693b      	ldr	r3, [r7, #16]
 80020f8:	2b01      	cmp	r3, #1
 80020fa:	d106      	bne.n	800210a <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	689b      	ldr	r3, [r3, #8]
 8002100:	4618      	mov	r0, r3
 8002102:	f000 f8eb 	bl	80022dc <xEventGroupCreateStatic>
 8002106:	6178      	str	r0, [r7, #20]
 8002108:	e005      	b.n	8002116 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 800210a:	693b      	ldr	r3, [r7, #16]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8002110:	f000 f91b 	bl	800234a <xEventGroupCreate>
 8002114:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8002116:	697b      	ldr	r3, [r7, #20]
}
 8002118:	4618      	mov	r0, r3
 800211a:	3718      	adds	r7, #24
 800211c:	46bd      	mov	sp, r7
 800211e:	bd80      	pop	{r7, pc}

08002120 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	2b00      	cmp	r3, #0
 8002132:	d004      	beq.n	800213e <osEventFlagsSet+0x1e>
 8002134:	683b      	ldr	r3, [r7, #0]
 8002136:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800213a:	2b00      	cmp	r3, #0
 800213c:	d003      	beq.n	8002146 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 800213e:	f06f 0303 	mvn.w	r3, #3
 8002142:	617b      	str	r3, [r7, #20]
 8002144:	e028      	b.n	8002198 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8002146:	f3ef 8305 	mrs	r3, IPSR
 800214a:	60fb      	str	r3, [r7, #12]
  return(result);
 800214c:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 800214e:	2b00      	cmp	r3, #0
 8002150:	d01d      	beq.n	800218e <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8002156:	f107 0308 	add.w	r3, r7, #8
 800215a:	461a      	mov	r2, r3
 800215c:	6839      	ldr	r1, [r7, #0]
 800215e:	6938      	ldr	r0, [r7, #16]
 8002160:	f000 fa96 	bl	8002690 <xEventGroupSetBitsFromISR>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d103      	bne.n	8002172 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 800216a:	f06f 0302 	mvn.w	r3, #2
 800216e:	617b      	str	r3, [r7, #20]
 8002170:	e012      	b.n	8002198 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8002176:	68bb      	ldr	r3, [r7, #8]
 8002178:	2b00      	cmp	r3, #0
 800217a:	d00d      	beq.n	8002198 <osEventFlagsSet+0x78>
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <osEventFlagsSet+0x84>)
 800217e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	f3bf 8f4f 	dsb	sy
 8002188:	f3bf 8f6f 	isb	sy
 800218c:	e004      	b.n	8002198 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 800218e:	6839      	ldr	r1, [r7, #0]
 8002190:	6938      	ldr	r0, [r7, #16]
 8002192:	f000 f9c3 	bl	800251c <xEventGroupSetBits>
 8002196:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8002198:	697b      	ldr	r3, [r7, #20]
}
 800219a:	4618      	mov	r0, r3
 800219c:	3718      	adds	r7, #24
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
 80021a2:	bf00      	nop
 80021a4:	e000ed04 	.word	0xe000ed04

080021a8 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 80021a8:	b580      	push	{r7, lr}
 80021aa:	b08c      	sub	sp, #48	; 0x30
 80021ac:	af02      	add	r7, sp, #8
 80021ae:	60f8      	str	r0, [r7, #12]
 80021b0:	60b9      	str	r1, [r7, #8]
 80021b2:	607a      	str	r2, [r7, #4]
 80021b4:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 80021ba:	69bb      	ldr	r3, [r7, #24]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	d004      	beq.n	80021ca <osEventFlagsWait+0x22>
 80021c0:	68bb      	ldr	r3, [r7, #8]
 80021c2:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d003      	beq.n	80021d2 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 80021ca:	f06f 0303 	mvn.w	r3, #3
 80021ce:	61fb      	str	r3, [r7, #28]
 80021d0:	e04b      	b.n	800226a <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80021d2:	f3ef 8305 	mrs	r3, IPSR
 80021d6:	617b      	str	r3, [r7, #20]
  return(result);
 80021d8:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 80021de:	f06f 0305 	mvn.w	r3, #5
 80021e2:	61fb      	str	r3, [r7, #28]
 80021e4:	e041      	b.n	800226a <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	f003 0301 	and.w	r3, r3, #1
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d002      	beq.n	80021f6 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 80021f0:	2301      	movs	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
 80021f4:	e001      	b.n	80021fa <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	f003 0302 	and.w	r3, r3, #2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d002      	beq.n	800220a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8002204:	2300      	movs	r3, #0
 8002206:	623b      	str	r3, [r7, #32]
 8002208:	e001      	b.n	800220e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 800220a:	2301      	movs	r3, #1
 800220c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	9300      	str	r3, [sp, #0]
 8002212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002214:	6a3a      	ldr	r2, [r7, #32]
 8002216:	68b9      	ldr	r1, [r7, #8]
 8002218:	69b8      	ldr	r0, [r7, #24]
 800221a:	f000 f8b1 	bl	8002380 <xEventGroupWaitBits>
 800221e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d010      	beq.n	800224c <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 800222a:	68ba      	ldr	r2, [r7, #8]
 800222c:	69fb      	ldr	r3, [r7, #28]
 800222e:	4013      	ands	r3, r2
 8002230:	68ba      	ldr	r2, [r7, #8]
 8002232:	429a      	cmp	r2, r3
 8002234:	d019      	beq.n	800226a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	2b00      	cmp	r3, #0
 800223a:	d003      	beq.n	8002244 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 800223c:	f06f 0301 	mvn.w	r3, #1
 8002240:	61fb      	str	r3, [r7, #28]
 8002242:	e012      	b.n	800226a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002244:	f06f 0302 	mvn.w	r3, #2
 8002248:	61fb      	str	r3, [r7, #28]
 800224a:	e00e      	b.n	800226a <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 800224c:	68ba      	ldr	r2, [r7, #8]
 800224e:	69fb      	ldr	r3, [r7, #28]
 8002250:	4013      	ands	r3, r2
 8002252:	2b00      	cmp	r3, #0
 8002254:	d109      	bne.n	800226a <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	2b00      	cmp	r3, #0
 800225a:	d003      	beq.n	8002264 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 800225c:	f06f 0301 	mvn.w	r3, #1
 8002260:	61fb      	str	r3, [r7, #28]
 8002262:	e002      	b.n	800226a <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8002264:	f06f 0302 	mvn.w	r3, #2
 8002268:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 800226a:	69fb      	ldr	r3, [r7, #28]
}
 800226c:	4618      	mov	r0, r3
 800226e:	3728      	adds	r7, #40	; 0x28
 8002270:	46bd      	mov	sp, r7
 8002272:	bd80      	pop	{r7, pc}

08002274 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8002274:	b480      	push	{r7}
 8002276:	b085      	sub	sp, #20
 8002278:	af00      	add	r7, sp, #0
 800227a:	60f8      	str	r0, [r7, #12]
 800227c:	60b9      	str	r1, [r7, #8]
 800227e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	4a07      	ldr	r2, [pc, #28]	; (80022a0 <vApplicationGetIdleTaskMemory+0x2c>)
 8002284:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8002286:	68bb      	ldr	r3, [r7, #8]
 8002288:	4a06      	ldr	r2, [pc, #24]	; (80022a4 <vApplicationGetIdleTaskMemory+0x30>)
 800228a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2280      	movs	r2, #128	; 0x80
 8002290:	601a      	str	r2, [r3, #0]
}
 8002292:	bf00      	nop
 8002294:	3714      	adds	r7, #20
 8002296:	46bd      	mov	sp, r7
 8002298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800229c:	4770      	bx	lr
 800229e:	bf00      	nop
 80022a0:	200000f0 	.word	0x200000f0
 80022a4:	200001ac 	.word	0x200001ac

080022a8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80022a8:	b480      	push	{r7}
 80022aa:	b085      	sub	sp, #20
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	60f8      	str	r0, [r7, #12]
 80022b0:	60b9      	str	r1, [r7, #8]
 80022b2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80022b4:	68fb      	ldr	r3, [r7, #12]
 80022b6:	4a07      	ldr	r2, [pc, #28]	; (80022d4 <vApplicationGetTimerTaskMemory+0x2c>)
 80022b8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80022ba:	68bb      	ldr	r3, [r7, #8]
 80022bc:	4a06      	ldr	r2, [pc, #24]	; (80022d8 <vApplicationGetTimerTaskMemory+0x30>)
 80022be:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022c6:	601a      	str	r2, [r3, #0]
}
 80022c8:	bf00      	nop
 80022ca:	3714      	adds	r7, #20
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr
 80022d4:	200003ac 	.word	0x200003ac
 80022d8:	20000468 	.word	0x20000468

080022dc <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10a      	bne.n	8002300 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80022ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022ee:	f383 8811 	msr	BASEPRI, r3
 80022f2:	f3bf 8f6f 	isb	sy
 80022f6:	f3bf 8f4f 	dsb	sy
 80022fa:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80022fc:	bf00      	nop
 80022fe:	e7fe      	b.n	80022fe <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 8002300:	2320      	movs	r3, #32
 8002302:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	2b20      	cmp	r3, #32
 8002308:	d00a      	beq.n	8002320 <xEventGroupCreateStatic+0x44>
	__asm volatile
 800230a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800230e:	f383 8811 	msr	BASEPRI, r3
 8002312:	f3bf 8f6f 	isb	sy
 8002316:	f3bf 8f4f 	dsb	sy
 800231a:	60fb      	str	r3, [r7, #12]
}
 800231c:	bf00      	nop
 800231e:	e7fe      	b.n	800231e <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 8002324:	697b      	ldr	r3, [r7, #20]
 8002326:	2b00      	cmp	r3, #0
 8002328:	d00a      	beq.n	8002340 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2200      	movs	r2, #0
 800232e:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002330:	697b      	ldr	r3, [r7, #20]
 8002332:	3304      	adds	r3, #4
 8002334:	4618      	mov	r0, r3
 8002336:	f000 f9bf 	bl	80026b8 <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800233a:	697b      	ldr	r3, [r7, #20]
 800233c:	2201      	movs	r2, #1
 800233e:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8002340:	697b      	ldr	r3, [r7, #20]
	}
 8002342:	4618      	mov	r0, r3
 8002344:	3718      	adds	r7, #24
 8002346:	46bd      	mov	sp, r7
 8002348:	bd80      	pop	{r7, pc}

0800234a <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800234a:	b580      	push	{r7, lr}
 800234c:	b082      	sub	sp, #8
 800234e:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8002350:	2020      	movs	r0, #32
 8002352:	f002 fce9 	bl	8004d28 <pvPortMalloc>
 8002356:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2b00      	cmp	r3, #0
 800235c:	d00a      	beq.n	8002374 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	2200      	movs	r2, #0
 8002362:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	3304      	adds	r3, #4
 8002368:	4618      	mov	r0, r3
 800236a:	f000 f9a5 	bl	80026b8 <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	2200      	movs	r2, #0
 8002372:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8002374:	687b      	ldr	r3, [r7, #4]
	}
 8002376:	4618      	mov	r0, r3
 8002378:	3708      	adds	r7, #8
 800237a:	46bd      	mov	sp, r7
 800237c:	bd80      	pop	{r7, pc}
	...

08002380 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b090      	sub	sp, #64	; 0x40
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 8002396:	2300      	movs	r3, #0
 8002398:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10a      	bne.n	80023b6 <xEventGroupWaitBits+0x36>
	__asm volatile
 80023a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023a4:	f383 8811 	msr	BASEPRI, r3
 80023a8:	f3bf 8f6f 	isb	sy
 80023ac:	f3bf 8f4f 	dsb	sy
 80023b0:	623b      	str	r3, [r7, #32]
}
 80023b2:	bf00      	nop
 80023b4:	e7fe      	b.n	80023b4 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 80023b6:	68bb      	ldr	r3, [r7, #8]
 80023b8:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d00a      	beq.n	80023d6 <xEventGroupWaitBits+0x56>
	__asm volatile
 80023c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023c4:	f383 8811 	msr	BASEPRI, r3
 80023c8:	f3bf 8f6f 	isb	sy
 80023cc:	f3bf 8f4f 	dsb	sy
 80023d0:	61fb      	str	r3, [r7, #28]
}
 80023d2:	bf00      	nop
 80023d4:	e7fe      	b.n	80023d4 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80023d6:	68bb      	ldr	r3, [r7, #8]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d10a      	bne.n	80023f2 <xEventGroupWaitBits+0x72>
	__asm volatile
 80023dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80023e0:	f383 8811 	msr	BASEPRI, r3
 80023e4:	f3bf 8f6f 	isb	sy
 80023e8:	f3bf 8f4f 	dsb	sy
 80023ec:	61bb      	str	r3, [r7, #24]
}
 80023ee:	bf00      	nop
 80023f0:	e7fe      	b.n	80023f0 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80023f2:	f001 fde7 	bl	8003fc4 <xTaskGetSchedulerState>
 80023f6:	4603      	mov	r3, r0
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d102      	bne.n	8002402 <xEventGroupWaitBits+0x82>
 80023fc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d101      	bne.n	8002406 <xEventGroupWaitBits+0x86>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <xEventGroupWaitBits+0x88>
 8002406:	2300      	movs	r3, #0
 8002408:	2b00      	cmp	r3, #0
 800240a:	d10a      	bne.n	8002422 <xEventGroupWaitBits+0xa2>
	__asm volatile
 800240c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002410:	f383 8811 	msr	BASEPRI, r3
 8002414:	f3bf 8f6f 	isb	sy
 8002418:	f3bf 8f4f 	dsb	sy
 800241c:	617b      	str	r3, [r7, #20]
}
 800241e:	bf00      	nop
 8002420:	e7fe      	b.n	8002420 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 8002422:	f001 f945 	bl	80036b0 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 8002426:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 800242c:	683a      	ldr	r2, [r7, #0]
 800242e:	68b9      	ldr	r1, [r7, #8]
 8002430:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8002432:	f000 f90b 	bl	800264c <prvTestWaitCondition>
 8002436:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 8002438:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800243a:	2b00      	cmp	r3, #0
 800243c:	d00e      	beq.n	800245c <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8002442:	2300      	movs	r3, #0
 8002444:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d028      	beq.n	800249e <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 800244c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800244e:	681a      	ldr	r2, [r3, #0]
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	43db      	mvns	r3, r3
 8002454:	401a      	ands	r2, r3
 8002456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002458:	601a      	str	r2, [r3, #0]
 800245a:	e020      	b.n	800249e <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 800245c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800245e:	2b00      	cmp	r3, #0
 8002460:	d104      	bne.n	800246c <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8002462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002464:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 8002466:	2301      	movs	r3, #1
 8002468:	633b      	str	r3, [r7, #48]	; 0x30
 800246a:	e018      	b.n	800249e <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d003      	beq.n	800247a <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8002472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002474:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002478:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	2b00      	cmp	r3, #0
 800247e:	d003      	beq.n	8002488 <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8002480:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002482:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002486:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 8002488:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800248a:	1d18      	adds	r0, r3, #4
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002490:	4313      	orrs	r3, r2
 8002492:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002494:	4619      	mov	r1, r3
 8002496:	f001 fb09 	bl	8003aac <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800249a:	2300      	movs	r3, #0
 800249c:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 800249e:	f001 f915 	bl	80036cc <xTaskResumeAll>
 80024a2:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 80024a4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d031      	beq.n	800250e <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 80024aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d107      	bne.n	80024c0 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 80024b0:	4b19      	ldr	r3, [pc, #100]	; (8002518 <xEventGroupWaitBits+0x198>)
 80024b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80024b6:	601a      	str	r2, [r3, #0]
 80024b8:	f3bf 8f4f 	dsb	sy
 80024bc:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 80024c0:	f001 fe0c 	bl	80040dc <uxTaskResetEventItemValue>
 80024c4:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 80024c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024c8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024cc:	2b00      	cmp	r3, #0
 80024ce:	d11a      	bne.n	8002506 <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80024d0:	f002 fb08 	bl	8004ae4 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80024d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80024da:	683a      	ldr	r2, [r7, #0]
 80024dc:	68b9      	ldr	r1, [r7, #8]
 80024de:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80024e0:	f000 f8b4 	bl	800264c <prvTestWaitCondition>
 80024e4:	4603      	mov	r3, r0
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d009      	beq.n	80024fe <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d006      	beq.n	80024fe <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80024f0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	68bb      	ldr	r3, [r7, #8]
 80024f6:	43db      	mvns	r3, r3
 80024f8:	401a      	ands	r2, r3
 80024fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80024fc:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80024fe:	2301      	movs	r3, #1
 8002500:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 8002502:	f002 fb1f 	bl	8004b44 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 8002506:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002508:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 800250c:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 800250e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002510:	4618      	mov	r0, r3
 8002512:	3740      	adds	r7, #64	; 0x40
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	e000ed04 	.word	0xe000ed04

0800251c <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 800251c:	b580      	push	{r7, lr}
 800251e:	b08e      	sub	sp, #56	; 0x38
 8002520:	af00      	add	r7, sp, #0
 8002522:	6078      	str	r0, [r7, #4]
 8002524:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 8002526:	2300      	movs	r3, #0
 8002528:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 800252e:	2300      	movs	r3, #0
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	2b00      	cmp	r3, #0
 8002536:	d10a      	bne.n	800254e <xEventGroupSetBits+0x32>
	__asm volatile
 8002538:	f04f 0350 	mov.w	r3, #80	; 0x50
 800253c:	f383 8811 	msr	BASEPRI, r3
 8002540:	f3bf 8f6f 	isb	sy
 8002544:	f3bf 8f4f 	dsb	sy
 8002548:	613b      	str	r3, [r7, #16]
}
 800254a:	bf00      	nop
 800254c:	e7fe      	b.n	800254c <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800254e:	683b      	ldr	r3, [r7, #0]
 8002550:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8002554:	2b00      	cmp	r3, #0
 8002556:	d00a      	beq.n	800256e <xEventGroupSetBits+0x52>
	__asm volatile
 8002558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800255c:	f383 8811 	msr	BASEPRI, r3
 8002560:	f3bf 8f6f 	isb	sy
 8002564:	f3bf 8f4f 	dsb	sy
 8002568:	60fb      	str	r3, [r7, #12]
}
 800256a:	bf00      	nop
 800256c:	e7fe      	b.n	800256c <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 800256e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002570:	3304      	adds	r3, #4
 8002572:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8002574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002576:	3308      	adds	r3, #8
 8002578:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800257a:	f001 f899 	bl	80036b0 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 800257e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002580:	68db      	ldr	r3, [r3, #12]
 8002582:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8002584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002586:	681a      	ldr	r2, [r3, #0]
 8002588:	683b      	ldr	r3, [r7, #0]
 800258a:	431a      	orrs	r2, r3
 800258c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800258e:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8002590:	e03c      	b.n	800260c <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8002592:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 8002598:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 800259e:	2300      	movs	r3, #0
 80025a0:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 80025a8:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 80025aa:	69bb      	ldr	r3, [r7, #24]
 80025ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80025b0:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d108      	bne.n	80025ce <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 80025bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025be:	681a      	ldr	r2, [r3, #0]
 80025c0:	69bb      	ldr	r3, [r7, #24]
 80025c2:	4013      	ands	r3, r2
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d00b      	beq.n	80025e0 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 80025c8:	2301      	movs	r3, #1
 80025ca:	62fb      	str	r3, [r7, #44]	; 0x2c
 80025cc:	e008      	b.n	80025e0 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80025ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025d0:	681a      	ldr	r2, [r3, #0]
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	4013      	ands	r3, r2
 80025d6:	69ba      	ldr	r2, [r7, #24]
 80025d8:	429a      	cmp	r2, r3
 80025da:	d101      	bne.n	80025e0 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80025dc:	2301      	movs	r3, #1
 80025de:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80025e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d010      	beq.n	8002608 <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80025e6:	697b      	ldr	r3, [r7, #20]
 80025e8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d003      	beq.n	80025f8 <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80025f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80025f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002600:	4619      	mov	r1, r3
 8002602:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8002604:	f001 fb1e 	bl	8003c44 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 800260c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800260e:	6a3b      	ldr	r3, [r7, #32]
 8002610:	429a      	cmp	r2, r3
 8002612:	d1be      	bne.n	8002592 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 8002614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002616:	681a      	ldr	r2, [r3, #0]
 8002618:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800261a:	43db      	mvns	r3, r3
 800261c:	401a      	ands	r2, r3
 800261e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002620:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 8002622:	f001 f853 	bl	80036cc <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 8002626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002628:	681b      	ldr	r3, [r3, #0]
}
 800262a:	4618      	mov	r0, r3
 800262c:	3738      	adds	r7, #56	; 0x38
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}

08002632 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8002632:	b580      	push	{r7, lr}
 8002634:	b082      	sub	sp, #8
 8002636:	af00      	add	r7, sp, #0
 8002638:	6078      	str	r0, [r7, #4]
 800263a:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 800263c:	6839      	ldr	r1, [r7, #0]
 800263e:	6878      	ldr	r0, [r7, #4]
 8002640:	f7ff ff6c 	bl	800251c <xEventGroupSetBits>
}
 8002644:	bf00      	nop
 8002646:	3708      	adds	r7, #8
 8002648:	46bd      	mov	sp, r7
 800264a:	bd80      	pop	{r7, pc}

0800264c <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	60f8      	str	r0, [r7, #12]
 8002654:	60b9      	str	r1, [r7, #8]
 8002656:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 8002658:	2300      	movs	r3, #0
 800265a:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2b00      	cmp	r3, #0
 8002660:	d107      	bne.n	8002672 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	68bb      	ldr	r3, [r7, #8]
 8002666:	4013      	ands	r3, r2
 8002668:	2b00      	cmp	r3, #0
 800266a:	d00a      	beq.n	8002682 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800266c:	2301      	movs	r3, #1
 800266e:	617b      	str	r3, [r7, #20]
 8002670:	e007      	b.n	8002682 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	68bb      	ldr	r3, [r7, #8]
 8002676:	4013      	ands	r3, r2
 8002678:	68ba      	ldr	r2, [r7, #8]
 800267a:	429a      	cmp	r2, r3
 800267c:	d101      	bne.n	8002682 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 800267e:	2301      	movs	r3, #1
 8002680:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8002682:	697b      	ldr	r3, [r7, #20]
}
 8002684:	4618      	mov	r0, r3
 8002686:	371c      	adds	r7, #28
 8002688:	46bd      	mov	sp, r7
 800268a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268e:	4770      	bx	lr

08002690 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8002690:	b580      	push	{r7, lr}
 8002692:	b086      	sub	sp, #24
 8002694:	af00      	add	r7, sp, #0
 8002696:	60f8      	str	r0, [r7, #12]
 8002698:	60b9      	str	r1, [r7, #8]
 800269a:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	68ba      	ldr	r2, [r7, #8]
 80026a0:	68f9      	ldr	r1, [r7, #12]
 80026a2:	4804      	ldr	r0, [pc, #16]	; (80026b4 <xEventGroupSetBitsFromISR+0x24>)
 80026a4:	f002 f8d4 	bl	8004850 <xTimerPendFunctionCallFromISR>
 80026a8:	6178      	str	r0, [r7, #20]

		return xReturn;
 80026aa:	697b      	ldr	r3, [r7, #20]
	}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3718      	adds	r7, #24
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}
 80026b4:	08002633 	.word	0x08002633

080026b8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80026b8:	b480      	push	{r7}
 80026ba:	b083      	sub	sp, #12
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	f103 0208 	add.w	r2, r3, #8
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	f04f 32ff 	mov.w	r2, #4294967295
 80026d0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	f103 0208 	add.w	r2, r3, #8
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	f103 0208 	add.w	r2, r3, #8
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80026ec:	bf00      	nop
 80026ee:	370c      	adds	r7, #12
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr

080026f8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80026f8:	b480      	push	{r7}
 80026fa:	b083      	sub	sp, #12
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	2200      	movs	r2, #0
 8002704:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8002706:	bf00      	nop
 8002708:	370c      	adds	r7, #12
 800270a:	46bd      	mov	sp, r7
 800270c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002710:	4770      	bx	lr

08002712 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8002712:	b480      	push	{r7}
 8002714:	b085      	sub	sp, #20
 8002716:	af00      	add	r7, sp, #0
 8002718:	6078      	str	r0, [r7, #4]
 800271a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8002728:	68fb      	ldr	r3, [r7, #12]
 800272a:	689a      	ldr	r2, [r3, #8]
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	683a      	ldr	r2, [r7, #0]
 8002736:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	683a      	ldr	r2, [r7, #0]
 800273c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	687a      	ldr	r2, [r7, #4]
 8002742:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	1c5a      	adds	r2, r3, #1
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	601a      	str	r2, [r3, #0]
}
 800274e:	bf00      	nop
 8002750:	3714      	adds	r7, #20
 8002752:	46bd      	mov	sp, r7
 8002754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002758:	4770      	bx	lr

0800275a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800275a:	b480      	push	{r7}
 800275c:	b085      	sub	sp, #20
 800275e:	af00      	add	r7, sp, #0
 8002760:	6078      	str	r0, [r7, #4]
 8002762:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800276a:	68bb      	ldr	r3, [r7, #8]
 800276c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002770:	d103      	bne.n	800277a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e00c      	b.n	8002794 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	3308      	adds	r3, #8
 800277e:	60fb      	str	r3, [r7, #12]
 8002780:	e002      	b.n	8002788 <vListInsert+0x2e>
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	685b      	ldr	r3, [r3, #4]
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68ba      	ldr	r2, [r7, #8]
 8002790:	429a      	cmp	r2, r3
 8002792:	d2f6      	bcs.n	8002782 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8002794:	68fb      	ldr	r3, [r7, #12]
 8002796:	685a      	ldr	r2, [r3, #4]
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	685b      	ldr	r3, [r3, #4]
 80027a0:	683a      	ldr	r2, [r7, #0]
 80027a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	683a      	ldr	r2, [r7, #0]
 80027ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	687a      	ldr	r2, [r7, #4]
 80027b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	601a      	str	r2, [r3, #0]
}
 80027c0:	bf00      	nop
 80027c2:	3714      	adds	r7, #20
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80027cc:	b480      	push	{r7}
 80027ce:	b085      	sub	sp, #20
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691b      	ldr	r3, [r3, #16]
 80027d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	687a      	ldr	r2, [r7, #4]
 80027e0:	6892      	ldr	r2, [r2, #8]
 80027e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	689b      	ldr	r3, [r3, #8]
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6852      	ldr	r2, [r2, #4]
 80027ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	687a      	ldr	r2, [r7, #4]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d103      	bne.n	8002800 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	689a      	ldr	r2, [r3, #8]
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2200      	movs	r2, #0
 8002804:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	1e5a      	subs	r2, r3, #1
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	681b      	ldr	r3, [r3, #0]
}
 8002814:	4618      	mov	r0, r3
 8002816:	3714      	adds	r7, #20
 8002818:	46bd      	mov	sp, r7
 800281a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281e:	4770      	bx	lr

08002820 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b084      	sub	sp, #16
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d10a      	bne.n	800284a <xQueueGenericReset+0x2a>
	__asm volatile
 8002834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002838:	f383 8811 	msr	BASEPRI, r3
 800283c:	f3bf 8f6f 	isb	sy
 8002840:	f3bf 8f4f 	dsb	sy
 8002844:	60bb      	str	r3, [r7, #8]
}
 8002846:	bf00      	nop
 8002848:	e7fe      	b.n	8002848 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800284a:	f002 f94b 	bl	8004ae4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	681a      	ldr	r2, [r3, #0]
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002856:	68f9      	ldr	r1, [r7, #12]
 8002858:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	441a      	add	r2, r3
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	2200      	movs	r2, #0
 8002868:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	681a      	ldr	r2, [r3, #0]
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	681a      	ldr	r2, [r3, #0]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800287a:	3b01      	subs	r3, #1
 800287c:	68f9      	ldr	r1, [r7, #12]
 800287e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8002880:	fb01 f303 	mul.w	r3, r1, r3
 8002884:	441a      	add	r2, r3
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	22ff      	movs	r2, #255	; 0xff
 800288e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	22ff      	movs	r2, #255	; 0xff
 8002896:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800289a:	683b      	ldr	r3, [r7, #0]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d114      	bne.n	80028ca <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	691b      	ldr	r3, [r3, #16]
 80028a4:	2b00      	cmp	r3, #0
 80028a6:	d01a      	beq.n	80028de <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	3310      	adds	r3, #16
 80028ac:	4618      	mov	r0, r3
 80028ae:	f001 f965 	bl	8003b7c <xTaskRemoveFromEventList>
 80028b2:	4603      	mov	r3, r0
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d012      	beq.n	80028de <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80028b8:	4b0c      	ldr	r3, [pc, #48]	; (80028ec <xQueueGenericReset+0xcc>)
 80028ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80028be:	601a      	str	r2, [r3, #0]
 80028c0:	f3bf 8f4f 	dsb	sy
 80028c4:	f3bf 8f6f 	isb	sy
 80028c8:	e009      	b.n	80028de <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	3310      	adds	r3, #16
 80028ce:	4618      	mov	r0, r3
 80028d0:	f7ff fef2 	bl	80026b8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	3324      	adds	r3, #36	; 0x24
 80028d8:	4618      	mov	r0, r3
 80028da:	f7ff feed 	bl	80026b8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80028de:	f002 f931 	bl	8004b44 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80028e2:	2301      	movs	r3, #1
}
 80028e4:	4618      	mov	r0, r3
 80028e6:	3710      	adds	r7, #16
 80028e8:	46bd      	mov	sp, r7
 80028ea:	bd80      	pop	{r7, pc}
 80028ec:	e000ed04 	.word	0xe000ed04

080028f0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b08e      	sub	sp, #56	; 0x38
 80028f4:	af02      	add	r7, sp, #8
 80028f6:	60f8      	str	r0, [r7, #12]
 80028f8:	60b9      	str	r1, [r7, #8]
 80028fa:	607a      	str	r2, [r7, #4]
 80028fc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80028fe:	68fb      	ldr	r3, [r7, #12]
 8002900:	2b00      	cmp	r3, #0
 8002902:	d10a      	bne.n	800291a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8002904:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002908:	f383 8811 	msr	BASEPRI, r3
 800290c:	f3bf 8f6f 	isb	sy
 8002910:	f3bf 8f4f 	dsb	sy
 8002914:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002916:	bf00      	nop
 8002918:	e7fe      	b.n	8002918 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800291a:	683b      	ldr	r3, [r7, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d10a      	bne.n	8002936 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8002920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002924:	f383 8811 	msr	BASEPRI, r3
 8002928:	f3bf 8f6f 	isb	sy
 800292c:	f3bf 8f4f 	dsb	sy
 8002930:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002932:	bf00      	nop
 8002934:	e7fe      	b.n	8002934 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d002      	beq.n	8002942 <xQueueGenericCreateStatic+0x52>
 800293c:	68bb      	ldr	r3, [r7, #8]
 800293e:	2b00      	cmp	r3, #0
 8002940:	d001      	beq.n	8002946 <xQueueGenericCreateStatic+0x56>
 8002942:	2301      	movs	r3, #1
 8002944:	e000      	b.n	8002948 <xQueueGenericCreateStatic+0x58>
 8002946:	2300      	movs	r3, #0
 8002948:	2b00      	cmp	r3, #0
 800294a:	d10a      	bne.n	8002962 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800294c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002950:	f383 8811 	msr	BASEPRI, r3
 8002954:	f3bf 8f6f 	isb	sy
 8002958:	f3bf 8f4f 	dsb	sy
 800295c:	623b      	str	r3, [r7, #32]
}
 800295e:	bf00      	nop
 8002960:	e7fe      	b.n	8002960 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2b00      	cmp	r3, #0
 8002966:	d102      	bne.n	800296e <xQueueGenericCreateStatic+0x7e>
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d101      	bne.n	8002972 <xQueueGenericCreateStatic+0x82>
 800296e:	2301      	movs	r3, #1
 8002970:	e000      	b.n	8002974 <xQueueGenericCreateStatic+0x84>
 8002972:	2300      	movs	r3, #0
 8002974:	2b00      	cmp	r3, #0
 8002976:	d10a      	bne.n	800298e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8002978:	f04f 0350 	mov.w	r3, #80	; 0x50
 800297c:	f383 8811 	msr	BASEPRI, r3
 8002980:	f3bf 8f6f 	isb	sy
 8002984:	f3bf 8f4f 	dsb	sy
 8002988:	61fb      	str	r3, [r7, #28]
}
 800298a:	bf00      	nop
 800298c:	e7fe      	b.n	800298c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800298e:	2350      	movs	r3, #80	; 0x50
 8002990:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	2b50      	cmp	r3, #80	; 0x50
 8002996:	d00a      	beq.n	80029ae <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8002998:	f04f 0350 	mov.w	r3, #80	; 0x50
 800299c:	f383 8811 	msr	BASEPRI, r3
 80029a0:	f3bf 8f6f 	isb	sy
 80029a4:	f3bf 8f4f 	dsb	sy
 80029a8:	61bb      	str	r3, [r7, #24]
}
 80029aa:	bf00      	nop
 80029ac:	e7fe      	b.n	80029ac <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80029ae:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80029b0:	683b      	ldr	r3, [r7, #0]
 80029b2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80029b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d00d      	beq.n	80029d6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80029ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029bc:	2201      	movs	r2, #1
 80029be:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80029c2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80029c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80029c8:	9300      	str	r3, [sp, #0]
 80029ca:	4613      	mov	r3, r2
 80029cc:	687a      	ldr	r2, [r7, #4]
 80029ce:	68b9      	ldr	r1, [r7, #8]
 80029d0:	68f8      	ldr	r0, [r7, #12]
 80029d2:	f000 f805 	bl	80029e0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80029d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80029d8:	4618      	mov	r0, r3
 80029da:	3730      	adds	r7, #48	; 0x30
 80029dc:	46bd      	mov	sp, r7
 80029de:	bd80      	pop	{r7, pc}

080029e0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	607a      	str	r2, [r7, #4]
 80029ec:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80029ee:	68bb      	ldr	r3, [r7, #8]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d103      	bne.n	80029fc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	69ba      	ldr	r2, [r7, #24]
 80029f8:	601a      	str	r2, [r3, #0]
 80029fa:	e002      	b.n	8002a02 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80029fc:	69bb      	ldr	r3, [r7, #24]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	68fa      	ldr	r2, [r7, #12]
 8002a06:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8002a08:	69bb      	ldr	r3, [r7, #24]
 8002a0a:	68ba      	ldr	r2, [r7, #8]
 8002a0c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8002a0e:	2101      	movs	r1, #1
 8002a10:	69b8      	ldr	r0, [r7, #24]
 8002a12:	f7ff ff05 	bl	8002820 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	78fa      	ldrb	r2, [r7, #3]
 8002a1a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	b08e      	sub	sp, #56	; 0x38
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	60f8      	str	r0, [r7, #12]
 8002a30:	60b9      	str	r1, [r7, #8]
 8002a32:	607a      	str	r2, [r7, #4]
 8002a34:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8002a36:	2300      	movs	r3, #0
 8002a38:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8002a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d10a      	bne.n	8002a5a <xQueueGenericSend+0x32>
	__asm volatile
 8002a44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a48:	f383 8811 	msr	BASEPRI, r3
 8002a4c:	f3bf 8f6f 	isb	sy
 8002a50:	f3bf 8f4f 	dsb	sy
 8002a54:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002a56:	bf00      	nop
 8002a58:	e7fe      	b.n	8002a58 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d103      	bne.n	8002a68 <xQueueGenericSend+0x40>
 8002a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d101      	bne.n	8002a6c <xQueueGenericSend+0x44>
 8002a68:	2301      	movs	r3, #1
 8002a6a:	e000      	b.n	8002a6e <xQueueGenericSend+0x46>
 8002a6c:	2300      	movs	r3, #0
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d10a      	bne.n	8002a88 <xQueueGenericSend+0x60>
	__asm volatile
 8002a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002a76:	f383 8811 	msr	BASEPRI, r3
 8002a7a:	f3bf 8f6f 	isb	sy
 8002a7e:	f3bf 8f4f 	dsb	sy
 8002a82:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002a84:	bf00      	nop
 8002a86:	e7fe      	b.n	8002a86 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	2b02      	cmp	r3, #2
 8002a8c:	d103      	bne.n	8002a96 <xQueueGenericSend+0x6e>
 8002a8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002a90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a92:	2b01      	cmp	r3, #1
 8002a94:	d101      	bne.n	8002a9a <xQueueGenericSend+0x72>
 8002a96:	2301      	movs	r3, #1
 8002a98:	e000      	b.n	8002a9c <xQueueGenericSend+0x74>
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d10a      	bne.n	8002ab6 <xQueueGenericSend+0x8e>
	__asm volatile
 8002aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002aa4:	f383 8811 	msr	BASEPRI, r3
 8002aa8:	f3bf 8f6f 	isb	sy
 8002aac:	f3bf 8f4f 	dsb	sy
 8002ab0:	623b      	str	r3, [r7, #32]
}
 8002ab2:	bf00      	nop
 8002ab4:	e7fe      	b.n	8002ab4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002ab6:	f001 fa85 	bl	8003fc4 <xTaskGetSchedulerState>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d102      	bne.n	8002ac6 <xQueueGenericSend+0x9e>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	2b00      	cmp	r3, #0
 8002ac4:	d101      	bne.n	8002aca <xQueueGenericSend+0xa2>
 8002ac6:	2301      	movs	r3, #1
 8002ac8:	e000      	b.n	8002acc <xQueueGenericSend+0xa4>
 8002aca:	2300      	movs	r3, #0
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d10a      	bne.n	8002ae6 <xQueueGenericSend+0xbe>
	__asm volatile
 8002ad0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002ad4:	f383 8811 	msr	BASEPRI, r3
 8002ad8:	f3bf 8f6f 	isb	sy
 8002adc:	f3bf 8f4f 	dsb	sy
 8002ae0:	61fb      	str	r3, [r7, #28]
}
 8002ae2:	bf00      	nop
 8002ae4:	e7fe      	b.n	8002ae4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002ae6:	f001 fffd 	bl	8004ae4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002aea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002aec:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002af2:	429a      	cmp	r2, r3
 8002af4:	d302      	bcc.n	8002afc <xQueueGenericSend+0xd4>
 8002af6:	683b      	ldr	r3, [r7, #0]
 8002af8:	2b02      	cmp	r3, #2
 8002afa:	d129      	bne.n	8002b50 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002afc:	683a      	ldr	r2, [r7, #0]
 8002afe:	68b9      	ldr	r1, [r7, #8]
 8002b00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002b02:	f000 fa0b 	bl	8002f1c <prvCopyDataToQueue>
 8002b06:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002b08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d010      	beq.n	8002b32 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b12:	3324      	adds	r3, #36	; 0x24
 8002b14:	4618      	mov	r0, r3
 8002b16:	f001 f831 	bl	8003b7c <xTaskRemoveFromEventList>
 8002b1a:	4603      	mov	r3, r0
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d013      	beq.n	8002b48 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8002b20:	4b3f      	ldr	r3, [pc, #252]	; (8002c20 <xQueueGenericSend+0x1f8>)
 8002b22:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b26:	601a      	str	r2, [r3, #0]
 8002b28:	f3bf 8f4f 	dsb	sy
 8002b2c:	f3bf 8f6f 	isb	sy
 8002b30:	e00a      	b.n	8002b48 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8002b32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d007      	beq.n	8002b48 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8002b38:	4b39      	ldr	r3, [pc, #228]	; (8002c20 <xQueueGenericSend+0x1f8>)
 8002b3a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002b3e:	601a      	str	r2, [r3, #0]
 8002b40:	f3bf 8f4f 	dsb	sy
 8002b44:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8002b48:	f001 fffc 	bl	8004b44 <vPortExitCritical>
				return pdPASS;
 8002b4c:	2301      	movs	r3, #1
 8002b4e:	e063      	b.n	8002c18 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d103      	bne.n	8002b5e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002b56:	f001 fff5 	bl	8004b44 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	e05c      	b.n	8002c18 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d106      	bne.n	8002b72 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002b64:	f107 0314 	add.w	r3, r7, #20
 8002b68:	4618      	mov	r0, r3
 8002b6a:	f001 f8cd 	bl	8003d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002b6e:	2301      	movs	r3, #1
 8002b70:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002b72:	f001 ffe7 	bl	8004b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002b76:	f000 fd9b 	bl	80036b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002b7a:	f001 ffb3 	bl	8004ae4 <vPortEnterCritical>
 8002b7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b80:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002b84:	b25b      	sxtb	r3, r3
 8002b86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b8a:	d103      	bne.n	8002b94 <xQueueGenericSend+0x16c>
 8002b8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002b96:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002b9a:	b25b      	sxtb	r3, r3
 8002b9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ba0:	d103      	bne.n	8002baa <xQueueGenericSend+0x182>
 8002ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002ba4:	2200      	movs	r2, #0
 8002ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002baa:	f001 ffcb 	bl	8004b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002bae:	1d3a      	adds	r2, r7, #4
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	4611      	mov	r1, r2
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	f001 f8bc 	bl	8003d34 <xTaskCheckForTimeOut>
 8002bbc:	4603      	mov	r3, r0
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d124      	bne.n	8002c0c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8002bc2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bc4:	f000 faa2 	bl	800310c <prvIsQueueFull>
 8002bc8:	4603      	mov	r3, r0
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d018      	beq.n	8002c00 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8002bce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002bd0:	3310      	adds	r3, #16
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	4611      	mov	r1, r2
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	f000 ff44 	bl	8003a64 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8002bdc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002bde:	f000 fa2d 	bl	800303c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8002be2:	f000 fd73 	bl	80036cc <xTaskResumeAll>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	f47f af7c 	bne.w	8002ae6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8002bee:	4b0c      	ldr	r3, [pc, #48]	; (8002c20 <xQueueGenericSend+0x1f8>)
 8002bf0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002bf4:	601a      	str	r2, [r3, #0]
 8002bf6:	f3bf 8f4f 	dsb	sy
 8002bfa:	f3bf 8f6f 	isb	sy
 8002bfe:	e772      	b.n	8002ae6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8002c00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c02:	f000 fa1b 	bl	800303c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002c06:	f000 fd61 	bl	80036cc <xTaskResumeAll>
 8002c0a:	e76c      	b.n	8002ae6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8002c0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8002c0e:	f000 fa15 	bl	800303c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002c12:	f000 fd5b 	bl	80036cc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8002c16:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8002c18:	4618      	mov	r0, r3
 8002c1a:	3738      	adds	r7, #56	; 0x38
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bd80      	pop	{r7, pc}
 8002c20:	e000ed04 	.word	0xe000ed04

08002c24 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8002c24:	b580      	push	{r7, lr}
 8002c26:	b090      	sub	sp, #64	; 0x40
 8002c28:	af00      	add	r7, sp, #0
 8002c2a:	60f8      	str	r0, [r7, #12]
 8002c2c:	60b9      	str	r1, [r7, #8]
 8002c2e:	607a      	str	r2, [r7, #4]
 8002c30:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8002c36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d10a      	bne.n	8002c52 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8002c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c40:	f383 8811 	msr	BASEPRI, r3
 8002c44:	f3bf 8f6f 	isb	sy
 8002c48:	f3bf 8f4f 	dsb	sy
 8002c4c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8002c4e:	bf00      	nop
 8002c50:	e7fe      	b.n	8002c50 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002c52:	68bb      	ldr	r3, [r7, #8]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d103      	bne.n	8002c60 <xQueueGenericSendFromISR+0x3c>
 8002c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d101      	bne.n	8002c64 <xQueueGenericSendFromISR+0x40>
 8002c60:	2301      	movs	r3, #1
 8002c62:	e000      	b.n	8002c66 <xQueueGenericSendFromISR+0x42>
 8002c64:	2300      	movs	r3, #0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10a      	bne.n	8002c80 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8002c6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c6e:	f383 8811 	msr	BASEPRI, r3
 8002c72:	f3bf 8f6f 	isb	sy
 8002c76:	f3bf 8f4f 	dsb	sy
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8002c7c:	bf00      	nop
 8002c7e:	e7fe      	b.n	8002c7e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	2b02      	cmp	r3, #2
 8002c84:	d103      	bne.n	8002c8e <xQueueGenericSendFromISR+0x6a>
 8002c86:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d101      	bne.n	8002c92 <xQueueGenericSendFromISR+0x6e>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <xQueueGenericSendFromISR+0x70>
 8002c92:	2300      	movs	r3, #0
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d10a      	bne.n	8002cae <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8002c98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002c9c:	f383 8811 	msr	BASEPRI, r3
 8002ca0:	f3bf 8f6f 	isb	sy
 8002ca4:	f3bf 8f4f 	dsb	sy
 8002ca8:	623b      	str	r3, [r7, #32]
}
 8002caa:	bf00      	nop
 8002cac:	e7fe      	b.n	8002cac <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8002cae:	f001 fffb 	bl	8004ca8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8002cb2:	f3ef 8211 	mrs	r2, BASEPRI
 8002cb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002cba:	f383 8811 	msr	BASEPRI, r3
 8002cbe:	f3bf 8f6f 	isb	sy
 8002cc2:	f3bf 8f4f 	dsb	sy
 8002cc6:	61fa      	str	r2, [r7, #28]
 8002cc8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8002cca:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8002ccc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8002cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002cd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d302      	bcc.n	8002ce0 <xQueueGenericSendFromISR+0xbc>
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d12f      	bne.n	8002d40 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8002ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ce2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002ce6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002cea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002cec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002cee:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8002cf0:	683a      	ldr	r2, [r7, #0]
 8002cf2:	68b9      	ldr	r1, [r7, #8]
 8002cf4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8002cf6:	f000 f911 	bl	8002f1c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8002cfa:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8002cfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002d02:	d112      	bne.n	8002d2a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8002d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d016      	beq.n	8002d3a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8002d0c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d0e:	3324      	adds	r3, #36	; 0x24
 8002d10:	4618      	mov	r0, r3
 8002d12:	f000 ff33 	bl	8003b7c <xTaskRemoveFromEventList>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d00e      	beq.n	8002d3a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d00b      	beq.n	8002d3a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2201      	movs	r2, #1
 8002d26:	601a      	str	r2, [r3, #0]
 8002d28:	e007      	b.n	8002d3a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8002d2a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8002d2e:	3301      	adds	r3, #1
 8002d30:	b2db      	uxtb	r3, r3
 8002d32:	b25a      	sxtb	r2, r3
 8002d34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002d36:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8002d3e:	e001      	b.n	8002d44 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8002d40:	2300      	movs	r3, #0
 8002d42:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002d46:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8002d48:	697b      	ldr	r3, [r7, #20]
 8002d4a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8002d4e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8002d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8002d52:	4618      	mov	r0, r3
 8002d54:	3740      	adds	r7, #64	; 0x40
 8002d56:	46bd      	mov	sp, r7
 8002d58:	bd80      	pop	{r7, pc}
	...

08002d5c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b08c      	sub	sp, #48	; 0x30
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	60b9      	str	r1, [r7, #8]
 8002d66:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8002d70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d10a      	bne.n	8002d8c <xQueueReceive+0x30>
	__asm volatile
 8002d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002d7a:	f383 8811 	msr	BASEPRI, r3
 8002d7e:	f3bf 8f6f 	isb	sy
 8002d82:	f3bf 8f4f 	dsb	sy
 8002d86:	623b      	str	r3, [r7, #32]
}
 8002d88:	bf00      	nop
 8002d8a:	e7fe      	b.n	8002d8a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8002d8c:	68bb      	ldr	r3, [r7, #8]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d103      	bne.n	8002d9a <xQueueReceive+0x3e>
 8002d92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d101      	bne.n	8002d9e <xQueueReceive+0x42>
 8002d9a:	2301      	movs	r3, #1
 8002d9c:	e000      	b.n	8002da0 <xQueueReceive+0x44>
 8002d9e:	2300      	movs	r3, #0
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d10a      	bne.n	8002dba <xQueueReceive+0x5e>
	__asm volatile
 8002da4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002da8:	f383 8811 	msr	BASEPRI, r3
 8002dac:	f3bf 8f6f 	isb	sy
 8002db0:	f3bf 8f4f 	dsb	sy
 8002db4:	61fb      	str	r3, [r7, #28]
}
 8002db6:	bf00      	nop
 8002db8:	e7fe      	b.n	8002db8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8002dba:	f001 f903 	bl	8003fc4 <xTaskGetSchedulerState>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d102      	bne.n	8002dca <xQueueReceive+0x6e>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d101      	bne.n	8002dce <xQueueReceive+0x72>
 8002dca:	2301      	movs	r3, #1
 8002dcc:	e000      	b.n	8002dd0 <xQueueReceive+0x74>
 8002dce:	2300      	movs	r3, #0
 8002dd0:	2b00      	cmp	r3, #0
 8002dd2:	d10a      	bne.n	8002dea <xQueueReceive+0x8e>
	__asm volatile
 8002dd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002dd8:	f383 8811 	msr	BASEPRI, r3
 8002ddc:	f3bf 8f6f 	isb	sy
 8002de0:	f3bf 8f4f 	dsb	sy
 8002de4:	61bb      	str	r3, [r7, #24]
}
 8002de6:	bf00      	nop
 8002de8:	e7fe      	b.n	8002de8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8002dea:	f001 fe7b 	bl	8004ae4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002dee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002df0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002df2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d01f      	beq.n	8002e3a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8002dfa:	68b9      	ldr	r1, [r7, #8]
 8002dfc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002dfe:	f000 f8f7 	bl	8002ff0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8002e02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e04:	1e5a      	subs	r2, r3, #1
 8002e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e08:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8002e0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00f      	beq.n	8002e32 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8002e12:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e14:	3310      	adds	r3, #16
 8002e16:	4618      	mov	r0, r3
 8002e18:	f000 feb0 	bl	8003b7c <xTaskRemoveFromEventList>
 8002e1c:	4603      	mov	r3, r0
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	d007      	beq.n	8002e32 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8002e22:	4b3d      	ldr	r3, [pc, #244]	; (8002f18 <xQueueReceive+0x1bc>)
 8002e24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002e28:	601a      	str	r2, [r3, #0]
 8002e2a:	f3bf 8f4f 	dsb	sy
 8002e2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8002e32:	f001 fe87 	bl	8004b44 <vPortExitCritical>
				return pdPASS;
 8002e36:	2301      	movs	r3, #1
 8002e38:	e069      	b.n	8002f0e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d103      	bne.n	8002e48 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8002e40:	f001 fe80 	bl	8004b44 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8002e44:	2300      	movs	r3, #0
 8002e46:	e062      	b.n	8002f0e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8002e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d106      	bne.n	8002e5c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8002e4e:	f107 0310 	add.w	r3, r7, #16
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 ff58 	bl	8003d08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8002e5c:	f001 fe72 	bl	8004b44 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8002e60:	f000 fc26 	bl	80036b0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8002e64:	f001 fe3e 	bl	8004ae4 <vPortEnterCritical>
 8002e68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e6a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002e6e:	b25b      	sxtb	r3, r3
 8002e70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e74:	d103      	bne.n	8002e7e <xQueueReceive+0x122>
 8002e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e78:	2200      	movs	r2, #0
 8002e7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e80:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002e84:	b25b      	sxtb	r3, r3
 8002e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e8a:	d103      	bne.n	8002e94 <xQueueReceive+0x138>
 8002e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8e:	2200      	movs	r2, #0
 8002e90:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e94:	f001 fe56 	bl	8004b44 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8002e98:	1d3a      	adds	r2, r7, #4
 8002e9a:	f107 0310 	add.w	r3, r7, #16
 8002e9e:	4611      	mov	r1, r2
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	f000 ff47 	bl	8003d34 <xTaskCheckForTimeOut>
 8002ea6:	4603      	mov	r3, r0
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d123      	bne.n	8002ef4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002eac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eae:	f000 f917 	bl	80030e0 <prvIsQueueEmpty>
 8002eb2:	4603      	mov	r3, r0
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d017      	beq.n	8002ee8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8002eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002eba:	3324      	adds	r3, #36	; 0x24
 8002ebc:	687a      	ldr	r2, [r7, #4]
 8002ebe:	4611      	mov	r1, r2
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fdcf 	bl	8003a64 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8002ec6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ec8:	f000 f8b8 	bl	800303c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8002ecc:	f000 fbfe 	bl	80036cc <xTaskResumeAll>
 8002ed0:	4603      	mov	r3, r0
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d189      	bne.n	8002dea <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8002ed6:	4b10      	ldr	r3, [pc, #64]	; (8002f18 <xQueueReceive+0x1bc>)
 8002ed8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002edc:	601a      	str	r2, [r3, #0]
 8002ede:	f3bf 8f4f 	dsb	sy
 8002ee2:	f3bf 8f6f 	isb	sy
 8002ee6:	e780      	b.n	8002dea <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8002ee8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002eea:	f000 f8a7 	bl	800303c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8002eee:	f000 fbed 	bl	80036cc <xTaskResumeAll>
 8002ef2:	e77a      	b.n	8002dea <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8002ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002ef6:	f000 f8a1 	bl	800303c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8002efa:	f000 fbe7 	bl	80036cc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8002efe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8002f00:	f000 f8ee 	bl	80030e0 <prvIsQueueEmpty>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f43f af6f 	beq.w	8002dea <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8002f0c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8002f0e:	4618      	mov	r0, r3
 8002f10:	3730      	adds	r7, #48	; 0x30
 8002f12:	46bd      	mov	sp, r7
 8002f14:	bd80      	pop	{r7, pc}
 8002f16:	bf00      	nop
 8002f18:	e000ed04 	.word	0xe000ed04

08002f1c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	b086      	sub	sp, #24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	60f8      	str	r0, [r7, #12]
 8002f24:	60b9      	str	r1, [r7, #8]
 8002f26:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f30:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d10d      	bne.n	8002f56 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d14d      	bne.n	8002fde <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	4618      	mov	r0, r3
 8002f48:	f001 f85a 	bl	8004000 <xTaskPriorityDisinherit>
 8002f4c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8002f4e:	68fb      	ldr	r3, [r7, #12]
 8002f50:	2200      	movs	r2, #0
 8002f52:	609a      	str	r2, [r3, #8]
 8002f54:	e043      	b.n	8002fde <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d119      	bne.n	8002f90 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6858      	ldr	r0, [r3, #4]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f64:	461a      	mov	r2, r3
 8002f66:	68b9      	ldr	r1, [r7, #8]
 8002f68:	f002 f8ee 	bl	8005148 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	685a      	ldr	r2, [r3, #4]
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f74:	441a      	add	r2, r3
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	429a      	cmp	r2, r3
 8002f84:	d32b      	bcc.n	8002fde <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681a      	ldr	r2, [r3, #0]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	605a      	str	r2, [r3, #4]
 8002f8e:	e026      	b.n	8002fde <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	68d8      	ldr	r0, [r3, #12]
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	461a      	mov	r2, r3
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	f002 f8d4 	bl	8005148 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	68da      	ldr	r2, [r3, #12]
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	425b      	negs	r3, r3
 8002faa:	441a      	add	r2, r3
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	68da      	ldr	r2, [r3, #12]
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d207      	bcs.n	8002fcc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8002fbc:	68fb      	ldr	r3, [r7, #12]
 8002fbe:	689a      	ldr	r2, [r3, #8]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc4:	425b      	negs	r3, r3
 8002fc6:	441a      	add	r2, r3
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	2b02      	cmp	r3, #2
 8002fd0:	d105      	bne.n	8002fde <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8002fd2:	693b      	ldr	r3, [r7, #16]
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	d002      	beq.n	8002fde <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	3b01      	subs	r3, #1
 8002fdc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1c5a      	adds	r2, r3, #1
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8002fe6:	697b      	ldr	r3, [r7, #20]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}

08002ff0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
 8002ff8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d018      	beq.n	8003034 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	68da      	ldr	r2, [r3, #12]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800300a:	441a      	add	r2, r3
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	68da      	ldr	r2, [r3, #12]
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	429a      	cmp	r2, r3
 800301a:	d303      	bcc.n	8003024 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681a      	ldr	r2, [r3, #0]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	68d9      	ldr	r1, [r3, #12]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800302c:	461a      	mov	r2, r3
 800302e:	6838      	ldr	r0, [r7, #0]
 8003030:	f002 f88a 	bl	8005148 <memcpy>
	}
}
 8003034:	bf00      	nop
 8003036:	3708      	adds	r7, #8
 8003038:	46bd      	mov	sp, r7
 800303a:	bd80      	pop	{r7, pc}

0800303c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003044:	f001 fd4e 	bl	8004ae4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800304e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003050:	e011      	b.n	8003076 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003056:	2b00      	cmp	r3, #0
 8003058:	d012      	beq.n	8003080 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	3324      	adds	r3, #36	; 0x24
 800305e:	4618      	mov	r0, r3
 8003060:	f000 fd8c 	bl	8003b7c <xTaskRemoveFromEventList>
 8003064:	4603      	mov	r3, r0
 8003066:	2b00      	cmp	r3, #0
 8003068:	d001      	beq.n	800306e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800306a:	f000 fec5 	bl	8003df8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800306e:	7bfb      	ldrb	r3, [r7, #15]
 8003070:	3b01      	subs	r3, #1
 8003072:	b2db      	uxtb	r3, r3
 8003074:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003076:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800307a:	2b00      	cmp	r3, #0
 800307c:	dce9      	bgt.n	8003052 <prvUnlockQueue+0x16>
 800307e:	e000      	b.n	8003082 <prvUnlockQueue+0x46>
					break;
 8003080:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	22ff      	movs	r2, #255	; 0xff
 8003086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800308a:	f001 fd5b 	bl	8004b44 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800308e:	f001 fd29 	bl	8004ae4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003098:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800309a:	e011      	b.n	80030c0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	691b      	ldr	r3, [r3, #16]
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d012      	beq.n	80030ca <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	3310      	adds	r3, #16
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 fd67 	bl	8003b7c <xTaskRemoveFromEventList>
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d001      	beq.n	80030b8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80030b4:	f000 fea0 	bl	8003df8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80030b8:	7bbb      	ldrb	r3, [r7, #14]
 80030ba:	3b01      	subs	r3, #1
 80030bc:	b2db      	uxtb	r3, r3
 80030be:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80030c0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80030c4:	2b00      	cmp	r3, #0
 80030c6:	dce9      	bgt.n	800309c <prvUnlockQueue+0x60>
 80030c8:	e000      	b.n	80030cc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80030ca:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	22ff      	movs	r2, #255	; 0xff
 80030d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80030d4:	f001 fd36 	bl	8004b44 <vPortExitCritical>
}
 80030d8:	bf00      	nop
 80030da:	3710      	adds	r7, #16
 80030dc:	46bd      	mov	sp, r7
 80030de:	bd80      	pop	{r7, pc}

080030e0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80030e8:	f001 fcfc 	bl	8004ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d102      	bne.n	80030fa <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80030f4:	2301      	movs	r3, #1
 80030f6:	60fb      	str	r3, [r7, #12]
 80030f8:	e001      	b.n	80030fe <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80030fa:	2300      	movs	r3, #0
 80030fc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80030fe:	f001 fd21 	bl	8004b44 <vPortExitCritical>

	return xReturn;
 8003102:	68fb      	ldr	r3, [r7, #12]
}
 8003104:	4618      	mov	r0, r3
 8003106:	3710      	adds	r7, #16
 8003108:	46bd      	mov	sp, r7
 800310a:	bd80      	pop	{r7, pc}

0800310c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800310c:	b580      	push	{r7, lr}
 800310e:	b084      	sub	sp, #16
 8003110:	af00      	add	r7, sp, #0
 8003112:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003114:	f001 fce6 	bl	8004ae4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003120:	429a      	cmp	r2, r3
 8003122:	d102      	bne.n	800312a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003124:	2301      	movs	r3, #1
 8003126:	60fb      	str	r3, [r7, #12]
 8003128:	e001      	b.n	800312e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800312a:	2300      	movs	r3, #0
 800312c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800312e:	f001 fd09 	bl	8004b44 <vPortExitCritical>

	return xReturn;
 8003132:	68fb      	ldr	r3, [r7, #12]
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800313c:	b480      	push	{r7}
 800313e:	b085      	sub	sp, #20
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003146:	2300      	movs	r3, #0
 8003148:	60fb      	str	r3, [r7, #12]
 800314a:	e014      	b.n	8003176 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800314c:	4a0f      	ldr	r2, [pc, #60]	; (800318c <vQueueAddToRegistry+0x50>)
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10b      	bne.n	8003170 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003158:	490c      	ldr	r1, [pc, #48]	; (800318c <vQueueAddToRegistry+0x50>)
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	683a      	ldr	r2, [r7, #0]
 800315e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003162:	4a0a      	ldr	r2, [pc, #40]	; (800318c <vQueueAddToRegistry+0x50>)
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	4413      	add	r3, r2
 800316a:	687a      	ldr	r2, [r7, #4]
 800316c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800316e:	e006      	b.n	800317e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	3301      	adds	r3, #1
 8003174:	60fb      	str	r3, [r7, #12]
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2b07      	cmp	r3, #7
 800317a:	d9e7      	bls.n	800314c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800317c:	bf00      	nop
 800317e:	bf00      	nop
 8003180:	3714      	adds	r7, #20
 8003182:	46bd      	mov	sp, r7
 8003184:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003188:	4770      	bx	lr
 800318a:	bf00      	nop
 800318c:	20000868 	.word	0x20000868

08003190 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003190:	b580      	push	{r7, lr}
 8003192:	b086      	sub	sp, #24
 8003194:	af00      	add	r7, sp, #0
 8003196:	60f8      	str	r0, [r7, #12]
 8003198:	60b9      	str	r1, [r7, #8]
 800319a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80031a0:	f001 fca0 	bl	8004ae4 <vPortEnterCritical>
 80031a4:	697b      	ldr	r3, [r7, #20]
 80031a6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80031aa:	b25b      	sxtb	r3, r3
 80031ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b0:	d103      	bne.n	80031ba <vQueueWaitForMessageRestricted+0x2a>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2200      	movs	r2, #0
 80031b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031ba:	697b      	ldr	r3, [r7, #20]
 80031bc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80031c0:	b25b      	sxtb	r3, r3
 80031c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031c6:	d103      	bne.n	80031d0 <vQueueWaitForMessageRestricted+0x40>
 80031c8:	697b      	ldr	r3, [r7, #20]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80031d0:	f001 fcb8 	bl	8004b44 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80031d4:	697b      	ldr	r3, [r7, #20]
 80031d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d106      	bne.n	80031ea <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80031dc:	697b      	ldr	r3, [r7, #20]
 80031de:	3324      	adds	r3, #36	; 0x24
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	68b9      	ldr	r1, [r7, #8]
 80031e4:	4618      	mov	r0, r3
 80031e6:	f000 fc9d 	bl	8003b24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80031ea:	6978      	ldr	r0, [r7, #20]
 80031ec:	f7ff ff26 	bl	800303c <prvUnlockQueue>
	}
 80031f0:	bf00      	nop
 80031f2:	3718      	adds	r7, #24
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b08e      	sub	sp, #56	; 0x38
 80031fc:	af04      	add	r7, sp, #16
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	60b9      	str	r1, [r7, #8]
 8003202:	607a      	str	r2, [r7, #4]
 8003204:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003206:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003208:	2b00      	cmp	r3, #0
 800320a:	d10a      	bne.n	8003222 <xTaskCreateStatic+0x2a>
	__asm volatile
 800320c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003210:	f383 8811 	msr	BASEPRI, r3
 8003214:	f3bf 8f6f 	isb	sy
 8003218:	f3bf 8f4f 	dsb	sy
 800321c:	623b      	str	r3, [r7, #32]
}
 800321e:	bf00      	nop
 8003220:	e7fe      	b.n	8003220 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003224:	2b00      	cmp	r3, #0
 8003226:	d10a      	bne.n	800323e <xTaskCreateStatic+0x46>
	__asm volatile
 8003228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800322c:	f383 8811 	msr	BASEPRI, r3
 8003230:	f3bf 8f6f 	isb	sy
 8003234:	f3bf 8f4f 	dsb	sy
 8003238:	61fb      	str	r3, [r7, #28]
}
 800323a:	bf00      	nop
 800323c:	e7fe      	b.n	800323c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800323e:	23bc      	movs	r3, #188	; 0xbc
 8003240:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003242:	693b      	ldr	r3, [r7, #16]
 8003244:	2bbc      	cmp	r3, #188	; 0xbc
 8003246:	d00a      	beq.n	800325e <xTaskCreateStatic+0x66>
	__asm volatile
 8003248:	f04f 0350 	mov.w	r3, #80	; 0x50
 800324c:	f383 8811 	msr	BASEPRI, r3
 8003250:	f3bf 8f6f 	isb	sy
 8003254:	f3bf 8f4f 	dsb	sy
 8003258:	61bb      	str	r3, [r7, #24]
}
 800325a:	bf00      	nop
 800325c:	e7fe      	b.n	800325c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800325e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003260:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003262:	2b00      	cmp	r3, #0
 8003264:	d01e      	beq.n	80032a4 <xTaskCreateStatic+0xac>
 8003266:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01b      	beq.n	80032a4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800326c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800326e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003274:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003276:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003278:	2202      	movs	r2, #2
 800327a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800327e:	2300      	movs	r3, #0
 8003280:	9303      	str	r3, [sp, #12]
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	9302      	str	r3, [sp, #8]
 8003286:	f107 0314 	add.w	r3, r7, #20
 800328a:	9301      	str	r3, [sp, #4]
 800328c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	687a      	ldr	r2, [r7, #4]
 8003294:	68b9      	ldr	r1, [r7, #8]
 8003296:	68f8      	ldr	r0, [r7, #12]
 8003298:	f000 f850 	bl	800333c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800329c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800329e:	f000 f8f3 	bl	8003488 <prvAddNewTaskToReadyList>
 80032a2:	e001      	b.n	80032a8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80032a4:	2300      	movs	r3, #0
 80032a6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80032a8:	697b      	ldr	r3, [r7, #20]
	}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3728      	adds	r7, #40	; 0x28
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}

080032b2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80032b2:	b580      	push	{r7, lr}
 80032b4:	b08c      	sub	sp, #48	; 0x30
 80032b6:	af04      	add	r7, sp, #16
 80032b8:	60f8      	str	r0, [r7, #12]
 80032ba:	60b9      	str	r1, [r7, #8]
 80032bc:	603b      	str	r3, [r7, #0]
 80032be:	4613      	mov	r3, r2
 80032c0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80032c2:	88fb      	ldrh	r3, [r7, #6]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	4618      	mov	r0, r3
 80032c8:	f001 fd2e 	bl	8004d28 <pvPortMalloc>
 80032cc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d00e      	beq.n	80032f2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80032d4:	20bc      	movs	r0, #188	; 0xbc
 80032d6:	f001 fd27 	bl	8004d28 <pvPortMalloc>
 80032da:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80032dc:	69fb      	ldr	r3, [r7, #28]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d003      	beq.n	80032ea <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80032e2:	69fb      	ldr	r3, [r7, #28]
 80032e4:	697a      	ldr	r2, [r7, #20]
 80032e6:	631a      	str	r2, [r3, #48]	; 0x30
 80032e8:	e005      	b.n	80032f6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80032ea:	6978      	ldr	r0, [r7, #20]
 80032ec:	f001 fde8 	bl	8004ec0 <vPortFree>
 80032f0:	e001      	b.n	80032f6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80032f2:	2300      	movs	r3, #0
 80032f4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d017      	beq.n	800332c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	2200      	movs	r2, #0
 8003300:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003304:	88fa      	ldrh	r2, [r7, #6]
 8003306:	2300      	movs	r3, #0
 8003308:	9303      	str	r3, [sp, #12]
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	9302      	str	r3, [sp, #8]
 800330e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003310:	9301      	str	r3, [sp, #4]
 8003312:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	68b9      	ldr	r1, [r7, #8]
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 f80e 	bl	800333c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003320:	69f8      	ldr	r0, [r7, #28]
 8003322:	f000 f8b1 	bl	8003488 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003326:	2301      	movs	r3, #1
 8003328:	61bb      	str	r3, [r7, #24]
 800332a:	e002      	b.n	8003332 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800332c:	f04f 33ff 	mov.w	r3, #4294967295
 8003330:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003332:	69bb      	ldr	r3, [r7, #24]
	}
 8003334:	4618      	mov	r0, r3
 8003336:	3720      	adds	r7, #32
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}

0800333c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800333c:	b580      	push	{r7, lr}
 800333e:	b088      	sub	sp, #32
 8003340:	af00      	add	r7, sp, #0
 8003342:	60f8      	str	r0, [r7, #12]
 8003344:	60b9      	str	r1, [r7, #8]
 8003346:	607a      	str	r2, [r7, #4]
 8003348:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800334a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800334c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800334e:	687b      	ldr	r3, [r7, #4]
 8003350:	009b      	lsls	r3, r3, #2
 8003352:	461a      	mov	r2, r3
 8003354:	21a5      	movs	r1, #165	; 0xa5
 8003356:	f001 ff05 	bl	8005164 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800335a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800335c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003364:	3b01      	subs	r3, #1
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	4413      	add	r3, r2
 800336a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800336c:	69bb      	ldr	r3, [r7, #24]
 800336e:	f023 0307 	bic.w	r3, r3, #7
 8003372:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	2b00      	cmp	r3, #0
 800337c:	d00a      	beq.n	8003394 <prvInitialiseNewTask+0x58>
	__asm volatile
 800337e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003382:	f383 8811 	msr	BASEPRI, r3
 8003386:	f3bf 8f6f 	isb	sy
 800338a:	f3bf 8f4f 	dsb	sy
 800338e:	617b      	str	r3, [r7, #20]
}
 8003390:	bf00      	nop
 8003392:	e7fe      	b.n	8003392 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d01f      	beq.n	80033da <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800339a:	2300      	movs	r3, #0
 800339c:	61fb      	str	r3, [r7, #28]
 800339e:	e012      	b.n	80033c6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80033a0:	68ba      	ldr	r2, [r7, #8]
 80033a2:	69fb      	ldr	r3, [r7, #28]
 80033a4:	4413      	add	r3, r2
 80033a6:	7819      	ldrb	r1, [r3, #0]
 80033a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80033aa:	69fb      	ldr	r3, [r7, #28]
 80033ac:	4413      	add	r3, r2
 80033ae:	3334      	adds	r3, #52	; 0x34
 80033b0:	460a      	mov	r2, r1
 80033b2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80033b4:	68ba      	ldr	r2, [r7, #8]
 80033b6:	69fb      	ldr	r3, [r7, #28]
 80033b8:	4413      	add	r3, r2
 80033ba:	781b      	ldrb	r3, [r3, #0]
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d006      	beq.n	80033ce <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	3301      	adds	r3, #1
 80033c4:	61fb      	str	r3, [r7, #28]
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	2b0f      	cmp	r3, #15
 80033ca:	d9e9      	bls.n	80033a0 <prvInitialiseNewTask+0x64>
 80033cc:	e000      	b.n	80033d0 <prvInitialiseNewTask+0x94>
			{
				break;
 80033ce:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80033d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033d8:	e003      	b.n	80033e2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80033da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033dc:	2200      	movs	r2, #0
 80033de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80033e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80033e4:	2b37      	cmp	r3, #55	; 0x37
 80033e6:	d901      	bls.n	80033ec <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80033e8:	2337      	movs	r3, #55	; 0x37
 80033ea:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80033ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80033f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033f4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80033f6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80033f8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80033fa:	2200      	movs	r2, #0
 80033fc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80033fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003400:	3304      	adds	r3, #4
 8003402:	4618      	mov	r0, r3
 8003404:	f7ff f978 	bl	80026f8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8003408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800340a:	3318      	adds	r3, #24
 800340c:	4618      	mov	r0, r3
 800340e:	f7ff f973 	bl	80026f8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8003412:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003414:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003416:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003418:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800341a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800341e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003420:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8003422:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003424:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003426:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8003428:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800342a:	2200      	movs	r2, #0
 800342c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8003430:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003432:	2200      	movs	r2, #0
 8003434:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8003438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800343a:	3354      	adds	r3, #84	; 0x54
 800343c:	2260      	movs	r2, #96	; 0x60
 800343e:	2100      	movs	r1, #0
 8003440:	4618      	mov	r0, r3
 8003442:	f001 fe8f 	bl	8005164 <memset>
 8003446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003448:	4a0c      	ldr	r2, [pc, #48]	; (800347c <prvInitialiseNewTask+0x140>)
 800344a:	659a      	str	r2, [r3, #88]	; 0x58
 800344c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800344e:	4a0c      	ldr	r2, [pc, #48]	; (8003480 <prvInitialiseNewTask+0x144>)
 8003450:	65da      	str	r2, [r3, #92]	; 0x5c
 8003452:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003454:	4a0b      	ldr	r2, [pc, #44]	; (8003484 <prvInitialiseNewTask+0x148>)
 8003456:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8003458:	683a      	ldr	r2, [r7, #0]
 800345a:	68f9      	ldr	r1, [r7, #12]
 800345c:	69b8      	ldr	r0, [r7, #24]
 800345e:	f001 fa17 	bl	8004890 <pxPortInitialiseStack>
 8003462:	4602      	mov	r2, r0
 8003464:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003466:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8003468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800346a:	2b00      	cmp	r3, #0
 800346c:	d002      	beq.n	8003474 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800346e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003472:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003474:	bf00      	nop
 8003476:	3720      	adds	r7, #32
 8003478:	46bd      	mov	sp, r7
 800347a:	bd80      	pop	{r7, pc}
 800347c:	080053e4 	.word	0x080053e4
 8003480:	08005404 	.word	0x08005404
 8003484:	080053c4 	.word	0x080053c4

08003488 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8003490:	f001 fb28 	bl	8004ae4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8003494:	4b2d      	ldr	r3, [pc, #180]	; (800354c <prvAddNewTaskToReadyList+0xc4>)
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	3301      	adds	r3, #1
 800349a:	4a2c      	ldr	r2, [pc, #176]	; (800354c <prvAddNewTaskToReadyList+0xc4>)
 800349c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800349e:	4b2c      	ldr	r3, [pc, #176]	; (8003550 <prvAddNewTaskToReadyList+0xc8>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d109      	bne.n	80034ba <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80034a6:	4a2a      	ldr	r2, [pc, #168]	; (8003550 <prvAddNewTaskToReadyList+0xc8>)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80034ac:	4b27      	ldr	r3, [pc, #156]	; (800354c <prvAddNewTaskToReadyList+0xc4>)
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d110      	bne.n	80034d6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80034b4:	f000 fcc4 	bl	8003e40 <prvInitialiseTaskLists>
 80034b8:	e00d      	b.n	80034d6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80034ba:	4b26      	ldr	r3, [pc, #152]	; (8003554 <prvAddNewTaskToReadyList+0xcc>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d109      	bne.n	80034d6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80034c2:	4b23      	ldr	r3, [pc, #140]	; (8003550 <prvAddNewTaskToReadyList+0xc8>)
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034cc:	429a      	cmp	r2, r3
 80034ce:	d802      	bhi.n	80034d6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80034d0:	4a1f      	ldr	r2, [pc, #124]	; (8003550 <prvAddNewTaskToReadyList+0xc8>)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80034d6:	4b20      	ldr	r3, [pc, #128]	; (8003558 <prvAddNewTaskToReadyList+0xd0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	3301      	adds	r3, #1
 80034dc:	4a1e      	ldr	r2, [pc, #120]	; (8003558 <prvAddNewTaskToReadyList+0xd0>)
 80034de:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80034e0:	4b1d      	ldr	r3, [pc, #116]	; (8003558 <prvAddNewTaskToReadyList+0xd0>)
 80034e2:	681a      	ldr	r2, [r3, #0]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034ec:	4b1b      	ldr	r3, [pc, #108]	; (800355c <prvAddNewTaskToReadyList+0xd4>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d903      	bls.n	80034fc <prvAddNewTaskToReadyList+0x74>
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034f8:	4a18      	ldr	r2, [pc, #96]	; (800355c <prvAddNewTaskToReadyList+0xd4>)
 80034fa:	6013      	str	r3, [r2, #0]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003500:	4613      	mov	r3, r2
 8003502:	009b      	lsls	r3, r3, #2
 8003504:	4413      	add	r3, r2
 8003506:	009b      	lsls	r3, r3, #2
 8003508:	4a15      	ldr	r2, [pc, #84]	; (8003560 <prvAddNewTaskToReadyList+0xd8>)
 800350a:	441a      	add	r2, r3
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	3304      	adds	r3, #4
 8003510:	4619      	mov	r1, r3
 8003512:	4610      	mov	r0, r2
 8003514:	f7ff f8fd 	bl	8002712 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8003518:	f001 fb14 	bl	8004b44 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800351c:	4b0d      	ldr	r3, [pc, #52]	; (8003554 <prvAddNewTaskToReadyList+0xcc>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d00e      	beq.n	8003542 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8003524:	4b0a      	ldr	r3, [pc, #40]	; (8003550 <prvAddNewTaskToReadyList+0xc8>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800352e:	429a      	cmp	r2, r3
 8003530:	d207      	bcs.n	8003542 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8003532:	4b0c      	ldr	r3, [pc, #48]	; (8003564 <prvAddNewTaskToReadyList+0xdc>)
 8003534:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003538:	601a      	str	r2, [r3, #0]
 800353a:	f3bf 8f4f 	dsb	sy
 800353e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8003542:	bf00      	nop
 8003544:	3708      	adds	r7, #8
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
 800354a:	bf00      	nop
 800354c:	20000d7c 	.word	0x20000d7c
 8003550:	200008a8 	.word	0x200008a8
 8003554:	20000d88 	.word	0x20000d88
 8003558:	20000d98 	.word	0x20000d98
 800355c:	20000d84 	.word	0x20000d84
 8003560:	200008ac 	.word	0x200008ac
 8003564:	e000ed04 	.word	0xe000ed04

08003568 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8003568:	b580      	push	{r7, lr}
 800356a:	b084      	sub	sp, #16
 800356c:	af00      	add	r7, sp, #0
 800356e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8003570:	2300      	movs	r3, #0
 8003572:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d017      	beq.n	80035aa <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800357a:	4b13      	ldr	r3, [pc, #76]	; (80035c8 <vTaskDelay+0x60>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00a      	beq.n	8003598 <vTaskDelay+0x30>
	__asm volatile
 8003582:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003586:	f383 8811 	msr	BASEPRI, r3
 800358a:	f3bf 8f6f 	isb	sy
 800358e:	f3bf 8f4f 	dsb	sy
 8003592:	60bb      	str	r3, [r7, #8]
}
 8003594:	bf00      	nop
 8003596:	e7fe      	b.n	8003596 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8003598:	f000 f88a 	bl	80036b0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800359c:	2100      	movs	r1, #0
 800359e:	6878      	ldr	r0, [r7, #4]
 80035a0:	f000 fdb4 	bl	800410c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80035a4:	f000 f892 	bl	80036cc <xTaskResumeAll>
 80035a8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d107      	bne.n	80035c0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80035b0:	4b06      	ldr	r3, [pc, #24]	; (80035cc <vTaskDelay+0x64>)
 80035b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80035b6:	601a      	str	r2, [r3, #0]
 80035b8:	f3bf 8f4f 	dsb	sy
 80035bc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80035c0:	bf00      	nop
 80035c2:	3710      	adds	r7, #16
 80035c4:	46bd      	mov	sp, r7
 80035c6:	bd80      	pop	{r7, pc}
 80035c8:	20000da4 	.word	0x20000da4
 80035cc:	e000ed04 	.word	0xe000ed04

080035d0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b08a      	sub	sp, #40	; 0x28
 80035d4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80035d6:	2300      	movs	r3, #0
 80035d8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80035da:	2300      	movs	r3, #0
 80035dc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80035de:	463a      	mov	r2, r7
 80035e0:	1d39      	adds	r1, r7, #4
 80035e2:	f107 0308 	add.w	r3, r7, #8
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7fe fe44 	bl	8002274 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80035ec:	6839      	ldr	r1, [r7, #0]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	68ba      	ldr	r2, [r7, #8]
 80035f2:	9202      	str	r2, [sp, #8]
 80035f4:	9301      	str	r3, [sp, #4]
 80035f6:	2300      	movs	r3, #0
 80035f8:	9300      	str	r3, [sp, #0]
 80035fa:	2300      	movs	r3, #0
 80035fc:	460a      	mov	r2, r1
 80035fe:	4924      	ldr	r1, [pc, #144]	; (8003690 <vTaskStartScheduler+0xc0>)
 8003600:	4824      	ldr	r0, [pc, #144]	; (8003694 <vTaskStartScheduler+0xc4>)
 8003602:	f7ff fdf9 	bl	80031f8 <xTaskCreateStatic>
 8003606:	4603      	mov	r3, r0
 8003608:	4a23      	ldr	r2, [pc, #140]	; (8003698 <vTaskStartScheduler+0xc8>)
 800360a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800360c:	4b22      	ldr	r3, [pc, #136]	; (8003698 <vTaskStartScheduler+0xc8>)
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	2b00      	cmp	r3, #0
 8003612:	d002      	beq.n	800361a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8003614:	2301      	movs	r3, #1
 8003616:	617b      	str	r3, [r7, #20]
 8003618:	e001      	b.n	800361e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800361a:	2300      	movs	r3, #0
 800361c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800361e:	697b      	ldr	r3, [r7, #20]
 8003620:	2b01      	cmp	r3, #1
 8003622:	d102      	bne.n	800362a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8003624:	f000 fdc6 	bl	80041b4 <xTimerCreateTimerTask>
 8003628:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2b01      	cmp	r3, #1
 800362e:	d11b      	bne.n	8003668 <vTaskStartScheduler+0x98>
	__asm volatile
 8003630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003634:	f383 8811 	msr	BASEPRI, r3
 8003638:	f3bf 8f6f 	isb	sy
 800363c:	f3bf 8f4f 	dsb	sy
 8003640:	613b      	str	r3, [r7, #16]
}
 8003642:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003644:	4b15      	ldr	r3, [pc, #84]	; (800369c <vTaskStartScheduler+0xcc>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	3354      	adds	r3, #84	; 0x54
 800364a:	4a15      	ldr	r2, [pc, #84]	; (80036a0 <vTaskStartScheduler+0xd0>)
 800364c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800364e:	4b15      	ldr	r3, [pc, #84]	; (80036a4 <vTaskStartScheduler+0xd4>)
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8003656:	4b14      	ldr	r3, [pc, #80]	; (80036a8 <vTaskStartScheduler+0xd8>)
 8003658:	2201      	movs	r2, #1
 800365a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800365c:	4b13      	ldr	r3, [pc, #76]	; (80036ac <vTaskStartScheduler+0xdc>)
 800365e:	2200      	movs	r2, #0
 8003660:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8003662:	f001 f99d 	bl	80049a0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8003666:	e00e      	b.n	8003686 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800366e:	d10a      	bne.n	8003686 <vTaskStartScheduler+0xb6>
	__asm volatile
 8003670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003674:	f383 8811 	msr	BASEPRI, r3
 8003678:	f3bf 8f6f 	isb	sy
 800367c:	f3bf 8f4f 	dsb	sy
 8003680:	60fb      	str	r3, [r7, #12]
}
 8003682:	bf00      	nop
 8003684:	e7fe      	b.n	8003684 <vTaskStartScheduler+0xb4>
}
 8003686:	bf00      	nop
 8003688:	3718      	adds	r7, #24
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	08005328 	.word	0x08005328
 8003694:	08003e11 	.word	0x08003e11
 8003698:	20000da0 	.word	0x20000da0
 800369c:	200008a8 	.word	0x200008a8
 80036a0:	20000010 	.word	0x20000010
 80036a4:	20000d9c 	.word	0x20000d9c
 80036a8:	20000d88 	.word	0x20000d88
 80036ac:	20000d80 	.word	0x20000d80

080036b0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80036b0:	b480      	push	{r7}
 80036b2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80036b4:	4b04      	ldr	r3, [pc, #16]	; (80036c8 <vTaskSuspendAll+0x18>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	3301      	adds	r3, #1
 80036ba:	4a03      	ldr	r2, [pc, #12]	; (80036c8 <vTaskSuspendAll+0x18>)
 80036bc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80036be:	bf00      	nop
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	20000da4 	.word	0x20000da4

080036cc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	b084      	sub	sp, #16
 80036d0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80036d2:	2300      	movs	r3, #0
 80036d4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80036d6:	2300      	movs	r3, #0
 80036d8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80036da:	4b42      	ldr	r3, [pc, #264]	; (80037e4 <xTaskResumeAll+0x118>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d10a      	bne.n	80036f8 <xTaskResumeAll+0x2c>
	__asm volatile
 80036e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e6:	f383 8811 	msr	BASEPRI, r3
 80036ea:	f3bf 8f6f 	isb	sy
 80036ee:	f3bf 8f4f 	dsb	sy
 80036f2:	603b      	str	r3, [r7, #0]
}
 80036f4:	bf00      	nop
 80036f6:	e7fe      	b.n	80036f6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80036f8:	f001 f9f4 	bl	8004ae4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80036fc:	4b39      	ldr	r3, [pc, #228]	; (80037e4 <xTaskResumeAll+0x118>)
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	3b01      	subs	r3, #1
 8003702:	4a38      	ldr	r2, [pc, #224]	; (80037e4 <xTaskResumeAll+0x118>)
 8003704:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003706:	4b37      	ldr	r3, [pc, #220]	; (80037e4 <xTaskResumeAll+0x118>)
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d162      	bne.n	80037d4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800370e:	4b36      	ldr	r3, [pc, #216]	; (80037e8 <xTaskResumeAll+0x11c>)
 8003710:	681b      	ldr	r3, [r3, #0]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d05e      	beq.n	80037d4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003716:	e02f      	b.n	8003778 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003718:	4b34      	ldr	r3, [pc, #208]	; (80037ec <xTaskResumeAll+0x120>)
 800371a:	68db      	ldr	r3, [r3, #12]
 800371c:	68db      	ldr	r3, [r3, #12]
 800371e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	3318      	adds	r3, #24
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff f851 	bl	80027cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	3304      	adds	r3, #4
 800372e:	4618      	mov	r0, r3
 8003730:	f7ff f84c 	bl	80027cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003738:	4b2d      	ldr	r3, [pc, #180]	; (80037f0 <xTaskResumeAll+0x124>)
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d903      	bls.n	8003748 <xTaskResumeAll+0x7c>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003744:	4a2a      	ldr	r2, [pc, #168]	; (80037f0 <xTaskResumeAll+0x124>)
 8003746:	6013      	str	r3, [r2, #0]
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800374c:	4613      	mov	r3, r2
 800374e:	009b      	lsls	r3, r3, #2
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4a27      	ldr	r2, [pc, #156]	; (80037f4 <xTaskResumeAll+0x128>)
 8003756:	441a      	add	r2, r3
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	3304      	adds	r3, #4
 800375c:	4619      	mov	r1, r3
 800375e:	4610      	mov	r0, r2
 8003760:	f7fe ffd7 	bl	8002712 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003768:	4b23      	ldr	r3, [pc, #140]	; (80037f8 <xTaskResumeAll+0x12c>)
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800376e:	429a      	cmp	r2, r3
 8003770:	d302      	bcc.n	8003778 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8003772:	4b22      	ldr	r3, [pc, #136]	; (80037fc <xTaskResumeAll+0x130>)
 8003774:	2201      	movs	r2, #1
 8003776:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8003778:	4b1c      	ldr	r3, [pc, #112]	; (80037ec <xTaskResumeAll+0x120>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1cb      	bne.n	8003718 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	2b00      	cmp	r3, #0
 8003784:	d001      	beq.n	800378a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8003786:	f000 fbfd 	bl	8003f84 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800378a:	4b1d      	ldr	r3, [pc, #116]	; (8003800 <xTaskResumeAll+0x134>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d010      	beq.n	80037b8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8003796:	f000 f847 	bl	8003828 <xTaskIncrementTick>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d002      	beq.n	80037a6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80037a0:	4b16      	ldr	r3, [pc, #88]	; (80037fc <xTaskResumeAll+0x130>)
 80037a2:	2201      	movs	r2, #1
 80037a4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	3b01      	subs	r3, #1
 80037aa:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1f1      	bne.n	8003796 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80037b2:	4b13      	ldr	r3, [pc, #76]	; (8003800 <xTaskResumeAll+0x134>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80037b8:	4b10      	ldr	r3, [pc, #64]	; (80037fc <xTaskResumeAll+0x130>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d009      	beq.n	80037d4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80037c0:	2301      	movs	r3, #1
 80037c2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80037c4:	4b0f      	ldr	r3, [pc, #60]	; (8003804 <xTaskResumeAll+0x138>)
 80037c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80037ca:	601a      	str	r2, [r3, #0]
 80037cc:	f3bf 8f4f 	dsb	sy
 80037d0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80037d4:	f001 f9b6 	bl	8004b44 <vPortExitCritical>

	return xAlreadyYielded;
 80037d8:	68bb      	ldr	r3, [r7, #8]
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3710      	adds	r7, #16
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	20000da4 	.word	0x20000da4
 80037e8:	20000d7c 	.word	0x20000d7c
 80037ec:	20000d3c 	.word	0x20000d3c
 80037f0:	20000d84 	.word	0x20000d84
 80037f4:	200008ac 	.word	0x200008ac
 80037f8:	200008a8 	.word	0x200008a8
 80037fc:	20000d90 	.word	0x20000d90
 8003800:	20000d8c 	.word	0x20000d8c
 8003804:	e000ed04 	.word	0xe000ed04

08003808 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8003808:	b480      	push	{r7}
 800380a:	b083      	sub	sp, #12
 800380c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800380e:	4b05      	ldr	r3, [pc, #20]	; (8003824 <xTaskGetTickCount+0x1c>)
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8003814:	687b      	ldr	r3, [r7, #4]
}
 8003816:	4618      	mov	r0, r3
 8003818:	370c      	adds	r7, #12
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20000d80 	.word	0x20000d80

08003828 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800382e:	2300      	movs	r3, #0
 8003830:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003832:	4b4f      	ldr	r3, [pc, #316]	; (8003970 <xTaskIncrementTick+0x148>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	2b00      	cmp	r3, #0
 8003838:	f040 808f 	bne.w	800395a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800383c:	4b4d      	ldr	r3, [pc, #308]	; (8003974 <xTaskIncrementTick+0x14c>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	3301      	adds	r3, #1
 8003842:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8003844:	4a4b      	ldr	r2, [pc, #300]	; (8003974 <xTaskIncrementTick+0x14c>)
 8003846:	693b      	ldr	r3, [r7, #16]
 8003848:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d120      	bne.n	8003892 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8003850:	4b49      	ldr	r3, [pc, #292]	; (8003978 <xTaskIncrementTick+0x150>)
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d00a      	beq.n	8003870 <xTaskIncrementTick+0x48>
	__asm volatile
 800385a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800385e:	f383 8811 	msr	BASEPRI, r3
 8003862:	f3bf 8f6f 	isb	sy
 8003866:	f3bf 8f4f 	dsb	sy
 800386a:	603b      	str	r3, [r7, #0]
}
 800386c:	bf00      	nop
 800386e:	e7fe      	b.n	800386e <xTaskIncrementTick+0x46>
 8003870:	4b41      	ldr	r3, [pc, #260]	; (8003978 <xTaskIncrementTick+0x150>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	60fb      	str	r3, [r7, #12]
 8003876:	4b41      	ldr	r3, [pc, #260]	; (800397c <xTaskIncrementTick+0x154>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a3f      	ldr	r2, [pc, #252]	; (8003978 <xTaskIncrementTick+0x150>)
 800387c:	6013      	str	r3, [r2, #0]
 800387e:	4a3f      	ldr	r2, [pc, #252]	; (800397c <xTaskIncrementTick+0x154>)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	6013      	str	r3, [r2, #0]
 8003884:	4b3e      	ldr	r3, [pc, #248]	; (8003980 <xTaskIncrementTick+0x158>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	3301      	adds	r3, #1
 800388a:	4a3d      	ldr	r2, [pc, #244]	; (8003980 <xTaskIncrementTick+0x158>)
 800388c:	6013      	str	r3, [r2, #0]
 800388e:	f000 fb79 	bl	8003f84 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8003892:	4b3c      	ldr	r3, [pc, #240]	; (8003984 <xTaskIncrementTick+0x15c>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	693a      	ldr	r2, [r7, #16]
 8003898:	429a      	cmp	r2, r3
 800389a:	d349      	bcc.n	8003930 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800389c:	4b36      	ldr	r3, [pc, #216]	; (8003978 <xTaskIncrementTick+0x150>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d104      	bne.n	80038b0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80038a6:	4b37      	ldr	r3, [pc, #220]	; (8003984 <xTaskIncrementTick+0x15c>)
 80038a8:	f04f 32ff 	mov.w	r2, #4294967295
 80038ac:	601a      	str	r2, [r3, #0]
					break;
 80038ae:	e03f      	b.n	8003930 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80038b0:	4b31      	ldr	r3, [pc, #196]	; (8003978 <xTaskIncrementTick+0x150>)
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	68db      	ldr	r3, [r3, #12]
 80038b6:	68db      	ldr	r3, [r3, #12]
 80038b8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80038ba:	68bb      	ldr	r3, [r7, #8]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d203      	bcs.n	80038d0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80038c8:	4a2e      	ldr	r2, [pc, #184]	; (8003984 <xTaskIncrementTick+0x15c>)
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80038ce:	e02f      	b.n	8003930 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	3304      	adds	r3, #4
 80038d4:	4618      	mov	r0, r3
 80038d6:	f7fe ff79 	bl	80027cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d004      	beq.n	80038ec <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80038e2:	68bb      	ldr	r3, [r7, #8]
 80038e4:	3318      	adds	r3, #24
 80038e6:	4618      	mov	r0, r3
 80038e8:	f7fe ff70 	bl	80027cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038f0:	4b25      	ldr	r3, [pc, #148]	; (8003988 <xTaskIncrementTick+0x160>)
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d903      	bls.n	8003900 <xTaskIncrementTick+0xd8>
 80038f8:	68bb      	ldr	r3, [r7, #8]
 80038fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038fc:	4a22      	ldr	r2, [pc, #136]	; (8003988 <xTaskIncrementTick+0x160>)
 80038fe:	6013      	str	r3, [r2, #0]
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003904:	4613      	mov	r3, r2
 8003906:	009b      	lsls	r3, r3, #2
 8003908:	4413      	add	r3, r2
 800390a:	009b      	lsls	r3, r3, #2
 800390c:	4a1f      	ldr	r2, [pc, #124]	; (800398c <xTaskIncrementTick+0x164>)
 800390e:	441a      	add	r2, r3
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	3304      	adds	r3, #4
 8003914:	4619      	mov	r1, r3
 8003916:	4610      	mov	r0, r2
 8003918:	f7fe fefb 	bl	8002712 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003920:	4b1b      	ldr	r3, [pc, #108]	; (8003990 <xTaskIncrementTick+0x168>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003926:	429a      	cmp	r2, r3
 8003928:	d3b8      	bcc.n	800389c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800392a:	2301      	movs	r3, #1
 800392c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800392e:	e7b5      	b.n	800389c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8003930:	4b17      	ldr	r3, [pc, #92]	; (8003990 <xTaskIncrementTick+0x168>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003936:	4915      	ldr	r1, [pc, #84]	; (800398c <xTaskIncrementTick+0x164>)
 8003938:	4613      	mov	r3, r2
 800393a:	009b      	lsls	r3, r3, #2
 800393c:	4413      	add	r3, r2
 800393e:	009b      	lsls	r3, r3, #2
 8003940:	440b      	add	r3, r1
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	2b01      	cmp	r3, #1
 8003946:	d901      	bls.n	800394c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8003948:	2301      	movs	r3, #1
 800394a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800394c:	4b11      	ldr	r3, [pc, #68]	; (8003994 <xTaskIncrementTick+0x16c>)
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	2b00      	cmp	r3, #0
 8003952:	d007      	beq.n	8003964 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8003954:	2301      	movs	r3, #1
 8003956:	617b      	str	r3, [r7, #20]
 8003958:	e004      	b.n	8003964 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800395a:	4b0f      	ldr	r3, [pc, #60]	; (8003998 <xTaskIncrementTick+0x170>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	3301      	adds	r3, #1
 8003960:	4a0d      	ldr	r2, [pc, #52]	; (8003998 <xTaskIncrementTick+0x170>)
 8003962:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8003964:	697b      	ldr	r3, [r7, #20]
}
 8003966:	4618      	mov	r0, r3
 8003968:	3718      	adds	r7, #24
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	20000da4 	.word	0x20000da4
 8003974:	20000d80 	.word	0x20000d80
 8003978:	20000d34 	.word	0x20000d34
 800397c:	20000d38 	.word	0x20000d38
 8003980:	20000d94 	.word	0x20000d94
 8003984:	20000d9c 	.word	0x20000d9c
 8003988:	20000d84 	.word	0x20000d84
 800398c:	200008ac 	.word	0x200008ac
 8003990:	200008a8 	.word	0x200008a8
 8003994:	20000d90 	.word	0x20000d90
 8003998:	20000d8c 	.word	0x20000d8c

0800399c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800399c:	b480      	push	{r7}
 800399e:	b085      	sub	sp, #20
 80039a0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80039a2:	4b2a      	ldr	r3, [pc, #168]	; (8003a4c <vTaskSwitchContext+0xb0>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80039aa:	4b29      	ldr	r3, [pc, #164]	; (8003a50 <vTaskSwitchContext+0xb4>)
 80039ac:	2201      	movs	r2, #1
 80039ae:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80039b0:	e046      	b.n	8003a40 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80039b2:	4b27      	ldr	r3, [pc, #156]	; (8003a50 <vTaskSwitchContext+0xb4>)
 80039b4:	2200      	movs	r2, #0
 80039b6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80039b8:	4b26      	ldr	r3, [pc, #152]	; (8003a54 <vTaskSwitchContext+0xb8>)
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	60fb      	str	r3, [r7, #12]
 80039be:	e010      	b.n	80039e2 <vTaskSwitchContext+0x46>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d10a      	bne.n	80039dc <vTaskSwitchContext+0x40>
	__asm volatile
 80039c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ca:	f383 8811 	msr	BASEPRI, r3
 80039ce:	f3bf 8f6f 	isb	sy
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	607b      	str	r3, [r7, #4]
}
 80039d8:	bf00      	nop
 80039da:	e7fe      	b.n	80039da <vTaskSwitchContext+0x3e>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	3b01      	subs	r3, #1
 80039e0:	60fb      	str	r3, [r7, #12]
 80039e2:	491d      	ldr	r1, [pc, #116]	; (8003a58 <vTaskSwitchContext+0xbc>)
 80039e4:	68fa      	ldr	r2, [r7, #12]
 80039e6:	4613      	mov	r3, r2
 80039e8:	009b      	lsls	r3, r3, #2
 80039ea:	4413      	add	r3, r2
 80039ec:	009b      	lsls	r3, r3, #2
 80039ee:	440b      	add	r3, r1
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d0e4      	beq.n	80039c0 <vTaskSwitchContext+0x24>
 80039f6:	68fa      	ldr	r2, [r7, #12]
 80039f8:	4613      	mov	r3, r2
 80039fa:	009b      	lsls	r3, r3, #2
 80039fc:	4413      	add	r3, r2
 80039fe:	009b      	lsls	r3, r3, #2
 8003a00:	4a15      	ldr	r2, [pc, #84]	; (8003a58 <vTaskSwitchContext+0xbc>)
 8003a02:	4413      	add	r3, r2
 8003a04:	60bb      	str	r3, [r7, #8]
 8003a06:	68bb      	ldr	r3, [r7, #8]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	685a      	ldr	r2, [r3, #4]
 8003a0c:	68bb      	ldr	r3, [r7, #8]
 8003a0e:	605a      	str	r2, [r3, #4]
 8003a10:	68bb      	ldr	r3, [r7, #8]
 8003a12:	685a      	ldr	r2, [r3, #4]
 8003a14:	68bb      	ldr	r3, [r7, #8]
 8003a16:	3308      	adds	r3, #8
 8003a18:	429a      	cmp	r2, r3
 8003a1a:	d104      	bne.n	8003a26 <vTaskSwitchContext+0x8a>
 8003a1c:	68bb      	ldr	r3, [r7, #8]
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	685a      	ldr	r2, [r3, #4]
 8003a22:	68bb      	ldr	r3, [r7, #8]
 8003a24:	605a      	str	r2, [r3, #4]
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	4a0b      	ldr	r2, [pc, #44]	; (8003a5c <vTaskSwitchContext+0xc0>)
 8003a2e:	6013      	str	r3, [r2, #0]
 8003a30:	4a08      	ldr	r2, [pc, #32]	; (8003a54 <vTaskSwitchContext+0xb8>)
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8003a36:	4b09      	ldr	r3, [pc, #36]	; (8003a5c <vTaskSwitchContext+0xc0>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	3354      	adds	r3, #84	; 0x54
 8003a3c:	4a08      	ldr	r2, [pc, #32]	; (8003a60 <vTaskSwitchContext+0xc4>)
 8003a3e:	6013      	str	r3, [r2, #0]
}
 8003a40:	bf00      	nop
 8003a42:	3714      	adds	r7, #20
 8003a44:	46bd      	mov	sp, r7
 8003a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a4a:	4770      	bx	lr
 8003a4c:	20000da4 	.word	0x20000da4
 8003a50:	20000d90 	.word	0x20000d90
 8003a54:	20000d84 	.word	0x20000d84
 8003a58:	200008ac 	.word	0x200008ac
 8003a5c:	200008a8 	.word	0x200008a8
 8003a60:	20000010 	.word	0x20000010

08003a64 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8003a64:	b580      	push	{r7, lr}
 8003a66:	b084      	sub	sp, #16
 8003a68:	af00      	add	r7, sp, #0
 8003a6a:	6078      	str	r0, [r7, #4]
 8003a6c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10a      	bne.n	8003a8a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	60fb      	str	r3, [r7, #12]
}
 8003a86:	bf00      	nop
 8003a88:	e7fe      	b.n	8003a88 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003a8a:	4b07      	ldr	r3, [pc, #28]	; (8003aa8 <vTaskPlaceOnEventList+0x44>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	3318      	adds	r3, #24
 8003a90:	4619      	mov	r1, r3
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f7fe fe61 	bl	800275a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003a98:	2101      	movs	r1, #1
 8003a9a:	6838      	ldr	r0, [r7, #0]
 8003a9c:	f000 fb36 	bl	800410c <prvAddCurrentTaskToDelayedList>
}
 8003aa0:	bf00      	nop
 8003aa2:	3710      	adds	r7, #16
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	200008a8 	.word	0x200008a8

08003aac <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	60f8      	str	r0, [r7, #12]
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d10a      	bne.n	8003ad4 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	617b      	str	r3, [r7, #20]
}
 8003ad0:	bf00      	nop
 8003ad2:	e7fe      	b.n	8003ad2 <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8003ad4:	4b11      	ldr	r3, [pc, #68]	; (8003b1c <vTaskPlaceOnUnorderedEventList+0x70>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	2b00      	cmp	r3, #0
 8003ada:	d10a      	bne.n	8003af2 <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8003adc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ae0:	f383 8811 	msr	BASEPRI, r3
 8003ae4:	f3bf 8f6f 	isb	sy
 8003ae8:	f3bf 8f4f 	dsb	sy
 8003aec:	613b      	str	r3, [r7, #16]
}
 8003aee:	bf00      	nop
 8003af0:	e7fe      	b.n	8003af0 <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003af2:	4b0b      	ldr	r3, [pc, #44]	; (8003b20 <vTaskPlaceOnUnorderedEventList+0x74>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68ba      	ldr	r2, [r7, #8]
 8003af8:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8003afc:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003afe:	4b08      	ldr	r3, [pc, #32]	; (8003b20 <vTaskPlaceOnUnorderedEventList+0x74>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	3318      	adds	r3, #24
 8003b04:	4619      	mov	r1, r3
 8003b06:	68f8      	ldr	r0, [r7, #12]
 8003b08:	f7fe fe03 	bl	8002712 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8003b0c:	2101      	movs	r1, #1
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fafc 	bl	800410c <prvAddCurrentTaskToDelayedList>
}
 8003b14:	bf00      	nop
 8003b16:	3718      	adds	r7, #24
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	20000da4 	.word	0x20000da4
 8003b20:	200008a8 	.word	0x200008a8

08003b24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d10a      	bne.n	8003b4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8003b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b3a:	f383 8811 	msr	BASEPRI, r3
 8003b3e:	f3bf 8f6f 	isb	sy
 8003b42:	f3bf 8f4f 	dsb	sy
 8003b46:	617b      	str	r3, [r7, #20]
}
 8003b48:	bf00      	nop
 8003b4a:	e7fe      	b.n	8003b4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8003b4c:	4b0a      	ldr	r3, [pc, #40]	; (8003b78 <vTaskPlaceOnEventListRestricted+0x54>)
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	3318      	adds	r3, #24
 8003b52:	4619      	mov	r1, r3
 8003b54:	68f8      	ldr	r0, [r7, #12]
 8003b56:	f7fe fddc 	bl	8002712 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d002      	beq.n	8003b66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8003b60:	f04f 33ff 	mov.w	r3, #4294967295
 8003b64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8003b66:	6879      	ldr	r1, [r7, #4]
 8003b68:	68b8      	ldr	r0, [r7, #8]
 8003b6a:	f000 facf 	bl	800410c <prvAddCurrentTaskToDelayedList>
	}
 8003b6e:	bf00      	nop
 8003b70:	3718      	adds	r7, #24
 8003b72:	46bd      	mov	sp, r7
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	200008a8 	.word	0x200008a8

08003b7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b086      	sub	sp, #24
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	68db      	ldr	r3, [r3, #12]
 8003b88:	68db      	ldr	r3, [r3, #12]
 8003b8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8003b8c:	693b      	ldr	r3, [r7, #16]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d10a      	bne.n	8003ba8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8003b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b96:	f383 8811 	msr	BASEPRI, r3
 8003b9a:	f3bf 8f6f 	isb	sy
 8003b9e:	f3bf 8f4f 	dsb	sy
 8003ba2:	60fb      	str	r3, [r7, #12]
}
 8003ba4:	bf00      	nop
 8003ba6:	e7fe      	b.n	8003ba6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	3318      	adds	r3, #24
 8003bac:	4618      	mov	r0, r3
 8003bae:	f7fe fe0d 	bl	80027cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003bb2:	4b1e      	ldr	r3, [pc, #120]	; (8003c2c <xTaskRemoveFromEventList+0xb0>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d11d      	bne.n	8003bf6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003bba:	693b      	ldr	r3, [r7, #16]
 8003bbc:	3304      	adds	r3, #4
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7fe fe04 	bl	80027cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bc8:	4b19      	ldr	r3, [pc, #100]	; (8003c30 <xTaskRemoveFromEventList+0xb4>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	429a      	cmp	r2, r3
 8003bce:	d903      	bls.n	8003bd8 <xTaskRemoveFromEventList+0x5c>
 8003bd0:	693b      	ldr	r3, [r7, #16]
 8003bd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bd4:	4a16      	ldr	r2, [pc, #88]	; (8003c30 <xTaskRemoveFromEventList+0xb4>)
 8003bd6:	6013      	str	r3, [r2, #0]
 8003bd8:	693b      	ldr	r3, [r7, #16]
 8003bda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003bdc:	4613      	mov	r3, r2
 8003bde:	009b      	lsls	r3, r3, #2
 8003be0:	4413      	add	r3, r2
 8003be2:	009b      	lsls	r3, r3, #2
 8003be4:	4a13      	ldr	r2, [pc, #76]	; (8003c34 <xTaskRemoveFromEventList+0xb8>)
 8003be6:	441a      	add	r2, r3
 8003be8:	693b      	ldr	r3, [r7, #16]
 8003bea:	3304      	adds	r3, #4
 8003bec:	4619      	mov	r1, r3
 8003bee:	4610      	mov	r0, r2
 8003bf0:	f7fe fd8f 	bl	8002712 <vListInsertEnd>
 8003bf4:	e005      	b.n	8003c02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8003bf6:	693b      	ldr	r3, [r7, #16]
 8003bf8:	3318      	adds	r3, #24
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	480e      	ldr	r0, [pc, #56]	; (8003c38 <xTaskRemoveFromEventList+0xbc>)
 8003bfe:	f7fe fd88 	bl	8002712 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c06:	4b0d      	ldr	r3, [pc, #52]	; (8003c3c <xTaskRemoveFromEventList+0xc0>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c0c:	429a      	cmp	r2, r3
 8003c0e:	d905      	bls.n	8003c1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8003c10:	2301      	movs	r3, #1
 8003c12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8003c14:	4b0a      	ldr	r3, [pc, #40]	; (8003c40 <xTaskRemoveFromEventList+0xc4>)
 8003c16:	2201      	movs	r2, #1
 8003c18:	601a      	str	r2, [r3, #0]
 8003c1a:	e001      	b.n	8003c20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8003c20:	697b      	ldr	r3, [r7, #20]
}
 8003c22:	4618      	mov	r0, r3
 8003c24:	3718      	adds	r7, #24
 8003c26:	46bd      	mov	sp, r7
 8003c28:	bd80      	pop	{r7, pc}
 8003c2a:	bf00      	nop
 8003c2c:	20000da4 	.word	0x20000da4
 8003c30:	20000d84 	.word	0x20000d84
 8003c34:	200008ac 	.word	0x200008ac
 8003c38:	20000d3c 	.word	0x20000d3c
 8003c3c:	200008a8 	.word	0x200008a8
 8003c40:	20000d90 	.word	0x20000d90

08003c44 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
 8003c4c:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8003c4e:	4b29      	ldr	r3, [pc, #164]	; (8003cf4 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10a      	bne.n	8003c6c <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8003c56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c5a:	f383 8811 	msr	BASEPRI, r3
 8003c5e:	f3bf 8f6f 	isb	sy
 8003c62:	f3bf 8f4f 	dsb	sy
 8003c66:	613b      	str	r3, [r7, #16]
}
 8003c68:	bf00      	nop
 8003c6a:	e7fe      	b.n	8003c6a <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8003c6c:	683b      	ldr	r3, [r7, #0]
 8003c6e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	68db      	ldr	r3, [r3, #12]
 8003c7a:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d10a      	bne.n	8003c98 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8003c82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c86:	f383 8811 	msr	BASEPRI, r3
 8003c8a:	f3bf 8f6f 	isb	sy
 8003c8e:	f3bf 8f4f 	dsb	sy
 8003c92:	60fb      	str	r3, [r7, #12]
}
 8003c94:	bf00      	nop
 8003c96:	e7fe      	b.n	8003c96 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8003c98:	6878      	ldr	r0, [r7, #4]
 8003c9a:	f7fe fd97 	bl	80027cc <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8003c9e:	697b      	ldr	r3, [r7, #20]
 8003ca0:	3304      	adds	r3, #4
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f7fe fd92 	bl	80027cc <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8003ca8:	697b      	ldr	r3, [r7, #20]
 8003caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cac:	4b12      	ldr	r3, [pc, #72]	; (8003cf8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	429a      	cmp	r2, r3
 8003cb2:	d903      	bls.n	8003cbc <vTaskRemoveFromUnorderedEventList+0x78>
 8003cb4:	697b      	ldr	r3, [r7, #20]
 8003cb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003cb8:	4a0f      	ldr	r2, [pc, #60]	; (8003cf8 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8003cba:	6013      	str	r3, [r2, #0]
 8003cbc:	697b      	ldr	r3, [r7, #20]
 8003cbe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cc0:	4613      	mov	r3, r2
 8003cc2:	009b      	lsls	r3, r3, #2
 8003cc4:	4413      	add	r3, r2
 8003cc6:	009b      	lsls	r3, r3, #2
 8003cc8:	4a0c      	ldr	r2, [pc, #48]	; (8003cfc <vTaskRemoveFromUnorderedEventList+0xb8>)
 8003cca:	441a      	add	r2, r3
 8003ccc:	697b      	ldr	r3, [r7, #20]
 8003cce:	3304      	adds	r3, #4
 8003cd0:	4619      	mov	r1, r3
 8003cd2:	4610      	mov	r0, r2
 8003cd4:	f7fe fd1d 	bl	8002712 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8003cd8:	697b      	ldr	r3, [r7, #20]
 8003cda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003cdc:	4b08      	ldr	r3, [pc, #32]	; (8003d00 <vTaskRemoveFromUnorderedEventList+0xbc>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	d902      	bls.n	8003cec <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8003ce6:	4b07      	ldr	r3, [pc, #28]	; (8003d04 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8003ce8:	2201      	movs	r2, #1
 8003cea:	601a      	str	r2, [r3, #0]
	}
}
 8003cec:	bf00      	nop
 8003cee:	3718      	adds	r7, #24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	bd80      	pop	{r7, pc}
 8003cf4:	20000da4 	.word	0x20000da4
 8003cf8:	20000d84 	.word	0x20000d84
 8003cfc:	200008ac 	.word	0x200008ac
 8003d00:	200008a8 	.word	0x200008a8
 8003d04:	20000d90 	.word	0x20000d90

08003d08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8003d08:	b480      	push	{r7}
 8003d0a:	b083      	sub	sp, #12
 8003d0c:	af00      	add	r7, sp, #0
 8003d0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8003d10:	4b06      	ldr	r3, [pc, #24]	; (8003d2c <vTaskInternalSetTimeOutState+0x24>)
 8003d12:	681a      	ldr	r2, [r3, #0]
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <vTaskInternalSetTimeOutState+0x28>)
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	605a      	str	r2, [r3, #4]
}
 8003d20:	bf00      	nop
 8003d22:	370c      	adds	r7, #12
 8003d24:	46bd      	mov	sp, r7
 8003d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d2a:	4770      	bx	lr
 8003d2c:	20000d94 	.word	0x20000d94
 8003d30:	20000d80 	.word	0x20000d80

08003d34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b088      	sub	sp, #32
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d10a      	bne.n	8003d5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8003d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d48:	f383 8811 	msr	BASEPRI, r3
 8003d4c:	f3bf 8f6f 	isb	sy
 8003d50:	f3bf 8f4f 	dsb	sy
 8003d54:	613b      	str	r3, [r7, #16]
}
 8003d56:	bf00      	nop
 8003d58:	e7fe      	b.n	8003d58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8003d5a:	683b      	ldr	r3, [r7, #0]
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d10a      	bne.n	8003d76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8003d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d64:	f383 8811 	msr	BASEPRI, r3
 8003d68:	f3bf 8f6f 	isb	sy
 8003d6c:	f3bf 8f4f 	dsb	sy
 8003d70:	60fb      	str	r3, [r7, #12]
}
 8003d72:	bf00      	nop
 8003d74:	e7fe      	b.n	8003d74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8003d76:	f000 feb5 	bl	8004ae4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8003d7a:	4b1d      	ldr	r3, [pc, #116]	; (8003df0 <xTaskCheckForTimeOut+0xbc>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685b      	ldr	r3, [r3, #4]
 8003d84:	69ba      	ldr	r2, [r7, #24]
 8003d86:	1ad3      	subs	r3, r2, r3
 8003d88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8003d8a:	683b      	ldr	r3, [r7, #0]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d92:	d102      	bne.n	8003d9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8003d94:	2300      	movs	r3, #0
 8003d96:	61fb      	str	r3, [r7, #28]
 8003d98:	e023      	b.n	8003de2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	681a      	ldr	r2, [r3, #0]
 8003d9e:	4b15      	ldr	r3, [pc, #84]	; (8003df4 <xTaskCheckForTimeOut+0xc0>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	429a      	cmp	r2, r3
 8003da4:	d007      	beq.n	8003db6 <xTaskCheckForTimeOut+0x82>
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	685b      	ldr	r3, [r3, #4]
 8003daa:	69ba      	ldr	r2, [r7, #24]
 8003dac:	429a      	cmp	r2, r3
 8003dae:	d302      	bcc.n	8003db6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8003db0:	2301      	movs	r3, #1
 8003db2:	61fb      	str	r3, [r7, #28]
 8003db4:	e015      	b.n	8003de2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	429a      	cmp	r2, r3
 8003dbe:	d20b      	bcs.n	8003dd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8003dc0:	683b      	ldr	r3, [r7, #0]
 8003dc2:	681a      	ldr	r2, [r3, #0]
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	1ad2      	subs	r2, r2, r3
 8003dc8:	683b      	ldr	r3, [r7, #0]
 8003dca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7ff ff9b 	bl	8003d08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	61fb      	str	r3, [r7, #28]
 8003dd6:	e004      	b.n	8003de2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	2200      	movs	r2, #0
 8003ddc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8003dde:	2301      	movs	r3, #1
 8003de0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8003de2:	f000 feaf 	bl	8004b44 <vPortExitCritical>

	return xReturn;
 8003de6:	69fb      	ldr	r3, [r7, #28]
}
 8003de8:	4618      	mov	r0, r3
 8003dea:	3720      	adds	r7, #32
 8003dec:	46bd      	mov	sp, r7
 8003dee:	bd80      	pop	{r7, pc}
 8003df0:	20000d80 	.word	0x20000d80
 8003df4:	20000d94 	.word	0x20000d94

08003df8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8003df8:	b480      	push	{r7}
 8003dfa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8003dfc:	4b03      	ldr	r3, [pc, #12]	; (8003e0c <vTaskMissedYield+0x14>)
 8003dfe:	2201      	movs	r2, #1
 8003e00:	601a      	str	r2, [r3, #0]
}
 8003e02:	bf00      	nop
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr
 8003e0c:	20000d90 	.word	0x20000d90

08003e10 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8003e10:	b580      	push	{r7, lr}
 8003e12:	b082      	sub	sp, #8
 8003e14:	af00      	add	r7, sp, #0
 8003e16:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8003e18:	f000 f852 	bl	8003ec0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8003e1c:	4b06      	ldr	r3, [pc, #24]	; (8003e38 <prvIdleTask+0x28>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	2b01      	cmp	r3, #1
 8003e22:	d9f9      	bls.n	8003e18 <prvIdleTask+0x8>
			{
				taskYIELD();
 8003e24:	4b05      	ldr	r3, [pc, #20]	; (8003e3c <prvIdleTask+0x2c>)
 8003e26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e2a:	601a      	str	r2, [r3, #0]
 8003e2c:	f3bf 8f4f 	dsb	sy
 8003e30:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8003e34:	e7f0      	b.n	8003e18 <prvIdleTask+0x8>
 8003e36:	bf00      	nop
 8003e38:	200008ac 	.word	0x200008ac
 8003e3c:	e000ed04 	.word	0xe000ed04

08003e40 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8003e40:	b580      	push	{r7, lr}
 8003e42:	b082      	sub	sp, #8
 8003e44:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e46:	2300      	movs	r3, #0
 8003e48:	607b      	str	r3, [r7, #4]
 8003e4a:	e00c      	b.n	8003e66 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8003e4c:	687a      	ldr	r2, [r7, #4]
 8003e4e:	4613      	mov	r3, r2
 8003e50:	009b      	lsls	r3, r3, #2
 8003e52:	4413      	add	r3, r2
 8003e54:	009b      	lsls	r3, r3, #2
 8003e56:	4a12      	ldr	r2, [pc, #72]	; (8003ea0 <prvInitialiseTaskLists+0x60>)
 8003e58:	4413      	add	r3, r2
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	f7fe fc2c 	bl	80026b8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3301      	adds	r3, #1
 8003e64:	607b      	str	r3, [r7, #4]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2b37      	cmp	r3, #55	; 0x37
 8003e6a:	d9ef      	bls.n	8003e4c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8003e6c:	480d      	ldr	r0, [pc, #52]	; (8003ea4 <prvInitialiseTaskLists+0x64>)
 8003e6e:	f7fe fc23 	bl	80026b8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8003e72:	480d      	ldr	r0, [pc, #52]	; (8003ea8 <prvInitialiseTaskLists+0x68>)
 8003e74:	f7fe fc20 	bl	80026b8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8003e78:	480c      	ldr	r0, [pc, #48]	; (8003eac <prvInitialiseTaskLists+0x6c>)
 8003e7a:	f7fe fc1d 	bl	80026b8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8003e7e:	480c      	ldr	r0, [pc, #48]	; (8003eb0 <prvInitialiseTaskLists+0x70>)
 8003e80:	f7fe fc1a 	bl	80026b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8003e84:	480b      	ldr	r0, [pc, #44]	; (8003eb4 <prvInitialiseTaskLists+0x74>)
 8003e86:	f7fe fc17 	bl	80026b8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8003e8a:	4b0b      	ldr	r3, [pc, #44]	; (8003eb8 <prvInitialiseTaskLists+0x78>)
 8003e8c:	4a05      	ldr	r2, [pc, #20]	; (8003ea4 <prvInitialiseTaskLists+0x64>)
 8003e8e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8003e90:	4b0a      	ldr	r3, [pc, #40]	; (8003ebc <prvInitialiseTaskLists+0x7c>)
 8003e92:	4a05      	ldr	r2, [pc, #20]	; (8003ea8 <prvInitialiseTaskLists+0x68>)
 8003e94:	601a      	str	r2, [r3, #0]
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200008ac 	.word	0x200008ac
 8003ea4:	20000d0c 	.word	0x20000d0c
 8003ea8:	20000d20 	.word	0x20000d20
 8003eac:	20000d3c 	.word	0x20000d3c
 8003eb0:	20000d50 	.word	0x20000d50
 8003eb4:	20000d68 	.word	0x20000d68
 8003eb8:	20000d34 	.word	0x20000d34
 8003ebc:	20000d38 	.word	0x20000d38

08003ec0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b082      	sub	sp, #8
 8003ec4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003ec6:	e019      	b.n	8003efc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8003ec8:	f000 fe0c 	bl	8004ae4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003ecc:	4b10      	ldr	r3, [pc, #64]	; (8003f10 <prvCheckTasksWaitingTermination+0x50>)
 8003ece:	68db      	ldr	r3, [r3, #12]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3304      	adds	r3, #4
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f7fe fc77 	bl	80027cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8003ede:	4b0d      	ldr	r3, [pc, #52]	; (8003f14 <prvCheckTasksWaitingTermination+0x54>)
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	3b01      	subs	r3, #1
 8003ee4:	4a0b      	ldr	r2, [pc, #44]	; (8003f14 <prvCheckTasksWaitingTermination+0x54>)
 8003ee6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8003ee8:	4b0b      	ldr	r3, [pc, #44]	; (8003f18 <prvCheckTasksWaitingTermination+0x58>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	3b01      	subs	r3, #1
 8003eee:	4a0a      	ldr	r2, [pc, #40]	; (8003f18 <prvCheckTasksWaitingTermination+0x58>)
 8003ef0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8003ef2:	f000 fe27 	bl	8004b44 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f000 f810 	bl	8003f1c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8003efc:	4b06      	ldr	r3, [pc, #24]	; (8003f18 <prvCheckTasksWaitingTermination+0x58>)
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d1e1      	bne.n	8003ec8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8003f04:	bf00      	nop
 8003f06:	bf00      	nop
 8003f08:	3708      	adds	r7, #8
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	bd80      	pop	{r7, pc}
 8003f0e:	bf00      	nop
 8003f10:	20000d50 	.word	0x20000d50
 8003f14:	20000d7c 	.word	0x20000d7c
 8003f18:	20000d64 	.word	0x20000d64

08003f1c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	3354      	adds	r3, #84	; 0x54
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f001 f931 	bl	8005190 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d108      	bne.n	8003f4a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 ffbf 	bl	8004ec0 <vPortFree>
				vPortFree( pxTCB );
 8003f42:	6878      	ldr	r0, [r7, #4]
 8003f44:	f000 ffbc 	bl	8004ec0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8003f48:	e018      	b.n	8003f7c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003f50:	2b01      	cmp	r3, #1
 8003f52:	d103      	bne.n	8003f5c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 ffb3 	bl	8004ec0 <vPortFree>
	}
 8003f5a:	e00f      	b.n	8003f7c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d00a      	beq.n	8003f7c <prvDeleteTCB+0x60>
	__asm volatile
 8003f66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f6a:	f383 8811 	msr	BASEPRI, r3
 8003f6e:	f3bf 8f6f 	isb	sy
 8003f72:	f3bf 8f4f 	dsb	sy
 8003f76:	60fb      	str	r3, [r7, #12]
}
 8003f78:	bf00      	nop
 8003f7a:	e7fe      	b.n	8003f7a <prvDeleteTCB+0x5e>
	}
 8003f7c:	bf00      	nop
 8003f7e:	3710      	adds	r7, #16
 8003f80:	46bd      	mov	sp, r7
 8003f82:	bd80      	pop	{r7, pc}

08003f84 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8003f8a:	4b0c      	ldr	r3, [pc, #48]	; (8003fbc <prvResetNextTaskUnblockTime+0x38>)
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d104      	bne.n	8003f9e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8003f94:	4b0a      	ldr	r3, [pc, #40]	; (8003fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8003f96:	f04f 32ff 	mov.w	r2, #4294967295
 8003f9a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8003f9c:	e008      	b.n	8003fb0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8003f9e:	4b07      	ldr	r3, [pc, #28]	; (8003fbc <prvResetNextTaskUnblockTime+0x38>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	68db      	ldr	r3, [r3, #12]
 8003fa4:	68db      	ldr	r3, [r3, #12]
 8003fa6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	4a04      	ldr	r2, [pc, #16]	; (8003fc0 <prvResetNextTaskUnblockTime+0x3c>)
 8003fae:	6013      	str	r3, [r2, #0]
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fba:	4770      	bx	lr
 8003fbc:	20000d34 	.word	0x20000d34
 8003fc0:	20000d9c 	.word	0x20000d9c

08003fc4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8003fc4:	b480      	push	{r7}
 8003fc6:	b083      	sub	sp, #12
 8003fc8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8003fca:	4b0b      	ldr	r3, [pc, #44]	; (8003ff8 <xTaskGetSchedulerState+0x34>)
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d102      	bne.n	8003fd8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	607b      	str	r3, [r7, #4]
 8003fd6:	e008      	b.n	8003fea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8003fd8:	4b08      	ldr	r3, [pc, #32]	; (8003ffc <xTaskGetSchedulerState+0x38>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d102      	bne.n	8003fe6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8003fe0:	2302      	movs	r3, #2
 8003fe2:	607b      	str	r3, [r7, #4]
 8003fe4:	e001      	b.n	8003fea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8003fea:	687b      	ldr	r3, [r7, #4]
	}
 8003fec:	4618      	mov	r0, r3
 8003fee:	370c      	adds	r7, #12
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff6:	4770      	bx	lr
 8003ff8:	20000d88 	.word	0x20000d88
 8003ffc:	20000da4 	.word	0x20000da4

08004000 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004000:	b580      	push	{r7, lr}
 8004002:	b086      	sub	sp, #24
 8004004:	af00      	add	r7, sp, #0
 8004006:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800400c:	2300      	movs	r3, #0
 800400e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d056      	beq.n	80040c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004016:	4b2e      	ldr	r3, [pc, #184]	; (80040d0 <xTaskPriorityDisinherit+0xd0>)
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	693a      	ldr	r2, [r7, #16]
 800401c:	429a      	cmp	r2, r3
 800401e:	d00a      	beq.n	8004036 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004020:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004024:	f383 8811 	msr	BASEPRI, r3
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	60fb      	str	r3, [r7, #12]
}
 8004032:	bf00      	nop
 8004034:	e7fe      	b.n	8004034 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004036:	693b      	ldr	r3, [r7, #16]
 8004038:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800403a:	2b00      	cmp	r3, #0
 800403c:	d10a      	bne.n	8004054 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800403e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004042:	f383 8811 	msr	BASEPRI, r3
 8004046:	f3bf 8f6f 	isb	sy
 800404a:	f3bf 8f4f 	dsb	sy
 800404e:	60bb      	str	r3, [r7, #8]
}
 8004050:	bf00      	nop
 8004052:	e7fe      	b.n	8004052 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004054:	693b      	ldr	r3, [r7, #16]
 8004056:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004058:	1e5a      	subs	r2, r3, #1
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800405e:	693b      	ldr	r3, [r7, #16]
 8004060:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004066:	429a      	cmp	r2, r3
 8004068:	d02c      	beq.n	80040c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800406a:	693b      	ldr	r3, [r7, #16]
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	2b00      	cmp	r3, #0
 8004070:	d128      	bne.n	80040c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004072:	693b      	ldr	r3, [r7, #16]
 8004074:	3304      	adds	r3, #4
 8004076:	4618      	mov	r0, r3
 8004078:	f7fe fba8 	bl	80027cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004084:	693b      	ldr	r3, [r7, #16]
 8004086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004088:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800408c:	693b      	ldr	r3, [r7, #16]
 800408e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004090:	693b      	ldr	r3, [r7, #16]
 8004092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004094:	4b0f      	ldr	r3, [pc, #60]	; (80040d4 <xTaskPriorityDisinherit+0xd4>)
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d903      	bls.n	80040a4 <xTaskPriorityDisinherit+0xa4>
 800409c:	693b      	ldr	r3, [r7, #16]
 800409e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040a0:	4a0c      	ldr	r2, [pc, #48]	; (80040d4 <xTaskPriorityDisinherit+0xd4>)
 80040a2:	6013      	str	r3, [r2, #0]
 80040a4:	693b      	ldr	r3, [r7, #16]
 80040a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040a8:	4613      	mov	r3, r2
 80040aa:	009b      	lsls	r3, r3, #2
 80040ac:	4413      	add	r3, r2
 80040ae:	009b      	lsls	r3, r3, #2
 80040b0:	4a09      	ldr	r2, [pc, #36]	; (80040d8 <xTaskPriorityDisinherit+0xd8>)
 80040b2:	441a      	add	r2, r3
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	3304      	adds	r3, #4
 80040b8:	4619      	mov	r1, r3
 80040ba:	4610      	mov	r0, r2
 80040bc:	f7fe fb29 	bl	8002712 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80040c0:	2301      	movs	r3, #1
 80040c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80040c4:	697b      	ldr	r3, [r7, #20]
	}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3718      	adds	r7, #24
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}
 80040ce:	bf00      	nop
 80040d0:	200008a8 	.word	0x200008a8
 80040d4:	20000d84 	.word	0x20000d84
 80040d8:	200008ac 	.word	0x200008ac

080040dc <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 80040dc:	b480      	push	{r7}
 80040de:	b083      	sub	sp, #12
 80040e0:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 80040e2:	4b09      	ldr	r3, [pc, #36]	; (8004108 <uxTaskResetEventItemValue+0x2c>)
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	699b      	ldr	r3, [r3, #24]
 80040e8:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80040ea:	4b07      	ldr	r3, [pc, #28]	; (8004108 <uxTaskResetEventItemValue+0x2c>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040f0:	4b05      	ldr	r3, [pc, #20]	; (8004108 <uxTaskResetEventItemValue+0x2c>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 80040f8:	619a      	str	r2, [r3, #24]

	return uxReturn;
 80040fa:	687b      	ldr	r3, [r7, #4]
}
 80040fc:	4618      	mov	r0, r3
 80040fe:	370c      	adds	r7, #12
 8004100:	46bd      	mov	sp, r7
 8004102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004106:	4770      	bx	lr
 8004108:	200008a8 	.word	0x200008a8

0800410c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b084      	sub	sp, #16
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
 8004114:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004116:	4b21      	ldr	r3, [pc, #132]	; (800419c <prvAddCurrentTaskToDelayedList+0x90>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800411c:	4b20      	ldr	r3, [pc, #128]	; (80041a0 <prvAddCurrentTaskToDelayedList+0x94>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	3304      	adds	r3, #4
 8004122:	4618      	mov	r0, r3
 8004124:	f7fe fb52 	bl	80027cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800412e:	d10a      	bne.n	8004146 <prvAddCurrentTaskToDelayedList+0x3a>
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004136:	4b1a      	ldr	r3, [pc, #104]	; (80041a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	3304      	adds	r3, #4
 800413c:	4619      	mov	r1, r3
 800413e:	4819      	ldr	r0, [pc, #100]	; (80041a4 <prvAddCurrentTaskToDelayedList+0x98>)
 8004140:	f7fe fae7 	bl	8002712 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004144:	e026      	b.n	8004194 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004146:	68fa      	ldr	r2, [r7, #12]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	4413      	add	r3, r2
 800414c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800414e:	4b14      	ldr	r3, [pc, #80]	; (80041a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004156:	68ba      	ldr	r2, [r7, #8]
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	429a      	cmp	r2, r3
 800415c:	d209      	bcs.n	8004172 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800415e:	4b12      	ldr	r3, [pc, #72]	; (80041a8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004160:	681a      	ldr	r2, [r3, #0]
 8004162:	4b0f      	ldr	r3, [pc, #60]	; (80041a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	3304      	adds	r3, #4
 8004168:	4619      	mov	r1, r3
 800416a:	4610      	mov	r0, r2
 800416c:	f7fe faf5 	bl	800275a <vListInsert>
}
 8004170:	e010      	b.n	8004194 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004172:	4b0e      	ldr	r3, [pc, #56]	; (80041ac <prvAddCurrentTaskToDelayedList+0xa0>)
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	4b0a      	ldr	r3, [pc, #40]	; (80041a0 <prvAddCurrentTaskToDelayedList+0x94>)
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	3304      	adds	r3, #4
 800417c:	4619      	mov	r1, r3
 800417e:	4610      	mov	r0, r2
 8004180:	f7fe faeb 	bl	800275a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004184:	4b0a      	ldr	r3, [pc, #40]	; (80041b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68ba      	ldr	r2, [r7, #8]
 800418a:	429a      	cmp	r2, r3
 800418c:	d202      	bcs.n	8004194 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800418e:	4a08      	ldr	r2, [pc, #32]	; (80041b0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8004190:	68bb      	ldr	r3, [r7, #8]
 8004192:	6013      	str	r3, [r2, #0]
}
 8004194:	bf00      	nop
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}
 800419c:	20000d80 	.word	0x20000d80
 80041a0:	200008a8 	.word	0x200008a8
 80041a4:	20000d68 	.word	0x20000d68
 80041a8:	20000d38 	.word	0x20000d38
 80041ac:	20000d34 	.word	0x20000d34
 80041b0:	20000d9c 	.word	0x20000d9c

080041b4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b08a      	sub	sp, #40	; 0x28
 80041b8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80041ba:	2300      	movs	r3, #0
 80041bc:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80041be:	f000 fb07 	bl	80047d0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80041c2:	4b1c      	ldr	r3, [pc, #112]	; (8004234 <xTimerCreateTimerTask+0x80>)
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	2b00      	cmp	r3, #0
 80041c8:	d021      	beq.n	800420e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80041ca:	2300      	movs	r3, #0
 80041cc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80041ce:	2300      	movs	r3, #0
 80041d0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80041d2:	1d3a      	adds	r2, r7, #4
 80041d4:	f107 0108 	add.w	r1, r7, #8
 80041d8:	f107 030c 	add.w	r3, r7, #12
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fe f863 	bl	80022a8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80041e2:	6879      	ldr	r1, [r7, #4]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	9202      	str	r2, [sp, #8]
 80041ea:	9301      	str	r3, [sp, #4]
 80041ec:	2302      	movs	r3, #2
 80041ee:	9300      	str	r3, [sp, #0]
 80041f0:	2300      	movs	r3, #0
 80041f2:	460a      	mov	r2, r1
 80041f4:	4910      	ldr	r1, [pc, #64]	; (8004238 <xTimerCreateTimerTask+0x84>)
 80041f6:	4811      	ldr	r0, [pc, #68]	; (800423c <xTimerCreateTimerTask+0x88>)
 80041f8:	f7fe fffe 	bl	80031f8 <xTaskCreateStatic>
 80041fc:	4603      	mov	r3, r0
 80041fe:	4a10      	ldr	r2, [pc, #64]	; (8004240 <xTimerCreateTimerTask+0x8c>)
 8004200:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004202:	4b0f      	ldr	r3, [pc, #60]	; (8004240 <xTimerCreateTimerTask+0x8c>)
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	2b00      	cmp	r3, #0
 8004208:	d001      	beq.n	800420e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800420a:	2301      	movs	r3, #1
 800420c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800420e:	697b      	ldr	r3, [r7, #20]
 8004210:	2b00      	cmp	r3, #0
 8004212:	d10a      	bne.n	800422a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004218:	f383 8811 	msr	BASEPRI, r3
 800421c:	f3bf 8f6f 	isb	sy
 8004220:	f3bf 8f4f 	dsb	sy
 8004224:	613b      	str	r3, [r7, #16]
}
 8004226:	bf00      	nop
 8004228:	e7fe      	b.n	8004228 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800422a:	697b      	ldr	r3, [r7, #20]
}
 800422c:	4618      	mov	r0, r3
 800422e:	3718      	adds	r7, #24
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}
 8004234:	20000dd8 	.word	0x20000dd8
 8004238:	08005330 	.word	0x08005330
 800423c:	08004379 	.word	0x08004379
 8004240:	20000ddc 	.word	0x20000ddc

08004244 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b08a      	sub	sp, #40	; 0x28
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]
 8004250:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004252:	2300      	movs	r3, #0
 8004254:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d10a      	bne.n	8004272 <xTimerGenericCommand+0x2e>
	__asm volatile
 800425c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004260:	f383 8811 	msr	BASEPRI, r3
 8004264:	f3bf 8f6f 	isb	sy
 8004268:	f3bf 8f4f 	dsb	sy
 800426c:	623b      	str	r3, [r7, #32]
}
 800426e:	bf00      	nop
 8004270:	e7fe      	b.n	8004270 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004272:	4b1a      	ldr	r3, [pc, #104]	; (80042dc <xTimerGenericCommand+0x98>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	2b00      	cmp	r3, #0
 8004278:	d02a      	beq.n	80042d0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800427a:	68bb      	ldr	r3, [r7, #8]
 800427c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	2b05      	cmp	r3, #5
 800428a:	dc18      	bgt.n	80042be <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800428c:	f7ff fe9a 	bl	8003fc4 <xTaskGetSchedulerState>
 8004290:	4603      	mov	r3, r0
 8004292:	2b02      	cmp	r3, #2
 8004294:	d109      	bne.n	80042aa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004296:	4b11      	ldr	r3, [pc, #68]	; (80042dc <xTimerGenericCommand+0x98>)
 8004298:	6818      	ldr	r0, [r3, #0]
 800429a:	f107 0110 	add.w	r1, r7, #16
 800429e:	2300      	movs	r3, #0
 80042a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042a2:	f7fe fbc1 	bl	8002a28 <xQueueGenericSend>
 80042a6:	6278      	str	r0, [r7, #36]	; 0x24
 80042a8:	e012      	b.n	80042d0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80042aa:	4b0c      	ldr	r3, [pc, #48]	; (80042dc <xTimerGenericCommand+0x98>)
 80042ac:	6818      	ldr	r0, [r3, #0]
 80042ae:	f107 0110 	add.w	r1, r7, #16
 80042b2:	2300      	movs	r3, #0
 80042b4:	2200      	movs	r2, #0
 80042b6:	f7fe fbb7 	bl	8002a28 <xQueueGenericSend>
 80042ba:	6278      	str	r0, [r7, #36]	; 0x24
 80042bc:	e008      	b.n	80042d0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80042be:	4b07      	ldr	r3, [pc, #28]	; (80042dc <xTimerGenericCommand+0x98>)
 80042c0:	6818      	ldr	r0, [r3, #0]
 80042c2:	f107 0110 	add.w	r1, r7, #16
 80042c6:	2300      	movs	r3, #0
 80042c8:	683a      	ldr	r2, [r7, #0]
 80042ca:	f7fe fcab 	bl	8002c24 <xQueueGenericSendFromISR>
 80042ce:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80042d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80042d2:	4618      	mov	r0, r3
 80042d4:	3728      	adds	r7, #40	; 0x28
 80042d6:	46bd      	mov	sp, r7
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	bf00      	nop
 80042dc:	20000dd8 	.word	0x20000dd8

080042e0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b088      	sub	sp, #32
 80042e4:	af02      	add	r7, sp, #8
 80042e6:	6078      	str	r0, [r7, #4]
 80042e8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80042ea:	4b22      	ldr	r3, [pc, #136]	; (8004374 <prvProcessExpiredTimer+0x94>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	68db      	ldr	r3, [r3, #12]
 80042f2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80042f4:	697b      	ldr	r3, [r7, #20]
 80042f6:	3304      	adds	r3, #4
 80042f8:	4618      	mov	r0, r3
 80042fa:	f7fe fa67 	bl	80027cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004304:	f003 0304 	and.w	r3, r3, #4
 8004308:	2b00      	cmp	r3, #0
 800430a:	d022      	beq.n	8004352 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	699a      	ldr	r2, [r3, #24]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	18d1      	adds	r1, r2, r3
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	683a      	ldr	r2, [r7, #0]
 8004318:	6978      	ldr	r0, [r7, #20]
 800431a:	f000 f8d1 	bl	80044c0 <prvInsertTimerInActiveList>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d01f      	beq.n	8004364 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004324:	2300      	movs	r3, #0
 8004326:	9300      	str	r3, [sp, #0]
 8004328:	2300      	movs	r3, #0
 800432a:	687a      	ldr	r2, [r7, #4]
 800432c:	2100      	movs	r1, #0
 800432e:	6978      	ldr	r0, [r7, #20]
 8004330:	f7ff ff88 	bl	8004244 <xTimerGenericCommand>
 8004334:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	2b00      	cmp	r3, #0
 800433a:	d113      	bne.n	8004364 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	60fb      	str	r3, [r7, #12]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004358:	f023 0301 	bic.w	r3, r3, #1
 800435c:	b2da      	uxtb	r2, r3
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004364:	697b      	ldr	r3, [r7, #20]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	6978      	ldr	r0, [r7, #20]
 800436a:	4798      	blx	r3
}
 800436c:	bf00      	nop
 800436e:	3718      	adds	r7, #24
 8004370:	46bd      	mov	sp, r7
 8004372:	bd80      	pop	{r7, pc}
 8004374:	20000dd0 	.word	0x20000dd0

08004378 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004380:	f107 0308 	add.w	r3, r7, #8
 8004384:	4618      	mov	r0, r3
 8004386:	f000 f857 	bl	8004438 <prvGetNextExpireTime>
 800438a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800438c:	68bb      	ldr	r3, [r7, #8]
 800438e:	4619      	mov	r1, r3
 8004390:	68f8      	ldr	r0, [r7, #12]
 8004392:	f000 f803 	bl	800439c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004396:	f000 f8d5 	bl	8004544 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800439a:	e7f1      	b.n	8004380 <prvTimerTask+0x8>

0800439c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b084      	sub	sp, #16
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
 80043a4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80043a6:	f7ff f983 	bl	80036b0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80043aa:	f107 0308 	add.w	r3, r7, #8
 80043ae:	4618      	mov	r0, r3
 80043b0:	f000 f866 	bl	8004480 <prvSampleTimeNow>
 80043b4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d130      	bne.n	800441e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d10a      	bne.n	80043d8 <prvProcessTimerOrBlockTask+0x3c>
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d806      	bhi.n	80043d8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80043ca:	f7ff f97f 	bl	80036cc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80043ce:	68f9      	ldr	r1, [r7, #12]
 80043d0:	6878      	ldr	r0, [r7, #4]
 80043d2:	f7ff ff85 	bl	80042e0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80043d6:	e024      	b.n	8004422 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d008      	beq.n	80043f0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80043de:	4b13      	ldr	r3, [pc, #76]	; (800442c <prvProcessTimerOrBlockTask+0x90>)
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d101      	bne.n	80043ec <prvProcessTimerOrBlockTask+0x50>
 80043e8:	2301      	movs	r3, #1
 80043ea:	e000      	b.n	80043ee <prvProcessTimerOrBlockTask+0x52>
 80043ec:	2300      	movs	r3, #0
 80043ee:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80043f0:	4b0f      	ldr	r3, [pc, #60]	; (8004430 <prvProcessTimerOrBlockTask+0x94>)
 80043f2:	6818      	ldr	r0, [r3, #0]
 80043f4:	687a      	ldr	r2, [r7, #4]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	683a      	ldr	r2, [r7, #0]
 80043fc:	4619      	mov	r1, r3
 80043fe:	f7fe fec7 	bl	8003190 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004402:	f7ff f963 	bl	80036cc <xTaskResumeAll>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d10a      	bne.n	8004422 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800440c:	4b09      	ldr	r3, [pc, #36]	; (8004434 <prvProcessTimerOrBlockTask+0x98>)
 800440e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004412:	601a      	str	r2, [r3, #0]
 8004414:	f3bf 8f4f 	dsb	sy
 8004418:	f3bf 8f6f 	isb	sy
}
 800441c:	e001      	b.n	8004422 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800441e:	f7ff f955 	bl	80036cc <xTaskResumeAll>
}
 8004422:	bf00      	nop
 8004424:	3710      	adds	r7, #16
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}
 800442a:	bf00      	nop
 800442c:	20000dd4 	.word	0x20000dd4
 8004430:	20000dd8 	.word	0x20000dd8
 8004434:	e000ed04 	.word	0xe000ed04

08004438 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004438:	b480      	push	{r7}
 800443a:	b085      	sub	sp, #20
 800443c:	af00      	add	r7, sp, #0
 800443e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004440:	4b0e      	ldr	r3, [pc, #56]	; (800447c <prvGetNextExpireTime+0x44>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d101      	bne.n	800444e <prvGetNextExpireTime+0x16>
 800444a:	2201      	movs	r2, #1
 800444c:	e000      	b.n	8004450 <prvGetNextExpireTime+0x18>
 800444e:	2200      	movs	r2, #0
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d105      	bne.n	8004468 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800445c:	4b07      	ldr	r3, [pc, #28]	; (800447c <prvGetNextExpireTime+0x44>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	68db      	ldr	r3, [r3, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	60fb      	str	r3, [r7, #12]
 8004466:	e001      	b.n	800446c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800446c:	68fb      	ldr	r3, [r7, #12]
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	20000dd0 	.word	0x20000dd0

08004480 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004488:	f7ff f9be 	bl	8003808 <xTaskGetTickCount>
 800448c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800448e:	4b0b      	ldr	r3, [pc, #44]	; (80044bc <prvSampleTimeNow+0x3c>)
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	68fa      	ldr	r2, [r7, #12]
 8004494:	429a      	cmp	r2, r3
 8004496:	d205      	bcs.n	80044a4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004498:	f000 f936 	bl	8004708 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	2201      	movs	r2, #1
 80044a0:	601a      	str	r2, [r3, #0]
 80044a2:	e002      	b.n	80044aa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80044aa:	4a04      	ldr	r2, [pc, #16]	; (80044bc <prvSampleTimeNow+0x3c>)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80044b0:	68fb      	ldr	r3, [r7, #12]
}
 80044b2:	4618      	mov	r0, r3
 80044b4:	3710      	adds	r7, #16
 80044b6:	46bd      	mov	sp, r7
 80044b8:	bd80      	pop	{r7, pc}
 80044ba:	bf00      	nop
 80044bc:	20000de0 	.word	0x20000de0

080044c0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b086      	sub	sp, #24
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80044ce:	2300      	movs	r3, #0
 80044d0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	68ba      	ldr	r2, [r7, #8]
 80044d6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	68fa      	ldr	r2, [r7, #12]
 80044dc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80044de:	68ba      	ldr	r2, [r7, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	429a      	cmp	r2, r3
 80044e4:	d812      	bhi.n	800450c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044e6:	687a      	ldr	r2, [r7, #4]
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	1ad2      	subs	r2, r2, r3
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	699b      	ldr	r3, [r3, #24]
 80044f0:	429a      	cmp	r2, r3
 80044f2:	d302      	bcc.n	80044fa <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80044f4:	2301      	movs	r3, #1
 80044f6:	617b      	str	r3, [r7, #20]
 80044f8:	e01b      	b.n	8004532 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80044fa:	4b10      	ldr	r3, [pc, #64]	; (800453c <prvInsertTimerInActiveList+0x7c>)
 80044fc:	681a      	ldr	r2, [r3, #0]
 80044fe:	68fb      	ldr	r3, [r7, #12]
 8004500:	3304      	adds	r3, #4
 8004502:	4619      	mov	r1, r3
 8004504:	4610      	mov	r0, r2
 8004506:	f7fe f928 	bl	800275a <vListInsert>
 800450a:	e012      	b.n	8004532 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800450c:	687a      	ldr	r2, [r7, #4]
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	429a      	cmp	r2, r3
 8004512:	d206      	bcs.n	8004522 <prvInsertTimerInActiveList+0x62>
 8004514:	68ba      	ldr	r2, [r7, #8]
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	429a      	cmp	r2, r3
 800451a:	d302      	bcc.n	8004522 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800451c:	2301      	movs	r3, #1
 800451e:	617b      	str	r3, [r7, #20]
 8004520:	e007      	b.n	8004532 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004522:	4b07      	ldr	r3, [pc, #28]	; (8004540 <prvInsertTimerInActiveList+0x80>)
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	3304      	adds	r3, #4
 800452a:	4619      	mov	r1, r3
 800452c:	4610      	mov	r0, r2
 800452e:	f7fe f914 	bl	800275a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004532:	697b      	ldr	r3, [r7, #20]
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	20000dd4 	.word	0x20000dd4
 8004540:	20000dd0 	.word	0x20000dd0

08004544 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08e      	sub	sp, #56	; 0x38
 8004548:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800454a:	e0ca      	b.n	80046e2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2b00      	cmp	r3, #0
 8004550:	da18      	bge.n	8004584 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8004552:	1d3b      	adds	r3, r7, #4
 8004554:	3304      	adds	r3, #4
 8004556:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8004558:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10a      	bne.n	8004574 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	61fb      	str	r3, [r7, #28]
}
 8004570:	bf00      	nop
 8004572:	e7fe      	b.n	8004572 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8004574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800457a:	6850      	ldr	r0, [r2, #4]
 800457c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800457e:	6892      	ldr	r2, [r2, #8]
 8004580:	4611      	mov	r1, r2
 8004582:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2b00      	cmp	r3, #0
 8004588:	f2c0 80aa 	blt.w	80046e0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8004590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004592:	695b      	ldr	r3, [r3, #20]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d004      	beq.n	80045a2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004598:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800459a:	3304      	adds	r3, #4
 800459c:	4618      	mov	r0, r3
 800459e:	f7fe f915 	bl	80027cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80045a2:	463b      	mov	r3, r7
 80045a4:	4618      	mov	r0, r3
 80045a6:	f7ff ff6b 	bl	8004480 <prvSampleTimeNow>
 80045aa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b09      	cmp	r3, #9
 80045b0:	f200 8097 	bhi.w	80046e2 <prvProcessReceivedCommands+0x19e>
 80045b4:	a201      	add	r2, pc, #4	; (adr r2, 80045bc <prvProcessReceivedCommands+0x78>)
 80045b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045ba:	bf00      	nop
 80045bc:	080045e5 	.word	0x080045e5
 80045c0:	080045e5 	.word	0x080045e5
 80045c4:	080045e5 	.word	0x080045e5
 80045c8:	08004659 	.word	0x08004659
 80045cc:	0800466d 	.word	0x0800466d
 80045d0:	080046b7 	.word	0x080046b7
 80045d4:	080045e5 	.word	0x080045e5
 80045d8:	080045e5 	.word	0x080045e5
 80045dc:	08004659 	.word	0x08004659
 80045e0:	0800466d 	.word	0x0800466d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80045e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80045ea:	f043 0301 	orr.w	r3, r3, #1
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80045f6:	68ba      	ldr	r2, [r7, #8]
 80045f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fa:	699b      	ldr	r3, [r3, #24]
 80045fc:	18d1      	adds	r1, r2, r3
 80045fe:	68bb      	ldr	r3, [r7, #8]
 8004600:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004602:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004604:	f7ff ff5c 	bl	80044c0 <prvInsertTimerInActiveList>
 8004608:	4603      	mov	r3, r0
 800460a:	2b00      	cmp	r3, #0
 800460c:	d069      	beq.n	80046e2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800460e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004614:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004616:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004618:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800461c:	f003 0304 	and.w	r3, r3, #4
 8004620:	2b00      	cmp	r3, #0
 8004622:	d05e      	beq.n	80046e2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8004624:	68ba      	ldr	r2, [r7, #8]
 8004626:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004628:	699b      	ldr	r3, [r3, #24]
 800462a:	441a      	add	r2, r3
 800462c:	2300      	movs	r3, #0
 800462e:	9300      	str	r3, [sp, #0]
 8004630:	2300      	movs	r3, #0
 8004632:	2100      	movs	r1, #0
 8004634:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004636:	f7ff fe05 	bl	8004244 <xTimerGenericCommand>
 800463a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800463c:	6a3b      	ldr	r3, [r7, #32]
 800463e:	2b00      	cmp	r3, #0
 8004640:	d14f      	bne.n	80046e2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8004642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004646:	f383 8811 	msr	BASEPRI, r3
 800464a:	f3bf 8f6f 	isb	sy
 800464e:	f3bf 8f4f 	dsb	sy
 8004652:	61bb      	str	r3, [r7, #24]
}
 8004654:	bf00      	nop
 8004656:	e7fe      	b.n	8004656 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800465a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800465e:	f023 0301 	bic.w	r3, r3, #1
 8004662:	b2da      	uxtb	r2, r3
 8004664:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004666:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800466a:	e03a      	b.n	80046e2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800466c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800466e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004672:	f043 0301 	orr.w	r3, r3, #1
 8004676:	b2da      	uxtb	r2, r3
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800467e:	68ba      	ldr	r2, [r7, #8]
 8004680:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004682:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8004684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004686:	699b      	ldr	r3, [r3, #24]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d10a      	bne.n	80046a2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800468c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004690:	f383 8811 	msr	BASEPRI, r3
 8004694:	f3bf 8f6f 	isb	sy
 8004698:	f3bf 8f4f 	dsb	sy
 800469c:	617b      	str	r3, [r7, #20]
}
 800469e:	bf00      	nop
 80046a0:	e7fe      	b.n	80046a0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80046a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a4:	699a      	ldr	r2, [r3, #24]
 80046a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046a8:	18d1      	adds	r1, r2, r3
 80046aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80046ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b0:	f7ff ff06 	bl	80044c0 <prvInsertTimerInActiveList>
					break;
 80046b4:	e015      	b.n	80046e2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80046b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046bc:	f003 0302 	and.w	r3, r3, #2
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d103      	bne.n	80046cc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80046c4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046c6:	f000 fbfb 	bl	8004ec0 <vPortFree>
 80046ca:	e00a      	b.n	80046e2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80046cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046ce:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80046d2:	f023 0301 	bic.w	r3, r3, #1
 80046d6:	b2da      	uxtb	r2, r3
 80046d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046da:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80046de:	e000      	b.n	80046e2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80046e0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80046e2:	4b08      	ldr	r3, [pc, #32]	; (8004704 <prvProcessReceivedCommands+0x1c0>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	1d39      	adds	r1, r7, #4
 80046e8:	2200      	movs	r2, #0
 80046ea:	4618      	mov	r0, r3
 80046ec:	f7fe fb36 	bl	8002d5c <xQueueReceive>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	f47f af2a 	bne.w	800454c <prvProcessReceivedCommands+0x8>
	}
}
 80046f8:	bf00      	nop
 80046fa:	bf00      	nop
 80046fc:	3730      	adds	r7, #48	; 0x30
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	20000dd8 	.word	0x20000dd8

08004708 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b088      	sub	sp, #32
 800470c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800470e:	e048      	b.n	80047a2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004710:	4b2d      	ldr	r3, [pc, #180]	; (80047c8 <prvSwitchTimerLists+0xc0>)
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800471a:	4b2b      	ldr	r3, [pc, #172]	; (80047c8 <prvSwitchTimerLists+0xc0>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	68db      	ldr	r3, [r3, #12]
 8004720:	68db      	ldr	r3, [r3, #12]
 8004722:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	3304      	adds	r3, #4
 8004728:	4618      	mov	r0, r3
 800472a:	f7fe f84f 	bl	80027cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	6a1b      	ldr	r3, [r3, #32]
 8004732:	68f8      	ldr	r0, [r7, #12]
 8004734:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800473c:	f003 0304 	and.w	r3, r3, #4
 8004740:	2b00      	cmp	r3, #0
 8004742:	d02e      	beq.n	80047a2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	693a      	ldr	r2, [r7, #16]
 800474a:	4413      	add	r3, r2
 800474c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800474e:	68ba      	ldr	r2, [r7, #8]
 8004750:	693b      	ldr	r3, [r7, #16]
 8004752:	429a      	cmp	r2, r3
 8004754:	d90e      	bls.n	8004774 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8004756:	68fb      	ldr	r3, [r7, #12]
 8004758:	68ba      	ldr	r2, [r7, #8]
 800475a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004762:	4b19      	ldr	r3, [pc, #100]	; (80047c8 <prvSwitchTimerLists+0xc0>)
 8004764:	681a      	ldr	r2, [r3, #0]
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	3304      	adds	r3, #4
 800476a:	4619      	mov	r1, r3
 800476c:	4610      	mov	r0, r2
 800476e:	f7fd fff4 	bl	800275a <vListInsert>
 8004772:	e016      	b.n	80047a2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004774:	2300      	movs	r3, #0
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	2300      	movs	r3, #0
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	2100      	movs	r1, #0
 800477e:	68f8      	ldr	r0, [r7, #12]
 8004780:	f7ff fd60 	bl	8004244 <xTimerGenericCommand>
 8004784:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	603b      	str	r3, [r7, #0]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80047a2:	4b09      	ldr	r3, [pc, #36]	; (80047c8 <prvSwitchTimerLists+0xc0>)
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d1b1      	bne.n	8004710 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80047ac:	4b06      	ldr	r3, [pc, #24]	; (80047c8 <prvSwitchTimerLists+0xc0>)
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80047b2:	4b06      	ldr	r3, [pc, #24]	; (80047cc <prvSwitchTimerLists+0xc4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4a04      	ldr	r2, [pc, #16]	; (80047c8 <prvSwitchTimerLists+0xc0>)
 80047b8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80047ba:	4a04      	ldr	r2, [pc, #16]	; (80047cc <prvSwitchTimerLists+0xc4>)
 80047bc:	697b      	ldr	r3, [r7, #20]
 80047be:	6013      	str	r3, [r2, #0]
}
 80047c0:	bf00      	nop
 80047c2:	3718      	adds	r7, #24
 80047c4:	46bd      	mov	sp, r7
 80047c6:	bd80      	pop	{r7, pc}
 80047c8:	20000dd0 	.word	0x20000dd0
 80047cc:	20000dd4 	.word	0x20000dd4

080047d0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80047d0:	b580      	push	{r7, lr}
 80047d2:	b082      	sub	sp, #8
 80047d4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80047d6:	f000 f985 	bl	8004ae4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80047da:	4b15      	ldr	r3, [pc, #84]	; (8004830 <prvCheckForValidListAndQueue+0x60>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d120      	bne.n	8004824 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80047e2:	4814      	ldr	r0, [pc, #80]	; (8004834 <prvCheckForValidListAndQueue+0x64>)
 80047e4:	f7fd ff68 	bl	80026b8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80047e8:	4813      	ldr	r0, [pc, #76]	; (8004838 <prvCheckForValidListAndQueue+0x68>)
 80047ea:	f7fd ff65 	bl	80026b8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80047ee:	4b13      	ldr	r3, [pc, #76]	; (800483c <prvCheckForValidListAndQueue+0x6c>)
 80047f0:	4a10      	ldr	r2, [pc, #64]	; (8004834 <prvCheckForValidListAndQueue+0x64>)
 80047f2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80047f4:	4b12      	ldr	r3, [pc, #72]	; (8004840 <prvCheckForValidListAndQueue+0x70>)
 80047f6:	4a10      	ldr	r2, [pc, #64]	; (8004838 <prvCheckForValidListAndQueue+0x68>)
 80047f8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80047fa:	2300      	movs	r3, #0
 80047fc:	9300      	str	r3, [sp, #0]
 80047fe:	4b11      	ldr	r3, [pc, #68]	; (8004844 <prvCheckForValidListAndQueue+0x74>)
 8004800:	4a11      	ldr	r2, [pc, #68]	; (8004848 <prvCheckForValidListAndQueue+0x78>)
 8004802:	2110      	movs	r1, #16
 8004804:	200a      	movs	r0, #10
 8004806:	f7fe f873 	bl	80028f0 <xQueueGenericCreateStatic>
 800480a:	4603      	mov	r3, r0
 800480c:	4a08      	ldr	r2, [pc, #32]	; (8004830 <prvCheckForValidListAndQueue+0x60>)
 800480e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8004810:	4b07      	ldr	r3, [pc, #28]	; (8004830 <prvCheckForValidListAndQueue+0x60>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	2b00      	cmp	r3, #0
 8004816:	d005      	beq.n	8004824 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8004818:	4b05      	ldr	r3, [pc, #20]	; (8004830 <prvCheckForValidListAndQueue+0x60>)
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	490b      	ldr	r1, [pc, #44]	; (800484c <prvCheckForValidListAndQueue+0x7c>)
 800481e:	4618      	mov	r0, r3
 8004820:	f7fe fc8c 	bl	800313c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004824:	f000 f98e 	bl	8004b44 <vPortExitCritical>
}
 8004828:	bf00      	nop
 800482a:	46bd      	mov	sp, r7
 800482c:	bd80      	pop	{r7, pc}
 800482e:	bf00      	nop
 8004830:	20000dd8 	.word	0x20000dd8
 8004834:	20000da8 	.word	0x20000da8
 8004838:	20000dbc 	.word	0x20000dbc
 800483c:	20000dd0 	.word	0x20000dd0
 8004840:	20000dd4 	.word	0x20000dd4
 8004844:	20000e84 	.word	0x20000e84
 8004848:	20000de4 	.word	0x20000de4
 800484c:	08005338 	.word	0x08005338

08004850 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8004850:	b580      	push	{r7, lr}
 8004852:	b08a      	sub	sp, #40	; 0x28
 8004854:	af00      	add	r7, sp, #0
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	60b9      	str	r1, [r7, #8]
 800485a:	607a      	str	r2, [r7, #4]
 800485c:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 800485e:	f06f 0301 	mvn.w	r3, #1
 8004862:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004870:	4b06      	ldr	r3, [pc, #24]	; (800488c <xTimerPendFunctionCallFromISR+0x3c>)
 8004872:	6818      	ldr	r0, [r3, #0]
 8004874:	f107 0114 	add.w	r1, r7, #20
 8004878:	2300      	movs	r3, #0
 800487a:	683a      	ldr	r2, [r7, #0]
 800487c:	f7fe f9d2 	bl	8002c24 <xQueueGenericSendFromISR>
 8004880:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8004882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8004884:	4618      	mov	r0, r3
 8004886:	3728      	adds	r7, #40	; 0x28
 8004888:	46bd      	mov	sp, r7
 800488a:	bd80      	pop	{r7, pc}
 800488c:	20000dd8 	.word	0x20000dd8

08004890 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8004890:	b480      	push	{r7}
 8004892:	b085      	sub	sp, #20
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	3b04      	subs	r3, #4
 80048a0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80048a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	3b04      	subs	r3, #4
 80048ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f023 0201 	bic.w	r2, r3, #1
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	3b04      	subs	r3, #4
 80048be:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80048c0:	4a0c      	ldr	r2, [pc, #48]	; (80048f4 <pxPortInitialiseStack+0x64>)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3b14      	subs	r3, #20
 80048ca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80048cc:	687a      	ldr	r2, [r7, #4]
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	3b04      	subs	r3, #4
 80048d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	f06f 0202 	mvn.w	r2, #2
 80048de:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3b20      	subs	r3, #32
 80048e4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80048e6:	68fb      	ldr	r3, [r7, #12]
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	080048f9 	.word	0x080048f9

080048f8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80048f8:	b480      	push	{r7}
 80048fa:	b085      	sub	sp, #20
 80048fc:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80048fe:	2300      	movs	r3, #0
 8004900:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8004902:	4b12      	ldr	r3, [pc, #72]	; (800494c <prvTaskExitError+0x54>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	f1b3 3fff 	cmp.w	r3, #4294967295
 800490a:	d00a      	beq.n	8004922 <prvTaskExitError+0x2a>
	__asm volatile
 800490c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004910:	f383 8811 	msr	BASEPRI, r3
 8004914:	f3bf 8f6f 	isb	sy
 8004918:	f3bf 8f4f 	dsb	sy
 800491c:	60fb      	str	r3, [r7, #12]
}
 800491e:	bf00      	nop
 8004920:	e7fe      	b.n	8004920 <prvTaskExitError+0x28>
	__asm volatile
 8004922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004926:	f383 8811 	msr	BASEPRI, r3
 800492a:	f3bf 8f6f 	isb	sy
 800492e:	f3bf 8f4f 	dsb	sy
 8004932:	60bb      	str	r3, [r7, #8]
}
 8004934:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8004936:	bf00      	nop
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d0fc      	beq.n	8004938 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800493e:	bf00      	nop
 8004940:	bf00      	nop
 8004942:	3714      	adds	r7, #20
 8004944:	46bd      	mov	sp, r7
 8004946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800494a:	4770      	bx	lr
 800494c:	2000000c 	.word	0x2000000c

08004950 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8004950:	4b07      	ldr	r3, [pc, #28]	; (8004970 <pxCurrentTCBConst2>)
 8004952:	6819      	ldr	r1, [r3, #0]
 8004954:	6808      	ldr	r0, [r1, #0]
 8004956:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800495a:	f380 8809 	msr	PSP, r0
 800495e:	f3bf 8f6f 	isb	sy
 8004962:	f04f 0000 	mov.w	r0, #0
 8004966:	f380 8811 	msr	BASEPRI, r0
 800496a:	4770      	bx	lr
 800496c:	f3af 8000 	nop.w

08004970 <pxCurrentTCBConst2>:
 8004970:	200008a8 	.word	0x200008a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8004974:	bf00      	nop
 8004976:	bf00      	nop

08004978 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8004978:	4808      	ldr	r0, [pc, #32]	; (800499c <prvPortStartFirstTask+0x24>)
 800497a:	6800      	ldr	r0, [r0, #0]
 800497c:	6800      	ldr	r0, [r0, #0]
 800497e:	f380 8808 	msr	MSP, r0
 8004982:	f04f 0000 	mov.w	r0, #0
 8004986:	f380 8814 	msr	CONTROL, r0
 800498a:	b662      	cpsie	i
 800498c:	b661      	cpsie	f
 800498e:	f3bf 8f4f 	dsb	sy
 8004992:	f3bf 8f6f 	isb	sy
 8004996:	df00      	svc	0
 8004998:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800499a:	bf00      	nop
 800499c:	e000ed08 	.word	0xe000ed08

080049a0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b086      	sub	sp, #24
 80049a4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80049a6:	4b46      	ldr	r3, [pc, #280]	; (8004ac0 <xPortStartScheduler+0x120>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	4a46      	ldr	r2, [pc, #280]	; (8004ac4 <xPortStartScheduler+0x124>)
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d10a      	bne.n	80049c6 <xPortStartScheduler+0x26>
	__asm volatile
 80049b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b4:	f383 8811 	msr	BASEPRI, r3
 80049b8:	f3bf 8f6f 	isb	sy
 80049bc:	f3bf 8f4f 	dsb	sy
 80049c0:	613b      	str	r3, [r7, #16]
}
 80049c2:	bf00      	nop
 80049c4:	e7fe      	b.n	80049c4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80049c6:	4b3e      	ldr	r3, [pc, #248]	; (8004ac0 <xPortStartScheduler+0x120>)
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	4a3f      	ldr	r2, [pc, #252]	; (8004ac8 <xPortStartScheduler+0x128>)
 80049cc:	4293      	cmp	r3, r2
 80049ce:	d10a      	bne.n	80049e6 <xPortStartScheduler+0x46>
	__asm volatile
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	60fb      	str	r3, [r7, #12]
}
 80049e2:	bf00      	nop
 80049e4:	e7fe      	b.n	80049e4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80049e6:	4b39      	ldr	r3, [pc, #228]	; (8004acc <xPortStartScheduler+0x12c>)
 80049e8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80049ea:	697b      	ldr	r3, [r7, #20]
 80049ec:	781b      	ldrb	r3, [r3, #0]
 80049ee:	b2db      	uxtb	r3, r3
 80049f0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80049f2:	697b      	ldr	r3, [r7, #20]
 80049f4:	22ff      	movs	r2, #255	; 0xff
 80049f6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80049f8:	697b      	ldr	r3, [r7, #20]
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8004a00:	78fb      	ldrb	r3, [r7, #3]
 8004a02:	b2db      	uxtb	r3, r3
 8004a04:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8004a08:	b2da      	uxtb	r2, r3
 8004a0a:	4b31      	ldr	r3, [pc, #196]	; (8004ad0 <xPortStartScheduler+0x130>)
 8004a0c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8004a0e:	4b31      	ldr	r3, [pc, #196]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a10:	2207      	movs	r2, #7
 8004a12:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a14:	e009      	b.n	8004a2a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8004a16:	4b2f      	ldr	r3, [pc, #188]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	3b01      	subs	r3, #1
 8004a1c:	4a2d      	ldr	r2, [pc, #180]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a1e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8004a20:	78fb      	ldrb	r3, [r7, #3]
 8004a22:	b2db      	uxtb	r3, r3
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	b2db      	uxtb	r3, r3
 8004a28:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8004a2a:	78fb      	ldrb	r3, [r7, #3]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a32:	2b80      	cmp	r3, #128	; 0x80
 8004a34:	d0ef      	beq.n	8004a16 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8004a36:	4b27      	ldr	r3, [pc, #156]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f1c3 0307 	rsb	r3, r3, #7
 8004a3e:	2b04      	cmp	r3, #4
 8004a40:	d00a      	beq.n	8004a58 <xPortStartScheduler+0xb8>
	__asm volatile
 8004a42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a46:	f383 8811 	msr	BASEPRI, r3
 8004a4a:	f3bf 8f6f 	isb	sy
 8004a4e:	f3bf 8f4f 	dsb	sy
 8004a52:	60bb      	str	r3, [r7, #8]
}
 8004a54:	bf00      	nop
 8004a56:	e7fe      	b.n	8004a56 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8004a58:	4b1e      	ldr	r3, [pc, #120]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	021b      	lsls	r3, r3, #8
 8004a5e:	4a1d      	ldr	r2, [pc, #116]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a60:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8004a62:	4b1c      	ldr	r3, [pc, #112]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8004a6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ad4 <xPortStartScheduler+0x134>)
 8004a6c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	b2da      	uxtb	r2, r3
 8004a72:	697b      	ldr	r3, [r7, #20]
 8004a74:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8004a76:	4b18      	ldr	r3, [pc, #96]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a17      	ldr	r2, [pc, #92]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a7c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004a80:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8004a82:	4b15      	ldr	r3, [pc, #84]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	4a14      	ldr	r2, [pc, #80]	; (8004ad8 <xPortStartScheduler+0x138>)
 8004a88:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8004a8c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8004a8e:	f000 f8dd 	bl	8004c4c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8004a92:	4b12      	ldr	r3, [pc, #72]	; (8004adc <xPortStartScheduler+0x13c>)
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8004a98:	f000 f8fc 	bl	8004c94 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8004a9c:	4b10      	ldr	r3, [pc, #64]	; (8004ae0 <xPortStartScheduler+0x140>)
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	4a0f      	ldr	r2, [pc, #60]	; (8004ae0 <xPortStartScheduler+0x140>)
 8004aa2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8004aa6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8004aa8:	f7ff ff66 	bl	8004978 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8004aac:	f7fe ff76 	bl	800399c <vTaskSwitchContext>
	prvTaskExitError();
 8004ab0:	f7ff ff22 	bl	80048f8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8004ab4:	2300      	movs	r3, #0
}
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	3718      	adds	r7, #24
 8004aba:	46bd      	mov	sp, r7
 8004abc:	bd80      	pop	{r7, pc}
 8004abe:	bf00      	nop
 8004ac0:	e000ed00 	.word	0xe000ed00
 8004ac4:	410fc271 	.word	0x410fc271
 8004ac8:	410fc270 	.word	0x410fc270
 8004acc:	e000e400 	.word	0xe000e400
 8004ad0:	20000ed4 	.word	0x20000ed4
 8004ad4:	20000ed8 	.word	0x20000ed8
 8004ad8:	e000ed20 	.word	0xe000ed20
 8004adc:	2000000c 	.word	0x2000000c
 8004ae0:	e000ef34 	.word	0xe000ef34

08004ae4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8004ae4:	b480      	push	{r7}
 8004ae6:	b083      	sub	sp, #12
 8004ae8:	af00      	add	r7, sp, #0
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	607b      	str	r3, [r7, #4]
}
 8004afc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8004afe:	4b0f      	ldr	r3, [pc, #60]	; (8004b3c <vPortEnterCritical+0x58>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	3301      	adds	r3, #1
 8004b04:	4a0d      	ldr	r2, [pc, #52]	; (8004b3c <vPortEnterCritical+0x58>)
 8004b06:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <vPortEnterCritical+0x58>)
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d10f      	bne.n	8004b30 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8004b10:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <vPortEnterCritical+0x5c>)
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	b2db      	uxtb	r3, r3
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d00a      	beq.n	8004b30 <vPortEnterCritical+0x4c>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	603b      	str	r3, [r7, #0]
}
 8004b2c:	bf00      	nop
 8004b2e:	e7fe      	b.n	8004b2e <vPortEnterCritical+0x4a>
	}
}
 8004b30:	bf00      	nop
 8004b32:	370c      	adds	r7, #12
 8004b34:	46bd      	mov	sp, r7
 8004b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b3a:	4770      	bx	lr
 8004b3c:	2000000c 	.word	0x2000000c
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8004b4a:	4b12      	ldr	r3, [pc, #72]	; (8004b94 <vPortExitCritical+0x50>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d10a      	bne.n	8004b68 <vPortExitCritical+0x24>
	__asm volatile
 8004b52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b56:	f383 8811 	msr	BASEPRI, r3
 8004b5a:	f3bf 8f6f 	isb	sy
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	607b      	str	r3, [r7, #4]
}
 8004b64:	bf00      	nop
 8004b66:	e7fe      	b.n	8004b66 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8004b68:	4b0a      	ldr	r3, [pc, #40]	; (8004b94 <vPortExitCritical+0x50>)
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	3b01      	subs	r3, #1
 8004b6e:	4a09      	ldr	r2, [pc, #36]	; (8004b94 <vPortExitCritical+0x50>)
 8004b70:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8004b72:	4b08      	ldr	r3, [pc, #32]	; (8004b94 <vPortExitCritical+0x50>)
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d105      	bne.n	8004b86 <vPortExitCritical+0x42>
 8004b7a:	2300      	movs	r3, #0
 8004b7c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	f383 8811 	msr	BASEPRI, r3
}
 8004b84:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8004b86:	bf00      	nop
 8004b88:	370c      	adds	r7, #12
 8004b8a:	46bd      	mov	sp, r7
 8004b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b90:	4770      	bx	lr
 8004b92:	bf00      	nop
 8004b94:	2000000c 	.word	0x2000000c
	...

08004ba0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8004ba0:	f3ef 8009 	mrs	r0, PSP
 8004ba4:	f3bf 8f6f 	isb	sy
 8004ba8:	4b15      	ldr	r3, [pc, #84]	; (8004c00 <pxCurrentTCBConst>)
 8004baa:	681a      	ldr	r2, [r3, #0]
 8004bac:	f01e 0f10 	tst.w	lr, #16
 8004bb0:	bf08      	it	eq
 8004bb2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8004bb6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bba:	6010      	str	r0, [r2, #0]
 8004bbc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8004bc0:	f04f 0050 	mov.w	r0, #80	; 0x50
 8004bc4:	f380 8811 	msr	BASEPRI, r0
 8004bc8:	f3bf 8f4f 	dsb	sy
 8004bcc:	f3bf 8f6f 	isb	sy
 8004bd0:	f7fe fee4 	bl	800399c <vTaskSwitchContext>
 8004bd4:	f04f 0000 	mov.w	r0, #0
 8004bd8:	f380 8811 	msr	BASEPRI, r0
 8004bdc:	bc09      	pop	{r0, r3}
 8004bde:	6819      	ldr	r1, [r3, #0]
 8004be0:	6808      	ldr	r0, [r1, #0]
 8004be2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be6:	f01e 0f10 	tst.w	lr, #16
 8004bea:	bf08      	it	eq
 8004bec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8004bf0:	f380 8809 	msr	PSP, r0
 8004bf4:	f3bf 8f6f 	isb	sy
 8004bf8:	4770      	bx	lr
 8004bfa:	bf00      	nop
 8004bfc:	f3af 8000 	nop.w

08004c00 <pxCurrentTCBConst>:
 8004c00:	200008a8 	.word	0x200008a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop

08004c08 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
	__asm volatile
 8004c0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c12:	f383 8811 	msr	BASEPRI, r3
 8004c16:	f3bf 8f6f 	isb	sy
 8004c1a:	f3bf 8f4f 	dsb	sy
 8004c1e:	607b      	str	r3, [r7, #4]
}
 8004c20:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8004c22:	f7fe fe01 	bl	8003828 <xTaskIncrementTick>
 8004c26:	4603      	mov	r3, r0
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d003      	beq.n	8004c34 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8004c2c:	4b06      	ldr	r3, [pc, #24]	; (8004c48 <xPortSysTickHandler+0x40>)
 8004c2e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c32:	601a      	str	r2, [r3, #0]
 8004c34:	2300      	movs	r3, #0
 8004c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	f383 8811 	msr	BASEPRI, r3
}
 8004c3e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8004c40:	bf00      	nop
 8004c42:	3708      	adds	r7, #8
 8004c44:	46bd      	mov	sp, r7
 8004c46:	bd80      	pop	{r7, pc}
 8004c48:	e000ed04 	.word	0xe000ed04

08004c4c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8004c4c:	b480      	push	{r7}
 8004c4e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8004c50:	4b0b      	ldr	r3, [pc, #44]	; (8004c80 <vPortSetupTimerInterrupt+0x34>)
 8004c52:	2200      	movs	r2, #0
 8004c54:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8004c56:	4b0b      	ldr	r3, [pc, #44]	; (8004c84 <vPortSetupTimerInterrupt+0x38>)
 8004c58:	2200      	movs	r2, #0
 8004c5a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8004c5c:	4b0a      	ldr	r3, [pc, #40]	; (8004c88 <vPortSetupTimerInterrupt+0x3c>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	4a0a      	ldr	r2, [pc, #40]	; (8004c8c <vPortSetupTimerInterrupt+0x40>)
 8004c62:	fba2 2303 	umull	r2, r3, r2, r3
 8004c66:	099b      	lsrs	r3, r3, #6
 8004c68:	4a09      	ldr	r2, [pc, #36]	; (8004c90 <vPortSetupTimerInterrupt+0x44>)
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8004c6e:	4b04      	ldr	r3, [pc, #16]	; (8004c80 <vPortSetupTimerInterrupt+0x34>)
 8004c70:	2207      	movs	r2, #7
 8004c72:	601a      	str	r2, [r3, #0]
}
 8004c74:	bf00      	nop
 8004c76:	46bd      	mov	sp, r7
 8004c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c7c:	4770      	bx	lr
 8004c7e:	bf00      	nop
 8004c80:	e000e010 	.word	0xe000e010
 8004c84:	e000e018 	.word	0xe000e018
 8004c88:	20000000 	.word	0x20000000
 8004c8c:	10624dd3 	.word	0x10624dd3
 8004c90:	e000e014 	.word	0xe000e014

08004c94 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8004c94:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8004ca4 <vPortEnableVFP+0x10>
 8004c98:	6801      	ldr	r1, [r0, #0]
 8004c9a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8004c9e:	6001      	str	r1, [r0, #0]
 8004ca0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8004ca2:	bf00      	nop
 8004ca4:	e000ed88 	.word	0xe000ed88

08004ca8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8004cae:	f3ef 8305 	mrs	r3, IPSR
 8004cb2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2b0f      	cmp	r3, #15
 8004cb8:	d914      	bls.n	8004ce4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8004cba:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <vPortValidateInterruptPriority+0x70>)
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	4413      	add	r3, r2
 8004cc0:	781b      	ldrb	r3, [r3, #0]
 8004cc2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8004cc4:	4b15      	ldr	r3, [pc, #84]	; (8004d1c <vPortValidateInterruptPriority+0x74>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	7afa      	ldrb	r2, [r7, #11]
 8004cca:	429a      	cmp	r2, r3
 8004ccc:	d20a      	bcs.n	8004ce4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8004cce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cd2:	f383 8811 	msr	BASEPRI, r3
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	f3bf 8f4f 	dsb	sy
 8004cde:	607b      	str	r3, [r7, #4]
}
 8004ce0:	bf00      	nop
 8004ce2:	e7fe      	b.n	8004ce2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8004ce4:	4b0e      	ldr	r3, [pc, #56]	; (8004d20 <vPortValidateInterruptPriority+0x78>)
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8004cec:	4b0d      	ldr	r3, [pc, #52]	; (8004d24 <vPortValidateInterruptPriority+0x7c>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	429a      	cmp	r2, r3
 8004cf2:	d90a      	bls.n	8004d0a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	603b      	str	r3, [r7, #0]
}
 8004d06:	bf00      	nop
 8004d08:	e7fe      	b.n	8004d08 <vPortValidateInterruptPriority+0x60>
	}
 8004d0a:	bf00      	nop
 8004d0c:	3714      	adds	r7, #20
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	e000e3f0 	.word	0xe000e3f0
 8004d1c:	20000ed4 	.word	0x20000ed4
 8004d20:	e000ed0c 	.word	0xe000ed0c
 8004d24:	20000ed8 	.word	0x20000ed8

08004d28 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8004d28:	b580      	push	{r7, lr}
 8004d2a:	b08a      	sub	sp, #40	; 0x28
 8004d2c:	af00      	add	r7, sp, #0
 8004d2e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8004d30:	2300      	movs	r3, #0
 8004d32:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8004d34:	f7fe fcbc 	bl	80036b0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8004d38:	4b5b      	ldr	r3, [pc, #364]	; (8004ea8 <pvPortMalloc+0x180>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d101      	bne.n	8004d44 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8004d40:	f000 f920 	bl	8004f84 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8004d44:	4b59      	ldr	r3, [pc, #356]	; (8004eac <pvPortMalloc+0x184>)
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	4013      	ands	r3, r2
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	f040 8093 	bne.w	8004e78 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2b00      	cmp	r3, #0
 8004d56:	d01d      	beq.n	8004d94 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8004d58:	2208      	movs	r2, #8
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	f003 0307 	and.w	r3, r3, #7
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d014      	beq.n	8004d94 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f023 0307 	bic.w	r3, r3, #7
 8004d70:	3308      	adds	r3, #8
 8004d72:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d00a      	beq.n	8004d94 <pvPortMalloc+0x6c>
	__asm volatile
 8004d7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d82:	f383 8811 	msr	BASEPRI, r3
 8004d86:	f3bf 8f6f 	isb	sy
 8004d8a:	f3bf 8f4f 	dsb	sy
 8004d8e:	617b      	str	r3, [r7, #20]
}
 8004d90:	bf00      	nop
 8004d92:	e7fe      	b.n	8004d92 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d06e      	beq.n	8004e78 <pvPortMalloc+0x150>
 8004d9a:	4b45      	ldr	r3, [pc, #276]	; (8004eb0 <pvPortMalloc+0x188>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	687a      	ldr	r2, [r7, #4]
 8004da0:	429a      	cmp	r2, r3
 8004da2:	d869      	bhi.n	8004e78 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8004da4:	4b43      	ldr	r3, [pc, #268]	; (8004eb4 <pvPortMalloc+0x18c>)
 8004da6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8004da8:	4b42      	ldr	r3, [pc, #264]	; (8004eb4 <pvPortMalloc+0x18c>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dae:	e004      	b.n	8004dba <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8004db0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8004db4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8004dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dbc:	685b      	ldr	r3, [r3, #4]
 8004dbe:	687a      	ldr	r2, [r7, #4]
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d903      	bls.n	8004dcc <pvPortMalloc+0xa4>
 8004dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d1f1      	bne.n	8004db0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8004dcc:	4b36      	ldr	r3, [pc, #216]	; (8004ea8 <pvPortMalloc+0x180>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d050      	beq.n	8004e78 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	2208      	movs	r2, #8
 8004ddc:	4413      	add	r3, r2
 8004dde:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8004de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004de2:	681a      	ldr	r2, [r3, #0]
 8004de4:	6a3b      	ldr	r3, [r7, #32]
 8004de6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8004de8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004dea:	685a      	ldr	r2, [r3, #4]
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	1ad2      	subs	r2, r2, r3
 8004df0:	2308      	movs	r3, #8
 8004df2:	005b      	lsls	r3, r3, #1
 8004df4:	429a      	cmp	r2, r3
 8004df6:	d91f      	bls.n	8004e38 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8004df8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	4413      	add	r3, r2
 8004dfe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e00:	69bb      	ldr	r3, [r7, #24]
 8004e02:	f003 0307 	and.w	r3, r3, #7
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d00a      	beq.n	8004e20 <pvPortMalloc+0xf8>
	__asm volatile
 8004e0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0e:	f383 8811 	msr	BASEPRI, r3
 8004e12:	f3bf 8f6f 	isb	sy
 8004e16:	f3bf 8f4f 	dsb	sy
 8004e1a:	613b      	str	r3, [r7, #16]
}
 8004e1c:	bf00      	nop
 8004e1e:	e7fe      	b.n	8004e1e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8004e20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e22:	685a      	ldr	r2, [r3, #4]
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	1ad2      	subs	r2, r2, r3
 8004e28:	69bb      	ldr	r3, [r7, #24]
 8004e2a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8004e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e2e:	687a      	ldr	r2, [r7, #4]
 8004e30:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8004e32:	69b8      	ldr	r0, [r7, #24]
 8004e34:	f000 f908 	bl	8005048 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8004e38:	4b1d      	ldr	r3, [pc, #116]	; (8004eb0 <pvPortMalloc+0x188>)
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	1ad3      	subs	r3, r2, r3
 8004e42:	4a1b      	ldr	r2, [pc, #108]	; (8004eb0 <pvPortMalloc+0x188>)
 8004e44:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8004e46:	4b1a      	ldr	r3, [pc, #104]	; (8004eb0 <pvPortMalloc+0x188>)
 8004e48:	681a      	ldr	r2, [r3, #0]
 8004e4a:	4b1b      	ldr	r3, [pc, #108]	; (8004eb8 <pvPortMalloc+0x190>)
 8004e4c:	681b      	ldr	r3, [r3, #0]
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d203      	bcs.n	8004e5a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8004e52:	4b17      	ldr	r3, [pc, #92]	; (8004eb0 <pvPortMalloc+0x188>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a18      	ldr	r2, [pc, #96]	; (8004eb8 <pvPortMalloc+0x190>)
 8004e58:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8004e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e5c:	685a      	ldr	r2, [r3, #4]
 8004e5e:	4b13      	ldr	r3, [pc, #76]	; (8004eac <pvPortMalloc+0x184>)
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	431a      	orrs	r2, r3
 8004e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e66:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8004e68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e6a:	2200      	movs	r2, #0
 8004e6c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8004e6e:	4b13      	ldr	r3, [pc, #76]	; (8004ebc <pvPortMalloc+0x194>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3301      	adds	r3, #1
 8004e74:	4a11      	ldr	r2, [pc, #68]	; (8004ebc <pvPortMalloc+0x194>)
 8004e76:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8004e78:	f7fe fc28 	bl	80036cc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8004e7c:	69fb      	ldr	r3, [r7, #28]
 8004e7e:	f003 0307 	and.w	r3, r3, #7
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d00a      	beq.n	8004e9c <pvPortMalloc+0x174>
	__asm volatile
 8004e86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e8a:	f383 8811 	msr	BASEPRI, r3
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	f3bf 8f4f 	dsb	sy
 8004e96:	60fb      	str	r3, [r7, #12]
}
 8004e98:	bf00      	nop
 8004e9a:	e7fe      	b.n	8004e9a <pvPortMalloc+0x172>
	return pvReturn;
 8004e9c:	69fb      	ldr	r3, [r7, #28]
}
 8004e9e:	4618      	mov	r0, r3
 8004ea0:	3728      	adds	r7, #40	; 0x28
 8004ea2:	46bd      	mov	sp, r7
 8004ea4:	bd80      	pop	{r7, pc}
 8004ea6:	bf00      	nop
 8004ea8:	20001e84 	.word	0x20001e84
 8004eac:	20001e98 	.word	0x20001e98
 8004eb0:	20001e88 	.word	0x20001e88
 8004eb4:	20001e7c 	.word	0x20001e7c
 8004eb8:	20001e8c 	.word	0x20001e8c
 8004ebc:	20001e90 	.word	0x20001e90

08004ec0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b086      	sub	sp, #24
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d04d      	beq.n	8004f6e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8004ed2:	2308      	movs	r3, #8
 8004ed4:	425b      	negs	r3, r3
 8004ed6:	697a      	ldr	r2, [r7, #20]
 8004ed8:	4413      	add	r3, r2
 8004eda:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8004ee0:	693b      	ldr	r3, [r7, #16]
 8004ee2:	685a      	ldr	r2, [r3, #4]
 8004ee4:	4b24      	ldr	r3, [pc, #144]	; (8004f78 <vPortFree+0xb8>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	4013      	ands	r3, r2
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10a      	bne.n	8004f04 <vPortFree+0x44>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	60fb      	str	r3, [r7, #12]
}
 8004f00:	bf00      	nop
 8004f02:	e7fe      	b.n	8004f02 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00a      	beq.n	8004f22 <vPortFree+0x62>
	__asm volatile
 8004f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f10:	f383 8811 	msr	BASEPRI, r3
 8004f14:	f3bf 8f6f 	isb	sy
 8004f18:	f3bf 8f4f 	dsb	sy
 8004f1c:	60bb      	str	r3, [r7, #8]
}
 8004f1e:	bf00      	nop
 8004f20:	e7fe      	b.n	8004f20 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8004f22:	693b      	ldr	r3, [r7, #16]
 8004f24:	685a      	ldr	r2, [r3, #4]
 8004f26:	4b14      	ldr	r3, [pc, #80]	; (8004f78 <vPortFree+0xb8>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4013      	ands	r3, r2
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d01e      	beq.n	8004f6e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8004f30:	693b      	ldr	r3, [r7, #16]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d11a      	bne.n	8004f6e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	685a      	ldr	r2, [r3, #4]
 8004f3c:	4b0e      	ldr	r3, [pc, #56]	; (8004f78 <vPortFree+0xb8>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	43db      	mvns	r3, r3
 8004f42:	401a      	ands	r2, r3
 8004f44:	693b      	ldr	r3, [r7, #16]
 8004f46:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8004f48:	f7fe fbb2 	bl	80036b0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	685a      	ldr	r2, [r3, #4]
 8004f50:	4b0a      	ldr	r3, [pc, #40]	; (8004f7c <vPortFree+0xbc>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4413      	add	r3, r2
 8004f56:	4a09      	ldr	r2, [pc, #36]	; (8004f7c <vPortFree+0xbc>)
 8004f58:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8004f5a:	6938      	ldr	r0, [r7, #16]
 8004f5c:	f000 f874 	bl	8005048 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8004f60:	4b07      	ldr	r3, [pc, #28]	; (8004f80 <vPortFree+0xc0>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	3301      	adds	r3, #1
 8004f66:	4a06      	ldr	r2, [pc, #24]	; (8004f80 <vPortFree+0xc0>)
 8004f68:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8004f6a:	f7fe fbaf 	bl	80036cc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8004f6e:	bf00      	nop
 8004f70:	3718      	adds	r7, #24
 8004f72:	46bd      	mov	sp, r7
 8004f74:	bd80      	pop	{r7, pc}
 8004f76:	bf00      	nop
 8004f78:	20001e98 	.word	0x20001e98
 8004f7c:	20001e88 	.word	0x20001e88
 8004f80:	20001e94 	.word	0x20001e94

08004f84 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8004f8a:	f44f 637a 	mov.w	r3, #4000	; 0xfa0
 8004f8e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8004f90:	4b27      	ldr	r3, [pc, #156]	; (8005030 <prvHeapInit+0xac>)
 8004f92:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f003 0307 	and.w	r3, r3, #7
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d00c      	beq.n	8004fb8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	3307      	adds	r3, #7
 8004fa2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	f023 0307 	bic.w	r3, r3, #7
 8004faa:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8004fac:	68ba      	ldr	r2, [r7, #8]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	1ad3      	subs	r3, r2, r3
 8004fb2:	4a1f      	ldr	r2, [pc, #124]	; (8005030 <prvHeapInit+0xac>)
 8004fb4:	4413      	add	r3, r2
 8004fb6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8004fbc:	4a1d      	ldr	r2, [pc, #116]	; (8005034 <prvHeapInit+0xb0>)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8004fc2:	4b1c      	ldr	r3, [pc, #112]	; (8005034 <prvHeapInit+0xb0>)
 8004fc4:	2200      	movs	r2, #0
 8004fc6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	68ba      	ldr	r2, [r7, #8]
 8004fcc:	4413      	add	r3, r2
 8004fce:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8004fd0:	2208      	movs	r2, #8
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	1a9b      	subs	r3, r3, r2
 8004fd6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	f023 0307 	bic.w	r3, r3, #7
 8004fde:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	4a15      	ldr	r2, [pc, #84]	; (8005038 <prvHeapInit+0xb4>)
 8004fe4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8004fe6:	4b14      	ldr	r3, [pc, #80]	; (8005038 <prvHeapInit+0xb4>)
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	2200      	movs	r2, #0
 8004fec:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8004fee:	4b12      	ldr	r3, [pc, #72]	; (8005038 <prvHeapInit+0xb4>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2200      	movs	r2, #0
 8004ff4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8004ffa:	683b      	ldr	r3, [r7, #0]
 8004ffc:	68fa      	ldr	r2, [r7, #12]
 8004ffe:	1ad2      	subs	r2, r2, r3
 8005000:	683b      	ldr	r3, [r7, #0]
 8005002:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005004:	4b0c      	ldr	r3, [pc, #48]	; (8005038 <prvHeapInit+0xb4>)
 8005006:	681a      	ldr	r2, [r3, #0]
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800500c:	683b      	ldr	r3, [r7, #0]
 800500e:	685b      	ldr	r3, [r3, #4]
 8005010:	4a0a      	ldr	r2, [pc, #40]	; (800503c <prvHeapInit+0xb8>)
 8005012:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	4a09      	ldr	r2, [pc, #36]	; (8005040 <prvHeapInit+0xbc>)
 800501a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800501c:	4b09      	ldr	r3, [pc, #36]	; (8005044 <prvHeapInit+0xc0>)
 800501e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005022:	601a      	str	r2, [r3, #0]
}
 8005024:	bf00      	nop
 8005026:	3714      	adds	r7, #20
 8005028:	46bd      	mov	sp, r7
 800502a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502e:	4770      	bx	lr
 8005030:	20000edc 	.word	0x20000edc
 8005034:	20001e7c 	.word	0x20001e7c
 8005038:	20001e84 	.word	0x20001e84
 800503c:	20001e8c 	.word	0x20001e8c
 8005040:	20001e88 	.word	0x20001e88
 8005044:	20001e98 	.word	0x20001e98

08005048 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005048:	b480      	push	{r7}
 800504a:	b085      	sub	sp, #20
 800504c:	af00      	add	r7, sp, #0
 800504e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005050:	4b28      	ldr	r3, [pc, #160]	; (80050f4 <prvInsertBlockIntoFreeList+0xac>)
 8005052:	60fb      	str	r3, [r7, #12]
 8005054:	e002      	b.n	800505c <prvInsertBlockIntoFreeList+0x14>
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	60fb      	str	r3, [r7, #12]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	687a      	ldr	r2, [r7, #4]
 8005062:	429a      	cmp	r2, r3
 8005064:	d8f7      	bhi.n	8005056 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	685b      	ldr	r3, [r3, #4]
 800506e:	68ba      	ldr	r2, [r7, #8]
 8005070:	4413      	add	r3, r2
 8005072:	687a      	ldr	r2, [r7, #4]
 8005074:	429a      	cmp	r2, r3
 8005076:	d108      	bne.n	800508a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	441a      	add	r2, r3
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	685b      	ldr	r3, [r3, #4]
 8005092:	68ba      	ldr	r2, [r7, #8]
 8005094:	441a      	add	r2, r3
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	429a      	cmp	r2, r3
 800509c:	d118      	bne.n	80050d0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	681a      	ldr	r2, [r3, #0]
 80050a2:	4b15      	ldr	r3, [pc, #84]	; (80050f8 <prvInsertBlockIntoFreeList+0xb0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	429a      	cmp	r2, r3
 80050a8:	d00d      	beq.n	80050c6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	685a      	ldr	r2, [r3, #4]
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	441a      	add	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	681a      	ldr	r2, [r3, #0]
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	601a      	str	r2, [r3, #0]
 80050c4:	e008      	b.n	80050d8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80050c6:	4b0c      	ldr	r3, [pc, #48]	; (80050f8 <prvInsertBlockIntoFreeList+0xb0>)
 80050c8:	681a      	ldr	r2, [r3, #0]
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	601a      	str	r2, [r3, #0]
 80050ce:	e003      	b.n	80050d8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681a      	ldr	r2, [r3, #0]
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80050d8:	68fa      	ldr	r2, [r7, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	429a      	cmp	r2, r3
 80050de:	d002      	beq.n	80050e6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	687a      	ldr	r2, [r7, #4]
 80050e4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80050e6:	bf00      	nop
 80050e8:	3714      	adds	r7, #20
 80050ea:	46bd      	mov	sp, r7
 80050ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050f0:	4770      	bx	lr
 80050f2:	bf00      	nop
 80050f4:	20001e7c 	.word	0x20001e7c
 80050f8:	20001e84 	.word	0x20001e84

080050fc <__libc_init_array>:
 80050fc:	b570      	push	{r4, r5, r6, lr}
 80050fe:	4d0d      	ldr	r5, [pc, #52]	; (8005134 <__libc_init_array+0x38>)
 8005100:	4c0d      	ldr	r4, [pc, #52]	; (8005138 <__libc_init_array+0x3c>)
 8005102:	1b64      	subs	r4, r4, r5
 8005104:	10a4      	asrs	r4, r4, #2
 8005106:	2600      	movs	r6, #0
 8005108:	42a6      	cmp	r6, r4
 800510a:	d109      	bne.n	8005120 <__libc_init_array+0x24>
 800510c:	4d0b      	ldr	r5, [pc, #44]	; (800513c <__libc_init_array+0x40>)
 800510e:	4c0c      	ldr	r4, [pc, #48]	; (8005140 <__libc_init_array+0x44>)
 8005110:	f000 f8f2 	bl	80052f8 <_init>
 8005114:	1b64      	subs	r4, r4, r5
 8005116:	10a4      	asrs	r4, r4, #2
 8005118:	2600      	movs	r6, #0
 800511a:	42a6      	cmp	r6, r4
 800511c:	d105      	bne.n	800512a <__libc_init_array+0x2e>
 800511e:	bd70      	pop	{r4, r5, r6, pc}
 8005120:	f855 3b04 	ldr.w	r3, [r5], #4
 8005124:	4798      	blx	r3
 8005126:	3601      	adds	r6, #1
 8005128:	e7ee      	b.n	8005108 <__libc_init_array+0xc>
 800512a:	f855 3b04 	ldr.w	r3, [r5], #4
 800512e:	4798      	blx	r3
 8005130:	3601      	adds	r6, #1
 8005132:	e7f2      	b.n	800511a <__libc_init_array+0x1e>
 8005134:	0800542c 	.word	0x0800542c
 8005138:	0800542c 	.word	0x0800542c
 800513c:	0800542c 	.word	0x0800542c
 8005140:	08005430 	.word	0x08005430

08005144 <__retarget_lock_acquire_recursive>:
 8005144:	4770      	bx	lr

08005146 <__retarget_lock_release_recursive>:
 8005146:	4770      	bx	lr

08005148 <memcpy>:
 8005148:	440a      	add	r2, r1
 800514a:	4291      	cmp	r1, r2
 800514c:	f100 33ff 	add.w	r3, r0, #4294967295
 8005150:	d100      	bne.n	8005154 <memcpy+0xc>
 8005152:	4770      	bx	lr
 8005154:	b510      	push	{r4, lr}
 8005156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800515a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800515e:	4291      	cmp	r1, r2
 8005160:	d1f9      	bne.n	8005156 <memcpy+0xe>
 8005162:	bd10      	pop	{r4, pc}

08005164 <memset>:
 8005164:	4402      	add	r2, r0
 8005166:	4603      	mov	r3, r0
 8005168:	4293      	cmp	r3, r2
 800516a:	d100      	bne.n	800516e <memset+0xa>
 800516c:	4770      	bx	lr
 800516e:	f803 1b01 	strb.w	r1, [r3], #1
 8005172:	e7f9      	b.n	8005168 <memset+0x4>

08005174 <cleanup_glue>:
 8005174:	b538      	push	{r3, r4, r5, lr}
 8005176:	460c      	mov	r4, r1
 8005178:	6809      	ldr	r1, [r1, #0]
 800517a:	4605      	mov	r5, r0
 800517c:	b109      	cbz	r1, 8005182 <cleanup_glue+0xe>
 800517e:	f7ff fff9 	bl	8005174 <cleanup_glue>
 8005182:	4621      	mov	r1, r4
 8005184:	4628      	mov	r0, r5
 8005186:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800518a:	f000 b869 	b.w	8005260 <_free_r>
	...

08005190 <_reclaim_reent>:
 8005190:	4b2c      	ldr	r3, [pc, #176]	; (8005244 <_reclaim_reent+0xb4>)
 8005192:	681b      	ldr	r3, [r3, #0]
 8005194:	4283      	cmp	r3, r0
 8005196:	b570      	push	{r4, r5, r6, lr}
 8005198:	4604      	mov	r4, r0
 800519a:	d051      	beq.n	8005240 <_reclaim_reent+0xb0>
 800519c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800519e:	b143      	cbz	r3, 80051b2 <_reclaim_reent+0x22>
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d14a      	bne.n	800523c <_reclaim_reent+0xac>
 80051a6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80051a8:	6819      	ldr	r1, [r3, #0]
 80051aa:	b111      	cbz	r1, 80051b2 <_reclaim_reent+0x22>
 80051ac:	4620      	mov	r0, r4
 80051ae:	f000 f857 	bl	8005260 <_free_r>
 80051b2:	6961      	ldr	r1, [r4, #20]
 80051b4:	b111      	cbz	r1, 80051bc <_reclaim_reent+0x2c>
 80051b6:	4620      	mov	r0, r4
 80051b8:	f000 f852 	bl	8005260 <_free_r>
 80051bc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80051be:	b111      	cbz	r1, 80051c6 <_reclaim_reent+0x36>
 80051c0:	4620      	mov	r0, r4
 80051c2:	f000 f84d 	bl	8005260 <_free_r>
 80051c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80051c8:	b111      	cbz	r1, 80051d0 <_reclaim_reent+0x40>
 80051ca:	4620      	mov	r0, r4
 80051cc:	f000 f848 	bl	8005260 <_free_r>
 80051d0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80051d2:	b111      	cbz	r1, 80051da <_reclaim_reent+0x4a>
 80051d4:	4620      	mov	r0, r4
 80051d6:	f000 f843 	bl	8005260 <_free_r>
 80051da:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80051dc:	b111      	cbz	r1, 80051e4 <_reclaim_reent+0x54>
 80051de:	4620      	mov	r0, r4
 80051e0:	f000 f83e 	bl	8005260 <_free_r>
 80051e4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80051e6:	b111      	cbz	r1, 80051ee <_reclaim_reent+0x5e>
 80051e8:	4620      	mov	r0, r4
 80051ea:	f000 f839 	bl	8005260 <_free_r>
 80051ee:	6da1      	ldr	r1, [r4, #88]	; 0x58
 80051f0:	b111      	cbz	r1, 80051f8 <_reclaim_reent+0x68>
 80051f2:	4620      	mov	r0, r4
 80051f4:	f000 f834 	bl	8005260 <_free_r>
 80051f8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80051fa:	b111      	cbz	r1, 8005202 <_reclaim_reent+0x72>
 80051fc:	4620      	mov	r0, r4
 80051fe:	f000 f82f 	bl	8005260 <_free_r>
 8005202:	69a3      	ldr	r3, [r4, #24]
 8005204:	b1e3      	cbz	r3, 8005240 <_reclaim_reent+0xb0>
 8005206:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005208:	4620      	mov	r0, r4
 800520a:	4798      	blx	r3
 800520c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800520e:	b1b9      	cbz	r1, 8005240 <_reclaim_reent+0xb0>
 8005210:	4620      	mov	r0, r4
 8005212:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005216:	f7ff bfad 	b.w	8005174 <cleanup_glue>
 800521a:	5949      	ldr	r1, [r1, r5]
 800521c:	b941      	cbnz	r1, 8005230 <_reclaim_reent+0xa0>
 800521e:	3504      	adds	r5, #4
 8005220:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005222:	2d80      	cmp	r5, #128	; 0x80
 8005224:	68d9      	ldr	r1, [r3, #12]
 8005226:	d1f8      	bne.n	800521a <_reclaim_reent+0x8a>
 8005228:	4620      	mov	r0, r4
 800522a:	f000 f819 	bl	8005260 <_free_r>
 800522e:	e7ba      	b.n	80051a6 <_reclaim_reent+0x16>
 8005230:	680e      	ldr	r6, [r1, #0]
 8005232:	4620      	mov	r0, r4
 8005234:	f000 f814 	bl	8005260 <_free_r>
 8005238:	4631      	mov	r1, r6
 800523a:	e7ef      	b.n	800521c <_reclaim_reent+0x8c>
 800523c:	2500      	movs	r5, #0
 800523e:	e7ef      	b.n	8005220 <_reclaim_reent+0x90>
 8005240:	bd70      	pop	{r4, r5, r6, pc}
 8005242:	bf00      	nop
 8005244:	20000010 	.word	0x20000010

08005248 <__malloc_lock>:
 8005248:	4801      	ldr	r0, [pc, #4]	; (8005250 <__malloc_lock+0x8>)
 800524a:	f7ff bf7b 	b.w	8005144 <__retarget_lock_acquire_recursive>
 800524e:	bf00      	nop
 8005250:	20001e9c 	.word	0x20001e9c

08005254 <__malloc_unlock>:
 8005254:	4801      	ldr	r0, [pc, #4]	; (800525c <__malloc_unlock+0x8>)
 8005256:	f7ff bf76 	b.w	8005146 <__retarget_lock_release_recursive>
 800525a:	bf00      	nop
 800525c:	20001e9c 	.word	0x20001e9c

08005260 <_free_r>:
 8005260:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005262:	2900      	cmp	r1, #0
 8005264:	d044      	beq.n	80052f0 <_free_r+0x90>
 8005266:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800526a:	9001      	str	r0, [sp, #4]
 800526c:	2b00      	cmp	r3, #0
 800526e:	f1a1 0404 	sub.w	r4, r1, #4
 8005272:	bfb8      	it	lt
 8005274:	18e4      	addlt	r4, r4, r3
 8005276:	f7ff ffe7 	bl	8005248 <__malloc_lock>
 800527a:	4a1e      	ldr	r2, [pc, #120]	; (80052f4 <_free_r+0x94>)
 800527c:	9801      	ldr	r0, [sp, #4]
 800527e:	6813      	ldr	r3, [r2, #0]
 8005280:	b933      	cbnz	r3, 8005290 <_free_r+0x30>
 8005282:	6063      	str	r3, [r4, #4]
 8005284:	6014      	str	r4, [r2, #0]
 8005286:	b003      	add	sp, #12
 8005288:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800528c:	f7ff bfe2 	b.w	8005254 <__malloc_unlock>
 8005290:	42a3      	cmp	r3, r4
 8005292:	d908      	bls.n	80052a6 <_free_r+0x46>
 8005294:	6825      	ldr	r5, [r4, #0]
 8005296:	1961      	adds	r1, r4, r5
 8005298:	428b      	cmp	r3, r1
 800529a:	bf01      	itttt	eq
 800529c:	6819      	ldreq	r1, [r3, #0]
 800529e:	685b      	ldreq	r3, [r3, #4]
 80052a0:	1949      	addeq	r1, r1, r5
 80052a2:	6021      	streq	r1, [r4, #0]
 80052a4:	e7ed      	b.n	8005282 <_free_r+0x22>
 80052a6:	461a      	mov	r2, r3
 80052a8:	685b      	ldr	r3, [r3, #4]
 80052aa:	b10b      	cbz	r3, 80052b0 <_free_r+0x50>
 80052ac:	42a3      	cmp	r3, r4
 80052ae:	d9fa      	bls.n	80052a6 <_free_r+0x46>
 80052b0:	6811      	ldr	r1, [r2, #0]
 80052b2:	1855      	adds	r5, r2, r1
 80052b4:	42a5      	cmp	r5, r4
 80052b6:	d10b      	bne.n	80052d0 <_free_r+0x70>
 80052b8:	6824      	ldr	r4, [r4, #0]
 80052ba:	4421      	add	r1, r4
 80052bc:	1854      	adds	r4, r2, r1
 80052be:	42a3      	cmp	r3, r4
 80052c0:	6011      	str	r1, [r2, #0]
 80052c2:	d1e0      	bne.n	8005286 <_free_r+0x26>
 80052c4:	681c      	ldr	r4, [r3, #0]
 80052c6:	685b      	ldr	r3, [r3, #4]
 80052c8:	6053      	str	r3, [r2, #4]
 80052ca:	4421      	add	r1, r4
 80052cc:	6011      	str	r1, [r2, #0]
 80052ce:	e7da      	b.n	8005286 <_free_r+0x26>
 80052d0:	d902      	bls.n	80052d8 <_free_r+0x78>
 80052d2:	230c      	movs	r3, #12
 80052d4:	6003      	str	r3, [r0, #0]
 80052d6:	e7d6      	b.n	8005286 <_free_r+0x26>
 80052d8:	6825      	ldr	r5, [r4, #0]
 80052da:	1961      	adds	r1, r4, r5
 80052dc:	428b      	cmp	r3, r1
 80052de:	bf04      	itt	eq
 80052e0:	6819      	ldreq	r1, [r3, #0]
 80052e2:	685b      	ldreq	r3, [r3, #4]
 80052e4:	6063      	str	r3, [r4, #4]
 80052e6:	bf04      	itt	eq
 80052e8:	1949      	addeq	r1, r1, r5
 80052ea:	6021      	streq	r1, [r4, #0]
 80052ec:	6054      	str	r4, [r2, #4]
 80052ee:	e7ca      	b.n	8005286 <_free_r+0x26>
 80052f0:	b003      	add	sp, #12
 80052f2:	bd30      	pop	{r4, r5, pc}
 80052f4:	20001ea0 	.word	0x20001ea0

080052f8 <_init>:
 80052f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fa:	bf00      	nop
 80052fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80052fe:	bc08      	pop	{r3}
 8005300:	469e      	mov	lr, r3
 8005302:	4770      	bx	lr

08005304 <_fini>:
 8005304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005306:	bf00      	nop
 8005308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530a:	bc08      	pop	{r3}
 800530c:	469e      	mov	lr, r3
 800530e:	4770      	bx	lr
